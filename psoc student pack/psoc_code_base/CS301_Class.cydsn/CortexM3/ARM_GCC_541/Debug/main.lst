ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentRobotOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 01       		.byte	1
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	turnFinishedFlag
 176              		.type	turnFinishedFlag, %object
 177              		.size	turnFinishedFlag, 1
 178              	turnFinishedFlag:
 179 0034 00       		.space	1
 180              		.global	forwardUntilTargetStartedFlag
 181              		.type	forwardUntilTargetStartedFlag, %object
 182              		.size	forwardUntilTargetStartedFlag, 1
 183              	forwardUntilTargetStartedFlag:
 184 0035 00       		.space	1
 185              		.global	blockSizeTotal
 186 0036 0000     		.align	2
 187              		.type	blockSizeTotal, %object
 188              		.size	blockSizeTotal, 4
 189              	blockSizeTotal:
 190 0038 00000000 		.space	4
 191              		.global	__aeabi_i2d
 192              		.global	__aeabi_dmul
 193              		.global	__aeabi_ddiv
 194              		.global	__aeabi_d2f
 195              		.global	__aeabi_fadd
 196              		.section	.text.speedTimer,"ax",%progbits
 197              		.align	2
 198              		.global	speedTimer
 199              		.thumb
 200              		.thumb_func
 201              		.type	speedTimer, %function
 202              	speedTimer:
 203              	.LFB64:
 204              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 5


  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentRobotOrientation, previousOrientation = Down;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
  34:main.c        **** float CalculateDistanceToTravel(float blockSize);
  35:main.c        **** void MoveToNextInstruction();
  36:main.c        **** // ----------------------------------------
  37:main.c        **** uint8 s3, s4, s5, s6 = 0;
  38:main.c        **** //* ========================================
  39:main.c        **** // Calculating Distance
  40:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  41:main.c        **** 
  42:main.c        **** uint32 totalMilliseconds = 0;
  43:main.c        **** float totalDistance = 0; // in mm
  44:main.c        **** //* ========================================
  45:main.c        **** char buffer[69];
  46:main.c        **** int quadDec2Count = 0;
  47:main.c        **** int timerInt = 0;
  48:main.c        **** int keepLedOn = 0;
  49:main.c        **** // ========================================= FLAGS
  50:main.c        **** uint32 stopBuffer = 0;
  51:main.c        **** uint8 turnFinishedFlag = 0;
  52:main.c        **** uint8 forwardUntilTargetStartedFlag = 0;
  53:main.c        **** float blockSizeTotal = 0;
  54:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  55:main.c        **** 
  56:main.c        **** CY_ISR (speedTimer) {
 205              		.loc 1 56 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 8
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 90B5     		push	{r4, r7, lr}
 210              		.cfi_def_cfa_offset 12
 211              		.cfi_offset 4, -12
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  57:main.c        ****     timerInt = 1;
 218              		.loc 1 57 0
 219 0006 344B     		ldr	r3, .L4+16
 220 0008 0122     		movs	r2, #1
 221 000a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 6


  58:main.c        ****     //quadDec_M1 used for turning macros
  59:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 222              		.loc 1 59 0
 223 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 224 0010 0346     		mov	r3, r0
 225 0012 1A46     		mov	r2, r3
 226 0014 314B     		ldr	r3, .L4+20
 227 0016 1A60     		str	r2, [r3]
  60:main.c        ****     
  61:main.c        ****     if ((currentDirection == Forward || 
 228              		.loc 1 61 0
 229 0018 314B     		ldr	r3, .L4+24
 230 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 231 001c 002B     		cmp	r3, #0
 232 001e 13D0     		beq	.L2
  62:main.c        ****         currentDirection == ForwardAfterTurn ||
 233              		.loc 1 62 0 discriminator 1
 234 0020 2F4B     		ldr	r3, .L4+24
 235 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 236              		.loc 1 61 0 discriminator 1
 237 0024 082B     		cmp	r3, #8
 238 0026 0FD0     		beq	.L2
  63:main.c        ****         currentDirection == waitForTurn || 
 239              		.loc 1 63 0
 240 0028 2D4B     		ldr	r3, .L4+24
 241 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62:main.c        ****         currentDirection == ForwardAfterTurn ||
 242              		.loc 1 62 0
 243 002c 072B     		cmp	r3, #7
 244 002e 0BD0     		beq	.L2
  64:main.c        ****         currentDirection == AdjustToTheLeft ||
 245              		.loc 1 64 0
 246 0030 2B4B     		ldr	r3, .L4+24
 247 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  63:main.c        ****         currentDirection == waitForTurn || 
 248              		.loc 1 63 0
 249 0034 032B     		cmp	r3, #3
 250 0036 07D0     		beq	.L2
  65:main.c        ****         currentDirection == AdjustToTheRight ||
 251              		.loc 1 65 0
 252 0038 294B     		ldr	r3, .L4+24
 253 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  64:main.c        ****         currentDirection == AdjustToTheLeft ||
 254              		.loc 1 64 0
 255 003c 042B     		cmp	r3, #4
 256 003e 03D0     		beq	.L2
  66:main.c        ****         currentDirection == Backward) &&
 257              		.loc 1 66 0
 258 0040 274B     		ldr	r3, .L4+24
 259 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  65:main.c        ****         currentDirection == AdjustToTheRight ||
 260              		.loc 1 65 0
 261 0044 092B     		cmp	r3, #9
 262 0046 34D1     		bne	.L3
 263              	.L2:
  67:main.c        ****         quadDec2Count != 0) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 7


 264              		.loc 1 67 0
 265 0048 244B     		ldr	r3, .L4+20
 266 004a 1B68     		ldr	r3, [r3]
  66:main.c        ****         currentDirection == Backward) &&
 267              		.loc 1 66 0
 268 004c 002B     		cmp	r3, #0
 269 004e 30D0     		beq	.L3
 270              	.LBB2:
  68:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  69:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 271              		.loc 1 69 0
 272 0050 224B     		ldr	r3, .L4+20
 273 0052 1B68     		ldr	r3, [r3]
 274 0054 002B     		cmp	r3, #0
 275 0056 B8BF     		it	lt
 276 0058 5B42     		rsblt	r3, r3, #0
 277 005a 1846     		mov	r0, r3
 278 005c FFF7FEFF 		bl	__aeabi_i2d
 279 0060 19A3     		adr	r3, .L4
 280 0062 D3E90023 		ldrd	r2, [r3]
 281 0066 FFF7FEFF 		bl	__aeabi_dmul
 282 006a 0346     		mov	r3, r0
 283 006c 0C46     		mov	r4, r1
 284 006e 1846     		mov	r0, r3
 285 0070 2146     		mov	r1, r4
 286 0072 17A3     		adr	r3, .L4+8
 287 0074 D3E90023 		ldrd	r2, [r3]
 288 0078 FFF7FEFF 		bl	__aeabi_dmul
 289 007c 0346     		mov	r3, r0
 290 007e 0C46     		mov	r4, r1
 291 0080 1846     		mov	r0, r3
 292 0082 2146     		mov	r1, r4
 293 0084 4FF00002 		mov	r2, #0
 294 0088 164B     		ldr	r3, .L4+28
 295 008a FFF7FEFF 		bl	__aeabi_ddiv
 296 008e 0346     		mov	r3, r0
 297 0090 0C46     		mov	r4, r1
 298 0092 1846     		mov	r0, r3
 299 0094 2146     		mov	r1, r4
 300 0096 FFF7FEFF 		bl	__aeabi_d2f
 301 009a 0346     		mov	r3, r0
 302 009c 7B60     		str	r3, [r7, #4]	@ float
  70:main.c        ****         
  71:main.c        ****         totalDistance = totalDistance + newDistance;
 303              		.loc 1 71 0
 304 009e 124B     		ldr	r3, .L4+32
 305 00a0 1B68     		ldr	r3, [r3]	@ float
 306 00a2 7968     		ldr	r1, [r7, #4]	@ float
 307 00a4 1846     		mov	r0, r3
 308 00a6 FFF7FEFF 		bl	__aeabi_fadd
 309 00aa 0346     		mov	r3, r0
 310 00ac 1A46     		mov	r2, r3
 311 00ae 0E4B     		ldr	r3, .L4+32
 312 00b0 1A60     		str	r2, [r3]	@ float
 313              	.L3:
 314              	.LBE2:
  72:main.c        ****     }
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 8


  73:main.c        ****     
  74:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 315              		.loc 1 74 0
 316 00b2 0020     		movs	r0, #0
 317 00b4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
  75:main.c        ****     QuadDec_M2_Start(); // restart counter
 318              		.loc 1 75 0
 319 00b8 FFF7FEFF 		bl	QuadDec_M2_Start
  76:main.c        ****     
  77:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 320              		.loc 1 77 0
 321 00bc FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  78:main.c        **** }
 322              		.loc 1 78 0
 323 00c0 00BF     		nop
 324 00c2 0C37     		adds	r7, r7, #12
 325              		.cfi_def_cfa_offset 12
 326 00c4 BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 00c6 90BD     		pop	{r4, r7, pc}
 330              	.L5:
 331              		.align	3
 332              	.L4:
 333 00c8 182D4454 		.word	1413754136
 334 00cc FB210940 		.word	1074340347
 335 00d0 00000000 		.word	0
 336 00d4 00205040 		.word	1078992896
 337 00d8 00000000 		.word	timerInt
 338 00dc 00000000 		.word	quadDec2Count
 339 00e0 00000000 		.word	currentDirection
 340 00e4 00806C40 		.word	1080852480
 341 00e8 00000000 		.word	totalDistance
 342              		.cfi_endproc
 343              	.LFE64:
 344              		.size	speedTimer, .-speedTimer
 345              		.section	.text.S3_DETECTED,"ax",%progbits
 346              		.align	2
 347              		.global	S3_DETECTED
 348              		.thumb
 349              		.thumb_func
 350              		.type	S3_DETECTED, %function
 351              	S3_DETECTED:
 352              	.LFB65:
  79:main.c        **** 
  80:main.c        **** CY_ISR(S3_DETECTED) {
 353              		.loc 1 80 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0000 80B4     		push	{r7}
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 0002 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
  81:main.c        ****     // Sensor has detected WHITE
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 9


  82:main.c        ****     s3 = 1; // , Black = 0, White = 1
 363              		.loc 1 82 0
 364 0004 034B     		ldr	r3, .L7
 365 0006 0122     		movs	r2, #1
 366 0008 1A70     		strb	r2, [r3]
  83:main.c        ****     //LED_Write(1u);
  84:main.c        **** }
 367              		.loc 1 84 0
 368 000a 00BF     		nop
 369 000c BD46     		mov	sp, r7
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 000e 80BC     		pop	{r7}
 373              		.cfi_restore 7
 374              		.cfi_def_cfa_offset 0
 375 0010 7047     		bx	lr
 376              	.L8:
 377 0012 00BF     		.align	2
 378              	.L7:
 379 0014 00000000 		.word	s3
 380              		.cfi_endproc
 381              	.LFE65:
 382              		.size	S3_DETECTED, .-S3_DETECTED
 383              		.section	.text.S4_DETECTED,"ax",%progbits
 384              		.align	2
 385              		.global	S4_DETECTED
 386              		.thumb
 387              		.thumb_func
 388              		.type	S4_DETECTED, %function
 389              	S4_DETECTED:
 390              	.LFB66:
  85:main.c        **** 
  86:main.c        **** CY_ISR(S4_DETECTED) {
 391              		.loc 1 86 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
  87:main.c        ****     // Sensor has detected WHITE
  88:main.c        ****     s4 = 1; // , Black = 0, White = 1
 401              		.loc 1 88 0
 402 0004 034B     		ldr	r3, .L10
 403 0006 0122     		movs	r2, #1
 404 0008 1A70     		strb	r2, [r3]
  89:main.c        ****     //LED_Write(1u);
  90:main.c        **** }
 405              		.loc 1 90 0
 406 000a 00BF     		nop
 407 000c BD46     		mov	sp, r7
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 000e 80BC     		pop	{r7}
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 10


 411              		.cfi_restore 7
 412              		.cfi_def_cfa_offset 0
 413 0010 7047     		bx	lr
 414              	.L11:
 415 0012 00BF     		.align	2
 416              	.L10:
 417 0014 00000000 		.word	s4
 418              		.cfi_endproc
 419              	.LFE66:
 420              		.size	S4_DETECTED, .-S4_DETECTED
 421              		.section	.text.S5_DETECTED,"ax",%progbits
 422              		.align	2
 423              		.global	S5_DETECTED
 424              		.thumb
 425              		.thumb_func
 426              		.type	S5_DETECTED, %function
 427              	S5_DETECTED:
 428              	.LFB67:
  91:main.c        **** 
  92:main.c        **** CY_ISR(S5_DETECTED) {
 429              		.loc 1 92 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
  93:main.c        ****     // Sensor has detected WHITE
  94:main.c        ****     s5 = 1; // , Black = 0, White = 1
 439              		.loc 1 94 0
 440 0004 034B     		ldr	r3, .L13
 441 0006 0122     		movs	r2, #1
 442 0008 1A70     		strb	r2, [r3]
  95:main.c        ****     //LED_Write(1u);
  96:main.c        **** }
 443              		.loc 1 96 0
 444 000a 00BF     		nop
 445 000c BD46     		mov	sp, r7
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 000e 80BC     		pop	{r7}
 449              		.cfi_restore 7
 450              		.cfi_def_cfa_offset 0
 451 0010 7047     		bx	lr
 452              	.L14:
 453 0012 00BF     		.align	2
 454              	.L13:
 455 0014 00000000 		.word	s5
 456              		.cfi_endproc
 457              	.LFE67:
 458              		.size	S5_DETECTED, .-S5_DETECTED
 459              		.section	.text.S6_DETECTED,"ax",%progbits
 460              		.align	2
 461              		.global	S6_DETECTED
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 11


 462              		.thumb
 463              		.thumb_func
 464              		.type	S6_DETECTED, %function
 465              	S6_DETECTED:
 466              	.LFB68:
  97:main.c        **** 
  98:main.c        **** CY_ISR(S6_DETECTED) {
 467              		.loc 1 98 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 7, -4
 475 0002 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
  99:main.c        ****     // Sensor has detected WHITE
 100:main.c        ****     s6 = 1; // , Black = 0, White = 1
 477              		.loc 1 100 0
 478 0004 034B     		ldr	r3, .L16
 479 0006 0122     		movs	r2, #1
 480 0008 1A70     		strb	r2, [r3]
 101:main.c        ****     //LED_Write(1u);
 102:main.c        **** }
 481              		.loc 1 102 0
 482 000a 00BF     		nop
 483 000c BD46     		mov	sp, r7
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 000e 80BC     		pop	{r7}
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 0010 7047     		bx	lr
 490              	.L17:
 491 0012 00BF     		.align	2
 492              	.L16:
 493 0014 00000000 		.word	s6
 494              		.cfi_endproc
 495              	.LFE68:
 496              		.size	S6_DETECTED, .-S6_DETECTED
 497              		.section	.text.TIMER_FINISH,"ax",%progbits
 498              		.align	2
 499              		.global	TIMER_FINISH
 500              		.thumb
 501              		.thumb_func
 502              		.type	TIMER_FINISH, %function
 503              	TIMER_FINISH:
 504              	.LFB69:
 103:main.c        **** 
 104:main.c        **** CY_ISR(TIMER_FINISH) {
 505              		.loc 1 104 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 12


 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 105:main.c        ****     if (currentDirection == Stop) {
 515              		.loc 1 105 0
 516 0004 0A4B     		ldr	r3, .L21
 517 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 0008 052B     		cmp	r3, #5
 519 000a 05D1     		bne	.L19
 106:main.c        ****         stopBuffer = stopBuffer + 1;
 520              		.loc 1 106 0
 521 000c 094B     		ldr	r3, .L21+4
 522 000e 1B68     		ldr	r3, [r3]
 523 0010 0133     		adds	r3, r3, #1
 524 0012 084A     		ldr	r2, .L21+4
 525 0014 1360     		str	r3, [r2]
 526 0016 02E0     		b	.L20
 527              	.L19:
 107:main.c        ****     } else {
 108:main.c        ****         stopBuffer = 0;
 528              		.loc 1 108 0
 529 0018 064B     		ldr	r3, .L21+4
 530 001a 0022     		movs	r2, #0
 531 001c 1A60     		str	r2, [r3]
 532              	.L20:
 109:main.c        ****     }
 110:main.c        ****     SetRobotMovement(); 
 533              		.loc 1 110 0
 534 001e FFF7FEFF 		bl	SetRobotMovement
 111:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 535              		.loc 1 111 0
 536 0022 FFF7FEFF 		bl	ResetSensorFlags
 112:main.c        ****     Timer_LED_ReadStatusRegister();
 537              		.loc 1 112 0
 538 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 113:main.c        **** }
 539              		.loc 1 113 0
 540 002a 00BF     		nop
 541 002c 80BD     		pop	{r7, pc}
 542              	.L22:
 543 002e 00BF     		.align	2
 544              	.L21:
 545 0030 00000000 		.word	currentDirection
 546 0034 00000000 		.word	stopBuffer
 547              		.cfi_endproc
 548              	.LFE69:
 549              		.size	TIMER_FINISH, .-TIMER_FINISH
 550              		.section	.text.main,"ax",%progbits
 551              		.align	2
 552              		.global	main
 553              		.thumb
 554              		.thumb_func
 555              		.type	main, %function
 556              	main:
 557              	.LFB70:
 114:main.c        **** 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 13


 115:main.c        **** 
 116:main.c        **** int main()
 117:main.c        **** {
 558              		.loc 1 117 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 0000 80B5     		push	{r7, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 118:main.c        **** // ----- INITIALIZATIONS ----------
 119:main.c        ****     CYGlobalIntEnable;
 568              		.loc 1 119 0
 569              		.syntax unified
 570              	@ 119 "main.c" 1
 571 0004 62B6     		CPSIE   i
 572              	@ 0 "" 2
 120:main.c        ****     ResetSensorFlags();
 573              		.loc 1 120 0
 574              		.thumb
 575              		.syntax unified
 576 0006 FFF7FEFF 		bl	ResetSensorFlags
 121:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 577              		.loc 1 121 0
 578 000a FFF7FEFF 		bl	init
 122:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 579              		.loc 1 122 0
 580 000e 1F48     		ldr	r0, .L27
 581 0010 FFF7FEFF 		bl	isr_speed_StartEx
 123:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 582              		.loc 1 123 0
 583 0014 1E48     		ldr	r0, .L27+4
 584 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 124:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 585              		.loc 1 124 0
 586 001a 1E48     		ldr	r0, .L27+8
 587 001c FFF7FEFF 		bl	S3_detected_StartEx
 125:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 588              		.loc 1 125 0
 589 0020 1D48     		ldr	r0, .L27+12
 590 0022 FFF7FEFF 		bl	S4_detected_StartEx
 126:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 591              		.loc 1 126 0
 592 0026 1D48     		ldr	r0, .L27+16
 593 0028 FFF7FEFF 		bl	S5_detected_StartEx
 127:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 594              		.loc 1 127 0
 595 002c 1C48     		ldr	r0, .L27+20
 596 002e FFF7FEFF 		bl	S6_detected_StartEx
 128:main.c        ****     Timer_LED_Start();
 597              		.loc 1 128 0
 598 0032 FFF7FEFF 		bl	Timer_LED_Start
 129:main.c        ****     instructionList = findPath(map, food_list, 0);
 599              		.loc 1 129 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 14


 600 0036 0022     		movs	r2, #0
 601 0038 1A49     		ldr	r1, .L27+24
 602 003a 1B48     		ldr	r0, .L27+28
 603 003c FFF7FEFF 		bl	findPath
 604 0040 0246     		mov	r2, r0
 605 0042 1A4B     		ldr	r3, .L27+32
 606 0044 1A60     		str	r2, [r3]
 130:main.c        ****     numSteps = instructionsListLength();
 607              		.loc 1 130 0
 608 0046 FFF7FEFF 		bl	instructionsListLength
 609 004a 0346     		mov	r3, r0
 610 004c 1A46     		mov	r2, r3
 611 004e 184B     		ldr	r3, .L27+36
 612 0050 1A60     		str	r2, [r3]
 131:main.c        **** // ------USB SETUP ----------------    
 132:main.c        **** #ifdef USE_USB    
 133:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 613              		.loc 1 133 0
 614 0052 0121     		movs	r1, #1
 615 0054 0020     		movs	r0, #0
 616 0056 FFF7FEFF 		bl	USBUART_Start
 134:main.c        **** #endif        
 135:main.c        ****     RF_BT_SELECT_Write(0);
 617              		.loc 1 135 0
 618 005a 0020     		movs	r0, #0
 619 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 620              	.L26:
 136:main.c        ****     
 137:main.c        ****     //usbPutString("Initialised UART");
 138:main.c        ****     for(;;)
 139:main.c        ****     {
 140:main.c        ****         if(timerInt == 1) {
 621              		.loc 1 140 0
 622 0060 144B     		ldr	r3, .L27+40
 623 0062 1B68     		ldr	r3, [r3]
 624 0064 012B     		cmp	r3, #1
 625 0066 08D1     		bne	.L24
 141:main.c        ****             timerInt = 0;
 626              		.loc 1 141 0
 627 0068 124B     		ldr	r3, .L27+40
 628 006a 0022     		movs	r2, #0
 629 006c 1A60     		str	r2, [r3]
 142:main.c        ****             // calculate RPM of M2
 143:main.c        ****             quadCountToRPM(quadDec2Count);
 630              		.loc 1 143 0
 631 006e 124B     		ldr	r3, .L27+44
 632 0070 1B68     		ldr	r3, [r3]
 633 0072 9BB2     		uxth	r3, r3
 634 0074 1846     		mov	r0, r3
 635 0076 FFF7FEFF 		bl	quadCountToRPM
 636              	.L24:
 144:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 145:main.c        ****             //usbPutString(buffer);
 146:main.c        ****             //usbPutString(" ");
 147:main.c        ****         }
 148:main.c        ****         //handle_usb();
 149:main.c        ****         if (flag_KB_string == 1)
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 15


 637              		.loc 1 149 0
 638 007a 104B     		ldr	r3, .L27+48
 639 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 007e 012B     		cmp	r3, #1
 641 0080 EED1     		bne	.L26
 150:main.c        ****         {
 151:main.c        ****             //usbPutString("Total Distance: ");
 152:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 153:main.c        ****             //usbPutString(buffer);
 154:main.c        ****             flag_KB_string = 0;
 642              		.loc 1 154 0
 643 0082 0E4B     		ldr	r3, .L27+48
 644 0084 0022     		movs	r2, #0
 645 0086 1A70     		strb	r2, [r3]
 155:main.c        ****         }           
 156:main.c        ****     }
 646              		.loc 1 156 0
 647 0088 EAE7     		b	.L26
 648              	.L28:
 649 008a 00BF     		.align	2
 650              	.L27:
 651 008c 00000000 		.word	speedTimer
 652 0090 00000000 		.word	TIMER_FINISH
 653 0094 00000000 		.word	S3_DETECTED
 654 0098 00000000 		.word	S4_DETECTED
 655 009c 00000000 		.word	S5_DETECTED
 656 00a0 00000000 		.word	S6_DETECTED
 657 00a4 00000000 		.word	food_list
 658 00a8 00000000 		.word	map
 659 00ac 00000000 		.word	instructionList
 660 00b0 00000000 		.word	numSteps
 661 00b4 00000000 		.word	timerInt
 662 00b8 00000000 		.word	quadDec2Count
 663 00bc 00000000 		.word	flag_KB_string
 664              		.cfi_endproc
 665              	.LFE70:
 666              		.size	main, .-main
 667              		.global	__aeabi_fmul
 668              		.global	__aeabi_f2iz
 669              		.section	.text.quadCountToRPM,"ax",%progbits
 670              		.align	2
 671              		.global	quadCountToRPM
 672              		.thumb
 673              		.thumb_func
 674              		.type	quadCountToRPM, %function
 675              	quadCountToRPM:
 676              	.LFB71:
 157:main.c        ****     return 0;
 158:main.c        **** }
 159:main.c        **** 
 160:main.c        **** // Calculations
 161:main.c        **** //* ========================================
 162:main.c        **** int16 quadCountToRPM(uint16 count)
 163:main.c        **** {
 677              		.loc 1 163 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 16


 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 90B5     		push	{r4, r7, lr}
 682              		.cfi_def_cfa_offset 12
 683              		.cfi_offset 4, -12
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 85B0     		sub	sp, sp, #20
 687              		.cfi_def_cfa_offset 32
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 690 0006 0346     		mov	r3, r0
 691 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 164:main.c        ****     float cps = count/57.00;
 692              		.loc 1 164 0
 693 000a FB88     		ldrh	r3, [r7, #6]
 694 000c 1846     		mov	r0, r3
 695 000e FFF7FEFF 		bl	__aeabi_i2d
 696 0012 4FF00002 		mov	r2, #0
 697 0016 0D4B     		ldr	r3, .L31
 698 0018 FFF7FEFF 		bl	__aeabi_ddiv
 699 001c 0346     		mov	r3, r0
 700 001e 0C46     		mov	r4, r1
 701 0020 1846     		mov	r0, r3
 702 0022 2146     		mov	r1, r4
 703 0024 FFF7FEFF 		bl	__aeabi_d2f
 704 0028 0346     		mov	r3, r0
 705 002a FB60     		str	r3, [r7, #12]	@ float
 165:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 706              		.loc 1 165 0
 707 002c 0849     		ldr	r1, .L31+4
 708 002e F868     		ldr	r0, [r7, #12]	@ float
 709 0030 FFF7FEFF 		bl	__aeabi_fmul
 710 0034 0346     		mov	r3, r0
 711 0036 1846     		mov	r0, r3
 712 0038 FFF7FEFF 		bl	__aeabi_f2iz
 713 003c 0346     		mov	r3, r0
 714 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 166:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 167:main.c        ****     return rpm;
 715              		.loc 1 167 0
 716 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 168:main.c        ****     //usbPutString(buffer);
 169:main.c        ****     //usbPutString("rpm ");
 170:main.c        **** }
 717              		.loc 1 170 0
 718 0044 1846     		mov	r0, r3
 719 0046 1437     		adds	r7, r7, #20
 720              		.cfi_def_cfa_offset 12
 721 0048 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 004a 90BD     		pop	{r4, r7, pc}
 725              	.L32:
 726              		.align	2
 727              	.L31:
 728 004c 00804C40 		.word	1078755328
 729 0050 00007041 		.word	1097859072
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 17


 730              		.cfi_endproc
 731              	.LFE71:
 732              		.size	quadCountToRPM, .-quadCountToRPM
 733              		.section	.text.ResetSensorFlags,"ax",%progbits
 734              		.align	2
 735              		.global	ResetSensorFlags
 736              		.thumb
 737              		.thumb_func
 738              		.type	ResetSensorFlags, %function
 739              	ResetSensorFlags:
 740              	.LFB72:
 171:main.c        **** 
 172:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 173:main.c        **** void ResetSensorFlags() {
 741              		.loc 1 173 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 0000 80B4     		push	{r7}
 747              		.cfi_def_cfa_offset 4
 748              		.cfi_offset 7, -4
 749 0002 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 174:main.c        ****     s3 = 0;
 751              		.loc 1 174 0
 752 0004 074B     		ldr	r3, .L34
 753 0006 0022     		movs	r2, #0
 754 0008 1A70     		strb	r2, [r3]
 175:main.c        ****     s4 = 0;
 755              		.loc 1 175 0
 756 000a 074B     		ldr	r3, .L34+4
 757 000c 0022     		movs	r2, #0
 758 000e 1A70     		strb	r2, [r3]
 176:main.c        ****     s5 = 0;
 759              		.loc 1 176 0
 760 0010 064B     		ldr	r3, .L34+8
 761 0012 0022     		movs	r2, #0
 762 0014 1A70     		strb	r2, [r3]
 177:main.c        ****     s6 = 0;
 763              		.loc 1 177 0
 764 0016 064B     		ldr	r3, .L34+12
 765 0018 0022     		movs	r2, #0
 766 001a 1A70     		strb	r2, [r3]
 178:main.c        **** }
 767              		.loc 1 178 0
 768 001c 00BF     		nop
 769 001e BD46     		mov	sp, r7
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 0020 80BC     		pop	{r7}
 773              		.cfi_restore 7
 774              		.cfi_def_cfa_offset 0
 775 0022 7047     		bx	lr
 776              	.L35:
 777              		.align	2
 778              	.L34:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 18


 779 0024 00000000 		.word	s3
 780 0028 00000000 		.word	s4
 781 002c 00000000 		.word	s5
 782 0030 00000000 		.word	s6
 783              		.cfi_endproc
 784              	.LFE72:
 785              		.size	ResetSensorFlags, .-ResetSensorFlags
 786              		.global	xBlocksize
 787              		.data
 788 0045 000000   		.align	2
 789              		.type	xBlocksize, %object
 790              		.size	xBlocksize, 4
 791              	xBlocksize:
 792 0048 0000F442 		.word	1123287040
 793              		.global	yBlocksize
 794              		.align	2
 795              		.type	yBlocksize, %object
 796              		.size	yBlocksize, 4
 797              	yBlocksize:
 798 004c 0000A042 		.word	1117782016
 799              		.global	currentRow
 800              		.type	currentRow, %object
 801              		.size	currentRow, 1
 802              	currentRow:
 803 0050 01       		.byte	1
 804              		.global	currentCol
 805              		.type	currentCol, %object
 806              		.size	currentCol, 1
 807              	currentCol:
 808 0051 01       		.byte	1
 809              		.global	stoppedAfterTurn
 810              		.bss
 811              		.type	stoppedAfterTurn, %object
 812              		.size	stoppedAfterTurn, 1
 813              	stoppedAfterTurn:
 814 003c 00       		.space	1
 815              		.global	ignoreSensor
 816              		.type	ignoreSensor, %object
 817              		.size	ignoreSensor, 1
 818              	ignoreSensor:
 819 003d 00       		.space	1
 820              		.section	.text.ForwardCourseCorrection,"ax",%progbits
 821              		.align	2
 822              		.global	ForwardCourseCorrection
 823              		.thumb
 824              		.thumb_func
 825              		.type	ForwardCourseCorrection, %function
 826              	ForwardCourseCorrection:
 827              	.LFB73:
 179:main.c        **** 
 180:main.c        **** float xBlocksize = 122; // 122 mm
 181:main.c        **** float yBlocksize = 80; // 80 mm
 182:main.c        **** uint8 currentRow = 1;
 183:main.c        **** uint8 currentCol = 1;
 184:main.c        **** 
 185:main.c        **** /*enum DirectionState GetNextStep() {
 186:main.c        ****     enum DirectionState directionState;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 19


 187:main.c        ****     // Determines robot movement and orientation to follow optimal path
 188:main.c        ****     // enum DirectionState directionState = Stop;
 189:main.c        ****     previousOrientation = currentOrientation;
 190:main.c        ****     
 191:main.c        ****     if(map[currentRow][currentCol] == 9) {
 192:main.c        ****         directionState = Stop; // reached target
 193:main.c        ****         return directionState;
 194:main.c        ****     }
 195:main.c        ****         
 196:main.c        ****     switch (previousOrientation) {
 197:main.c        ****             case Up:
 198:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 199:main.c        ****                     currentOrientation = Up; 
 200:main.c        ****                     directionState = Forward;
 201:main.c        ****                     currentRow--;// update position
 202:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 203:main.c        ****                     currentOrientation = Left;
 204:main.c        ****                     directionState = waitForLeftTurn;
 205:main.c        ****                     //currentRow--;
 206:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 207:main.c        ****                     currentOrientation = Right;
 208:main.c        ****                     directionState = waitForRightTurn;
 209:main.c        ****                     //currentRow++; // update position
 210:main.c        ****                 }
 211:main.c        ****                 break;
 212:main.c        ****             case Down:
 213:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 214:main.c        ****                     currentOrientation = Down;
 215:main.c        ****                     directionState = Forward;
 216:main.c        ****                     currentRow++;
 217:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 218:main.c        ****                     currentOrientation = Left;
 219:main.c        ****                     directionState = waitForRightTurn;
 220:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 221:main.c        ****                     currentOrientation = Right;
 222:main.c        ****                     directionState = waitForLeftTurn;
 223:main.c        ****                 }
 224:main.c        ****                 break;
 225:main.c        ****             case Left:
 226:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 227:main.c        ****                     currentOrientation = Left;
 228:main.c        ****                     directionState = Forward;
 229:main.c        ****                     currentCol--; // update position
 230:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 231:main.c        ****                     currentOrientation = Up;
 232:main.c        ****                     directionState = waitForRightTurn;
 233:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 234:main.c        ****                     currentOrientation = Down;
 235:main.c        ****                     directionState = waitForLeftTurn;
 236:main.c        ****                 }
 237:main.c        ****                 break;
 238:main.c        ****             case Right:
 239:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 240:main.c        ****                     currentOrientation = Right;
 241:main.c        ****                     directionState = Forward;
 242:main.c        ****                     currentCol++; // update position
 243:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 20


 244:main.c        ****                     currentOrientation = Up;
 245:main.c        ****                     directionState = waitForLeftTurn;
 246:main.c        ****                     //currentCol++; // update position
 247:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 248:main.c        ****                     currentOrientation = Down;
 249:main.c        ****                     directionState = waitForRightTurn;
 250:main.c        ****                     //currentCol--; // update position
 251:main.c        ****                 }
 252:main.c        ****                 break;
 253:main.c        ****             default:
 254:main.c        ****                 break;
 255:main.c        ****         }
 256:main.c        ****     
 257:main.c        ****     return directionState;
 258:main.c        **** }
 259:main.c        **** */
 260:main.c        **** uint8 stoppedAfterTurn = 0;
 261:main.c        **** uint8 ignoreSensor = 0;
 262:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 263:main.c        **** /*
 264:main.c        **** enum RobotMovement CheckSensorDirection() {
 265:main.c        ****     float blocksize;
 266:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 267:main.c        ****         blocksize = yBlocksize;
 268:main.c        ****     } else {
 269:main.c        ****         blocksize = xBlocksize;
 270:main.c        ****     }
 271:main.c        ****     //if(currentInstruction)
 272:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 273:main.c        ****     
 274:main.c        ****     if (stoppedAfterTurn == 1) {
 275:main.c        ****         if (stopBuffer <= 50) {
 276:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 277:main.c        ****             previousDirection = directionState;
 278:main.c        ****             return directionState;
 279:main.c        ****         }
 280:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 281:main.c        ****         totalDistance = 0; // reset distance
 282:main.c        ****         previousDirection = directionState;
 283:main.c        ****         stoppedAfterTurn = 0;
 284:main.c        ****         return directionState;
 285:main.c        ****     }
 286:main.c        ****     if (totalDistance >= blocksize) {
 287:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 288:main.c        ****         totalDistance = 0; // reset distance
 289:main.c        ****         previousDirection = directionState;
 290:main.c        ****         return directionState;
 291:main.c        ****     }
 292:main.c        ****     
 293:main.c        ****     // STOP BUFFER * ========================================
 294:main.c        ****     if (previousDirection == Stop) {
 295:main.c        ****         if (stopBuffer <= 50) {
 296:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 297:main.c        ****             previousDirection = directionState;
 298:main.c        ****         } else {
 299:main.c        ****             //directionState = ForwardAfterTurn;
 300:main.c        ****         }
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 21


 301:main.c        ****         return directionState;
 302:main.c        ****     }
 303:main.c        **** 
 304:main.c        ****     // TURNING * ========================================    
 305:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 306:main.c        ****         if (s3 || s4) {
 307:main.c        ****             //ignoreSensor = 0;
 308:main.c        ****             //usbPutString("Forward\n");
 309:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 310:main.c        ****             previousDirection = directionState;
 311:main.c        ****             return directionState;
 312:main.c        ****         }
 313:main.c        ****     }
 314:main.c        **** 
 315:main.c        ****     if(previousDirection == waitForRightTurn) {
 316:main.c        ****         //ignoreSensor = 0;
 317:main.c        ****         if(!s4) {
 318:main.c        ****             //usbPutString("Turn Right\n");
 319:main.c        ****             directionState = TurnRight;
 320:main.c        ****             previousDirection = directionState;
 321:main.c        ****             return directionState;
 322:main.c        ****         } else {
 323:main.c        ****             //usbPutString("Wait for Right Turn\n");
 324:main.c        ****             directionState = waitForRightTurn;
 325:main.c        ****             previousDirection = directionState;
 326:main.c        ****             return directionState;
 327:main.c        ****         }
 328:main.c        ****     }
 329:main.c        **** 
 330:main.c        ****     if(previousDirection == waitForLeftTurn) {
 331:main.c        ****         //ignoreSensor = 0;
 332:main.c        ****         if(!s3) {
 333:main.c        ****             //usbPutString("Turn Left\n");
 334:main.c        ****             directionState = TurnLeft;
 335:main.c        ****             previousDirection = directionState;
 336:main.c        ****             return directionState;
 337:main.c        ****         } else {
 338:main.c        ****             //usbPutString("Wait for Left Turn\n");
 339:main.c        ****             directionState = waitForLeftTurn;
 340:main.c        ****             previousDirection = directionState;
 341:main.c        ****             return directionState;
 342:main.c        ****         }
 343:main.c        ****     }
 344:main.c        **** 
 345:main.c        ****     if(previousDirection == TurnRight) {
 346:main.c        ****         if(s5 && s6) {
 347:main.c        ****             //usbPutString("Turn Right\n");
 348:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 349:main.c        ****             previousDirection = directionState;
 350:main.c        ****             return directionState;
 351:main.c        ****         } 
 352:main.c        ****         else if (!s5 || !s6) {
 353:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 354:main.c        ****             //usbPutString("Stop after Right Turn");
 355:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 356:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 357:main.c        ****             previousDirection = directionState;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 22


 358:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 359:main.c        ****             return directionState;
 360:main.c        ****         }
 361:main.c        ****     }    
 362:main.c        **** 
 363:main.c        ****     if(previousDirection == TurnLeft) {
 364:main.c        ****         if(s5 && s6) {
 365:main.c        ****             //usbPutString("Turn Left\n");
 366:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 367:main.c        ****             previousDirection = directionState;
 368:main.c        ****             return directionState;
 369:main.c        ****         } 
 370:main.c        ****         else if (!s5 || !s6) {
 371:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 372:main.c        ****            // usbPutString("Stop after Left Turn\n");
 373:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 374:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 375:main.c        ****             previousDirection = directionState;
 376:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 377:main.c        ****             return directionState;
 378:main.c        ****         }
 379:main.c        ****     }
 380:main.c        ****     
 381:main.c        ****     // COURSE CORRECTION * ========================================
 382:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 383:main.c        ****         //ignoreSensor = 0;
 384:main.c        ****         if(s6) {
 385:main.c        ****             //usbPutString("Adjust to the left\n");
 386:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 387:main.c        ****             previousDirection = directionState;
 388:main.c        ****             return directionState;
 389:main.c        ****         }
 390:main.c        ****         if(s5) {
 391:main.c        ****             //usbPutString("Adjust to the right\n");
 392:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 393:main.c        ****             previousDirection = directionState;
 394:main.c        ****             return directionState;
 395:main.c        ****         }
 396:main.c        ****     }
 397:main.c        ****     
 398:main.c        ****     // FORWARD * ========================================
 399:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 400:main.c        ****         //usbPutString("Forward\n");
 401:main.c        ****         directionState = Forward;
 402:main.c        ****         previousDirection = directionState;
 403:main.c        ****         return directionState;   
 404:main.c        ****     }
 405:main.c        **** 
 406:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 407:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 408:main.c        ****     if (previousDirection == Unknown) {
 409:main.c        ****         directionState = Forward;
 410:main.c        ****         previousDirection = directionState;
 411:main.c        ****         return directionState;
 412:main.c        ****     }
 413:main.c        **** 
 414:main.c        ****     // Possible reason
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 23


 415:main.c        ****     previousDirection = currentDirection;
 416:main.c        ****     return previousDirection;
 417:main.c        **** }
 418:main.c        **** */
 419:main.c        **** 
 420:main.c        **** enum RobotMovement ForwardCourseCorrection();
 421:main.c        **** enum RobotMovement ForwardCourseCorrection() {
 828              		.loc 1 421 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833 0000 80B4     		push	{r7}
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 7, -4
 836 0002 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 422:main.c        ****     // if S5 and S6 are on black, move forward
 423:main.c        ****     if (!s5 && !s6) {
 838              		.loc 1 423 0
 839 0004 1C4B     		ldr	r3, .L44
 840 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0008 002B     		cmp	r3, #0
 842 000a 0FD1     		bne	.L37
 843              		.loc 1 423 0 is_stmt 0 discriminator 1
 844 000c 1B4B     		ldr	r3, .L44+4
 845 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 846 0010 002B     		cmp	r3, #0
 847 0012 0BD1     		bne	.L37
 424:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 848              		.loc 1 424 0 is_stmt 1
 849 0014 1A4B     		ldr	r3, .L44+8
 850 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 851 0018 032B     		cmp	r3, #3
 852 001a 01D0     		beq	.L38
 425:main.c        ****             return AdjustToTheLeft;
 853              		.loc 1 425 0
 854 001c 0323     		movs	r3, #3
 855 001e 26E0     		b	.L39
 856              	.L38:
 426:main.c        ****         }
 427:main.c        ****         if (previousDirection != AdjustToTheRight) {
 857              		.loc 1 427 0
 858 0020 174B     		ldr	r3, .L44+8
 859 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 860 0024 042B     		cmp	r3, #4
 861 0026 01D0     		beq	.L37
 428:main.c        ****             return AdjustToTheRight;    
 862              		.loc 1 428 0
 863 0028 0423     		movs	r3, #4
 864 002a 20E0     		b	.L39
 865              	.L37:
 429:main.c        ****         }
 430:main.c        ****     }
 431:main.c        ****     
 432:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 433:main.c        ****     if (s5 && s6) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 24


 866              		.loc 1 433 0
 867 002c 124B     		ldr	r3, .L44
 868 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 869 0030 002B     		cmp	r3, #0
 870 0032 0FD0     		beq	.L40
 871              		.loc 1 433 0 is_stmt 0 discriminator 1
 872 0034 114B     		ldr	r3, .L44+4
 873 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 874 0038 002B     		cmp	r3, #0
 875 003a 0BD0     		beq	.L40
 434:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 876              		.loc 1 434 0 is_stmt 1
 877 003c 104B     		ldr	r3, .L44+8
 878 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 0040 032B     		cmp	r3, #3
 880 0042 01D0     		beq	.L41
 435:main.c        ****             return AdjustToTheLeft;
 881              		.loc 1 435 0
 882 0044 0323     		movs	r3, #3
 883 0046 12E0     		b	.L39
 884              	.L41:
 436:main.c        ****         }
 437:main.c        ****         if (previousDirection != AdjustToTheRight) {
 885              		.loc 1 437 0
 886 0048 0D4B     		ldr	r3, .L44+8
 887 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 888 004c 042B     		cmp	r3, #4
 889 004e 01D0     		beq	.L40
 438:main.c        ****             return AdjustToTheRight;    
 890              		.loc 1 438 0
 891 0050 0423     		movs	r3, #4
 892 0052 0CE0     		b	.L39
 893              	.L40:
 439:main.c        ****         }
 440:main.c        ****     }
 441:main.c        **** 
 442:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 443:main.c        ****     if (s5) {
 894              		.loc 1 443 0
 895 0054 084B     		ldr	r3, .L44
 896 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 0058 002B     		cmp	r3, #0
 898 005a 01D0     		beq	.L42
 444:main.c        ****         return AdjustToTheRight;    
 899              		.loc 1 444 0
 900 005c 0423     		movs	r3, #4
 901 005e 06E0     		b	.L39
 902              	.L42:
 445:main.c        ****     }
 446:main.c        ****     if (s6) {
 903              		.loc 1 446 0
 904 0060 064B     		ldr	r3, .L44+4
 905 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 0064 002B     		cmp	r3, #0
 907 0066 01D0     		beq	.L43
 447:main.c        ****         return AdjustToTheLeft;    
 908              		.loc 1 447 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 25


 909 0068 0323     		movs	r3, #3
 910 006a 00E0     		b	.L39
 911              	.L43:
 448:main.c        ****     }
 449:main.c        ****    
 450:main.c        ****     // We should never actually get to this point
 451:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 452:main.c        ****     return Stop;
 912              		.loc 1 452 0
 913 006c 0523     		movs	r3, #5
 914              	.L39:
 453:main.c        **** }
 915              		.loc 1 453 0
 916 006e 1846     		mov	r0, r3
 917 0070 BD46     		mov	sp, r7
 918              		.cfi_def_cfa_register 13
 919              		@ sp needed
 920 0072 80BC     		pop	{r7}
 921              		.cfi_restore 7
 922              		.cfi_def_cfa_offset 0
 923 0074 7047     		bx	lr
 924              	.L45:
 925 0076 00BF     		.align	2
 926              	.L44:
 927 0078 00000000 		.word	s5
 928 007c 00000000 		.word	s6
 929 0080 00000000 		.word	previousDirection
 930              		.cfi_endproc
 931              	.LFE73:
 932              		.size	ForwardCourseCorrection, .-ForwardCourseCorrection
 933              		.global	__aeabi_fcmpge
 934              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 935              		.align	2
 936              		.global	GetMovementAccordingToInstruction
 937              		.thumb
 938              		.thumb_func
 939              		.type	GetMovementAccordingToInstruction, %function
 940              	GetMovementAccordingToInstruction:
 941              	.LFB74:
 454:main.c        **** 
 455:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 942              		.loc 1 455 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 8
 945              		@ frame_needed = 1, uses_anonymous_args = 0
 946 0000 80B5     		push	{r7, lr}
 947              		.cfi_def_cfa_offset 8
 948              		.cfi_offset 7, -8
 949              		.cfi_offset 14, -4
 950 0002 82B0     		sub	sp, sp, #8
 951              		.cfi_def_cfa_offset 16
 952 0004 00AF     		add	r7, sp, #0
 953              		.cfi_def_cfa_register 7
 456:main.c        ****     float blocksize;
 457:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 954              		.loc 1 457 0
 955 0006 804B     		ldr	r3, .L80
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 26


 956 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 000a 002B     		cmp	r3, #0
 958 000c 03D0     		beq	.L47
 959              		.loc 1 457 0 is_stmt 0 discriminator 1
 960 000e 7E4B     		ldr	r3, .L80
 961 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0012 012B     		cmp	r3, #1
 963 0014 03D1     		bne	.L48
 964              	.L47:
 458:main.c        ****         blocksize = yBlocksize;
 965              		.loc 1 458 0 is_stmt 1
 966 0016 7D4B     		ldr	r3, .L80+4
 967 0018 1B68     		ldr	r3, [r3]	@ float
 968 001a 7B60     		str	r3, [r7, #4]	@ float
 969 001c 02E0     		b	.L49
 970              	.L48:
 459:main.c        ****     } else {
 460:main.c        ****         blocksize = xBlocksize;
 971              		.loc 1 460 0
 972 001e 7C4B     		ldr	r3, .L80+8
 973 0020 1B68     		ldr	r3, [r3]	@ float
 974 0022 7B60     		str	r3, [r7, #4]	@ float
 975              	.L49:
 461:main.c        ****     }
 462:main.c        ****     
 463:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 464:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 465:main.c        ****         // OR an EVENT happens in the current instruction
 466:main.c        ****         // e.g. CurrentInstruction: GoForward 
 467:main.c        ****         //      S3 on BLACK
 468:main.c        ****         //      Check Ignore Count
 469:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 470:main.c        ****     
 471:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 976              		.loc 1 471 0
 977 0024 7B4B     		ldr	r3, .L80+12
 978 0026 1B78     		ldrb	r3, [r3]
 979 0028 FB70     		strb	r3, [r7, #3]
 472:main.c        ****     
 473:main.c        ****     switch (currentInstructionDirection) {
 980              		.loc 1 473 0
 981 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 982 002c 052B     		cmp	r3, #5
 983 002e 00F2E680 		bhi	.L50
 984 0032 01A2     		adr	r2, .L52
 985 0034 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 986              		.p2align 2
 987              	.L52:
 988 0038 51000000 		.word	.L51+1
 989 003c 89000000 		.word	.L53+1
 990 0040 0B010000 		.word	.L54+1
 991 0044 FF010000 		.word	.L50+1
 992 0048 8D010000 		.word	.L55+1
 993 004c D9010000 		.word	.L56+1
 994              		.p2align 1
 995              	.L51:
 474:main.c        ****         case GoForward:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 27


 475:main.c        ****             // if s3 or s4 go off, check ignoreCount
 476:main.c        ****             //      if ignoreCount == 0, go to next direction
 477:main.c        ****             //      return stop
 478:main.c        ****             if (!s3) {
 996              		.loc 1 478 0
 997 0050 714B     		ldr	r3, .L80+16
 998 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 0054 002B     		cmp	r3, #0
 1000 0056 07D1     		bne	.L57
 479:main.c        ****                 if (currentInstruction.ignoreL == 0) {
 1001              		.loc 1 479 0
 1002 0058 6E4B     		ldr	r3, .L80+12
 1003 005a 5B68     		ldr	r3, [r3, #4]
 1004 005c 002B     		cmp	r3, #0
 1005 005e 03D1     		bne	.L57
 480:main.c        ****                     MoveToNextInstruction();
 1006              		.loc 1 480 0
 1007 0060 FFF7FEFF 		bl	MoveToNextInstruction
 481:main.c        ****                     return Stop;
 1008              		.loc 1 481 0
 1009 0064 0523     		movs	r3, #5
 1010 0066 CBE0     		b	.L58
 1011              	.L57:
 482:main.c        ****                 }
 483:main.c        ****             }
 484:main.c        ****             
 485:main.c        ****             if (!s4) {
 1012              		.loc 1 485 0
 1013 0068 6C4B     		ldr	r3, .L80+20
 1014 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1015 006c 002B     		cmp	r3, #0
 1016 006e 07D1     		bne	.L59
 486:main.c        ****                 if (currentInstruction.ignoreR == 0) {
 1017              		.loc 1 486 0
 1018 0070 684B     		ldr	r3, .L80+12
 1019 0072 9B68     		ldr	r3, [r3, #8]
 1020 0074 002B     		cmp	r3, #0
 1021 0076 03D1     		bne	.L59
 487:main.c        ****                     MoveToNextInstruction();
 1022              		.loc 1 487 0
 1023 0078 FFF7FEFF 		bl	MoveToNextInstruction
 488:main.c        ****                     return Stop;
 1024              		.loc 1 488 0
 1025 007c 0523     		movs	r3, #5
 1026 007e BFE0     		b	.L58
 1027              	.L59:
 489:main.c        ****                 }
 490:main.c        ****             }
 491:main.c        ****             return ForwardCourseCorrection();
 1028              		.loc 1 491 0
 1029 0080 FFF7FEFF 		bl	ForwardCourseCorrection
 1030 0084 0346     		mov	r3, r0
 1031 0086 BBE0     		b	.L58
 1032              	.L53:
 492:main.c        ****             break;
 493:main.c        ****         case waitForLeftTurn:
 494:main.c        ****             // continue moving forward until s3 goes on black
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 28


 495:main.c        ****             // if we are turning left already
 496:main.c        ****                 // wait until s5 || s6 are on black
 497:main.c        ****                 // return stop
 498:main.c        ****             if (turnFinishedFlag) {
 1033              		.loc 1 498 0
 1034 0088 654B     		ldr	r3, .L80+24
 1035 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 008c 002B     		cmp	r3, #0
 1037 008e 11D0     		beq	.L60
 499:main.c        ****                 if (turnFinishedFlag) {
 1038              		.loc 1 499 0
 1039 0090 634B     		ldr	r3, .L80+24
 1040 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 0094 002B     		cmp	r3, #0
 1042 0096 0DD0     		beq	.L60
 500:main.c        ****                     if (s3) {
 1043              		.loc 1 500 0
 1044 0098 5F4B     		ldr	r3, .L80+16
 1045 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1046 009c 002B     		cmp	r3, #0
 1047 009e 05D0     		beq	.L61
 501:main.c        ****                         turnFinishedFlag = 0;
 1048              		.loc 1 501 0
 1049 00a0 5F4B     		ldr	r3, .L80+24
 1050 00a2 0022     		movs	r2, #0
 1051 00a4 1A70     		strb	r2, [r3]
 502:main.c        ****                         MoveToNextInstruction();    
 1052              		.loc 1 502 0
 1053 00a6 FFF7FEFF 		bl	MoveToNextInstruction
 1054 00aa 03E0     		b	.L60
 1055              	.L61:
 503:main.c        ****                     }
 504:main.c        ****                     else {
 505:main.c        ****                         return ForwardCourseCorrection();        
 1056              		.loc 1 505 0
 1057 00ac FFF7FEFF 		bl	ForwardCourseCorrection
 1058 00b0 0346     		mov	r3, r0
 1059 00b2 A5E0     		b	.L58
 1060              	.L60:
 506:main.c        ****                     }
 507:main.c        ****                 }
 508:main.c        ****             }
 509:main.c        ****             
 510:main.c        ****             if (currentDirection == Stop) {
 1061              		.loc 1 510 0
 1062 00b4 5B4B     		ldr	r3, .L80+28
 1063 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 00b8 052B     		cmp	r3, #5
 1065 00ba 09D1     		bne	.L62
 511:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 512:main.c        ****                 if (stopBuffer <= 50) {
 1066              		.loc 1 512 0
 1067 00bc 5A4B     		ldr	r3, .L80+32
 1068 00be 1B68     		ldr	r3, [r3]
 1069 00c0 322B     		cmp	r3, #50
 1070 00c2 01D8     		bhi	.L63
 513:main.c        ****                     return Stop;   
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 29


 1071              		.loc 1 513 0
 1072 00c4 0523     		movs	r3, #5
 1073 00c6 9BE0     		b	.L58
 1074              	.L63:
 514:main.c        ****                 }
 515:main.c        ****                 return ForwardCourseCorrection();
 1075              		.loc 1 515 0
 1076 00c8 FFF7FEFF 		bl	ForwardCourseCorrection
 1077 00cc 0346     		mov	r3, r0
 1078 00ce 97E0     		b	.L58
 1079              	.L62:
 516:main.c        ****             }
 517:main.c        ****          
 518:main.c        ****             // if we are already turning left, then check if s5 && s6 are on black
 519:main.c        ****             if (currentDirection == TurnLeft) {
 1080              		.loc 1 519 0
 1081 00d0 544B     		ldr	r3, .L80+28
 1082 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1083 00d4 022B     		cmp	r3, #2
 1084 00d6 0ED1     		bne	.L64
 520:main.c        ****                 if (!s5 && !s6) {
 1085              		.loc 1 520 0
 1086 00d8 544B     		ldr	r3, .L80+36
 1087 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1088 00dc 002B     		cmp	r3, #0
 1089 00de 08D1     		bne	.L65
 1090              		.loc 1 520 0 is_stmt 0 discriminator 1
 1091 00e0 534B     		ldr	r3, .L80+40
 1092 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1093 00e4 002B     		cmp	r3, #0
 1094 00e6 04D1     		bne	.L65
 521:main.c        ****                     turnFinishedFlag = 1;
 1095              		.loc 1 521 0 is_stmt 1
 1096 00e8 4D4B     		ldr	r3, .L80+24
 1097 00ea 0122     		movs	r2, #1
 1098 00ec 1A70     		strb	r2, [r3]
 522:main.c        ****                     return Stop;
 1099              		.loc 1 522 0
 1100 00ee 0523     		movs	r3, #5
 1101 00f0 86E0     		b	.L58
 1102              	.L65:
 523:main.c        ****                 }
 524:main.c        ****                 else
 525:main.c        ****                 {
 526:main.c        ****                     return TurnLeft;
 1103              		.loc 1 526 0
 1104 00f2 0223     		movs	r3, #2
 1105 00f4 84E0     		b	.L58
 1106              	.L64:
 527:main.c        ****                 }
 528:main.c        ****             }
 529:main.c        ****             
 530:main.c        ****             // If we are not already turning left then once s3 goes on BLACK, turn left
 531:main.c        ****             if (!s3) {
 1107              		.loc 1 531 0
 1108 00f6 484B     		ldr	r3, .L80+16
 1109 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 30


 1110 00fa 002B     		cmp	r3, #0
 1111 00fc 01D1     		bne	.L66
 532:main.c        ****                 return TurnLeft;
 1112              		.loc 1 532 0
 1113 00fe 0223     		movs	r3, #2
 1114 0100 7EE0     		b	.L58
 1115              	.L66:
 533:main.c        ****             }
 534:main.c        ****             
 535:main.c        ****             // Otherwise, keep going forward
 536:main.c        ****             return ForwardCourseCorrection(); 
 1116              		.loc 1 536 0
 1117 0102 FFF7FEFF 		bl	ForwardCourseCorrection
 1118 0106 0346     		mov	r3, r0
 1119 0108 7AE0     		b	.L58
 1120              	.L54:
 537:main.c        ****             break;
 538:main.c        ****         case waitForRightTurn:
 539:main.c        ****             // continue moving forward until s4 goes on black
 540:main.c        ****             // if we are turning left already
 541:main.c        ****                 // wait until s5 || s6 are on black
 542:main.c        ****                 // return stop
 543:main.c        ****             if (turnFinishedFlag) {
 1121              		.loc 1 543 0
 1122 010a 454B     		ldr	r3, .L80+24
 1123 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1124 010e 002B     		cmp	r3, #0
 1125 0110 11D0     		beq	.L67
 544:main.c        ****                 if (turnFinishedFlag) {
 1126              		.loc 1 544 0
 1127 0112 434B     		ldr	r3, .L80+24
 1128 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1129 0116 002B     		cmp	r3, #0
 1130 0118 0DD0     		beq	.L67
 545:main.c        ****                     if (s3) {
 1131              		.loc 1 545 0
 1132 011a 3F4B     		ldr	r3, .L80+16
 1133 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1134 011e 002B     		cmp	r3, #0
 1135 0120 05D0     		beq	.L68
 546:main.c        ****                         turnFinishedFlag = 0;
 1136              		.loc 1 546 0
 1137 0122 3F4B     		ldr	r3, .L80+24
 1138 0124 0022     		movs	r2, #0
 1139 0126 1A70     		strb	r2, [r3]
 547:main.c        ****                         MoveToNextInstruction();    
 1140              		.loc 1 547 0
 1141 0128 FFF7FEFF 		bl	MoveToNextInstruction
 1142 012c 03E0     		b	.L67
 1143              	.L68:
 548:main.c        ****                     }
 549:main.c        ****                     else {
 550:main.c        ****                         return ForwardCourseCorrection();        
 1144              		.loc 1 550 0
 1145 012e FFF7FEFF 		bl	ForwardCourseCorrection
 1146 0132 0346     		mov	r3, r0
 1147 0134 64E0     		b	.L58
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 31


 1148              	.L67:
 551:main.c        ****                     }
 552:main.c        ****                 }
 553:main.c        ****             }
 554:main.c        ****             
 555:main.c        ****             if (currentDirection == Stop) {
 1149              		.loc 1 555 0
 1150 0136 3B4B     		ldr	r3, .L80+28
 1151 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1152 013a 052B     		cmp	r3, #5
 1153 013c 09D1     		bne	.L69
 556:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 557:main.c        ****                 if (stopBuffer <= 50) {
 1154              		.loc 1 557 0
 1155 013e 3A4B     		ldr	r3, .L80+32
 1156 0140 1B68     		ldr	r3, [r3]
 1157 0142 322B     		cmp	r3, #50
 1158 0144 01D8     		bhi	.L70
 558:main.c        ****                     return Stop;   
 1159              		.loc 1 558 0
 1160 0146 0523     		movs	r3, #5
 1161 0148 5AE0     		b	.L58
 1162              	.L70:
 559:main.c        ****                 }
 560:main.c        **** 
 561:main.c        ****                 return ForwardCourseCorrection();
 1163              		.loc 1 561 0
 1164 014a FFF7FEFF 		bl	ForwardCourseCorrection
 1165 014e 0346     		mov	r3, r0
 1166 0150 56E0     		b	.L58
 1167              	.L69:
 562:main.c        ****             }
 563:main.c        ****                       
 564:main.c        ****             // if we are already turning right, then check if s5 && s6 are on black
 565:main.c        ****             if (currentDirection == TurnRight) {
 1168              		.loc 1 565 0
 1169 0152 344B     		ldr	r3, .L80+28
 1170 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1171 0156 012B     		cmp	r3, #1
 1172 0158 0ED1     		bne	.L71
 566:main.c        ****                 if (!s5 && !s6) {
 1173              		.loc 1 566 0
 1174 015a 344B     		ldr	r3, .L80+36
 1175 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1176 015e 002B     		cmp	r3, #0
 1177 0160 08D1     		bne	.L72
 1178              		.loc 1 566 0 is_stmt 0 discriminator 1
 1179 0162 334B     		ldr	r3, .L80+40
 1180 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1181 0166 002B     		cmp	r3, #0
 1182 0168 04D1     		bne	.L72
 567:main.c        ****                     turnFinishedFlag = 1;
 1183              		.loc 1 567 0 is_stmt 1
 1184 016a 2D4B     		ldr	r3, .L80+24
 1185 016c 0122     		movs	r2, #1
 1186 016e 1A70     		strb	r2, [r3]
 568:main.c        ****                     return Stop;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 32


 1187              		.loc 1 568 0
 1188 0170 0523     		movs	r3, #5
 1189 0172 45E0     		b	.L58
 1190              	.L72:
 569:main.c        ****                 }
 570:main.c        ****                 else
 571:main.c        ****                 {
 572:main.c        ****                     return TurnRight;
 1191              		.loc 1 572 0
 1192 0174 0123     		movs	r3, #1
 1193 0176 43E0     		b	.L58
 1194              	.L71:
 573:main.c        ****                 }
 574:main.c        ****             }
 575:main.c        ****             
 576:main.c        ****             // If we are not already turning right then once s4 goes on BLACK, turn left
 577:main.c        ****             if (!s4) {
 1195              		.loc 1 577 0
 1196 0178 284B     		ldr	r3, .L80+20
 1197 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1198 017c 002B     		cmp	r3, #0
 1199 017e 01D1     		bne	.L73
 578:main.c        ****                 return TurnRight;
 1200              		.loc 1 578 0
 1201 0180 0123     		movs	r3, #1
 1202 0182 3DE0     		b	.L58
 1203              	.L73:
 579:main.c        ****             }
 580:main.c        ****             
 581:main.c        ****             // Otherwise, keep going forward
 582:main.c        ****             return ForwardCourseCorrection(); 
 1204              		.loc 1 582 0
 1205 0184 FFF7FEFF 		bl	ForwardCourseCorrection
 1206 0188 0346     		mov	r3, r0
 1207 018a 39E0     		b	.L58
 1208              	.L55:
 583:main.c        ****             break;
 584:main.c        ****         case ForwardUntilTarget:
 585:main.c        ****             // Reset distance on first iteration of this instruction
 586:main.c        ****             if (!forwardUntilTargetStartedFlag) {
 1209              		.loc 1 586 0
 1210 018c 294B     		ldr	r3, .L80+44
 1211 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1212 0190 002B     		cmp	r3, #0
 1213 0192 0ED1     		bne	.L74
 587:main.c        ****                 forwardUntilTargetStartedFlag = 1;
 1214              		.loc 1 587 0
 1215 0194 274B     		ldr	r3, .L80+44
 1216 0196 0122     		movs	r2, #1
 1217 0198 1A70     		strb	r2, [r3]
 588:main.c        ****                 totalDistance = 0;
 1218              		.loc 1 588 0
 1219 019a 274B     		ldr	r3, .L80+48
 1220 019c 4FF00002 		mov	r2, #0
 1221 01a0 1A60     		str	r2, [r3]	@ float
 589:main.c        **** 
 590:main.c        ****                 blockSizeTotal = blocksize * 6;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 33


 1222              		.loc 1 590 0
 1223 01a2 2649     		ldr	r1, .L80+52
 1224 01a4 7868     		ldr	r0, [r7, #4]	@ float
 1225 01a6 FFF7FEFF 		bl	__aeabi_fmul
 1226 01aa 0346     		mov	r3, r0
 1227 01ac 1A46     		mov	r2, r3
 1228 01ae 244B     		ldr	r3, .L80+56
 1229 01b0 1A60     		str	r2, [r3]	@ float
 1230              	.L74:
 591:main.c        ****             }
 592:main.c        ****             
 593:main.c        ****             // If totalDistance >= blockSizeTotal then we should be at target
 594:main.c        ****             if (totalDistance >= blockSizeTotal) {
 1231              		.loc 1 594 0
 1232 01b2 214B     		ldr	r3, .L80+48
 1233 01b4 1A68     		ldr	r2, [r3]	@ float
 1234 01b6 224B     		ldr	r3, .L80+56
 1235 01b8 1B68     		ldr	r3, [r3]	@ float
 1236 01ba 1946     		mov	r1, r3
 1237 01bc 1046     		mov	r0, r2
 1238 01be FFF7FEFF 		bl	__aeabi_fcmpge
 1239 01c2 0346     		mov	r3, r0
 1240 01c4 002B     		cmp	r3, #0
 1241 01c6 03D0     		beq	.L79
 595:main.c        ****                 // Get next instruction
 596:main.c        ****                 MoveToNextInstruction();
 1242              		.loc 1 596 0
 1243 01c8 FFF7FEFF 		bl	MoveToNextInstruction
 597:main.c        **** 
 598:main.c        ****                 
 599:main.c        ****                 return Stop;
 1244              		.loc 1 599 0
 1245 01cc 0523     		movs	r3, #5
 1246 01ce 17E0     		b	.L58
 1247              	.L79:
 600:main.c        ****             }
 601:main.c        ****             
 602:main.c        ****             return ForwardCourseCorrection();
 1248              		.loc 1 602 0
 1249 01d0 FFF7FEFF 		bl	ForwardCourseCorrection
 1250 01d4 0346     		mov	r3, r0
 1251 01d6 13E0     		b	.L58
 1252              	.L56:
 603:main.c        ****             break;
 604:main.c        ****         case StopAtTarget:
 605:main.c        ****             // Reset Forward Until Target Flags (Had to move in here to make it work)
 606:main.c        ****             // Reset flags
 607:main.c        ****             totalDistance = 0;
 1253              		.loc 1 607 0
 1254 01d8 174B     		ldr	r3, .L80+48
 1255 01da 4FF00002 		mov	r2, #0
 1256 01de 1A60     		str	r2, [r3]	@ float
 608:main.c        ****             forwardUntilTargetStartedFlag = 0;
 1257              		.loc 1 608 0
 1258 01e0 144B     		ldr	r3, .L80+44
 1259 01e2 0022     		movs	r2, #0
 1260 01e4 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 34


 609:main.c        ****             blockSizeTotal = 0;
 1261              		.loc 1 609 0
 1262 01e6 164B     		ldr	r3, .L80+56
 1263 01e8 4FF00002 		mov	r2, #0
 1264 01ec 1A60     		str	r2, [r3]	@ float
 610:main.c        ****             
 611:main.c        ****             if (stopBuffer <= 200) {
 1265              		.loc 1 611 0
 1266 01ee 0E4B     		ldr	r3, .L80+32
 1267 01f0 1B68     		ldr	r3, [r3]
 1268 01f2 C82B     		cmp	r3, #200
 1269 01f4 01D8     		bhi	.L77
 612:main.c        ****                 return Stop;    
 1270              		.loc 1 612 0
 1271 01f6 0523     		movs	r3, #5
 1272 01f8 02E0     		b	.L58
 1273              	.L77:
 613:main.c        ****             }
 614:main.c        ****             return TurnRight;
 1274              		.loc 1 614 0
 1275 01fa 0123     		movs	r3, #1
 1276 01fc 00E0     		b	.L58
 1277              	.L50:
 615:main.c        ****             break;
 616:main.c        ****         default:
 617:main.c        ****             return Stop;
 1278              		.loc 1 617 0
 1279 01fe 0523     		movs	r3, #5
 1280              	.L58:
 618:main.c        ****             break;
 619:main.c        ****     }
 620:main.c        ****     return Stop;
 621:main.c        **** }
 1281              		.loc 1 621 0
 1282 0200 1846     		mov	r0, r3
 1283 0202 0837     		adds	r7, r7, #8
 1284              		.cfi_def_cfa_offset 8
 1285 0204 BD46     		mov	sp, r7
 1286              		.cfi_def_cfa_register 13
 1287              		@ sp needed
 1288 0206 80BD     		pop	{r7, pc}
 1289              	.L81:
 1290              		.align	2
 1291              	.L80:
 1292 0208 00000000 		.word	currentRobotOrientation
 1293 020c 00000000 		.word	yBlocksize
 1294 0210 00000000 		.word	xBlocksize
 1295 0214 00000000 		.word	currentInstruction
 1296 0218 00000000 		.word	s3
 1297 021c 00000000 		.word	s4
 1298 0220 00000000 		.word	turnFinishedFlag
 1299 0224 00000000 		.word	currentDirection
 1300 0228 00000000 		.word	stopBuffer
 1301 022c 00000000 		.word	s5
 1302 0230 00000000 		.word	s6
 1303 0234 00000000 		.word	forwardUntilTargetStartedFlag
 1304 0238 00000000 		.word	totalDistance
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 35


 1305 023c 0000C040 		.word	1086324736
 1306 0240 00000000 		.word	blockSizeTotal
 1307              		.cfi_endproc
 1308              	.LFE74:
 1309              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1310              		.global	__aeabi_i2f
 1311              		.section	.text.CalculateDistanceToTravel,"ax",%progbits
 1312              		.align	2
 1313              		.global	CalculateDistanceToTravel
 1314              		.thumb
 1315              		.thumb_func
 1316              		.type	CalculateDistanceToTravel, %function
 1317              	CalculateDistanceToTravel:
 1318              	.LFB75:
 622:main.c        **** 
 623:main.c        **** // Calculate total blocksize to travel until target
 624:main.c        **** float CalculateDistanceToTravel(float blockSize) {
 1319              		.loc 1 624 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 40
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 8AB0     		sub	sp, sp, #40
 1328              		.cfi_def_cfa_offset 48
 1329 0004 00AF     		add	r7, sp, #0
 1330              		.cfi_def_cfa_register 7
 1331 0006 7860     		str	r0, [r7, #4]	@ float
 625:main.c        ****     float totalBlockSize;
 626:main.c        ****     
 627:main.c        ****     // Check for Row, Col that target is 
 628:main.c        ****     int targetRow = food_list[0][0];
 1332              		.loc 1 628 0
 1333 0008 9D4B     		ldr	r3, .L127
 1334 000a 1B68     		ldr	r3, [r3]
 1335 000c 3B61     		str	r3, [r7, #16]
 629:main.c        ****     int targetCol = food_list[0][1];
 1336              		.loc 1 629 0
 1337 000e 9C4B     		ldr	r3, .L127
 1338 0010 5B68     		ldr	r3, [r3, #4]
 1339 0012 FB60     		str	r3, [r7, #12]
 630:main.c        ****     
 631:main.c        ****     int pathCount = 0;
 1340              		.loc 1 631 0
 1341 0014 0023     		movs	r3, #0
 1342 0016 7B62     		str	r3, [r7, #36]
 632:main.c        ****     
 633:main.c        ****     // Depending on the robot orientation
 634:main.c        ****     // count++ if row, col is 8
 635:main.c        ****     // count reset if row, col is 1 or 0
 636:main.c        ****     // save count if row, col is 9
 637:main.c        ****     switch (currentRobotOrientation) {
 1343              		.loc 1 637 0
 1344 0018 9A4B     		ldr	r3, .L127+4
 1345 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 36


 1346 001c 032B     		cmp	r3, #3
 1347 001e 00F21F81 		bhi	.L83
 1348 0022 01A2     		adr	r2, .L85
 1349 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1350              		.p2align 2
 1351              	.L85:
 1352 0028 39000000 		.word	.L84+1
 1353 002c C3000000 		.word	.L86+1
 1354 0030 4D010000 		.word	.L87+1
 1355 0034 D7010000 		.word	.L88+1
 1356              		.p2align 1
 1357              	.L84:
 1358              	.LBB3:
 638:main.c        ****         case Up:
 639:main.c        ****             // Column
 640:main.c        ****             // Start from Bottom (since we're facing up)
 641:main.c        ****             for (int i = MAX_ROWS; i >= 0; i--) {
 1359              		.loc 1 641 0
 1360 0038 0F23     		movs	r3, #15
 1361 003a 3B62     		str	r3, [r7, #32]
 1362 003c 3BE0     		b	.L89
 1363              	.L95:
 642:main.c        ****                 if (map[i][targetCol] == 9) {
 1364              		.loc 1 642 0
 1365 003e 9249     		ldr	r1, .L127+8
 1366 0040 3A6A     		ldr	r2, [r7, #32]
 1367 0042 1346     		mov	r3, r2
 1368 0044 DB00     		lsls	r3, r3, #3
 1369 0046 1344     		add	r3, r3, r2
 1370 0048 5B00     		lsls	r3, r3, #1
 1371 004a 1344     		add	r3, r3, r2
 1372 004c FA68     		ldr	r2, [r7, #12]
 1373 004e 1344     		add	r3, r3, r2
 1374 0050 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1375 0054 092B     		cmp	r3, #9
 1376 0056 32D0     		beq	.L122
 643:main.c        ****                     break;    
 644:main.c        ****                 }
 645:main.c        ****                 if (map[i][targetCol] == 8) {
 1377              		.loc 1 645 0
 1378 0058 8B49     		ldr	r1, .L127+8
 1379 005a 3A6A     		ldr	r2, [r7, #32]
 1380 005c 1346     		mov	r3, r2
 1381 005e DB00     		lsls	r3, r3, #3
 1382 0060 1344     		add	r3, r3, r2
 1383 0062 5B00     		lsls	r3, r3, #1
 1384 0064 1344     		add	r3, r3, r2
 1385 0066 FA68     		ldr	r2, [r7, #12]
 1386 0068 1344     		add	r3, r3, r2
 1387 006a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1388 006e 082B     		cmp	r3, #8
 1389 0070 02D1     		bne	.L92
 646:main.c        ****                     pathCount++;    
 1390              		.loc 1 646 0
 1391 0072 7B6A     		ldr	r3, [r7, #36]
 1392 0074 0133     		adds	r3, r3, #1
 1393 0076 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 37


 1394              	.L92:
 647:main.c        ****                 }
 648:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1395              		.loc 1 648 0
 1396 0078 8349     		ldr	r1, .L127+8
 1397 007a 3A6A     		ldr	r2, [r7, #32]
 1398 007c 1346     		mov	r3, r2
 1399 007e DB00     		lsls	r3, r3, #3
 1400 0080 1344     		add	r3, r3, r2
 1401 0082 5B00     		lsls	r3, r3, #1
 1402 0084 1344     		add	r3, r3, r2
 1403 0086 FA68     		ldr	r2, [r7, #12]
 1404 0088 1344     		add	r3, r3, r2
 1405 008a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1406 008e 002B     		cmp	r3, #0
 1407 0090 0CD0     		beq	.L93
 1408              		.loc 1 648 0 is_stmt 0 discriminator 1
 1409 0092 7D49     		ldr	r1, .L127+8
 1410 0094 3A6A     		ldr	r2, [r7, #32]
 1411 0096 1346     		mov	r3, r2
 1412 0098 DB00     		lsls	r3, r3, #3
 1413 009a 1344     		add	r3, r3, r2
 1414 009c 5B00     		lsls	r3, r3, #1
 1415 009e 1344     		add	r3, r3, r2
 1416 00a0 FA68     		ldr	r2, [r7, #12]
 1417 00a2 1344     		add	r3, r3, r2
 1418 00a4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1419 00a8 012B     		cmp	r3, #1
 1420 00aa 01D1     		bne	.L94
 1421              	.L93:
 649:main.c        ****                     pathCount = 0;
 1422              		.loc 1 649 0 is_stmt 1
 1423 00ac 0023     		movs	r3, #0
 1424 00ae 7B62     		str	r3, [r7, #36]
 1425              	.L94:
 641:main.c        ****                 if (map[i][targetCol] == 9) {
 1426              		.loc 1 641 0 discriminator 2
 1427 00b0 3B6A     		ldr	r3, [r7, #32]
 1428 00b2 013B     		subs	r3, r3, #1
 1429 00b4 3B62     		str	r3, [r7, #32]
 1430              	.L89:
 641:main.c        ****                 if (map[i][targetCol] == 9) {
 1431              		.loc 1 641 0 is_stmt 0 discriminator 1
 1432 00b6 3B6A     		ldr	r3, [r7, #32]
 1433 00b8 002B     		cmp	r3, #0
 1434 00ba C0DA     		bge	.L95
 1435              	.LBE3:
 650:main.c        ****                 }
 651:main.c        ****             }
 652:main.c        ****             break;
 1436              		.loc 1 652 0 is_stmt 1
 1437 00bc D0E0     		b	.L83
 1438              	.L122:
 1439              	.LBB4:
 643:main.c        ****                 }
 1440              		.loc 1 643 0
 1441 00be 00BF     		nop
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 38


 1442              	.LBE4:
 1443              		.loc 1 652 0
 1444 00c0 CEE0     		b	.L83
 1445              	.L86:
 1446              	.LBB5:
 653:main.c        ****         case Down:
 654:main.c        ****             // Target Column, Check Row
 655:main.c        ****             // Start from Top
 656:main.c        ****             for (int i = 0; i < MAX_ROWS; i++) {
 1447              		.loc 1 656 0
 1448 00c2 0023     		movs	r3, #0
 1449 00c4 FB61     		str	r3, [r7, #28]
 1450 00c6 3BE0     		b	.L96
 1451              	.L102:
 657:main.c        ****                 if (map[i][targetCol] == 9) {
 1452              		.loc 1 657 0
 1453 00c8 6F49     		ldr	r1, .L127+8
 1454 00ca FA69     		ldr	r2, [r7, #28]
 1455 00cc 1346     		mov	r3, r2
 1456 00ce DB00     		lsls	r3, r3, #3
 1457 00d0 1344     		add	r3, r3, r2
 1458 00d2 5B00     		lsls	r3, r3, #1
 1459 00d4 1344     		add	r3, r3, r2
 1460 00d6 FA68     		ldr	r2, [r7, #12]
 1461 00d8 1344     		add	r3, r3, r2
 1462 00da 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1463 00de 092B     		cmp	r3, #9
 1464 00e0 32D0     		beq	.L123
 658:main.c        ****                     break;    
 659:main.c        ****                 }
 660:main.c        ****                 if (map[i][targetCol] == 8) {
 1465              		.loc 1 660 0
 1466 00e2 6949     		ldr	r1, .L127+8
 1467 00e4 FA69     		ldr	r2, [r7, #28]
 1468 00e6 1346     		mov	r3, r2
 1469 00e8 DB00     		lsls	r3, r3, #3
 1470 00ea 1344     		add	r3, r3, r2
 1471 00ec 5B00     		lsls	r3, r3, #1
 1472 00ee 1344     		add	r3, r3, r2
 1473 00f0 FA68     		ldr	r2, [r7, #12]
 1474 00f2 1344     		add	r3, r3, r2
 1475 00f4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1476 00f8 082B     		cmp	r3, #8
 1477 00fa 02D1     		bne	.L99
 661:main.c        ****                     pathCount++;    
 1478              		.loc 1 661 0
 1479 00fc 7B6A     		ldr	r3, [r7, #36]
 1480 00fe 0133     		adds	r3, r3, #1
 1481 0100 7B62     		str	r3, [r7, #36]
 1482              	.L99:
 662:main.c        ****                 }
 663:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1483              		.loc 1 663 0
 1484 0102 6149     		ldr	r1, .L127+8
 1485 0104 FA69     		ldr	r2, [r7, #28]
 1486 0106 1346     		mov	r3, r2
 1487 0108 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 39


 1488 010a 1344     		add	r3, r3, r2
 1489 010c 5B00     		lsls	r3, r3, #1
 1490 010e 1344     		add	r3, r3, r2
 1491 0110 FA68     		ldr	r2, [r7, #12]
 1492 0112 1344     		add	r3, r3, r2
 1493 0114 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1494 0118 002B     		cmp	r3, #0
 1495 011a 0CD0     		beq	.L100
 1496              		.loc 1 663 0 is_stmt 0 discriminator 1
 1497 011c 5A49     		ldr	r1, .L127+8
 1498 011e FA69     		ldr	r2, [r7, #28]
 1499 0120 1346     		mov	r3, r2
 1500 0122 DB00     		lsls	r3, r3, #3
 1501 0124 1344     		add	r3, r3, r2
 1502 0126 5B00     		lsls	r3, r3, #1
 1503 0128 1344     		add	r3, r3, r2
 1504 012a FA68     		ldr	r2, [r7, #12]
 1505 012c 1344     		add	r3, r3, r2
 1506 012e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1507 0132 012B     		cmp	r3, #1
 1508 0134 01D1     		bne	.L101
 1509              	.L100:
 664:main.c        ****                     pathCount = 0;
 1510              		.loc 1 664 0 is_stmt 1
 1511 0136 0023     		movs	r3, #0
 1512 0138 7B62     		str	r3, [r7, #36]
 1513              	.L101:
 656:main.c        ****                 if (map[i][targetCol] == 9) {
 1514              		.loc 1 656 0 discriminator 2
 1515 013a FB69     		ldr	r3, [r7, #28]
 1516 013c 0133     		adds	r3, r3, #1
 1517 013e FB61     		str	r3, [r7, #28]
 1518              	.L96:
 656:main.c        ****                 if (map[i][targetCol] == 9) {
 1519              		.loc 1 656 0 is_stmt 0 discriminator 1
 1520 0140 FB69     		ldr	r3, [r7, #28]
 1521 0142 0E2B     		cmp	r3, #14
 1522 0144 C0DD     		ble	.L102
 1523              	.LBE5:
 665:main.c        ****                 }
 666:main.c        ****             }
 667:main.c        ****             break;
 1524              		.loc 1 667 0 is_stmt 1
 1525 0146 8BE0     		b	.L83
 1526              	.L123:
 1527              	.LBB6:
 658:main.c        ****                 }
 1528              		.loc 1 658 0
 1529 0148 00BF     		nop
 1530              	.LBE6:
 1531              		.loc 1 667 0
 1532 014a 89E0     		b	.L83
 1533              	.L87:
 1534              	.LBB7:
 668:main.c        ****         case Left:
 669:main.c        ****             // Target Row, Check Col
 670:main.c        ****             // Start from Right
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 40


 671:main.c        ****             for (int i = MAX_COLS; i >= 0; i--) {
 1535              		.loc 1 671 0
 1536 014c 1323     		movs	r3, #19
 1537 014e BB61     		str	r3, [r7, #24]
 1538 0150 3BE0     		b	.L103
 1539              	.L109:
 672:main.c        ****                 if (map[targetRow][i] == 9) {
 1540              		.loc 1 672 0
 1541 0152 4D49     		ldr	r1, .L127+8
 1542 0154 3A69     		ldr	r2, [r7, #16]
 1543 0156 1346     		mov	r3, r2
 1544 0158 DB00     		lsls	r3, r3, #3
 1545 015a 1344     		add	r3, r3, r2
 1546 015c 5B00     		lsls	r3, r3, #1
 1547 015e 1344     		add	r3, r3, r2
 1548 0160 BA69     		ldr	r2, [r7, #24]
 1549 0162 1344     		add	r3, r3, r2
 1550 0164 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1551 0168 092B     		cmp	r3, #9
 1552 016a 32D0     		beq	.L124
 673:main.c        ****                     break;    
 674:main.c        ****                 }
 675:main.c        ****                 if (map[targetRow][i] == 8) {
 1553              		.loc 1 675 0
 1554 016c 4649     		ldr	r1, .L127+8
 1555 016e 3A69     		ldr	r2, [r7, #16]
 1556 0170 1346     		mov	r3, r2
 1557 0172 DB00     		lsls	r3, r3, #3
 1558 0174 1344     		add	r3, r3, r2
 1559 0176 5B00     		lsls	r3, r3, #1
 1560 0178 1344     		add	r3, r3, r2
 1561 017a BA69     		ldr	r2, [r7, #24]
 1562 017c 1344     		add	r3, r3, r2
 1563 017e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1564 0182 082B     		cmp	r3, #8
 1565 0184 02D1     		bne	.L106
 676:main.c        ****                     pathCount++;    
 1566              		.loc 1 676 0
 1567 0186 7B6A     		ldr	r3, [r7, #36]
 1568 0188 0133     		adds	r3, r3, #1
 1569 018a 7B62     		str	r3, [r7, #36]
 1570              	.L106:
 677:main.c        ****                 }
 678:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1571              		.loc 1 678 0
 1572 018c 3E49     		ldr	r1, .L127+8
 1573 018e 3A69     		ldr	r2, [r7, #16]
 1574 0190 1346     		mov	r3, r2
 1575 0192 DB00     		lsls	r3, r3, #3
 1576 0194 1344     		add	r3, r3, r2
 1577 0196 5B00     		lsls	r3, r3, #1
 1578 0198 1344     		add	r3, r3, r2
 1579 019a BA69     		ldr	r2, [r7, #24]
 1580 019c 1344     		add	r3, r3, r2
 1581 019e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1582 01a2 002B     		cmp	r3, #0
 1583 01a4 0CD0     		beq	.L107
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 41


 1584              		.loc 1 678 0 is_stmt 0 discriminator 1
 1585 01a6 3849     		ldr	r1, .L127+8
 1586 01a8 BA69     		ldr	r2, [r7, #24]
 1587 01aa 1346     		mov	r3, r2
 1588 01ac DB00     		lsls	r3, r3, #3
 1589 01ae 1344     		add	r3, r3, r2
 1590 01b0 5B00     		lsls	r3, r3, #1
 1591 01b2 1344     		add	r3, r3, r2
 1592 01b4 FA68     		ldr	r2, [r7, #12]
 1593 01b6 1344     		add	r3, r3, r2
 1594 01b8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1595 01bc 012B     		cmp	r3, #1
 1596 01be 01D1     		bne	.L108
 1597              	.L107:
 679:main.c        ****                     pathCount = 0;
 1598              		.loc 1 679 0 is_stmt 1
 1599 01c0 0023     		movs	r3, #0
 1600 01c2 7B62     		str	r3, [r7, #36]
 1601              	.L108:
 671:main.c        ****                 if (map[targetRow][i] == 9) {
 1602              		.loc 1 671 0 discriminator 2
 1603 01c4 BB69     		ldr	r3, [r7, #24]
 1604 01c6 013B     		subs	r3, r3, #1
 1605 01c8 BB61     		str	r3, [r7, #24]
 1606              	.L103:
 671:main.c        ****                 if (map[targetRow][i] == 9) {
 1607              		.loc 1 671 0 is_stmt 0 discriminator 1
 1608 01ca BB69     		ldr	r3, [r7, #24]
 1609 01cc 002B     		cmp	r3, #0
 1610 01ce C0DA     		bge	.L109
 1611              	.LBE7:
 680:main.c        ****                 }
 681:main.c        ****             }
 682:main.c        ****             break;
 1612              		.loc 1 682 0 is_stmt 1
 1613 01d0 46E0     		b	.L83
 1614              	.L124:
 1615              	.LBB8:
 673:main.c        ****                 }
 1616              		.loc 1 673 0
 1617 01d2 00BF     		nop
 1618              	.LBE8:
 1619              		.loc 1 682 0
 1620 01d4 44E0     		b	.L83
 1621              	.L88:
 1622              	.LBB9:
 683:main.c        ****         
 684:main.c        ****         case Right:
 685:main.c        ****             // Target Row, Check Col
 686:main.c        ****             // Start from Left
 687:main.c        ****             for (int i = 0; i < MAX_COLS; i++) {
 1623              		.loc 1 687 0
 1624 01d6 0023     		movs	r3, #0
 1625 01d8 7B61     		str	r3, [r7, #20]
 1626 01da 3BE0     		b	.L110
 1627              	.L116:
 688:main.c        ****                 if (map[targetRow][i] == 9) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 42


 1628              		.loc 1 688 0
 1629 01dc 2A49     		ldr	r1, .L127+8
 1630 01de 3A69     		ldr	r2, [r7, #16]
 1631 01e0 1346     		mov	r3, r2
 1632 01e2 DB00     		lsls	r3, r3, #3
 1633 01e4 1344     		add	r3, r3, r2
 1634 01e6 5B00     		lsls	r3, r3, #1
 1635 01e8 1344     		add	r3, r3, r2
 1636 01ea 7A69     		ldr	r2, [r7, #20]
 1637 01ec 1344     		add	r3, r3, r2
 1638 01ee 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1639 01f2 092B     		cmp	r3, #9
 1640 01f4 32D0     		beq	.L125
 689:main.c        ****                     break;    
 690:main.c        ****                 }
 691:main.c        ****                 if (map[targetRow][i] == 8) {
 1641              		.loc 1 691 0
 1642 01f6 2449     		ldr	r1, .L127+8
 1643 01f8 3A69     		ldr	r2, [r7, #16]
 1644 01fa 1346     		mov	r3, r2
 1645 01fc DB00     		lsls	r3, r3, #3
 1646 01fe 1344     		add	r3, r3, r2
 1647 0200 5B00     		lsls	r3, r3, #1
 1648 0202 1344     		add	r3, r3, r2
 1649 0204 7A69     		ldr	r2, [r7, #20]
 1650 0206 1344     		add	r3, r3, r2
 1651 0208 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1652 020c 082B     		cmp	r3, #8
 1653 020e 02D1     		bne	.L113
 692:main.c        ****                     pathCount++;    
 1654              		.loc 1 692 0
 1655 0210 7B6A     		ldr	r3, [r7, #36]
 1656 0212 0133     		adds	r3, r3, #1
 1657 0214 7B62     		str	r3, [r7, #36]
 1658              	.L113:
 693:main.c        ****                 }
 694:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1659              		.loc 1 694 0
 1660 0216 1C49     		ldr	r1, .L127+8
 1661 0218 3A69     		ldr	r2, [r7, #16]
 1662 021a 1346     		mov	r3, r2
 1663 021c DB00     		lsls	r3, r3, #3
 1664 021e 1344     		add	r3, r3, r2
 1665 0220 5B00     		lsls	r3, r3, #1
 1666 0222 1344     		add	r3, r3, r2
 1667 0224 7A69     		ldr	r2, [r7, #20]
 1668 0226 1344     		add	r3, r3, r2
 1669 0228 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1670 022c 002B     		cmp	r3, #0
 1671 022e 0CD0     		beq	.L114
 1672              		.loc 1 694 0 is_stmt 0 discriminator 1
 1673 0230 1549     		ldr	r1, .L127+8
 1674 0232 7A69     		ldr	r2, [r7, #20]
 1675 0234 1346     		mov	r3, r2
 1676 0236 DB00     		lsls	r3, r3, #3
 1677 0238 1344     		add	r3, r3, r2
 1678 023a 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 43


 1679 023c 1344     		add	r3, r3, r2
 1680 023e FA68     		ldr	r2, [r7, #12]
 1681 0240 1344     		add	r3, r3, r2
 1682 0242 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1683 0246 012B     		cmp	r3, #1
 1684 0248 01D1     		bne	.L115
 1685              	.L114:
 695:main.c        ****                     pathCount = 0;
 1686              		.loc 1 695 0 is_stmt 1
 1687 024a 0023     		movs	r3, #0
 1688 024c 7B62     		str	r3, [r7, #36]
 1689              	.L115:
 687:main.c        ****                 if (map[targetRow][i] == 9) {
 1690              		.loc 1 687 0 discriminator 2
 1691 024e 7B69     		ldr	r3, [r7, #20]
 1692 0250 0133     		adds	r3, r3, #1
 1693 0252 7B61     		str	r3, [r7, #20]
 1694              	.L110:
 687:main.c        ****                 if (map[targetRow][i] == 9) {
 1695              		.loc 1 687 0 is_stmt 0 discriminator 1
 1696 0254 7B69     		ldr	r3, [r7, #20]
 1697 0256 122B     		cmp	r3, #18
 1698 0258 C0DD     		ble	.L116
 1699              	.LBE9:
 696:main.c        ****                 }
 697:main.c        **** 
 698:main.c        ****             }
 699:main.c        ****             break;
 1700              		.loc 1 699 0 is_stmt 1
 1701 025a 00E0     		b	.L126
 1702              	.L125:
 1703              	.LBB10:
 689:main.c        ****                 }
 1704              		.loc 1 689 0
 1705 025c 00BF     		nop
 1706              	.L126:
 1707              	.LBE10:
 1708              		.loc 1 699 0
 1709 025e 00BF     		nop
 1710              	.L83:
 700:main.c        ****         
 701:main.c        ****     }
 702:main.c        ****     totalBlockSize = blockSize * pathCount;
 1711              		.loc 1 702 0
 1712 0260 786A     		ldr	r0, [r7, #36]
 1713 0262 FFF7FEFF 		bl	__aeabi_i2f
 1714 0266 0346     		mov	r3, r0
 1715 0268 7968     		ldr	r1, [r7, #4]	@ float
 1716 026a 1846     		mov	r0, r3
 1717 026c FFF7FEFF 		bl	__aeabi_fmul
 1718 0270 0346     		mov	r3, r0
 1719 0272 BB60     		str	r3, [r7, #8]	@ float
 703:main.c        ****     return totalBlockSize;
 1720              		.loc 1 703 0
 1721 0274 BB68     		ldr	r3, [r7, #8]	@ float
 704:main.c        **** }
 1722              		.loc 1 704 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 44


 1723 0276 1846     		mov	r0, r3
 1724 0278 2837     		adds	r7, r7, #40
 1725              		.cfi_def_cfa_offset 8
 1726 027a BD46     		mov	sp, r7
 1727              		.cfi_def_cfa_register 13
 1728              		@ sp needed
 1729 027c 80BD     		pop	{r7, pc}
 1730              	.L128:
 1731 027e 00BF     		.align	2
 1732              	.L127:
 1733 0280 00000000 		.word	food_list
 1734 0284 00000000 		.word	currentRobotOrientation
 1735 0288 00000000 		.word	map
 1736              		.cfi_endproc
 1737              	.LFE75:
 1738              		.size	CalculateDistanceToTravel, .-CalculateDistanceToTravel
 1739              		.section	.text.MoveToNextInstruction,"ax",%progbits
 1740              		.align	2
 1741              		.global	MoveToNextInstruction
 1742              		.thumb
 1743              		.thumb_func
 1744              		.type	MoveToNextInstruction, %function
 1745              	MoveToNextInstruction:
 1746              	.LFB76:
 705:main.c        **** 
 706:main.c        **** // get next instruction
 707:main.c        **** void MoveToNextInstruction() {
 1747              		.loc 1 707 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 1, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 1752 0000 80B4     		push	{r7}
 1753              		.cfi_def_cfa_offset 4
 1754              		.cfi_offset 7, -4
 1755 0002 00AF     		add	r7, sp, #0
 1756              		.cfi_def_cfa_register 7
 708:main.c        ****     instructionIndex++;
 1757              		.loc 1 708 0
 1758 0004 044B     		ldr	r3, .L130
 1759 0006 1B68     		ldr	r3, [r3]
 1760 0008 0133     		adds	r3, r3, #1
 1761 000a 034A     		ldr	r2, .L130
 1762 000c 1360     		str	r3, [r2]
 709:main.c        **** }
 1763              		.loc 1 709 0
 1764 000e 00BF     		nop
 1765 0010 BD46     		mov	sp, r7
 1766              		.cfi_def_cfa_register 13
 1767              		@ sp needed
 1768 0012 80BC     		pop	{r7}
 1769              		.cfi_restore 7
 1770              		.cfi_def_cfa_offset 0
 1771 0014 7047     		bx	lr
 1772              	.L131:
 1773 0016 00BF     		.align	2
 1774              	.L130:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 45


 1775 0018 00000000 		.word	instructionIndex
 1776              		.cfi_endproc
 1777              	.LFE76:
 1778              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 1779              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 1780              		.align	2
 1781              		.global	GetInstructionAtIndex
 1782              		.thumb
 1783              		.thumb_func
 1784              		.type	GetInstructionAtIndex, %function
 1785              	GetInstructionAtIndex:
 1786              	.LFB77:
 710:main.c        **** 
 711:main.c        **** 
 712:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 1787              		.loc 1 712 0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 32
 1790              		@ frame_needed = 1, uses_anonymous_args = 0
 1791              		@ link register save eliminated.
 1792 0000 90B4     		push	{r4, r7}
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 4, -8
 1795              		.cfi_offset 7, -4
 1796 0002 88B0     		sub	sp, sp, #32
 1797              		.cfi_def_cfa_offset 40
 1798 0004 00AF     		add	r7, sp, #0
 1799              		.cfi_def_cfa_register 7
 1800 0006 F860     		str	r0, [r7, #12]
 1801 0008 B960     		str	r1, [r7, #8]
 1802 000a 7A60     		str	r2, [r7, #4]
 1803 000c 3B60     		str	r3, [r7]
 1804              	.LBB11:
 713:main.c        ****     Instruction nextInstruction;
 714:main.c        ****     // input is list of instructions and robot will react accordingly
 715:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 1805              		.loc 1 715 0
 1806 000e 3B68     		ldr	r3, [r7]
 1807 0010 FB61     		str	r3, [r7, #28]
 1808 0012 36E0     		b	.L133
 1809              	.L136:
 716:main.c        ****         if(instructionList[i].direction != Skip) {
 1810              		.loc 1 716 0
 1811 0014 FA69     		ldr	r2, [r7, #28]
 1812 0016 1346     		mov	r3, r2
 1813 0018 5B00     		lsls	r3, r3, #1
 1814 001a 1344     		add	r3, r3, r2
 1815 001c 9B00     		lsls	r3, r3, #2
 1816 001e 1A46     		mov	r2, r3
 1817 0020 7B68     		ldr	r3, [r7, #4]
 1818 0022 1344     		add	r3, r3, r2
 1819 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1820 0026 062B     		cmp	r3, #6
 1821 0028 26D0     		beq	.L134
 717:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 1822              		.loc 1 717 0
 1823 002a FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 46


 1824 002c 1346     		mov	r3, r2
 1825 002e 5B00     		lsls	r3, r3, #1
 1826 0030 1344     		add	r3, r3, r2
 1827 0032 9B00     		lsls	r3, r3, #2
 1828 0034 1A46     		mov	r2, r3
 1829 0036 7B68     		ldr	r3, [r7, #4]
 1830 0038 1344     		add	r3, r3, r2
 1831 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1832 003c 3B74     		strb	r3, [r7, #16]
 718:main.c        ****             nextInstruction.ignoreL = instructionList[i].ignoreL;
 1833              		.loc 1 718 0
 1834 003e FA69     		ldr	r2, [r7, #28]
 1835 0040 1346     		mov	r3, r2
 1836 0042 5B00     		lsls	r3, r3, #1
 1837 0044 1344     		add	r3, r3, r2
 1838 0046 9B00     		lsls	r3, r3, #2
 1839 0048 1A46     		mov	r2, r3
 1840 004a 7B68     		ldr	r3, [r7, #4]
 1841 004c 1344     		add	r3, r3, r2
 1842 004e 5B68     		ldr	r3, [r3, #4]
 1843 0050 7B61     		str	r3, [r7, #20]
 719:main.c        ****             nextInstruction.ignoreR = instructionList[i].ignoreR;
 1844              		.loc 1 719 0
 1845 0052 FA69     		ldr	r2, [r7, #28]
 1846 0054 1346     		mov	r3, r2
 1847 0056 5B00     		lsls	r3, r3, #1
 1848 0058 1344     		add	r3, r3, r2
 1849 005a 9B00     		lsls	r3, r3, #2
 1850 005c 1A46     		mov	r2, r3
 1851 005e 7B68     		ldr	r3, [r7, #4]
 1852 0060 1344     		add	r3, r3, r2
 1853 0062 9B68     		ldr	r3, [r3, #8]
 1854 0064 BB61     		str	r3, [r7, #24]
 720:main.c        ****             return nextInstruction; // return next instruction
 1855              		.loc 1 720 0
 1856 0066 FB68     		ldr	r3, [r7, #12]
 1857 0068 1C46     		mov	r4, r3
 1858 006a 07F11003 		add	r3, r7, #16
 1859 006e 93E80700 		ldmia	r3, {r0, r1, r2}
 1860 0072 84E80700 		stmia	r4, {r0, r1, r2}
 1861 0076 10E0     		b	.L132
 1862              	.L134:
 721:main.c        ****         }
 722:main.c        ****         instructionIndex = i;
 1863              		.loc 1 722 0 discriminator 2
 1864 0078 FB69     		ldr	r3, [r7, #28]
 1865 007a 3B60     		str	r3, [r7]
 715:main.c        ****         if(instructionList[i].direction != Skip) {
 1866              		.loc 1 715 0 discriminator 2
 1867 007c FB69     		ldr	r3, [r7, #28]
 1868 007e 0133     		adds	r3, r3, #1
 1869 0080 FB61     		str	r3, [r7, #28]
 1870              	.L133:
 715:main.c        ****         if(instructionList[i].direction != Skip) {
 1871              		.loc 1 715 0 is_stmt 0 discriminator 1
 1872 0082 FA69     		ldr	r2, [r7, #28]
 1873 0084 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 47


 1874 0086 9A42     		cmp	r2, r3
 1875 0088 C4DB     		blt	.L136
 1876              	.LBE11:
 723:main.c        ****     }
 724:main.c        ****     return nextInstruction;
 1877              		.loc 1 724 0 is_stmt 1
 1878 008a FB68     		ldr	r3, [r7, #12]
 1879 008c 1C46     		mov	r4, r3
 1880 008e 07F11003 		add	r3, r7, #16
 1881 0092 93E80700 		ldmia	r3, {r0, r1, r2}
 1882 0096 84E80700 		stmia	r4, {r0, r1, r2}
 1883              	.L132:
 725:main.c        **** }
 1884              		.loc 1 725 0
 1885 009a F868     		ldr	r0, [r7, #12]
 1886 009c 2037     		adds	r7, r7, #32
 1887              		.cfi_def_cfa_offset 8
 1888 009e BD46     		mov	sp, r7
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 00a0 90BC     		pop	{r4, r7}
 1892              		.cfi_restore 7
 1893              		.cfi_restore 4
 1894              		.cfi_def_cfa_offset 0
 1895 00a2 7047     		bx	lr
 1896              		.cfi_endproc
 1897              	.LFE77:
 1898              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 1899              		.section	.text.SetRobotMovement,"ax",%progbits
 1900              		.align	2
 1901              		.global	SetRobotMovement
 1902              		.thumb
 1903              		.thumb_func
 1904              		.type	SetRobotMovement, %function
 1905              	SetRobotMovement:
 1906              	.LFB78:
 726:main.c        **** 
 727:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 728:main.c        **** void SetRobotMovement() {
 1907              		.loc 1 728 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 16
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911 0000 90B5     		push	{r4, r7, lr}
 1912              		.cfi_def_cfa_offset 12
 1913              		.cfi_offset 4, -12
 1914              		.cfi_offset 7, -8
 1915              		.cfi_offset 14, -4
 1916 0002 85B0     		sub	sp, sp, #20
 1917              		.cfi_def_cfa_offset 32
 1918 0004 00AF     		add	r7, sp, #0
 1919              		.cfi_def_cfa_register 7
 729:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 1920              		.loc 1 729 0
 1921 0006 294B     		ldr	r3, .L153
 1922 0008 1968     		ldr	r1, [r3]
 1923 000a 294B     		ldr	r3, .L153+4
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 48


 1924 000c 1A68     		ldr	r2, [r3]
 1925 000e 294B     		ldr	r3, .L153+8
 1926 0010 1B68     		ldr	r3, [r3]
 1927 0012 294C     		ldr	r4, .L153+12
 1928 0014 3846     		mov	r0, r7
 1929 0016 FFF7FEFF 		bl	GetInstructionAtIndex
 1930 001a 3B46     		mov	r3, r7
 1931 001c 93E80700 		ldmia	r3, {r0, r1, r2}
 1932 0020 84E80700 		stmia	r4, {r0, r1, r2}
 730:main.c        ****     previousDirection = currentDirection;
 1933              		.loc 1 730 0
 1934 0024 254B     		ldr	r3, .L153+16
 1935 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1936 0028 254B     		ldr	r3, .L153+20
 1937 002a 1A70     		strb	r2, [r3]
 731:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 1938              		.loc 1 731 0
 1939 002c FFF7FEFF 		bl	GetMovementAccordingToInstruction
 1940 0030 0346     		mov	r3, r0
 1941 0032 1A46     		mov	r2, r3
 1942 0034 214B     		ldr	r3, .L153+16
 1943 0036 1A70     		strb	r2, [r3]
 732:main.c        ****     // move robot depending on sensors
 733:main.c        ****     switch (currentDirection) {
 1944              		.loc 1 733 0
 1945 0038 204B     		ldr	r3, .L153+16
 1946 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1947 003c 092B     		cmp	r3, #9
 1948 003e 30D8     		bhi	.L151
 1949 0040 01A2     		adr	r2, .L141
 1950 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1951 0046 00BF     		.p2align 2
 1952              	.L141:
 1953 0048 71000000 		.word	.L140+1
 1954 004c 77000000 		.word	.L142+1
 1955 0050 7D000000 		.word	.L143+1
 1956 0054 89000000 		.word	.L144+1
 1957 0058 83000000 		.word	.L145+1
 1958 005c 8F000000 		.word	.L146+1
 1959 0060 A1000000 		.word	.L152+1
 1960 0064 A1000000 		.word	.L152+1
 1961 0068 95000000 		.word	.L149+1
 1962 006c 9B000000 		.word	.L150+1
 1963              		.p2align 1
 1964              	.L140:
 734:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 735:main.c        ****         case Forward:
 736:main.c        ****             moveForward();
 1965              		.loc 1 736 0
 1966 0070 FFF7FEFF 		bl	moveForward
 737:main.c        ****             break;
 1967              		.loc 1 737 0
 1968 0074 15E0     		b	.L139
 1969              	.L142:
 738:main.c        ****         case TurnRight:
 739:main.c        ****             turnRight();
 1970              		.loc 1 739 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 49


 1971 0076 FFF7FEFF 		bl	turnRight
 740:main.c        ****             break;
 1972              		.loc 1 740 0
 1973 007a 12E0     		b	.L139
 1974              	.L143:
 741:main.c        ****         case TurnLeft:
 742:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1975              		.loc 1 742 0
 1976 007c FFF7FEFF 		bl	turnLeft
 743:main.c        ****             break;
 1977              		.loc 1 743 0
 1978 0080 0FE0     		b	.L139
 1979              	.L145:
 744:main.c        ****         case AdjustToTheRight:
 745:main.c        ****             adjustRight();
 1980              		.loc 1 745 0
 1981 0082 FFF7FEFF 		bl	adjustRight
 746:main.c        ****             break;
 1982              		.loc 1 746 0
 1983 0086 0CE0     		b	.L139
 1984              	.L144:
 747:main.c        ****         case AdjustToTheLeft:
 748:main.c        ****             adjustLeft();
 1985              		.loc 1 748 0
 1986 0088 FFF7FEFF 		bl	adjustLeft
 749:main.c        ****             break;
 1987              		.loc 1 749 0
 1988 008c 09E0     		b	.L139
 1989              	.L146:
 750:main.c        ****         case Stop:
 751:main.c        ****             stopMoving();
 1990              		.loc 1 751 0
 1991 008e FFF7FEFF 		bl	stopMoving
 752:main.c        ****             break;
 1992              		.loc 1 752 0
 1993 0092 06E0     		b	.L139
 1994              	.L149:
 753:main.c        ****         case ForwardAfterTurn:
 754:main.c        ****             moveForward();
 1995              		.loc 1 754 0
 1996 0094 FFF7FEFF 		bl	moveForward
 755:main.c        ****             break;
 1997              		.loc 1 755 0
 1998 0098 03E0     		b	.L139
 1999              	.L150:
 756:main.c        ****         case Backward:
 757:main.c        ****             moveBackward();
 2000              		.loc 1 757 0
 2001 009a FFF7FEFF 		bl	moveBackward
 758:main.c        ****             break;
 2002              		.loc 1 758 0
 2003 009e 00E0     		b	.L139
 2004              	.L152:
 759:main.c        ****         case waitForTurn:
 760:main.c        ****             break;
 761:main.c        ****         /*case waitForLeftTurn:
 762:main.c        ****             moveForward();
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 50


 763:main.c        ****             break;
 764:main.c        ****         case waitForRightTurn:
 765:main.c        ****             moveForward();
 766:main.c        ****             break;*/
 767:main.c        ****         case Unknown:
 768:main.c        ****             // UNKNOWN CONFIGURATION
 769:main.c        ****             break;  
 2005              		.loc 1 769 0
 2006 00a0 00BF     		nop
 2007              	.L139:
 2008              	.L151:
 770:main.c        ****     }
 771:main.c        **** }...
 2009              		.loc 1 771 0
 2010 00a2 00BF     		nop
 2011 00a4 1437     		adds	r7, r7, #20
 2012              		.cfi_def_cfa_offset 12
 2013 00a6 BD46     		mov	sp, r7
 2014              		.cfi_def_cfa_register 13
 2015              		@ sp needed
 2016 00a8 90BD     		pop	{r4, r7, pc}
 2017              	.L154:
 2018 00aa 00BF     		.align	2
 2019              	.L153:
 2020 00ac 00000000 		.word	numSteps
 2021 00b0 00000000 		.word	instructionList
 2022 00b4 00000000 		.word	instructionIndex
 2023 00b8 00000000 		.word	currentInstruction
 2024 00bc 00000000 		.word	currentDirection
 2025 00c0 00000000 		.word	previousDirection
 2026              		.cfi_endproc
 2027              	.LFE78:
 2028              		.size	SetRobotMovement, .-SetRobotMovement
 2029              		.text
 2030              	.Letext0:
 2031              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2032              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2033              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2034              		.file 5 "vars.h"
 2035              		.file 6 "pathfinding.h"
 2036              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2037              		.file 8 "map.h"
 2038              		.section	.debug_info,"",%progbits
 2039              	.Ldebug_info0:
 2040 0000 D3080000 		.4byte	0x8d3
 2041 0004 0400     		.2byte	0x4
 2042 0006 00000000 		.4byte	.Ldebug_abbrev0
 2043 000a 04       		.byte	0x4
 2044 000b 01       		.uleb128 0x1
 2045 000c 82000000 		.4byte	.LASF135
 2046 0010 0C       		.byte	0xc
 2047 0011 30000000 		.4byte	.LASF136
 2048 0015 1E030000 		.4byte	.LASF137
 2049 0019 60000000 		.4byte	.Ldebug_ranges0+0x60
 2050 001d 00000000 		.4byte	0
 2051 0021 00000000 		.4byte	.Ldebug_line0
 2052 0025 02       		.uleb128 0x2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 51


 2053 0026 01       		.byte	0x1
 2054 0027 06       		.byte	0x6
 2055 0028 AA060000 		.4byte	.LASF0
 2056 002c 02       		.uleb128 0x2
 2057 002d 01       		.byte	0x1
 2058 002e 08       		.byte	0x8
 2059 002f 00060000 		.4byte	.LASF1
 2060 0033 02       		.uleb128 0x2
 2061 0034 02       		.byte	0x2
 2062 0035 05       		.byte	0x5
 2063 0036 04050000 		.4byte	.LASF2
 2064 003a 02       		.uleb128 0x2
 2065 003b 02       		.byte	0x2
 2066 003c 07       		.byte	0x7
 2067 003d C1060000 		.4byte	.LASF3
 2068 0041 03       		.uleb128 0x3
 2069 0042 55000000 		.4byte	.LASF12
 2070 0046 02       		.byte	0x2
 2071 0047 3F       		.byte	0x3f
 2072 0048 4C000000 		.4byte	0x4c
 2073 004c 02       		.uleb128 0x2
 2074 004d 04       		.byte	0x4
 2075 004e 05       		.byte	0x5
 2076 004f 26050000 		.4byte	.LASF4
 2077 0053 02       		.uleb128 0x2
 2078 0054 04       		.byte	0x4
 2079 0055 07       		.byte	0x7
 2080 0056 BC050000 		.4byte	.LASF5
 2081 005a 02       		.uleb128 0x2
 2082 005b 08       		.byte	0x8
 2083 005c 05       		.byte	0x5
 2084 005d F8030000 		.4byte	.LASF6
 2085 0061 02       		.uleb128 0x2
 2086 0062 08       		.byte	0x8
 2087 0063 07       		.byte	0x7
 2088 0064 3F020000 		.4byte	.LASF7
 2089 0068 04       		.uleb128 0x4
 2090 0069 04       		.byte	0x4
 2091 006a 05       		.byte	0x5
 2092 006b 696E7400 		.ascii	"int\000"
 2093 006f 02       		.uleb128 0x2
 2094 0070 04       		.byte	0x4
 2095 0071 07       		.byte	0x7
 2096 0072 48000000 		.4byte	.LASF8
 2097 0076 02       		.uleb128 0x2
 2098 0077 08       		.byte	0x8
 2099 0078 04       		.byte	0x4
 2100 0079 C8040000 		.4byte	.LASF9
 2101 007d 02       		.uleb128 0x2
 2102 007e 04       		.byte	0x4
 2103 007f 07       		.byte	0x7
 2104 0080 B3050000 		.4byte	.LASF10
 2105 0084 02       		.uleb128 0x2
 2106 0085 01       		.byte	0x1
 2107 0086 08       		.byte	0x8
 2108 0087 19030000 		.4byte	.LASF11
 2109 008b 03       		.uleb128 0x3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 52


 2110 008c D9050000 		.4byte	.LASF13
 2111 0090 03       		.byte	0x3
 2112 0091 2C       		.byte	0x2c
 2113 0092 41000000 		.4byte	0x41
 2114 0096 05       		.uleb128 0x5
 2115 0097 17070000 		.4byte	.LASF14
 2116 009b 04       		.byte	0x4
 2117 009c E701     		.2byte	0x1e7
 2118 009e 2C000000 		.4byte	0x2c
 2119 00a2 05       		.uleb128 0x5
 2120 00a3 99030000 		.4byte	.LASF15
 2121 00a7 04       		.byte	0x4
 2122 00a8 E801     		.2byte	0x1e8
 2123 00aa 3A000000 		.4byte	0x3a
 2124 00ae 05       		.uleb128 0x5
 2125 00af 78040000 		.4byte	.LASF16
 2126 00b3 04       		.byte	0x4
 2127 00b4 E901     		.2byte	0x1e9
 2128 00b6 53000000 		.4byte	0x53
 2129 00ba 05       		.uleb128 0x5
 2130 00bb A0030000 		.4byte	.LASF17
 2131 00bf 04       		.byte	0x4
 2132 00c0 EA01     		.2byte	0x1ea
 2133 00c2 25000000 		.4byte	0x25
 2134 00c6 05       		.uleb128 0x5
 2135 00c7 5F000000 		.4byte	.LASF18
 2136 00cb 04       		.byte	0x4
 2137 00cc EB01     		.2byte	0x1eb
 2138 00ce 33000000 		.4byte	0x33
 2139 00d2 02       		.uleb128 0x2
 2140 00d3 04       		.byte	0x4
 2141 00d4 04       		.byte	0x4
 2142 00d5 07020000 		.4byte	.LASF19
 2143 00d9 02       		.uleb128 0x2
 2144 00da 08       		.byte	0x8
 2145 00db 04       		.byte	0x4
 2146 00dc 1D070000 		.4byte	.LASF20
 2147 00e0 06       		.uleb128 0x6
 2148 00e1 9A040000 		.4byte	.LASF45
 2149 00e5 20       		.byte	0x20
 2150 00e6 05       		.byte	0x5
 2151 00e7 28       		.byte	0x28
 2152 00e8 B9010000 		.4byte	0x1b9
 2153 00ec 07       		.uleb128 0x7
 2154 00ed A4040000 		.4byte	.LASF21
 2155 00f1 05       		.byte	0x5
 2156 00f2 2A       		.byte	0x2a
 2157 00f3 BA000000 		.4byte	0xba
 2158 00f7 00       		.byte	0
 2159 00f8 07       		.uleb128 0x7
 2160 00f9 39020000 		.4byte	.LASF22
 2161 00fd 05       		.byte	0x5
 2162 00fe 2B       		.byte	0x2b
 2163 00ff 96000000 		.4byte	0x96
 2164 0103 01       		.byte	0x1
 2165 0104 07       		.uleb128 0x7
 2166 0105 E1050000 		.4byte	.LASF23
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 53


 2167 0109 05       		.byte	0x5
 2168 010a 2C       		.byte	0x2c
 2169 010b C6000000 		.4byte	0xc6
 2170 010f 02       		.byte	0x2
 2171 0110 07       		.uleb128 0x7
 2172 0111 03030000 		.4byte	.LASF24
 2173 0115 05       		.byte	0x5
 2174 0116 2D       		.byte	0x2d
 2175 0117 C6000000 		.4byte	0xc6
 2176 011b 04       		.byte	0x4
 2177 011c 07       		.uleb128 0x7
 2178 011d D4060000 		.4byte	.LASF25
 2179 0121 05       		.byte	0x5
 2180 0122 2E       		.byte	0x2e
 2181 0123 C6000000 		.4byte	0xc6
 2182 0127 06       		.byte	0x6
 2183 0128 07       		.uleb128 0x7
 2184 0129 3E070000 		.4byte	.LASF26
 2185 012d 05       		.byte	0x5
 2186 012e 2F       		.byte	0x2f
 2187 012f C6000000 		.4byte	0xc6
 2188 0133 08       		.byte	0x8
 2189 0134 07       		.uleb128 0x7
 2190 0135 4C040000 		.4byte	.LASF27
 2191 0139 05       		.byte	0x5
 2192 013a 30       		.byte	0x30
 2193 013b C6000000 		.4byte	0xc6
 2194 013f 0A       		.byte	0xa
 2195 0140 07       		.uleb128 0x7
 2196 0141 6F030000 		.4byte	.LASF28
 2197 0145 05       		.byte	0x5
 2198 0146 31       		.byte	0x31
 2199 0147 C6000000 		.4byte	0xc6
 2200 014b 0C       		.byte	0xc
 2201 014c 07       		.uleb128 0x7
 2202 014d A9040000 		.4byte	.LASF29
 2203 0151 05       		.byte	0x5
 2204 0152 32       		.byte	0x32
 2205 0153 C6000000 		.4byte	0xc6
 2206 0157 0E       		.byte	0xe
 2207 0158 07       		.uleb128 0x7
 2208 0159 06040000 		.4byte	.LASF30
 2209 015d 05       		.byte	0x5
 2210 015e 33       		.byte	0x33
 2211 015f C6000000 		.4byte	0xc6
 2212 0163 10       		.byte	0x10
 2213 0164 07       		.uleb128 0x7
 2214 0165 9A050000 		.4byte	.LASF31
 2215 0169 05       		.byte	0x5
 2216 016a 34       		.byte	0x34
 2217 016b C6000000 		.4byte	0xc6
 2218 016f 12       		.byte	0x12
 2219 0170 07       		.uleb128 0x7
 2220 0171 5E070000 		.4byte	.LASF32
 2221 0175 05       		.byte	0x5
 2222 0176 35       		.byte	0x35
 2223 0177 C6000000 		.4byte	0xc6
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 54


 2224 017b 14       		.byte	0x14
 2225 017c 07       		.uleb128 0x7
 2226 017d B0030000 		.4byte	.LASF33
 2227 0181 05       		.byte	0x5
 2228 0182 36       		.byte	0x36
 2229 0183 C6000000 		.4byte	0xc6
 2230 0187 16       		.byte	0x16
 2231 0188 07       		.uleb128 0x7
 2232 0189 2A010000 		.4byte	.LASF34
 2233 018d 05       		.byte	0x5
 2234 018e 37       		.byte	0x37
 2235 018f C6000000 		.4byte	0xc6
 2236 0193 18       		.byte	0x18
 2237 0194 07       		.uleb128 0x7
 2238 0195 60050000 		.4byte	.LASF35
 2239 0199 05       		.byte	0x5
 2240 019a 38       		.byte	0x38
 2241 019b C6000000 		.4byte	0xc6
 2242 019f 1A       		.byte	0x1a
 2243 01a0 07       		.uleb128 0x7
 2244 01a1 43040000 		.4byte	.LASF36
 2245 01a5 05       		.byte	0x5
 2246 01a6 39       		.byte	0x39
 2247 01a7 C6000000 		.4byte	0xc6
 2248 01ab 1C       		.byte	0x1c
 2249 01ac 07       		.uleb128 0x7
 2250 01ad E2010000 		.4byte	.LASF37
 2251 01b1 05       		.byte	0x5
 2252 01b2 3A       		.byte	0x3a
 2253 01b3 C6000000 		.4byte	0xc6
 2254 01b7 1E       		.byte	0x1e
 2255 01b8 00       		.byte	0
 2256 01b9 08       		.uleb128 0x8
 2257 01ba 1B000000 		.4byte	.LASF50
 2258 01be 01       		.byte	0x1
 2259 01bf 2C000000 		.4byte	0x2c
 2260 01c3 06       		.byte	0x6
 2261 01c4 0D       		.byte	0xd
 2262 01c5 F4010000 		.4byte	0x1f4
 2263 01c9 09       		.uleb128 0x9
 2264 01ca 94060000 		.4byte	.LASF38
 2265 01ce 00       		.byte	0
 2266 01cf 09       		.uleb128 0x9
 2267 01d0 E8030000 		.4byte	.LASF39
 2268 01d4 01       		.byte	0x1
 2269 01d5 09       		.uleb128 0x9
 2270 01d6 7F040000 		.4byte	.LASF40
 2271 01da 02       		.byte	0x2
 2272 01db 09       		.uleb128 0x9
 2273 01dc 31040000 		.4byte	.LASF41
 2274 01e0 03       		.byte	0x3
 2275 01e1 09       		.uleb128 0x9
 2276 01e2 96020000 		.4byte	.LASF42
 2277 01e6 04       		.byte	0x4
 2278 01e7 09       		.uleb128 0x9
 2279 01e8 EA020000 		.4byte	.LASF43
 2280 01ec 05       		.byte	0x5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 55


 2281 01ed 09       		.uleb128 0x9
 2282 01ee 81060000 		.4byte	.LASF44
 2283 01f2 06       		.byte	0x6
 2284 01f3 00       		.byte	0
 2285 01f4 06       		.uleb128 0x6
 2286 01f5 56020000 		.4byte	.LASF46
 2287 01f9 0C       		.byte	0xc
 2288 01fa 06       		.byte	0x6
 2289 01fb 0E       		.byte	0xe
 2290 01fc 25020000 		.4byte	0x225
 2291 0200 07       		.uleb128 0x7
 2292 0201 00000000 		.4byte	.LASF47
 2293 0205 06       		.byte	0x6
 2294 0206 0F       		.byte	0xf
 2295 0207 B9010000 		.4byte	0x1b9
 2296 020b 00       		.byte	0
 2297 020c 07       		.uleb128 0x7
 2298 020d 67070000 		.4byte	.LASF48
 2299 0211 06       		.byte	0x6
 2300 0212 10       		.byte	0x10
 2301 0213 68000000 		.4byte	0x68
 2302 0217 04       		.byte	0x4
 2303 0218 07       		.uleb128 0x7
 2304 0219 6F070000 		.4byte	.LASF49
 2305 021d 06       		.byte	0x6
 2306 021e 11       		.byte	0x11
 2307 021f 68000000 		.4byte	0x68
 2308 0223 08       		.byte	0x8
 2309 0224 00       		.byte	0
 2310 0225 03       		.uleb128 0x3
 2311 0226 56020000 		.4byte	.LASF46
 2312 022a 06       		.byte	0x6
 2313 022b 12       		.byte	0x12
 2314 022c F4010000 		.4byte	0x1f4
 2315 0230 08       		.uleb128 0x8
 2316 0231 7E050000 		.4byte	.LASF51
 2317 0235 01       		.byte	0x1
 2318 0236 2C000000 		.4byte	0x2c
 2319 023a 06       		.byte	0x6
 2320 023b 14       		.byte	0x14
 2321 023c 58020000 		.4byte	0x258
 2322 0240 0A       		.uleb128 0xa
 2323 0241 557000   		.ascii	"Up\000"
 2324 0244 00       		.byte	0
 2325 0245 09       		.uleb128 0x9
 2326 0246 8F050000 		.4byte	.LASF52
 2327 024a 01       		.byte	0x1
 2328 024b 09       		.uleb128 0x9
 2329 024c BD030000 		.4byte	.LASF53
 2330 0250 02       		.byte	0x2
 2331 0251 09       		.uleb128 0x9
 2332 0252 94050000 		.4byte	.LASF54
 2333 0256 03       		.byte	0x3
 2334 0257 00       		.byte	0
 2335 0258 08       		.uleb128 0x8
 2336 0259 F2050000 		.4byte	.LASF55
 2337 025d 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 56


 2338 025e 2C000000 		.4byte	0x2c
 2339 0262 01       		.byte	0x1
 2340 0263 18       		.byte	0x18
 2341 0264 A5020000 		.4byte	0x2a5
 2342 0268 09       		.uleb128 0x9
 2343 0269 46050000 		.4byte	.LASF56
 2344 026d 00       		.byte	0
 2345 026e 09       		.uleb128 0x9
 2346 026f 90040000 		.4byte	.LASF57
 2347 0273 01       		.byte	0x1
 2348 0274 09       		.uleb128 0x9
 2349 0275 5E040000 		.4byte	.LASF58
 2350 0279 02       		.byte	0x2
 2351 027a 09       		.uleb128 0x9
 2352 027b FE060000 		.4byte	.LASF59
 2353 027f 03       		.byte	0x3
 2354 0280 09       		.uleb128 0x9
 2355 0281 3E060000 		.4byte	.LASF60
 2356 0285 04       		.byte	0x4
 2357 0286 09       		.uleb128 0x9
 2358 0287 4F060000 		.4byte	.LASF61
 2359 028b 05       		.byte	0x5
 2360 028c 09       		.uleb128 0x9
 2361 028d 70040000 		.4byte	.LASF62
 2362 0291 06       		.byte	0x6
 2363 0292 09       		.uleb128 0x9
 2364 0293 F7020000 		.4byte	.LASF63
 2365 0297 07       		.byte	0x7
 2366 0298 09       		.uleb128 0x9
 2367 0299 0A000000 		.4byte	.LASF64
 2368 029d 08       		.byte	0x8
 2369 029e 09       		.uleb128 0x9
 2370 029f 0E070000 		.4byte	.LASF65
 2371 02a3 09       		.byte	0x9
 2372 02a4 00       		.byte	0
 2373 02a5 0B       		.uleb128 0xb
 2374 02a6 C2030000 		.4byte	.LASF74
 2375 02aa 01       		.byte	0x1
 2376 02ab 38       		.byte	0x38
 2377 02ac 00000000 		.4byte	.LFB64
 2378 02b0 EC000000 		.4byte	.LFE64-.LFB64
 2379 02b4 01       		.uleb128 0x1
 2380 02b5 9C       		.byte	0x9c
 2381 02b6 D3020000 		.4byte	0x2d3
 2382 02ba 0C       		.uleb128 0xc
 2383 02bb 50000000 		.4byte	.LBB2
 2384 02bf 62000000 		.4byte	.LBE2-.LBB2
 2385 02c3 0D       		.uleb128 0xd
 2386 02c4 37040000 		.4byte	.LASF72
 2387 02c8 01       		.byte	0x1
 2388 02c9 45       		.byte	0x45
 2389 02ca D2000000 		.4byte	0xd2
 2390 02ce 02       		.uleb128 0x2
 2391 02cf 91       		.byte	0x91
 2392 02d0 6C       		.sleb128 -20
 2393 02d1 00       		.byte	0
 2394 02d2 00       		.byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 57


 2395 02d3 0E       		.uleb128 0xe
 2396 02d4 1A050000 		.4byte	.LASF66
 2397 02d8 01       		.byte	0x1
 2398 02d9 50       		.byte	0x50
 2399 02da 00000000 		.4byte	.LFB65
 2400 02de 18000000 		.4byte	.LFE65-.LFB65
 2401 02e2 01       		.uleb128 0x1
 2402 02e3 9C       		.byte	0x9c
 2403 02e4 0E       		.uleb128 0xe
 2404 02e5 0E050000 		.4byte	.LASF67
 2405 02e9 01       		.byte	0x1
 2406 02ea 56       		.byte	0x56
 2407 02eb 00000000 		.4byte	.LFB66
 2408 02ef 18000000 		.4byte	.LFE66-.LFB66
 2409 02f3 01       		.uleb128 0x1
 2410 02f4 9C       		.byte	0x9c
 2411 02f5 0E       		.uleb128 0xe
 2412 02f6 9E060000 		.4byte	.LASF68
 2413 02fa 01       		.byte	0x1
 2414 02fb 5C       		.byte	0x5c
 2415 02fc 00000000 		.4byte	.LFB67
 2416 0300 18000000 		.4byte	.LFE67-.LFB67
 2417 0304 01       		.uleb128 0x1
 2418 0305 9C       		.byte	0x9c
 2419 0306 0E       		.uleb128 0xe
 2420 0307 10010000 		.4byte	.LASF69
 2421 030b 01       		.byte	0x1
 2422 030c 62       		.byte	0x62
 2423 030d 00000000 		.4byte	.LFB68
 2424 0311 18000000 		.4byte	.LFE68-.LFB68
 2425 0315 01       		.uleb128 0x1
 2426 0316 9C       		.byte	0x9c
 2427 0317 0F       		.uleb128 0xf
 2428 0318 7F020000 		.4byte	.LASF70
 2429 031c 01       		.byte	0x1
 2430 031d 68       		.byte	0x68
 2431 031e 00000000 		.4byte	.LFB69
 2432 0322 38000000 		.4byte	.LFE69-.LFB69
 2433 0326 01       		.uleb128 0x1
 2434 0327 9C       		.byte	0x9c
 2435 0328 10       		.uleb128 0x10
 2436 0329 E6060000 		.4byte	.LASF71
 2437 032d 01       		.byte	0x1
 2438 032e 74       		.byte	0x74
 2439 032f 68000000 		.4byte	0x68
 2440 0333 00000000 		.4byte	.LFB70
 2441 0337 C0000000 		.4byte	.LFE70-.LFB70
 2442 033b 01       		.uleb128 0x1
 2443 033c 9C       		.byte	0x9c
 2444 033d 11       		.uleb128 0x11
 2445 033e C4020000 		.4byte	.LASF78
 2446 0342 01       		.byte	0x1
 2447 0343 A2       		.byte	0xa2
 2448 0344 C6000000 		.4byte	0xc6
 2449 0348 00000000 		.4byte	.LFB71
 2450 034c 54000000 		.4byte	.LFE71-.LFB71
 2451 0350 01       		.uleb128 0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 58


 2452 0351 9C       		.byte	0x9c
 2453 0352 81030000 		.4byte	0x381
 2454 0356 12       		.uleb128 0x12
 2455 0357 33020000 		.4byte	.LASF80
 2456 035b 01       		.byte	0x1
 2457 035c A2       		.byte	0xa2
 2458 035d A2000000 		.4byte	0xa2
 2459 0361 02       		.uleb128 0x2
 2460 0362 91       		.byte	0x91
 2461 0363 66       		.sleb128 -26
 2462 0364 13       		.uleb128 0x13
 2463 0365 63707300 		.ascii	"cps\000"
 2464 0369 01       		.byte	0x1
 2465 036a A4       		.byte	0xa4
 2466 036b D2000000 		.4byte	0xd2
 2467 036f 02       		.uleb128 0x2
 2468 0370 91       		.byte	0x91
 2469 0371 6C       		.sleb128 -20
 2470 0372 13       		.uleb128 0x13
 2471 0373 72706D00 		.ascii	"rpm\000"
 2472 0377 01       		.byte	0x1
 2473 0378 A5       		.byte	0xa5
 2474 0379 C6000000 		.4byte	0xc6
 2475 037d 02       		.uleb128 0x2
 2476 037e 91       		.byte	0x91
 2477 037f 6A       		.sleb128 -22
 2478 0380 00       		.byte	0
 2479 0381 14       		.uleb128 0x14
 2480 0382 D1010000 		.4byte	.LASF86
 2481 0386 01       		.byte	0x1
 2482 0387 AD       		.byte	0xad
 2483 0388 00000000 		.4byte	.LFB72
 2484 038c 34000000 		.4byte	.LFE72-.LFB72
 2485 0390 01       		.uleb128 0x1
 2486 0391 9C       		.byte	0x9c
 2487 0392 15       		.uleb128 0x15
 2488 0393 A1010000 		.4byte	.LASF73
 2489 0397 01       		.byte	0x1
 2490 0398 A501     		.2byte	0x1a5
 2491 039a 58020000 		.4byte	0x258
 2492 039e 00000000 		.4byte	.LFB73
 2493 03a2 84000000 		.4byte	.LFE73-.LFB73
 2494 03a6 01       		.uleb128 0x1
 2495 03a7 9C       		.byte	0x9c
 2496 03a8 16       		.uleb128 0x16
 2497 03a9 63010000 		.4byte	.LASF75
 2498 03ad 01       		.byte	0x1
 2499 03ae C701     		.2byte	0x1c7
 2500 03b0 58020000 		.4byte	0x258
 2501 03b4 00000000 		.4byte	.LFB74
 2502 03b8 44020000 		.4byte	.LFE74-.LFB74
 2503 03bc 01       		.uleb128 0x1
 2504 03bd 9C       		.byte	0x9c
 2505 03be E1030000 		.4byte	0x3e1
 2506 03c2 17       		.uleb128 0x17
 2507 03c3 37000000 		.4byte	.LASF76
 2508 03c7 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 59


 2509 03c8 C801     		.2byte	0x1c8
 2510 03ca D2000000 		.4byte	0xd2
 2511 03ce 02       		.uleb128 0x2
 2512 03cf 91       		.byte	0x91
 2513 03d0 74       		.sleb128 -12
 2514 03d1 17       		.uleb128 0x17
 2515 03d2 0D020000 		.4byte	.LASF77
 2516 03d6 01       		.byte	0x1
 2517 03d7 D701     		.2byte	0x1d7
 2518 03d9 B9010000 		.4byte	0x1b9
 2519 03dd 02       		.uleb128 0x2
 2520 03de 91       		.byte	0x91
 2521 03df 73       		.sleb128 -13
 2522 03e0 00       		.byte	0
 2523 03e1 18       		.uleb128 0x18
 2524 03e2 24060000 		.4byte	.LASF79
 2525 03e6 01       		.byte	0x1
 2526 03e7 7002     		.2byte	0x270
 2527 03e9 D2000000 		.4byte	0xd2
 2528 03ed 00000000 		.4byte	.LFB75
 2529 03f1 8C020000 		.4byte	.LFE75-.LFB75
 2530 03f5 01       		.uleb128 0x1
 2531 03f6 9C       		.byte	0x9c
 2532 03f7 9F040000 		.4byte	0x49f
 2533 03fb 19       		.uleb128 0x19
 2534 03fc D3020000 		.4byte	.LASF81
 2535 0400 01       		.byte	0x1
 2536 0401 7002     		.2byte	0x270
 2537 0403 D2000000 		.4byte	0xd2
 2538 0407 02       		.uleb128 0x2
 2539 0408 91       		.byte	0x91
 2540 0409 54       		.sleb128 -44
 2541 040a 17       		.uleb128 0x17
 2542 040b 2F070000 		.4byte	.LASF82
 2543 040f 01       		.byte	0x1
 2544 0410 7102     		.2byte	0x271
 2545 0412 D2000000 		.4byte	0xd2
 2546 0416 02       		.uleb128 0x2
 2547 0417 91       		.byte	0x91
 2548 0418 58       		.sleb128 -40
 2549 0419 17       		.uleb128 0x17
 2550 041a 59010000 		.4byte	.LASF83
 2551 041e 01       		.byte	0x1
 2552 041f 7402     		.2byte	0x274
 2553 0421 68000000 		.4byte	0x68
 2554 0425 02       		.uleb128 0x2
 2555 0426 91       		.byte	0x91
 2556 0427 60       		.sleb128 -32
 2557 0428 17       		.uleb128 0x17
 2558 0429 EF010000 		.4byte	.LASF84
 2559 042d 01       		.byte	0x1
 2560 042e 7502     		.2byte	0x275
 2561 0430 68000000 		.4byte	0x68
 2562 0434 02       		.uleb128 0x2
 2563 0435 91       		.byte	0x91
 2564 0436 5C       		.sleb128 -36
 2565 0437 17       		.uleb128 0x17
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 60


 2566 0438 CD030000 		.4byte	.LASF85
 2567 043c 01       		.byte	0x1
 2568 043d 7702     		.2byte	0x277
 2569 043f 68000000 		.4byte	0x68
 2570 0443 02       		.uleb128 0x2
 2571 0444 91       		.byte	0x91
 2572 0445 74       		.sleb128 -12
 2573 0446 1A       		.uleb128 0x1a
 2574 0447 00000000 		.4byte	.Ldebug_ranges0+0
 2575 044b 5D040000 		.4byte	0x45d
 2576 044f 1B       		.uleb128 0x1b
 2577 0450 6900     		.ascii	"i\000"
 2578 0452 01       		.byte	0x1
 2579 0453 8102     		.2byte	0x281
 2580 0455 68000000 		.4byte	0x68
 2581 0459 02       		.uleb128 0x2
 2582 045a 91       		.byte	0x91
 2583 045b 70       		.sleb128 -16
 2584 045c 00       		.byte	0
 2585 045d 1A       		.uleb128 0x1a
 2586 045e 18000000 		.4byte	.Ldebug_ranges0+0x18
 2587 0462 74040000 		.4byte	0x474
 2588 0466 1B       		.uleb128 0x1b
 2589 0467 6900     		.ascii	"i\000"
 2590 0469 01       		.byte	0x1
 2591 046a 9002     		.2byte	0x290
 2592 046c 68000000 		.4byte	0x68
 2593 0470 02       		.uleb128 0x2
 2594 0471 91       		.byte	0x91
 2595 0472 6C       		.sleb128 -20
 2596 0473 00       		.byte	0
 2597 0474 1A       		.uleb128 0x1a
 2598 0475 30000000 		.4byte	.Ldebug_ranges0+0x30
 2599 0479 8B040000 		.4byte	0x48b
 2600 047d 1B       		.uleb128 0x1b
 2601 047e 6900     		.ascii	"i\000"
 2602 0480 01       		.byte	0x1
 2603 0481 9F02     		.2byte	0x29f
 2604 0483 68000000 		.4byte	0x68
 2605 0487 02       		.uleb128 0x2
 2606 0488 91       		.byte	0x91
 2607 0489 68       		.sleb128 -24
 2608 048a 00       		.byte	0
 2609 048b 1C       		.uleb128 0x1c
 2610 048c 48000000 		.4byte	.Ldebug_ranges0+0x48
 2611 0490 1B       		.uleb128 0x1b
 2612 0491 6900     		.ascii	"i\000"
 2613 0493 01       		.byte	0x1
 2614 0494 AF02     		.2byte	0x2af
 2615 0496 68000000 		.4byte	0x68
 2616 049a 02       		.uleb128 0x2
 2617 049b 91       		.byte	0x91
 2618 049c 64       		.sleb128 -28
 2619 049d 00       		.byte	0
 2620 049e 00       		.byte	0
 2621 049f 1D       		.uleb128 0x1d
 2622 04a0 68050000 		.4byte	.LASF87
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 61


 2623 04a4 01       		.byte	0x1
 2624 04a5 C302     		.2byte	0x2c3
 2625 04a7 00000000 		.4byte	.LFB76
 2626 04ab 1C000000 		.4byte	.LFE76-.LFB76
 2627 04af 01       		.uleb128 0x1
 2628 04b0 9C       		.byte	0x9c
 2629 04b1 1E       		.uleb128 0x1e
 2630 04b2 54060000 		.4byte	.LASF88
 2631 04b6 01       		.byte	0x1
 2632 04b7 C802     		.2byte	0x2c8
 2633 04b9 25020000 		.4byte	0x225
 2634 04bd 00000000 		.4byte	.LFB77
 2635 04c1 A4000000 		.4byte	.LFE77-.LFB77
 2636 04c5 01       		.uleb128 0x1
 2637 04c6 9C       		.byte	0x9c
 2638 04c7 1F050000 		.4byte	0x51f
 2639 04cb 19       		.uleb128 0x19
 2640 04cc 50010000 		.4byte	.LASF89
 2641 04d0 01       		.byte	0x1
 2642 04d1 C802     		.2byte	0x2c8
 2643 04d3 68000000 		.4byte	0x68
 2644 04d7 02       		.uleb128 0x2
 2645 04d8 91       		.byte	0x91
 2646 04d9 60       		.sleb128 -32
 2647 04da 19       		.uleb128 0x19
 2648 04db 78030000 		.4byte	.LASF90
 2649 04df 01       		.byte	0x1
 2650 04e0 C802     		.2byte	0x2c8
 2651 04e2 1F050000 		.4byte	0x51f
 2652 04e6 02       		.uleb128 0x2
 2653 04e7 91       		.byte	0x91
 2654 04e8 5C       		.sleb128 -36
 2655 04e9 19       		.uleb128 0x19
 2656 04ea 88030000 		.4byte	.LASF91
 2657 04ee 01       		.byte	0x1
 2658 04ef C802     		.2byte	0x2c8
 2659 04f1 68000000 		.4byte	0x68
 2660 04f5 02       		.uleb128 0x2
 2661 04f6 91       		.byte	0x91
 2662 04f7 58       		.sleb128 -40
 2663 04f8 17       		.uleb128 0x17
 2664 04f9 72000000 		.4byte	.LASF92
 2665 04fd 01       		.byte	0x1
 2666 04fe C902     		.2byte	0x2c9
 2667 0500 25020000 		.4byte	0x225
 2668 0504 02       		.uleb128 0x2
 2669 0505 91       		.byte	0x91
 2670 0506 68       		.sleb128 -24
 2671 0507 0C       		.uleb128 0xc
 2672 0508 0E000000 		.4byte	.LBB11
 2673 050c 7C000000 		.4byte	.LBE11-.LBB11
 2674 0510 1B       		.uleb128 0x1b
 2675 0511 6900     		.ascii	"i\000"
 2676 0513 01       		.byte	0x1
 2677 0514 CB02     		.2byte	0x2cb
 2678 0516 68000000 		.4byte	0x68
 2679 051a 02       		.uleb128 0x2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 62


 2680 051b 91       		.byte	0x91
 2681 051c 74       		.sleb128 -12
 2682 051d 00       		.byte	0
 2683 051e 00       		.byte	0
 2684 051f 1F       		.uleb128 0x1f
 2685 0520 04       		.byte	0x4
 2686 0521 25020000 		.4byte	0x225
 2687 0525 20       		.uleb128 0x20
 2688 0526 6E020000 		.4byte	.LASF93
 2689 052a 01       		.byte	0x1
 2690 052b D802     		.2byte	0x2d8
 2691 052d 00000000 		.4byte	.LFB78
 2692 0531 C4000000 		.4byte	.LFE78-.LFB78
 2693 0535 01       		.uleb128 0x1
 2694 0536 9C       		.byte	0x9c
 2695 0537 21       		.uleb128 0x21
 2696 0538 2F050000 		.4byte	.LASF94
 2697 053c 07       		.byte	0x7
 2698 053d 1207     		.2byte	0x712
 2699 053f 43050000 		.4byte	0x543
 2700 0543 22       		.uleb128 0x22
 2701 0544 8B000000 		.4byte	0x8b
 2702 0548 23       		.uleb128 0x23
 2703 0549 747300   		.ascii	"ts\000"
 2704 054c 05       		.byte	0x5
 2705 054d 10       		.byte	0x10
 2706 054e 96000000 		.4byte	0x96
 2707 0552 05       		.uleb128 0x5
 2708 0553 03       		.byte	0x3
 2709 0554 00000000 		.4byte	ts
 2710 0558 24       		.uleb128 0x24
 2711 0559 6A060000 		.4byte	.LASF95
 2712 055d 05       		.byte	0x5
 2713 055e 11       		.byte	0x11
 2714 055f A2000000 		.4byte	0xa2
 2715 0563 05       		.uleb128 0x5
 2716 0564 03       		.byte	0x3
 2717 0565 00000000 		.4byte	ts_enc
 2718 0569 24       		.uleb128 0x24
 2719 056a 3C050000 		.4byte	.LASF96
 2720 056e 05       		.byte	0x5
 2721 056f 12       		.byte	0x12
 2722 0570 A2000000 		.4byte	0xa2
 2723 0574 05       		.uleb128 0x5
 2724 0575 03       		.byte	0x3
 2725 0576 00000000 		.4byte	ts_update
 2726 057a 24       		.uleb128 0x24
 2727 057b 67040000 		.4byte	.LASF97
 2728 057f 05       		.byte	0x5
 2729 0580 13       		.byte	0x13
 2730 0581 A2000000 		.4byte	0xa2
 2731 0585 05       		.uleb128 0x5
 2732 0586 03       		.byte	0x3
 2733 0587 00000000 		.4byte	ts_speed
 2734 058b 24       		.uleb128 0x24
 2735 058c 0E030000 		.4byte	.LASF98
 2736 0590 05       		.byte	0x5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 63


 2737 0591 14       		.byte	0x14
 2738 0592 A2000000 		.4byte	0xa2
 2739 0596 05       		.uleb128 0x5
 2740 0597 03       		.byte	0x3
 2741 0598 00000000 		.4byte	ts_display
 2742 059c 24       		.uleb128 0x24
 2743 059d B8020000 		.4byte	.LASF99
 2744 05a1 05       		.byte	0x5
 2745 05a2 16       		.byte	0x16
 2746 05a3 96000000 		.4byte	0x96
 2747 05a7 05       		.uleb128 0x5
 2748 05a8 03       		.byte	0x3
 2749 05a9 00000000 		.4byte	flag_ts_enc
 2750 05ad 24       		.uleb128 0x24
 2751 05ae A9020000 		.4byte	.LASF100
 2752 05b2 05       		.byte	0x5
 2753 05b3 17       		.byte	0x17
 2754 05b4 96000000 		.4byte	0x96
 2755 05b8 05       		.uleb128 0x5
 2756 05b9 03       		.byte	0x3
 2757 05ba 00000000 		.4byte	flag_ts_update
 2758 05be 24       		.uleb128 0x24
 2759 05bf D4040000 		.4byte	.LASF101
 2760 05c3 05       		.byte	0x5
 2761 05c4 18       		.byte	0x18
 2762 05c5 96000000 		.4byte	0x96
 2763 05c9 05       		.uleb128 0x5
 2764 05ca 03       		.byte	0x3
 2765 05cb 00000000 		.4byte	flag_ts_speed
 2766 05cf 24       		.uleb128 0x24
 2767 05d0 71060000 		.4byte	.LASF102
 2768 05d4 05       		.byte	0x5
 2769 05d5 19       		.byte	0x19
 2770 05d6 96000000 		.4byte	0x96
 2771 05da 05       		.uleb128 0x5
 2772 05db 03       		.byte	0x3
 2773 05dc 00000000 		.4byte	flag_ts_display
 2774 05e0 24       		.uleb128 0x24
 2775 05e1 F1040000 		.4byte	.LASF103
 2776 05e5 05       		.byte	0x5
 2777 05e6 1B       		.byte	0x1b
 2778 05e7 96000000 		.4byte	0x96
 2779 05eb 05       		.uleb128 0x5
 2780 05ec 03       		.byte	0x3
 2781 05ed 00000000 		.4byte	flag_rx
 2782 05f1 24       		.uleb128 0x24
 2783 05f2 62020000 		.4byte	.LASF104
 2784 05f6 05       		.byte	0x5
 2785 05f7 1C       		.byte	0x1c
 2786 05f8 96000000 		.4byte	0x96
 2787 05fc 05       		.uleb128 0x5
 2788 05fd 03       		.byte	0x3
 2789 05fe 00000000 		.4byte	flag_packet
 2790 0602 24       		.uleb128 0x24
 2791 0603 4F070000 		.4byte	.LASF105
 2792 0607 05       		.byte	0x5
 2793 0608 1D       		.byte	0x1d
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 64


 2794 0609 96000000 		.4byte	0x96
 2795 060d 05       		.uleb128 0x5
 2796 060e 03       		.byte	0x3
 2797 060f 00000000 		.4byte	flag_KB_string
 2798 0613 24       		.uleb128 0x24
 2799 0614 E2040000 		.4byte	.LASF106
 2800 0618 05       		.byte	0x5
 2801 0619 1F       		.byte	0x1f
 2802 061a 96000000 		.4byte	0x96
 2803 061e 05       		.uleb128 0x5
 2804 061f 03       		.byte	0x3
 2805 0620 00000000 		.4byte	dataready_flag
 2806 0624 24       		.uleb128 0x24
 2807 0625 85010000 		.4byte	.LASF107
 2808 0629 05       		.byte	0x5
 2809 062a 21       		.byte	0x21
 2810 062b 96000000 		.4byte	0x96
 2811 062f 05       		.uleb128 0x5
 2812 0630 03       		.byte	0x3
 2813 0631 00000000 		.4byte	flag_rf_transmission_active
 2814 0635 25       		.uleb128 0x25
 2815 0636 84000000 		.4byte	0x84
 2816 063a 45060000 		.4byte	0x645
 2817 063e 26       		.uleb128 0x26
 2818 063f 7D000000 		.4byte	0x7d
 2819 0643 3F       		.byte	0x3f
 2820 0644 00       		.byte	0
 2821 0645 24       		.uleb128 0x24
 2822 0646 86060000 		.4byte	.LASF108
 2823 064a 05       		.byte	0x5
 2824 064b 24       		.byte	0x24
 2825 064c 35060000 		.4byte	0x635
 2826 0650 05       		.uleb128 0x5
 2827 0651 03       		.byte	0x3
 2828 0652 00000000 		.4byte	displaystring
 2829 0656 24       		.uleb128 0x24
 2830 0657 1F060000 		.4byte	.LASF109
 2831 065b 05       		.byte	0x5
 2832 065c 25       		.byte	0x25
 2833 065d 35060000 		.4byte	0x635
 2834 0661 05       		.uleb128 0x5
 2835 0662 03       		.byte	0x3
 2836 0663 00000000 		.4byte	line
 2837 0667 24       		.uleb128 0x24
 2838 0668 EC050000 		.4byte	.LASF110
 2839 066c 05       		.byte	0x5
 2840 066d 25       		.byte	0x25
 2841 066e 35060000 		.4byte	0x635
 2842 0672 05       		.uleb128 0x5
 2843 0673 03       		.byte	0x3
 2844 0674 00000000 		.4byte	entry
 2845 0678 25       		.uleb128 0x25
 2846 0679 96000000 		.4byte	0x96
 2847 067d 88060000 		.4byte	0x688
 2848 0681 26       		.uleb128 0x26
 2849 0682 7D000000 		.4byte	0x7d
 2850 0686 3F       		.byte	0x3f
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 65


 2851 0687 00       		.byte	0
 2852 0688 24       		.uleb128 0x24
 2853 0689 29020000 		.4byte	.LASF111
 2854 068d 05       		.byte	0x5
 2855 068e 26       		.byte	0x26
 2856 068f 78060000 		.4byte	0x678
 2857 0693 05       		.uleb128 0x5
 2858 0694 03       		.byte	0x3
 2859 0695 00000000 		.4byte	usbBuffer
 2860 0699 24       		.uleb128 0x24
 2861 069a 65000000 		.4byte	.LASF112
 2862 069e 05       		.byte	0x5
 2863 069f 3C       		.byte	0x3c
 2864 06a0 E0000000 		.4byte	0xe0
 2865 06a4 05       		.uleb128 0x5
 2866 06a5 03       		.byte	0x3
 2867 06a6 00000000 		.4byte	system_state
 2868 06aa 25       		.uleb128 0x25
 2869 06ab 68000000 		.4byte	0x68
 2870 06af C0060000 		.4byte	0x6c0
 2871 06b3 26       		.uleb128 0x26
 2872 06b4 7D000000 		.4byte	0x7d
 2873 06b8 0E       		.byte	0xe
 2874 06b9 26       		.uleb128 0x26
 2875 06ba 7D000000 		.4byte	0x7d
 2876 06be 12       		.byte	0x12
 2877 06bf 00       		.byte	0
 2878 06c0 27       		.uleb128 0x27
 2879 06c1 6D617000 		.ascii	"map\000"
 2880 06c5 08       		.byte	0x8
 2881 06c6 04       		.byte	0x4
 2882 06c7 AA060000 		.4byte	0x6aa
 2883 06cb 25       		.uleb128 0x25
 2884 06cc 68000000 		.4byte	0x68
 2885 06d0 E1060000 		.4byte	0x6e1
 2886 06d4 26       		.uleb128 0x26
 2887 06d5 7D000000 		.4byte	0x7d
 2888 06d9 04       		.byte	0x4
 2889 06da 26       		.uleb128 0x26
 2890 06db 7D000000 		.4byte	0x7d
 2891 06df 01       		.byte	0x1
 2892 06e0 00       		.byte	0
 2893 06e1 28       		.uleb128 0x28
 2894 06e2 54040000 		.4byte	.LASF113
 2895 06e6 08       		.byte	0x8
 2896 06e7 05       		.byte	0x5
 2897 06e8 CB060000 		.4byte	0x6cb
 2898 06ec 24       		.uleb128 0x24
 2899 06ed A2050000 		.4byte	.LASF114
 2900 06f1 01       		.byte	0x1
 2901 06f2 19       		.byte	0x19
 2902 06f3 58020000 		.4byte	0x258
 2903 06f7 05       		.uleb128 0x5
 2904 06f8 03       		.byte	0x3
 2905 06f9 00000000 		.4byte	currentDirection
 2906 06fd 24       		.uleb128 0x24
 2907 06fe B6040000 		.4byte	.LASF115
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 66


 2908 0702 01       		.byte	0x1
 2909 0703 19       		.byte	0x19
 2910 0704 58020000 		.4byte	0x258
 2911 0708 05       		.uleb128 0x5
 2912 0709 03       		.byte	0x3
 2913 070a 00000000 		.4byte	previousDirection
 2914 070e 24       		.uleb128 0x24
 2915 070f B9010000 		.4byte	.LASF116
 2916 0713 01       		.byte	0x1
 2917 0714 1B       		.byte	0x1b
 2918 0715 30020000 		.4byte	0x230
 2919 0719 05       		.uleb128 0x5
 2920 071a 03       		.byte	0x3
 2921 071b 00000000 		.4byte	currentRobotOrientation
 2922 071f 24       		.uleb128 0x24
 2923 0720 1D040000 		.4byte	.LASF117
 2924 0724 01       		.byte	0x1
 2925 0725 1B       		.byte	0x1b
 2926 0726 30020000 		.4byte	0x230
 2927 072a 05       		.uleb128 0x5
 2928 072b 03       		.byte	0x3
 2929 072c 00000000 		.4byte	previousOrientation
 2930 0730 24       		.uleb128 0x24
 2931 0731 EB060000 		.4byte	.LASF118
 2932 0735 01       		.byte	0x1
 2933 0736 1C       		.byte	0x1c
 2934 0737 25020000 		.4byte	0x225
 2935 073b 05       		.uleb128 0x5
 2936 073c 03       		.byte	0x3
 2937 073d 00000000 		.4byte	currentInstruction
 2938 0741 24       		.uleb128 0x24
 2939 0742 50010000 		.4byte	.LASF89
 2940 0746 01       		.byte	0x1
 2941 0747 1D       		.byte	0x1d
 2942 0748 68000000 		.4byte	0x68
 2943 074c 05       		.uleb128 0x5
 2944 074d 03       		.byte	0x3
 2945 074e 00000000 		.4byte	numSteps
 2946 0752 24       		.uleb128 0x24
 2947 0753 78030000 		.4byte	.LASF90
 2948 0757 01       		.byte	0x1
 2949 0758 1F       		.byte	0x1f
 2950 0759 1F050000 		.4byte	0x51f
 2951 075d 05       		.uleb128 0x5
 2952 075e 03       		.byte	0x3
 2953 075f 00000000 		.4byte	instructionList
 2954 0763 24       		.uleb128 0x24
 2955 0764 88030000 		.4byte	.LASF91
 2956 0768 01       		.byte	0x1
 2957 0769 20       		.byte	0x20
 2958 076a AE000000 		.4byte	0xae
 2959 076e 05       		.uleb128 0x5
 2960 076f 03       		.byte	0x3
 2961 0770 00000000 		.4byte	instructionIndex
 2962 0774 23       		.uleb128 0x23
 2963 0775 733300   		.ascii	"s3\000"
 2964 0778 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 67


 2965 0779 25       		.byte	0x25
 2966 077a 96000000 		.4byte	0x96
 2967 077e 05       		.uleb128 0x5
 2968 077f 03       		.byte	0x3
 2969 0780 00000000 		.4byte	s3
 2970 0784 23       		.uleb128 0x23
 2971 0785 733400   		.ascii	"s4\000"
 2972 0788 01       		.byte	0x1
 2973 0789 25       		.byte	0x25
 2974 078a 96000000 		.4byte	0x96
 2975 078e 05       		.uleb128 0x5
 2976 078f 03       		.byte	0x3
 2977 0790 00000000 		.4byte	s4
 2978 0794 23       		.uleb128 0x23
 2979 0795 733500   		.ascii	"s5\000"
 2980 0798 01       		.byte	0x1
 2981 0799 25       		.byte	0x25
 2982 079a 96000000 		.4byte	0x96
 2983 079e 05       		.uleb128 0x5
 2984 079f 03       		.byte	0x3
 2985 07a0 00000000 		.4byte	s5
 2986 07a4 23       		.uleb128 0x23
 2987 07a5 733600   		.ascii	"s6\000"
 2988 07a8 01       		.byte	0x1
 2989 07a9 25       		.byte	0x25
 2990 07aa 96000000 		.4byte	0x96
 2991 07ae 05       		.uleb128 0x5
 2992 07af 03       		.byte	0x3
 2993 07b0 00000000 		.4byte	s6
 2994 07b4 24       		.uleb128 0x24
 2995 07b5 4E050000 		.4byte	.LASF119
 2996 07b9 01       		.byte	0x1
 2997 07ba 2A       		.byte	0x2a
 2998 07bb AE000000 		.4byte	0xae
 2999 07bf 05       		.uleb128 0x5
 3000 07c0 03       		.byte	0x3
 3001 07c1 00000000 		.4byte	totalMilliseconds
 3002 07c5 24       		.uleb128 0x24
 3003 07c6 1C010000 		.4byte	.LASF120
 3004 07ca 01       		.byte	0x1
 3005 07cb 2B       		.byte	0x2b
 3006 07cc D2000000 		.4byte	0xd2
 3007 07d0 05       		.uleb128 0x5
 3008 07d1 03       		.byte	0x3
 3009 07d2 00000000 		.4byte	totalDistance
 3010 07d6 25       		.uleb128 0x25
 3011 07d7 84000000 		.4byte	0x84
 3012 07db E6070000 		.4byte	0x7e6
 3013 07df 26       		.uleb128 0x26
 3014 07e0 7D000000 		.4byte	0x7d
 3015 07e4 44       		.byte	0x44
 3016 07e5 00       		.byte	0
 3017 07e6 24       		.uleb128 0x24
 3018 07e7 41000000 		.4byte	.LASF121
 3019 07eb 01       		.byte	0x1
 3020 07ec 2D       		.byte	0x2d
 3021 07ed D6070000 		.4byte	0x7d6
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 68


 3022 07f1 05       		.uleb128 0x5
 3023 07f2 03       		.byte	0x3
 3024 07f3 00000000 		.4byte	buffer
 3025 07f7 24       		.uleb128 0x24
 3026 07f8 F9010000 		.4byte	.LASF122
 3027 07fc 01       		.byte	0x1
 3028 07fd 2E       		.byte	0x2e
 3029 07fe 68000000 		.4byte	0x68
 3030 0802 05       		.uleb128 0x5
 3031 0803 03       		.byte	0x3
 3032 0804 00000000 		.4byte	quadDec2Count
 3033 0808 24       		.uleb128 0x24
 3034 0809 46070000 		.4byte	.LASF123
 3035 080d 01       		.byte	0x1
 3036 080e 2F       		.byte	0x2f
 3037 080f 68000000 		.4byte	0x68
 3038 0813 05       		.uleb128 0x5
 3039 0814 03       		.byte	0x3
 3040 0815 00000000 		.4byte	timerInt
 3041 0819 24       		.uleb128 0x24
 3042 081a 8C020000 		.4byte	.LASF124
 3043 081e 01       		.byte	0x1
 3044 081f 30       		.byte	0x30
 3045 0820 68000000 		.4byte	0x68
 3046 0824 05       		.uleb128 0x5
 3047 0825 03       		.byte	0x3
 3048 0826 00000000 		.4byte	keepLedOn
 3049 082a 24       		.uleb128 0x24
 3050 082b CE050000 		.4byte	.LASF125
 3051 082f 01       		.byte	0x1
 3052 0830 32       		.byte	0x32
 3053 0831 AE000000 		.4byte	0xae
 3054 0835 05       		.uleb128 0x5
 3055 0836 03       		.byte	0x3
 3056 0837 00000000 		.4byte	stopBuffer
 3057 083b 24       		.uleb128 0x24
 3058 083c D7030000 		.4byte	.LASF126
 3059 0840 01       		.byte	0x1
 3060 0841 33       		.byte	0x33
 3061 0842 96000000 		.4byte	0x96
 3062 0846 05       		.uleb128 0x5
 3063 0847 03       		.byte	0x3
 3064 0848 00000000 		.4byte	turnFinishedFlag
 3065 084c 24       		.uleb128 0x24
 3066 084d 32010000 		.4byte	.LASF127
 3067 0851 01       		.byte	0x1
 3068 0852 34       		.byte	0x34
 3069 0853 96000000 		.4byte	0x96
 3070 0857 05       		.uleb128 0x5
 3071 0858 03       		.byte	0x3
 3072 0859 00000000 		.4byte	forwardUntilTargetStartedFlag
 3073 085d 24       		.uleb128 0x24
 3074 085e 0E040000 		.4byte	.LASF128
 3075 0862 01       		.byte	0x1
 3076 0863 35       		.byte	0x35
 3077 0864 D2000000 		.4byte	0xd2
 3078 0868 05       		.uleb128 0x5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 69


 3079 0869 03       		.byte	0x3
 3080 086a 00000000 		.4byte	blockSizeTotal
 3081 086e 24       		.uleb128 0x24
 3082 086f A5030000 		.4byte	.LASF129
 3083 0873 01       		.byte	0x1
 3084 0874 B4       		.byte	0xb4
 3085 0875 D2000000 		.4byte	0xd2
 3086 0879 05       		.uleb128 0x5
 3087 087a 03       		.byte	0x3
 3088 087b 00000000 		.4byte	xBlocksize
 3089 087f 24       		.uleb128 0x24
 3090 0880 F9040000 		.4byte	.LASF130
 3091 0884 01       		.byte	0x1
 3092 0885 B5       		.byte	0xb5
 3093 0886 D2000000 		.4byte	0xd2
 3094 088a 05       		.uleb128 0x5
 3095 088b 03       		.byte	0x3
 3096 088c 00000000 		.4byte	yBlocksize
 3097 0890 24       		.uleb128 0x24
 3098 0891 B6060000 		.4byte	.LASF131
 3099 0895 01       		.byte	0x1
 3100 0896 B6       		.byte	0xb6
 3101 0897 96000000 		.4byte	0x96
 3102 089b 05       		.uleb128 0x5
 3103 089c 03       		.byte	0x3
 3104 089d 00000000 		.4byte	currentRow
 3105 08a1 24       		.uleb128 0x24
 3106 08a2 24070000 		.4byte	.LASF132
 3107 08a6 01       		.byte	0x1
 3108 08a7 B7       		.byte	0xb7
 3109 08a8 96000000 		.4byte	0x96
 3110 08ac 05       		.uleb128 0x5
 3111 08ad 03       		.byte	0x3
 3112 08ae 00000000 		.4byte	currentCol
 3113 08b2 29       		.uleb128 0x29
 3114 08b3 0E060000 		.4byte	.LASF133
 3115 08b7 01       		.byte	0x1
 3116 08b8 0401     		.2byte	0x104
 3117 08ba 96000000 		.4byte	0x96
 3118 08be 05       		.uleb128 0x5
 3119 08bf 03       		.byte	0x3
 3120 08c0 00000000 		.4byte	stoppedAfterTurn
 3121 08c4 29       		.uleb128 0x29
 3122 08c5 DD020000 		.4byte	.LASF134
 3123 08c9 01       		.byte	0x1
 3124 08ca 0501     		.2byte	0x105
 3125 08cc 96000000 		.4byte	0x96
 3126 08d0 05       		.uleb128 0x5
 3127 08d1 03       		.byte	0x3
 3128 08d2 00000000 		.4byte	ignoreSensor
 3129 08d6 00       		.byte	0
 3130              		.section	.debug_abbrev,"",%progbits
 3131              	.Ldebug_abbrev0:
 3132 0000 01       		.uleb128 0x1
 3133 0001 11       		.uleb128 0x11
 3134 0002 01       		.byte	0x1
 3135 0003 25       		.uleb128 0x25
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 70


 3136 0004 0E       		.uleb128 0xe
 3137 0005 13       		.uleb128 0x13
 3138 0006 0B       		.uleb128 0xb
 3139 0007 03       		.uleb128 0x3
 3140 0008 0E       		.uleb128 0xe
 3141 0009 1B       		.uleb128 0x1b
 3142 000a 0E       		.uleb128 0xe
 3143 000b 55       		.uleb128 0x55
 3144 000c 17       		.uleb128 0x17
 3145 000d 11       		.uleb128 0x11
 3146 000e 01       		.uleb128 0x1
 3147 000f 10       		.uleb128 0x10
 3148 0010 17       		.uleb128 0x17
 3149 0011 00       		.byte	0
 3150 0012 00       		.byte	0
 3151 0013 02       		.uleb128 0x2
 3152 0014 24       		.uleb128 0x24
 3153 0015 00       		.byte	0
 3154 0016 0B       		.uleb128 0xb
 3155 0017 0B       		.uleb128 0xb
 3156 0018 3E       		.uleb128 0x3e
 3157 0019 0B       		.uleb128 0xb
 3158 001a 03       		.uleb128 0x3
 3159 001b 0E       		.uleb128 0xe
 3160 001c 00       		.byte	0
 3161 001d 00       		.byte	0
 3162 001e 03       		.uleb128 0x3
 3163 001f 16       		.uleb128 0x16
 3164 0020 00       		.byte	0
 3165 0021 03       		.uleb128 0x3
 3166 0022 0E       		.uleb128 0xe
 3167 0023 3A       		.uleb128 0x3a
 3168 0024 0B       		.uleb128 0xb
 3169 0025 3B       		.uleb128 0x3b
 3170 0026 0B       		.uleb128 0xb
 3171 0027 49       		.uleb128 0x49
 3172 0028 13       		.uleb128 0x13
 3173 0029 00       		.byte	0
 3174 002a 00       		.byte	0
 3175 002b 04       		.uleb128 0x4
 3176 002c 24       		.uleb128 0x24
 3177 002d 00       		.byte	0
 3178 002e 0B       		.uleb128 0xb
 3179 002f 0B       		.uleb128 0xb
 3180 0030 3E       		.uleb128 0x3e
 3181 0031 0B       		.uleb128 0xb
 3182 0032 03       		.uleb128 0x3
 3183 0033 08       		.uleb128 0x8
 3184 0034 00       		.byte	0
 3185 0035 00       		.byte	0
 3186 0036 05       		.uleb128 0x5
 3187 0037 16       		.uleb128 0x16
 3188 0038 00       		.byte	0
 3189 0039 03       		.uleb128 0x3
 3190 003a 0E       		.uleb128 0xe
 3191 003b 3A       		.uleb128 0x3a
 3192 003c 0B       		.uleb128 0xb
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 71


 3193 003d 3B       		.uleb128 0x3b
 3194 003e 05       		.uleb128 0x5
 3195 003f 49       		.uleb128 0x49
 3196 0040 13       		.uleb128 0x13
 3197 0041 00       		.byte	0
 3198 0042 00       		.byte	0
 3199 0043 06       		.uleb128 0x6
 3200 0044 13       		.uleb128 0x13
 3201 0045 01       		.byte	0x1
 3202 0046 03       		.uleb128 0x3
 3203 0047 0E       		.uleb128 0xe
 3204 0048 0B       		.uleb128 0xb
 3205 0049 0B       		.uleb128 0xb
 3206 004a 3A       		.uleb128 0x3a
 3207 004b 0B       		.uleb128 0xb
 3208 004c 3B       		.uleb128 0x3b
 3209 004d 0B       		.uleb128 0xb
 3210 004e 01       		.uleb128 0x1
 3211 004f 13       		.uleb128 0x13
 3212 0050 00       		.byte	0
 3213 0051 00       		.byte	0
 3214 0052 07       		.uleb128 0x7
 3215 0053 0D       		.uleb128 0xd
 3216 0054 00       		.byte	0
 3217 0055 03       		.uleb128 0x3
 3218 0056 0E       		.uleb128 0xe
 3219 0057 3A       		.uleb128 0x3a
 3220 0058 0B       		.uleb128 0xb
 3221 0059 3B       		.uleb128 0x3b
 3222 005a 0B       		.uleb128 0xb
 3223 005b 49       		.uleb128 0x49
 3224 005c 13       		.uleb128 0x13
 3225 005d 38       		.uleb128 0x38
 3226 005e 0B       		.uleb128 0xb
 3227 005f 00       		.byte	0
 3228 0060 00       		.byte	0
 3229 0061 08       		.uleb128 0x8
 3230 0062 04       		.uleb128 0x4
 3231 0063 01       		.byte	0x1
 3232 0064 03       		.uleb128 0x3
 3233 0065 0E       		.uleb128 0xe
 3234 0066 0B       		.uleb128 0xb
 3235 0067 0B       		.uleb128 0xb
 3236 0068 49       		.uleb128 0x49
 3237 0069 13       		.uleb128 0x13
 3238 006a 3A       		.uleb128 0x3a
 3239 006b 0B       		.uleb128 0xb
 3240 006c 3B       		.uleb128 0x3b
 3241 006d 0B       		.uleb128 0xb
 3242 006e 01       		.uleb128 0x1
 3243 006f 13       		.uleb128 0x13
 3244 0070 00       		.byte	0
 3245 0071 00       		.byte	0
 3246 0072 09       		.uleb128 0x9
 3247 0073 28       		.uleb128 0x28
 3248 0074 00       		.byte	0
 3249 0075 03       		.uleb128 0x3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 72


 3250 0076 0E       		.uleb128 0xe
 3251 0077 1C       		.uleb128 0x1c
 3252 0078 0B       		.uleb128 0xb
 3253 0079 00       		.byte	0
 3254 007a 00       		.byte	0
 3255 007b 0A       		.uleb128 0xa
 3256 007c 28       		.uleb128 0x28
 3257 007d 00       		.byte	0
 3258 007e 03       		.uleb128 0x3
 3259 007f 08       		.uleb128 0x8
 3260 0080 1C       		.uleb128 0x1c
 3261 0081 0B       		.uleb128 0xb
 3262 0082 00       		.byte	0
 3263 0083 00       		.byte	0
 3264 0084 0B       		.uleb128 0xb
 3265 0085 2E       		.uleb128 0x2e
 3266 0086 01       		.byte	0x1
 3267 0087 3F       		.uleb128 0x3f
 3268 0088 19       		.uleb128 0x19
 3269 0089 03       		.uleb128 0x3
 3270 008a 0E       		.uleb128 0xe
 3271 008b 3A       		.uleb128 0x3a
 3272 008c 0B       		.uleb128 0xb
 3273 008d 3B       		.uleb128 0x3b
 3274 008e 0B       		.uleb128 0xb
 3275 008f 27       		.uleb128 0x27
 3276 0090 19       		.uleb128 0x19
 3277 0091 11       		.uleb128 0x11
 3278 0092 01       		.uleb128 0x1
 3279 0093 12       		.uleb128 0x12
 3280 0094 06       		.uleb128 0x6
 3281 0095 40       		.uleb128 0x40
 3282 0096 18       		.uleb128 0x18
 3283 0097 9642     		.uleb128 0x2116
 3284 0099 19       		.uleb128 0x19
 3285 009a 01       		.uleb128 0x1
 3286 009b 13       		.uleb128 0x13
 3287 009c 00       		.byte	0
 3288 009d 00       		.byte	0
 3289 009e 0C       		.uleb128 0xc
 3290 009f 0B       		.uleb128 0xb
 3291 00a0 01       		.byte	0x1
 3292 00a1 11       		.uleb128 0x11
 3293 00a2 01       		.uleb128 0x1
 3294 00a3 12       		.uleb128 0x12
 3295 00a4 06       		.uleb128 0x6
 3296 00a5 00       		.byte	0
 3297 00a6 00       		.byte	0
 3298 00a7 0D       		.uleb128 0xd
 3299 00a8 34       		.uleb128 0x34
 3300 00a9 00       		.byte	0
 3301 00aa 03       		.uleb128 0x3
 3302 00ab 0E       		.uleb128 0xe
 3303 00ac 3A       		.uleb128 0x3a
 3304 00ad 0B       		.uleb128 0xb
 3305 00ae 3B       		.uleb128 0x3b
 3306 00af 0B       		.uleb128 0xb
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 73


 3307 00b0 49       		.uleb128 0x49
 3308 00b1 13       		.uleb128 0x13
 3309 00b2 02       		.uleb128 0x2
 3310 00b3 18       		.uleb128 0x18
 3311 00b4 00       		.byte	0
 3312 00b5 00       		.byte	0
 3313 00b6 0E       		.uleb128 0xe
 3314 00b7 2E       		.uleb128 0x2e
 3315 00b8 00       		.byte	0
 3316 00b9 3F       		.uleb128 0x3f
 3317 00ba 19       		.uleb128 0x19
 3318 00bb 03       		.uleb128 0x3
 3319 00bc 0E       		.uleb128 0xe
 3320 00bd 3A       		.uleb128 0x3a
 3321 00be 0B       		.uleb128 0xb
 3322 00bf 3B       		.uleb128 0x3b
 3323 00c0 0B       		.uleb128 0xb
 3324 00c1 27       		.uleb128 0x27
 3325 00c2 19       		.uleb128 0x19
 3326 00c3 11       		.uleb128 0x11
 3327 00c4 01       		.uleb128 0x1
 3328 00c5 12       		.uleb128 0x12
 3329 00c6 06       		.uleb128 0x6
 3330 00c7 40       		.uleb128 0x40
 3331 00c8 18       		.uleb128 0x18
 3332 00c9 9742     		.uleb128 0x2117
 3333 00cb 19       		.uleb128 0x19
 3334 00cc 00       		.byte	0
 3335 00cd 00       		.byte	0
 3336 00ce 0F       		.uleb128 0xf
 3337 00cf 2E       		.uleb128 0x2e
 3338 00d0 00       		.byte	0
 3339 00d1 3F       		.uleb128 0x3f
 3340 00d2 19       		.uleb128 0x19
 3341 00d3 03       		.uleb128 0x3
 3342 00d4 0E       		.uleb128 0xe
 3343 00d5 3A       		.uleb128 0x3a
 3344 00d6 0B       		.uleb128 0xb
 3345 00d7 3B       		.uleb128 0x3b
 3346 00d8 0B       		.uleb128 0xb
 3347 00d9 27       		.uleb128 0x27
 3348 00da 19       		.uleb128 0x19
 3349 00db 11       		.uleb128 0x11
 3350 00dc 01       		.uleb128 0x1
 3351 00dd 12       		.uleb128 0x12
 3352 00de 06       		.uleb128 0x6
 3353 00df 40       		.uleb128 0x40
 3354 00e0 18       		.uleb128 0x18
 3355 00e1 9642     		.uleb128 0x2116
 3356 00e3 19       		.uleb128 0x19
 3357 00e4 00       		.byte	0
 3358 00e5 00       		.byte	0
 3359 00e6 10       		.uleb128 0x10
 3360 00e7 2E       		.uleb128 0x2e
 3361 00e8 00       		.byte	0
 3362 00e9 3F       		.uleb128 0x3f
 3363 00ea 19       		.uleb128 0x19
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 74


 3364 00eb 03       		.uleb128 0x3
 3365 00ec 0E       		.uleb128 0xe
 3366 00ed 3A       		.uleb128 0x3a
 3367 00ee 0B       		.uleb128 0xb
 3368 00ef 3B       		.uleb128 0x3b
 3369 00f0 0B       		.uleb128 0xb
 3370 00f1 49       		.uleb128 0x49
 3371 00f2 13       		.uleb128 0x13
 3372 00f3 11       		.uleb128 0x11
 3373 00f4 01       		.uleb128 0x1
 3374 00f5 12       		.uleb128 0x12
 3375 00f6 06       		.uleb128 0x6
 3376 00f7 40       		.uleb128 0x40
 3377 00f8 18       		.uleb128 0x18
 3378 00f9 9642     		.uleb128 0x2116
 3379 00fb 19       		.uleb128 0x19
 3380 00fc 00       		.byte	0
 3381 00fd 00       		.byte	0
 3382 00fe 11       		.uleb128 0x11
 3383 00ff 2E       		.uleb128 0x2e
 3384 0100 01       		.byte	0x1
 3385 0101 3F       		.uleb128 0x3f
 3386 0102 19       		.uleb128 0x19
 3387 0103 03       		.uleb128 0x3
 3388 0104 0E       		.uleb128 0xe
 3389 0105 3A       		.uleb128 0x3a
 3390 0106 0B       		.uleb128 0xb
 3391 0107 3B       		.uleb128 0x3b
 3392 0108 0B       		.uleb128 0xb
 3393 0109 27       		.uleb128 0x27
 3394 010a 19       		.uleb128 0x19
 3395 010b 49       		.uleb128 0x49
 3396 010c 13       		.uleb128 0x13
 3397 010d 11       		.uleb128 0x11
 3398 010e 01       		.uleb128 0x1
 3399 010f 12       		.uleb128 0x12
 3400 0110 06       		.uleb128 0x6
 3401 0111 40       		.uleb128 0x40
 3402 0112 18       		.uleb128 0x18
 3403 0113 9642     		.uleb128 0x2116
 3404 0115 19       		.uleb128 0x19
 3405 0116 01       		.uleb128 0x1
 3406 0117 13       		.uleb128 0x13
 3407 0118 00       		.byte	0
 3408 0119 00       		.byte	0
 3409 011a 12       		.uleb128 0x12
 3410 011b 05       		.uleb128 0x5
 3411 011c 00       		.byte	0
 3412 011d 03       		.uleb128 0x3
 3413 011e 0E       		.uleb128 0xe
 3414 011f 3A       		.uleb128 0x3a
 3415 0120 0B       		.uleb128 0xb
 3416 0121 3B       		.uleb128 0x3b
 3417 0122 0B       		.uleb128 0xb
 3418 0123 49       		.uleb128 0x49
 3419 0124 13       		.uleb128 0x13
 3420 0125 02       		.uleb128 0x2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 75


 3421 0126 18       		.uleb128 0x18
 3422 0127 00       		.byte	0
 3423 0128 00       		.byte	0
 3424 0129 13       		.uleb128 0x13
 3425 012a 34       		.uleb128 0x34
 3426 012b 00       		.byte	0
 3427 012c 03       		.uleb128 0x3
 3428 012d 08       		.uleb128 0x8
 3429 012e 3A       		.uleb128 0x3a
 3430 012f 0B       		.uleb128 0xb
 3431 0130 3B       		.uleb128 0x3b
 3432 0131 0B       		.uleb128 0xb
 3433 0132 49       		.uleb128 0x49
 3434 0133 13       		.uleb128 0x13
 3435 0134 02       		.uleb128 0x2
 3436 0135 18       		.uleb128 0x18
 3437 0136 00       		.byte	0
 3438 0137 00       		.byte	0
 3439 0138 14       		.uleb128 0x14
 3440 0139 2E       		.uleb128 0x2e
 3441 013a 00       		.byte	0
 3442 013b 3F       		.uleb128 0x3f
 3443 013c 19       		.uleb128 0x19
 3444 013d 03       		.uleb128 0x3
 3445 013e 0E       		.uleb128 0xe
 3446 013f 3A       		.uleb128 0x3a
 3447 0140 0B       		.uleb128 0xb
 3448 0141 3B       		.uleb128 0x3b
 3449 0142 0B       		.uleb128 0xb
 3450 0143 11       		.uleb128 0x11
 3451 0144 01       		.uleb128 0x1
 3452 0145 12       		.uleb128 0x12
 3453 0146 06       		.uleb128 0x6
 3454 0147 40       		.uleb128 0x40
 3455 0148 18       		.uleb128 0x18
 3456 0149 9742     		.uleb128 0x2117
 3457 014b 19       		.uleb128 0x19
 3458 014c 00       		.byte	0
 3459 014d 00       		.byte	0
 3460 014e 15       		.uleb128 0x15
 3461 014f 2E       		.uleb128 0x2e
 3462 0150 00       		.byte	0
 3463 0151 3F       		.uleb128 0x3f
 3464 0152 19       		.uleb128 0x19
 3465 0153 03       		.uleb128 0x3
 3466 0154 0E       		.uleb128 0xe
 3467 0155 3A       		.uleb128 0x3a
 3468 0156 0B       		.uleb128 0xb
 3469 0157 3B       		.uleb128 0x3b
 3470 0158 05       		.uleb128 0x5
 3471 0159 49       		.uleb128 0x49
 3472 015a 13       		.uleb128 0x13
 3473 015b 11       		.uleb128 0x11
 3474 015c 01       		.uleb128 0x1
 3475 015d 12       		.uleb128 0x12
 3476 015e 06       		.uleb128 0x6
 3477 015f 40       		.uleb128 0x40
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 76


 3478 0160 18       		.uleb128 0x18
 3479 0161 9742     		.uleb128 0x2117
 3480 0163 19       		.uleb128 0x19
 3481 0164 00       		.byte	0
 3482 0165 00       		.byte	0
 3483 0166 16       		.uleb128 0x16
 3484 0167 2E       		.uleb128 0x2e
 3485 0168 01       		.byte	0x1
 3486 0169 3F       		.uleb128 0x3f
 3487 016a 19       		.uleb128 0x19
 3488 016b 03       		.uleb128 0x3
 3489 016c 0E       		.uleb128 0xe
 3490 016d 3A       		.uleb128 0x3a
 3491 016e 0B       		.uleb128 0xb
 3492 016f 3B       		.uleb128 0x3b
 3493 0170 05       		.uleb128 0x5
 3494 0171 49       		.uleb128 0x49
 3495 0172 13       		.uleb128 0x13
 3496 0173 11       		.uleb128 0x11
 3497 0174 01       		.uleb128 0x1
 3498 0175 12       		.uleb128 0x12
 3499 0176 06       		.uleb128 0x6
 3500 0177 40       		.uleb128 0x40
 3501 0178 18       		.uleb128 0x18
 3502 0179 9642     		.uleb128 0x2116
 3503 017b 19       		.uleb128 0x19
 3504 017c 01       		.uleb128 0x1
 3505 017d 13       		.uleb128 0x13
 3506 017e 00       		.byte	0
 3507 017f 00       		.byte	0
 3508 0180 17       		.uleb128 0x17
 3509 0181 34       		.uleb128 0x34
 3510 0182 00       		.byte	0
 3511 0183 03       		.uleb128 0x3
 3512 0184 0E       		.uleb128 0xe
 3513 0185 3A       		.uleb128 0x3a
 3514 0186 0B       		.uleb128 0xb
 3515 0187 3B       		.uleb128 0x3b
 3516 0188 05       		.uleb128 0x5
 3517 0189 49       		.uleb128 0x49
 3518 018a 13       		.uleb128 0x13
 3519 018b 02       		.uleb128 0x2
 3520 018c 18       		.uleb128 0x18
 3521 018d 00       		.byte	0
 3522 018e 00       		.byte	0
 3523 018f 18       		.uleb128 0x18
 3524 0190 2E       		.uleb128 0x2e
 3525 0191 01       		.byte	0x1
 3526 0192 3F       		.uleb128 0x3f
 3527 0193 19       		.uleb128 0x19
 3528 0194 03       		.uleb128 0x3
 3529 0195 0E       		.uleb128 0xe
 3530 0196 3A       		.uleb128 0x3a
 3531 0197 0B       		.uleb128 0xb
 3532 0198 3B       		.uleb128 0x3b
 3533 0199 05       		.uleb128 0x5
 3534 019a 27       		.uleb128 0x27
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 77


 3535 019b 19       		.uleb128 0x19
 3536 019c 49       		.uleb128 0x49
 3537 019d 13       		.uleb128 0x13
 3538 019e 11       		.uleb128 0x11
 3539 019f 01       		.uleb128 0x1
 3540 01a0 12       		.uleb128 0x12
 3541 01a1 06       		.uleb128 0x6
 3542 01a2 40       		.uleb128 0x40
 3543 01a3 18       		.uleb128 0x18
 3544 01a4 9642     		.uleb128 0x2116
 3545 01a6 19       		.uleb128 0x19
 3546 01a7 01       		.uleb128 0x1
 3547 01a8 13       		.uleb128 0x13
 3548 01a9 00       		.byte	0
 3549 01aa 00       		.byte	0
 3550 01ab 19       		.uleb128 0x19
 3551 01ac 05       		.uleb128 0x5
 3552 01ad 00       		.byte	0
 3553 01ae 03       		.uleb128 0x3
 3554 01af 0E       		.uleb128 0xe
 3555 01b0 3A       		.uleb128 0x3a
 3556 01b1 0B       		.uleb128 0xb
 3557 01b2 3B       		.uleb128 0x3b
 3558 01b3 05       		.uleb128 0x5
 3559 01b4 49       		.uleb128 0x49
 3560 01b5 13       		.uleb128 0x13
 3561 01b6 02       		.uleb128 0x2
 3562 01b7 18       		.uleb128 0x18
 3563 01b8 00       		.byte	0
 3564 01b9 00       		.byte	0
 3565 01ba 1A       		.uleb128 0x1a
 3566 01bb 0B       		.uleb128 0xb
 3567 01bc 01       		.byte	0x1
 3568 01bd 55       		.uleb128 0x55
 3569 01be 17       		.uleb128 0x17
 3570 01bf 01       		.uleb128 0x1
 3571 01c0 13       		.uleb128 0x13
 3572 01c1 00       		.byte	0
 3573 01c2 00       		.byte	0
 3574 01c3 1B       		.uleb128 0x1b
 3575 01c4 34       		.uleb128 0x34
 3576 01c5 00       		.byte	0
 3577 01c6 03       		.uleb128 0x3
 3578 01c7 08       		.uleb128 0x8
 3579 01c8 3A       		.uleb128 0x3a
 3580 01c9 0B       		.uleb128 0xb
 3581 01ca 3B       		.uleb128 0x3b
 3582 01cb 05       		.uleb128 0x5
 3583 01cc 49       		.uleb128 0x49
 3584 01cd 13       		.uleb128 0x13
 3585 01ce 02       		.uleb128 0x2
 3586 01cf 18       		.uleb128 0x18
 3587 01d0 00       		.byte	0
 3588 01d1 00       		.byte	0
 3589 01d2 1C       		.uleb128 0x1c
 3590 01d3 0B       		.uleb128 0xb
 3591 01d4 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 78


 3592 01d5 55       		.uleb128 0x55
 3593 01d6 17       		.uleb128 0x17
 3594 01d7 00       		.byte	0
 3595 01d8 00       		.byte	0
 3596 01d9 1D       		.uleb128 0x1d
 3597 01da 2E       		.uleb128 0x2e
 3598 01db 00       		.byte	0
 3599 01dc 3F       		.uleb128 0x3f
 3600 01dd 19       		.uleb128 0x19
 3601 01de 03       		.uleb128 0x3
 3602 01df 0E       		.uleb128 0xe
 3603 01e0 3A       		.uleb128 0x3a
 3604 01e1 0B       		.uleb128 0xb
 3605 01e2 3B       		.uleb128 0x3b
 3606 01e3 05       		.uleb128 0x5
 3607 01e4 11       		.uleb128 0x11
 3608 01e5 01       		.uleb128 0x1
 3609 01e6 12       		.uleb128 0x12
 3610 01e7 06       		.uleb128 0x6
 3611 01e8 40       		.uleb128 0x40
 3612 01e9 18       		.uleb128 0x18
 3613 01ea 9742     		.uleb128 0x2117
 3614 01ec 19       		.uleb128 0x19
 3615 01ed 00       		.byte	0
 3616 01ee 00       		.byte	0
 3617 01ef 1E       		.uleb128 0x1e
 3618 01f0 2E       		.uleb128 0x2e
 3619 01f1 01       		.byte	0x1
 3620 01f2 3F       		.uleb128 0x3f
 3621 01f3 19       		.uleb128 0x19
 3622 01f4 03       		.uleb128 0x3
 3623 01f5 0E       		.uleb128 0xe
 3624 01f6 3A       		.uleb128 0x3a
 3625 01f7 0B       		.uleb128 0xb
 3626 01f8 3B       		.uleb128 0x3b
 3627 01f9 05       		.uleb128 0x5
 3628 01fa 27       		.uleb128 0x27
 3629 01fb 19       		.uleb128 0x19
 3630 01fc 49       		.uleb128 0x49
 3631 01fd 13       		.uleb128 0x13
 3632 01fe 11       		.uleb128 0x11
 3633 01ff 01       		.uleb128 0x1
 3634 0200 12       		.uleb128 0x12
 3635 0201 06       		.uleb128 0x6
 3636 0202 40       		.uleb128 0x40
 3637 0203 18       		.uleb128 0x18
 3638 0204 9742     		.uleb128 0x2117
 3639 0206 19       		.uleb128 0x19
 3640 0207 01       		.uleb128 0x1
 3641 0208 13       		.uleb128 0x13
 3642 0209 00       		.byte	0
 3643 020a 00       		.byte	0
 3644 020b 1F       		.uleb128 0x1f
 3645 020c 0F       		.uleb128 0xf
 3646 020d 00       		.byte	0
 3647 020e 0B       		.uleb128 0xb
 3648 020f 0B       		.uleb128 0xb
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 79


 3649 0210 49       		.uleb128 0x49
 3650 0211 13       		.uleb128 0x13
 3651 0212 00       		.byte	0
 3652 0213 00       		.byte	0
 3653 0214 20       		.uleb128 0x20
 3654 0215 2E       		.uleb128 0x2e
 3655 0216 00       		.byte	0
 3656 0217 3F       		.uleb128 0x3f
 3657 0218 19       		.uleb128 0x19
 3658 0219 03       		.uleb128 0x3
 3659 021a 0E       		.uleb128 0xe
 3660 021b 3A       		.uleb128 0x3a
 3661 021c 0B       		.uleb128 0xb
 3662 021d 3B       		.uleb128 0x3b
 3663 021e 05       		.uleb128 0x5
 3664 021f 11       		.uleb128 0x11
 3665 0220 01       		.uleb128 0x1
 3666 0221 12       		.uleb128 0x12
 3667 0222 06       		.uleb128 0x6
 3668 0223 40       		.uleb128 0x40
 3669 0224 18       		.uleb128 0x18
 3670 0225 9642     		.uleb128 0x2116
 3671 0227 19       		.uleb128 0x19
 3672 0228 00       		.byte	0
 3673 0229 00       		.byte	0
 3674 022a 21       		.uleb128 0x21
 3675 022b 34       		.uleb128 0x34
 3676 022c 00       		.byte	0
 3677 022d 03       		.uleb128 0x3
 3678 022e 0E       		.uleb128 0xe
 3679 022f 3A       		.uleb128 0x3a
 3680 0230 0B       		.uleb128 0xb
 3681 0231 3B       		.uleb128 0x3b
 3682 0232 05       		.uleb128 0x5
 3683 0233 49       		.uleb128 0x49
 3684 0234 13       		.uleb128 0x13
 3685 0235 3F       		.uleb128 0x3f
 3686 0236 19       		.uleb128 0x19
 3687 0237 3C       		.uleb128 0x3c
 3688 0238 19       		.uleb128 0x19
 3689 0239 00       		.byte	0
 3690 023a 00       		.byte	0
 3691 023b 22       		.uleb128 0x22
 3692 023c 35       		.uleb128 0x35
 3693 023d 00       		.byte	0
 3694 023e 49       		.uleb128 0x49
 3695 023f 13       		.uleb128 0x13
 3696 0240 00       		.byte	0
 3697 0241 00       		.byte	0
 3698 0242 23       		.uleb128 0x23
 3699 0243 34       		.uleb128 0x34
 3700 0244 00       		.byte	0
 3701 0245 03       		.uleb128 0x3
 3702 0246 08       		.uleb128 0x8
 3703 0247 3A       		.uleb128 0x3a
 3704 0248 0B       		.uleb128 0xb
 3705 0249 3B       		.uleb128 0x3b
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 80


 3706 024a 0B       		.uleb128 0xb
 3707 024b 49       		.uleb128 0x49
 3708 024c 13       		.uleb128 0x13
 3709 024d 3F       		.uleb128 0x3f
 3710 024e 19       		.uleb128 0x19
 3711 024f 02       		.uleb128 0x2
 3712 0250 18       		.uleb128 0x18
 3713 0251 00       		.byte	0
 3714 0252 00       		.byte	0
 3715 0253 24       		.uleb128 0x24
 3716 0254 34       		.uleb128 0x34
 3717 0255 00       		.byte	0
 3718 0256 03       		.uleb128 0x3
 3719 0257 0E       		.uleb128 0xe
 3720 0258 3A       		.uleb128 0x3a
 3721 0259 0B       		.uleb128 0xb
 3722 025a 3B       		.uleb128 0x3b
 3723 025b 0B       		.uleb128 0xb
 3724 025c 49       		.uleb128 0x49
 3725 025d 13       		.uleb128 0x13
 3726 025e 3F       		.uleb128 0x3f
 3727 025f 19       		.uleb128 0x19
 3728 0260 02       		.uleb128 0x2
 3729 0261 18       		.uleb128 0x18
 3730 0262 00       		.byte	0
 3731 0263 00       		.byte	0
 3732 0264 25       		.uleb128 0x25
 3733 0265 01       		.uleb128 0x1
 3734 0266 01       		.byte	0x1
 3735 0267 49       		.uleb128 0x49
 3736 0268 13       		.uleb128 0x13
 3737 0269 01       		.uleb128 0x1
 3738 026a 13       		.uleb128 0x13
 3739 026b 00       		.byte	0
 3740 026c 00       		.byte	0
 3741 026d 26       		.uleb128 0x26
 3742 026e 21       		.uleb128 0x21
 3743 026f 00       		.byte	0
 3744 0270 49       		.uleb128 0x49
 3745 0271 13       		.uleb128 0x13
 3746 0272 2F       		.uleb128 0x2f
 3747 0273 0B       		.uleb128 0xb
 3748 0274 00       		.byte	0
 3749 0275 00       		.byte	0
 3750 0276 27       		.uleb128 0x27
 3751 0277 34       		.uleb128 0x34
 3752 0278 00       		.byte	0
 3753 0279 03       		.uleb128 0x3
 3754 027a 08       		.uleb128 0x8
 3755 027b 3A       		.uleb128 0x3a
 3756 027c 0B       		.uleb128 0xb
 3757 027d 3B       		.uleb128 0x3b
 3758 027e 0B       		.uleb128 0xb
 3759 027f 49       		.uleb128 0x49
 3760 0280 13       		.uleb128 0x13
 3761 0281 3F       		.uleb128 0x3f
 3762 0282 19       		.uleb128 0x19
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 81


 3763 0283 3C       		.uleb128 0x3c
 3764 0284 19       		.uleb128 0x19
 3765 0285 00       		.byte	0
 3766 0286 00       		.byte	0
 3767 0287 28       		.uleb128 0x28
 3768 0288 34       		.uleb128 0x34
 3769 0289 00       		.byte	0
 3770 028a 03       		.uleb128 0x3
 3771 028b 0E       		.uleb128 0xe
 3772 028c 3A       		.uleb128 0x3a
 3773 028d 0B       		.uleb128 0xb
 3774 028e 3B       		.uleb128 0x3b
 3775 028f 0B       		.uleb128 0xb
 3776 0290 49       		.uleb128 0x49
 3777 0291 13       		.uleb128 0x13
 3778 0292 3F       		.uleb128 0x3f
 3779 0293 19       		.uleb128 0x19
 3780 0294 3C       		.uleb128 0x3c
 3781 0295 19       		.uleb128 0x19
 3782 0296 00       		.byte	0
 3783 0297 00       		.byte	0
 3784 0298 29       		.uleb128 0x29
 3785 0299 34       		.uleb128 0x34
 3786 029a 00       		.byte	0
 3787 029b 03       		.uleb128 0x3
 3788 029c 0E       		.uleb128 0xe
 3789 029d 3A       		.uleb128 0x3a
 3790 029e 0B       		.uleb128 0xb
 3791 029f 3B       		.uleb128 0x3b
 3792 02a0 05       		.uleb128 0x5
 3793 02a1 49       		.uleb128 0x49
 3794 02a2 13       		.uleb128 0x13
 3795 02a3 3F       		.uleb128 0x3f
 3796 02a4 19       		.uleb128 0x19
 3797 02a5 02       		.uleb128 0x2
 3798 02a6 18       		.uleb128 0x18
 3799 02a7 00       		.byte	0
 3800 02a8 00       		.byte	0
 3801 02a9 00       		.byte	0
 3802              		.section	.debug_aranges,"",%progbits
 3803 0000 8C000000 		.4byte	0x8c
 3804 0004 0200     		.2byte	0x2
 3805 0006 00000000 		.4byte	.Ldebug_info0
 3806 000a 04       		.byte	0x4
 3807 000b 00       		.byte	0
 3808 000c 0000     		.2byte	0
 3809 000e 0000     		.2byte	0
 3810 0010 00000000 		.4byte	.LFB64
 3811 0014 EC000000 		.4byte	.LFE64-.LFB64
 3812 0018 00000000 		.4byte	.LFB65
 3813 001c 18000000 		.4byte	.LFE65-.LFB65
 3814 0020 00000000 		.4byte	.LFB66
 3815 0024 18000000 		.4byte	.LFE66-.LFB66
 3816 0028 00000000 		.4byte	.LFB67
 3817 002c 18000000 		.4byte	.LFE67-.LFB67
 3818 0030 00000000 		.4byte	.LFB68
 3819 0034 18000000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 82


 3820 0038 00000000 		.4byte	.LFB69
 3821 003c 38000000 		.4byte	.LFE69-.LFB69
 3822 0040 00000000 		.4byte	.LFB70
 3823 0044 C0000000 		.4byte	.LFE70-.LFB70
 3824 0048 00000000 		.4byte	.LFB71
 3825 004c 54000000 		.4byte	.LFE71-.LFB71
 3826 0050 00000000 		.4byte	.LFB72
 3827 0054 34000000 		.4byte	.LFE72-.LFB72
 3828 0058 00000000 		.4byte	.LFB73
 3829 005c 84000000 		.4byte	.LFE73-.LFB73
 3830 0060 00000000 		.4byte	.LFB74
 3831 0064 44020000 		.4byte	.LFE74-.LFB74
 3832 0068 00000000 		.4byte	.LFB75
 3833 006c 8C020000 		.4byte	.LFE75-.LFB75
 3834 0070 00000000 		.4byte	.LFB76
 3835 0074 1C000000 		.4byte	.LFE76-.LFB76
 3836 0078 00000000 		.4byte	.LFB77
 3837 007c A4000000 		.4byte	.LFE77-.LFB77
 3838 0080 00000000 		.4byte	.LFB78
 3839 0084 C4000000 		.4byte	.LFE78-.LFB78
 3840 0088 00000000 		.4byte	0
 3841 008c 00000000 		.4byte	0
 3842              		.section	.debug_ranges,"",%progbits
 3843              	.Ldebug_ranges0:
 3844 0000 38000000 		.4byte	.LBB3
 3845 0004 BC000000 		.4byte	.LBE3
 3846 0008 BE000000 		.4byte	.LBB4
 3847 000c C0000000 		.4byte	.LBE4
 3848 0010 00000000 		.4byte	0
 3849 0014 00000000 		.4byte	0
 3850 0018 C2000000 		.4byte	.LBB5
 3851 001c 46010000 		.4byte	.LBE5
 3852 0020 48010000 		.4byte	.LBB6
 3853 0024 4A010000 		.4byte	.LBE6
 3854 0028 00000000 		.4byte	0
 3855 002c 00000000 		.4byte	0
 3856 0030 4C010000 		.4byte	.LBB7
 3857 0034 D0010000 		.4byte	.LBE7
 3858 0038 D2010000 		.4byte	.LBB8
 3859 003c D4010000 		.4byte	.LBE8
 3860 0040 00000000 		.4byte	0
 3861 0044 00000000 		.4byte	0
 3862 0048 D6010000 		.4byte	.LBB9
 3863 004c 5A020000 		.4byte	.LBE9
 3864 0050 5C020000 		.4byte	.LBB10
 3865 0054 5E020000 		.4byte	.LBE10
 3866 0058 00000000 		.4byte	0
 3867 005c 00000000 		.4byte	0
 3868 0060 00000000 		.4byte	.LFB64
 3869 0064 EC000000 		.4byte	.LFE64
 3870 0068 00000000 		.4byte	.LFB65
 3871 006c 18000000 		.4byte	.LFE65
 3872 0070 00000000 		.4byte	.LFB66
 3873 0074 18000000 		.4byte	.LFE66
 3874 0078 00000000 		.4byte	.LFB67
 3875 007c 18000000 		.4byte	.LFE67
 3876 0080 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 83


 3877 0084 18000000 		.4byte	.LFE68
 3878 0088 00000000 		.4byte	.LFB69
 3879 008c 38000000 		.4byte	.LFE69
 3880 0090 00000000 		.4byte	.LFB70
 3881 0094 C0000000 		.4byte	.LFE70
 3882 0098 00000000 		.4byte	.LFB71
 3883 009c 54000000 		.4byte	.LFE71
 3884 00a0 00000000 		.4byte	.LFB72
 3885 00a4 34000000 		.4byte	.LFE72
 3886 00a8 00000000 		.4byte	.LFB73
 3887 00ac 84000000 		.4byte	.LFE73
 3888 00b0 00000000 		.4byte	.LFB74
 3889 00b4 44020000 		.4byte	.LFE74
 3890 00b8 00000000 		.4byte	.LFB75
 3891 00bc 8C020000 		.4byte	.LFE75
 3892 00c0 00000000 		.4byte	.LFB76
 3893 00c4 1C000000 		.4byte	.LFE76
 3894 00c8 00000000 		.4byte	.LFB77
 3895 00cc A4000000 		.4byte	.LFE77
 3896 00d0 00000000 		.4byte	.LFB78
 3897 00d4 C4000000 		.4byte	.LFE78
 3898 00d8 00000000 		.4byte	0
 3899 00dc 00000000 		.4byte	0
 3900              		.section	.debug_line,"",%progbits
 3901              	.Ldebug_line0:
 3902 0000 F7030000 		.section	.debug_str,"MS",%progbits,1
 3902      02007001 
 3902      00000201 
 3902      FB0E0D00 
 3902      01010101 
 3903              	.LASF47:
 3904 0000 64697265 		.ascii	"direction\000"
 3904      6374696F 
 3904      6E00
 3905              	.LASF64:
 3906 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3906      61726441 
 3906      66746572 
 3906      5475726E 
 3906      00
 3907              	.LASF50:
 3908 001b 496E7374 		.ascii	"InstructionDirection\000"
 3908      72756374 
 3908      696F6E44 
 3908      69726563 
 3908      74696F6E 
 3909              	.LASF136:
 3910 0030 6D61696E 		.ascii	"main.c\000"
 3910      2E6300
 3911              	.LASF76:
 3912 0037 626C6F63 		.ascii	"blocksize\000"
 3912      6B73697A 
 3912      6500
 3913              	.LASF121:
 3914 0041 62756666 		.ascii	"buffer\000"
 3914      657200
 3915              	.LASF8:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 84


 3916 0048 756E7369 		.ascii	"unsigned int\000"
 3916      676E6564 
 3916      20696E74 
 3916      00
 3917              	.LASF12:
 3918 0055 5F5F696E 		.ascii	"__int32_t\000"
 3918      7433325F 
 3918      7400
 3919              	.LASF18:
 3920 005f 696E7431 		.ascii	"int16\000"
 3920      3600
 3921              	.LASF112:
 3922 0065 73797374 		.ascii	"system_state\000"
 3922      656D5F73 
 3922      74617465 
 3922      00
 3923              	.LASF92:
 3924 0072 6E657874 		.ascii	"nextInstruction\000"
 3924      496E7374 
 3924      72756374 
 3924      696F6E00 
 3925              	.LASF135:
 3926 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3926      43313120 
 3926      352E342E 
 3926      31203230 
 3926      31363036 
 3927 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3927      20726576 
 3927      6973696F 
 3927      6E203233 
 3927      37373135 
 3928 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3928      66756E63 
 3928      74696F6E 
 3928      2D736563 
 3928      74696F6E 
 3929              	.LASF69:
 3930 0110 53365F44 		.ascii	"S6_DETECTED\000"
 3930      45544543 
 3930      54454400 
 3931              	.LASF120:
 3932 011c 746F7461 		.ascii	"totalDistance\000"
 3932      6C446973 
 3932      74616E63 
 3932      6500
 3933              	.LASF34:
 3934 012a 67325F78 		.ascii	"g2_xpos\000"
 3934      706F7300 
 3935              	.LASF127:
 3936 0132 666F7277 		.ascii	"forwardUntilTargetStartedFlag\000"
 3936      61726455 
 3936      6E74696C 
 3936      54617267 
 3936      65745374 
 3937              	.LASF89:
 3938 0150 6E756D53 		.ascii	"numSteps\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 85


 3938      74657073 
 3938      00
 3939              	.LASF83:
 3940 0159 74617267 		.ascii	"targetRow\000"
 3940      6574526F 
 3940      7700
 3941              	.LASF75:
 3942 0163 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 3942      6F76656D 
 3942      656E7441 
 3942      63636F72 
 3942      64696E67 
 3943              	.LASF107:
 3944 0185 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3944      5F72665F 
 3944      7472616E 
 3944      736D6973 
 3944      73696F6E 
 3945              	.LASF73:
 3946 01a1 466F7277 		.ascii	"ForwardCourseCorrection\000"
 3946      61726443 
 3946      6F757273 
 3946      65436F72 
 3946      72656374 
 3947              	.LASF116:
 3948 01b9 63757272 		.ascii	"currentRobotOrientation\000"
 3948      656E7452 
 3948      6F626F74 
 3948      4F726965 
 3948      6E746174 
 3949              	.LASF86:
 3950 01d1 52657365 		.ascii	"ResetSensorFlags\000"
 3950      7453656E 
 3950      736F7246 
 3950      6C616773 
 3950      00
 3951              	.LASF37:
 3952 01e2 67325F64 		.ascii	"g2_direction\000"
 3952      69726563 
 3952      74696F6E 
 3952      00
 3953              	.LASF84:
 3954 01ef 74617267 		.ascii	"targetCol\000"
 3954      6574436F 
 3954      6C00
 3955              	.LASF122:
 3956 01f9 71756164 		.ascii	"quadDec2Count\000"
 3956      44656332 
 3956      436F756E 
 3956      7400
 3957              	.LASF19:
 3958 0207 666C6F61 		.ascii	"float\000"
 3958      7400
 3959              	.LASF77:
 3960 020d 63757272 		.ascii	"currentInstructionDirection\000"
 3960      656E7449 
 3960      6E737472 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 86


 3960      75637469 
 3960      6F6E4469 
 3961              	.LASF111:
 3962 0229 75736242 		.ascii	"usbBuffer\000"
 3962      75666665 
 3962      7200
 3963              	.LASF80:
 3964 0233 636F756E 		.ascii	"count\000"
 3964      7400
 3965              	.LASF22:
 3966 0239 696E6465 		.ascii	"index\000"
 3966      7800
 3967              	.LASF7:
 3968 023f 6C6F6E67 		.ascii	"long long unsigned int\000"
 3968      206C6F6E 
 3968      6720756E 
 3968      7369676E 
 3968      65642069 
 3969              	.LASF46:
 3970 0256 496E7374 		.ascii	"Instruction\000"
 3970      72756374 
 3970      696F6E00 
 3971              	.LASF104:
 3972 0262 666C6167 		.ascii	"flag_packet\000"
 3972      5F706163 
 3972      6B657400 
 3973              	.LASF93:
 3974 026e 53657452 		.ascii	"SetRobotMovement\000"
 3974      6F626F74 
 3974      4D6F7665 
 3974      6D656E74 
 3974      00
 3975              	.LASF70:
 3976 027f 54494D45 		.ascii	"TIMER_FINISH\000"
 3976      525F4649 
 3976      4E495348 
 3976      00
 3977              	.LASF124:
 3978 028c 6B656570 		.ascii	"keepLedOn\000"
 3978      4C65644F 
 3978      6E00
 3979              	.LASF42:
 3980 0296 466F7277 		.ascii	"ForwardUntilTarget\000"
 3980      61726455 
 3980      6E74696C 
 3980      54617267 
 3980      657400
 3981              	.LASF100:
 3982 02a9 666C6167 		.ascii	"flag_ts_update\000"
 3982      5F74735F 
 3982      75706461 
 3982      746500
 3983              	.LASF99:
 3984 02b8 666C6167 		.ascii	"flag_ts_enc\000"
 3984      5F74735F 
 3984      656E6300 
 3985              	.LASF78:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 87


 3986 02c4 71756164 		.ascii	"quadCountToRPM\000"
 3986      436F756E 
 3986      74546F52 
 3986      504D00
 3987              	.LASF81:
 3988 02d3 626C6F63 		.ascii	"blockSize\000"
 3988      6B53697A 
 3988      6500
 3989              	.LASF134:
 3990 02dd 69676E6F 		.ascii	"ignoreSensor\000"
 3990      72655365 
 3990      6E736F72 
 3990      00
 3991              	.LASF43:
 3992 02ea 53746F70 		.ascii	"StopAtTarget\000"
 3992      41745461 
 3992      72676574 
 3992      00
 3993              	.LASF63:
 3994 02f7 77616974 		.ascii	"waitForTurn\000"
 3994      466F7254 
 3994      75726E00 
 3995              	.LASF24:
 3996 0303 726F626F 		.ascii	"robot_ypos\000"
 3996      745F7970 
 3996      6F7300
 3997              	.LASF98:
 3998 030e 74735F64 		.ascii	"ts_display\000"
 3998      6973706C 
 3998      617900
 3999              	.LASF11:
 4000 0319 63686172 		.ascii	"char\000"
 4000      00
 4001              	.LASF137:
 4002 031e 483A5C44 		.ascii	"H:\\Documents\\GitHub\\301-Robot\\psoc student pack"
 4002      6F63756D 
 4002      656E7473 
 4002      5C476974 
 4002      4875625C 
 4003 034d 5C70736F 		.ascii	"\\psoc_code_base\\CS301_Class.cydsn\000"
 4003      635F636F 
 4003      64655F62 
 4003      6173655C 
 4003      43533330 
 4004              	.LASF28:
 4005 036f 67305F73 		.ascii	"g0_speed\000"
 4005      70656564 
 4005      00
 4006              	.LASF90:
 4007 0378 696E7374 		.ascii	"instructionList\000"
 4007      72756374 
 4007      696F6E4C 
 4007      69737400 
 4008              	.LASF91:
 4009 0388 696E7374 		.ascii	"instructionIndex\000"
 4009      72756374 
 4009      696F6E49 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 88


 4009      6E646578 
 4009      00
 4010              	.LASF15:
 4011 0399 75696E74 		.ascii	"uint16\000"
 4011      313600
 4012              	.LASF17:
 4013 03a0 696E7438 		.ascii	"int8\000"
 4013      00
 4014              	.LASF129:
 4015 03a5 78426C6F 		.ascii	"xBlocksize\000"
 4015      636B7369 
 4015      7A6500
 4016              	.LASF33:
 4017 03b0 67315F64 		.ascii	"g1_direction\000"
 4017      69726563 
 4017      74696F6E 
 4017      00
 4018              	.LASF53:
 4019 03bd 4C656674 		.ascii	"Left\000"
 4019      00
 4020              	.LASF74:
 4021 03c2 73706565 		.ascii	"speedTimer\000"
 4021      6454696D 
 4021      657200
 4022              	.LASF85:
 4023 03cd 70617468 		.ascii	"pathCount\000"
 4023      436F756E 
 4023      7400
 4024              	.LASF126:
 4025 03d7 7475726E 		.ascii	"turnFinishedFlag\000"
 4025      46696E69 
 4025      73686564 
 4025      466C6167 
 4025      00
 4026              	.LASF39:
 4027 03e8 77616974 		.ascii	"waitForLeftTurn\000"
 4027      466F724C 
 4027      65667454 
 4027      75726E00 
 4028              	.LASF6:
 4029 03f8 6C6F6E67 		.ascii	"long long int\000"
 4029      206C6F6E 
 4029      6720696E 
 4029      7400
 4030              	.LASF30:
 4031 0406 67315F78 		.ascii	"g1_xpos\000"
 4031      706F7300 
 4032              	.LASF128:
 4033 040e 626C6F63 		.ascii	"blockSizeTotal\000"
 4033      6B53697A 
 4033      65546F74 
 4033      616C00
 4034              	.LASF117:
 4035 041d 70726576 		.ascii	"previousOrientation\000"
 4035      696F7573 
 4035      4F726965 
 4035      6E746174 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 89


 4035      696F6E00 
 4036              	.LASF41:
 4037 0431 75547572 		.ascii	"uTurn\000"
 4037      6E00
 4038              	.LASF72:
 4039 0437 6E657744 		.ascii	"newDistance\000"
 4039      69737461 
 4039      6E636500 
 4040              	.LASF36:
 4041 0443 67325F73 		.ascii	"g2_speed\000"
 4041      70656564 
 4041      00
 4042              	.LASF27:
 4043 044c 67305F79 		.ascii	"g0_ypos\000"
 4043      706F7300 
 4044              	.LASF113:
 4045 0454 666F6F64 		.ascii	"food_list\000"
 4045      5F6C6973 
 4045      7400
 4046              	.LASF58:
 4047 045e 5475726E 		.ascii	"TurnLeft\000"
 4047      4C656674 
 4047      00
 4048              	.LASF97:
 4049 0467 74735F73 		.ascii	"ts_speed\000"
 4049      70656564 
 4049      00
 4050              	.LASF62:
 4051 0470 556E6B6E 		.ascii	"Unknown\000"
 4051      6F776E00 
 4052              	.LASF16:
 4053 0478 75696E74 		.ascii	"uint32\000"
 4053      333200
 4054              	.LASF40:
 4055 047f 77616974 		.ascii	"waitForRightTurn\000"
 4055      466F7252 
 4055      69676874 
 4055      5475726E 
 4055      00
 4056              	.LASF57:
 4057 0490 5475726E 		.ascii	"TurnRight\000"
 4057      52696768 
 4057      7400
 4058              	.LASF45:
 4059 049a 64617461 		.ascii	"data_main\000"
 4059      5F6D6169 
 4059      6E00
 4060              	.LASF21:
 4061 04a4 72737369 		.ascii	"rssi\000"
 4061      00
 4062              	.LASF29:
 4063 04a9 67305F64 		.ascii	"g0_direction\000"
 4063      69726563 
 4063      74696F6E 
 4063      00
 4064              	.LASF115:
 4065 04b6 70726576 		.ascii	"previousDirection\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 90


 4065      696F7573 
 4065      44697265 
 4065      6374696F 
 4065      6E00
 4066              	.LASF9:
 4067 04c8 6C6F6E67 		.ascii	"long double\000"
 4067      20646F75 
 4067      626C6500 
 4068              	.LASF101:
 4069 04d4 666C6167 		.ascii	"flag_ts_speed\000"
 4069      5F74735F 
 4069      73706565 
 4069      6400
 4070              	.LASF106:
 4071 04e2 64617461 		.ascii	"dataready_flag\000"
 4071      72656164 
 4071      795F666C 
 4071      616700
 4072              	.LASF103:
 4073 04f1 666C6167 		.ascii	"flag_rx\000"
 4073      5F727800 
 4074              	.LASF130:
 4075 04f9 79426C6F 		.ascii	"yBlocksize\000"
 4075      636B7369 
 4075      7A6500
 4076              	.LASF2:
 4077 0504 73686F72 		.ascii	"short int\000"
 4077      7420696E 
 4077      7400
 4078              	.LASF67:
 4079 050e 53345F44 		.ascii	"S4_DETECTED\000"
 4079      45544543 
 4079      54454400 
 4080              	.LASF66:
 4081 051a 53335F44 		.ascii	"S3_DETECTED\000"
 4081      45544543 
 4081      54454400 
 4082              	.LASF4:
 4083 0526 6C6F6E67 		.ascii	"long int\000"
 4083      20696E74 
 4083      00
 4084              	.LASF94:
 4085 052f 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4085      52784275 
 4085      66666572 
 4085      00
 4086              	.LASF96:
 4087 053c 74735F75 		.ascii	"ts_update\000"
 4087      70646174 
 4087      6500
 4088              	.LASF56:
 4089 0546 466F7277 		.ascii	"Forward\000"
 4089      61726400 
 4090              	.LASF119:
 4091 054e 746F7461 		.ascii	"totalMilliseconds\000"
 4091      6C4D696C 
 4091      6C697365 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 91


 4091      636F6E64 
 4091      7300
 4092              	.LASF35:
 4093 0560 67325F79 		.ascii	"g2_ypos\000"
 4093      706F7300 
 4094              	.LASF87:
 4095 0568 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 4095      546F4E65 
 4095      7874496E 
 4095      73747275 
 4095      6374696F 
 4096              	.LASF51:
 4097 057e 4F726965 		.ascii	"OrientationState\000"
 4097      6E746174 
 4097      696F6E53 
 4097      74617465 
 4097      00
 4098              	.LASF52:
 4099 058f 446F776E 		.ascii	"Down\000"
 4099      00
 4100              	.LASF54:
 4101 0594 52696768 		.ascii	"Right\000"
 4101      7400
 4102              	.LASF31:
 4103 059a 67315F79 		.ascii	"g1_ypos\000"
 4103      706F7300 
 4104              	.LASF114:
 4105 05a2 63757272 		.ascii	"currentDirection\000"
 4105      656E7444 
 4105      69726563 
 4105      74696F6E 
 4105      00
 4106              	.LASF10:
 4107 05b3 73697A65 		.ascii	"sizetype\000"
 4107      74797065 
 4107      00
 4108              	.LASF5:
 4109 05bc 6C6F6E67 		.ascii	"long unsigned int\000"
 4109      20756E73 
 4109      69676E65 
 4109      6420696E 
 4109      7400
 4110              	.LASF125:
 4111 05ce 73746F70 		.ascii	"stopBuffer\000"
 4111      42756666 
 4111      657200
 4112              	.LASF13:
 4113 05d9 696E7433 		.ascii	"int32_t\000"
 4113      325F7400 
 4114              	.LASF23:
 4115 05e1 726F626F 		.ascii	"robot_xpos\000"
 4115      745F7870 
 4115      6F7300
 4116              	.LASF110:
 4117 05ec 656E7472 		.ascii	"entry\000"
 4117      7900
 4118              	.LASF55:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 92


 4119 05f2 526F626F 		.ascii	"RobotMovement\000"
 4119      744D6F76 
 4119      656D656E 
 4119      7400
 4120              	.LASF1:
 4121 0600 756E7369 		.ascii	"unsigned char\000"
 4121      676E6564 
 4121      20636861 
 4121      7200
 4122              	.LASF133:
 4123 060e 73746F70 		.ascii	"stoppedAfterTurn\000"
 4123      70656441 
 4123      66746572 
 4123      5475726E 
 4123      00
 4124              	.LASF109:
 4125 061f 6C696E65 		.ascii	"line\000"
 4125      00
 4126              	.LASF79:
 4127 0624 43616C63 		.ascii	"CalculateDistanceToTravel\000"
 4127      756C6174 
 4127      65446973 
 4127      74616E63 
 4127      65546F54 
 4128              	.LASF60:
 4129 063e 41646A75 		.ascii	"AdjustToTheRight\000"
 4129      7374546F 
 4129      54686552 
 4129      69676874 
 4129      00
 4130              	.LASF61:
 4131 064f 53746F70 		.ascii	"Stop\000"
 4131      00
 4132              	.LASF88:
 4133 0654 47657449 		.ascii	"GetInstructionAtIndex\000"
 4133      6E737472 
 4133      75637469 
 4133      6F6E4174 
 4133      496E6465 
 4134              	.LASF95:
 4135 066a 74735F65 		.ascii	"ts_enc\000"
 4135      6E6300
 4136              	.LASF102:
 4137 0671 666C6167 		.ascii	"flag_ts_display\000"
 4137      5F74735F 
 4137      64697370 
 4137      6C617900 
 4138              	.LASF44:
 4139 0681 536B6970 		.ascii	"Skip\000"
 4139      00
 4140              	.LASF108:
 4141 0686 64697370 		.ascii	"displaystring\000"
 4141      6C617973 
 4141      7472696E 
 4141      6700
 4142              	.LASF38:
 4143 0694 476F466F 		.ascii	"GoForward\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 93


 4143      72776172 
 4143      6400
 4144              	.LASF68:
 4145 069e 53355F44 		.ascii	"S5_DETECTED\000"
 4145      45544543 
 4145      54454400 
 4146              	.LASF0:
 4147 06aa 7369676E 		.ascii	"signed char\000"
 4147      65642063 
 4147      68617200 
 4148              	.LASF131:
 4149 06b6 63757272 		.ascii	"currentRow\000"
 4149      656E7452 
 4149      6F7700
 4150              	.LASF3:
 4151 06c1 73686F72 		.ascii	"short unsigned int\000"
 4151      7420756E 
 4151      7369676E 
 4151      65642069 
 4151      6E7400
 4152              	.LASF25:
 4153 06d4 726F626F 		.ascii	"robot_orientation\000"
 4153      745F6F72 
 4153      69656E74 
 4153      6174696F 
 4153      6E00
 4154              	.LASF71:
 4155 06e6 6D61696E 		.ascii	"main\000"
 4155      00
 4156              	.LASF118:
 4157 06eb 63757272 		.ascii	"currentInstruction\000"
 4157      656E7449 
 4157      6E737472 
 4157      75637469 
 4157      6F6E00
 4158              	.LASF59:
 4159 06fe 41646A75 		.ascii	"AdjustToTheLeft\000"
 4159      7374546F 
 4159      5468654C 
 4159      65667400 
 4160              	.LASF65:
 4161 070e 4261636B 		.ascii	"Backward\000"
 4161      77617264 
 4161      00
 4162              	.LASF14:
 4163 0717 75696E74 		.ascii	"uint8\000"
 4163      3800
 4164              	.LASF20:
 4165 071d 646F7562 		.ascii	"double\000"
 4165      6C6500
 4166              	.LASF132:
 4167 0724 63757272 		.ascii	"currentCol\000"
 4167      656E7443 
 4167      6F6C00
 4168              	.LASF82:
 4169 072f 746F7461 		.ascii	"totalBlockSize\000"
 4169      6C426C6F 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccDZU2xe.s 			page 94


 4169      636B5369 
 4169      7A6500
 4170              	.LASF26:
 4171 073e 67305F78 		.ascii	"g0_xpos\000"
 4171      706F7300 
 4172              	.LASF123:
 4173 0746 74696D65 		.ascii	"timerInt\000"
 4173      72496E74 
 4173      00
 4174              	.LASF105:
 4175 074f 666C6167 		.ascii	"flag_KB_string\000"
 4175      5F4B425F 
 4175      73747269 
 4175      6E6700
 4176              	.LASF32:
 4177 075e 67315F73 		.ascii	"g1_speed\000"
 4177      70656564 
 4177      00
 4178              	.LASF48:
 4179 0767 69676E6F 		.ascii	"ignoreL\000"
 4179      72654C00 
 4180              	.LASF49:
 4181 076f 69676E6F 		.ascii	"ignoreR\000"
 4181      72655200 
 4182              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
