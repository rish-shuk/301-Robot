ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 03       		.byte	3
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	__aeabi_i2d
 176              		.global	__aeabi_dmul
 177              		.global	__aeabi_ddiv
 178              		.global	__aeabi_d2f
 179              		.global	__aeabi_fadd
 180              		.section	.text.speedTimer,"ax",%progbits
 181              		.align	2
 182              		.global	speedTimer
 183              		.thumb
 184              		.thumb_func
 185              		.type	speedTimer, %function
 186              	speedTimer:
 187              	.LFB64:
 188              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentOrientation, previousOrientation = Right;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 5


  34:main.c        **** void MoveToNextInstruction();
  35:main.c        **** // ----------------------------------------
  36:main.c        **** uint8 s3, s4, s5, s6 = 0;
  37:main.c        **** //* ========================================
  38:main.c        **** // Calculating Distance
  39:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  40:main.c        **** 
  41:main.c        **** uint32 totalMilliseconds = 0;
  42:main.c        **** float totalDistance = 0; // in mm
  43:main.c        **** //* ========================================
  44:main.c        **** char buffer[69];
  45:main.c        **** int quadDec2Count = 0;
  46:main.c        **** int timerInt = 0;
  47:main.c        **** int keepLedOn = 0;
  48:main.c        **** uint32 stopBuffer = 0;
  49:main.c        **** 
  50:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  51:main.c        **** 
  52:main.c        **** CY_ISR (speedTimer) {
 189              		.loc 1 52 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 90B5     		push	{r4, r7, lr}
 194              		.cfi_def_cfa_offset 12
 195              		.cfi_offset 4, -12
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 83B0     		sub	sp, sp, #12
 199              		.cfi_def_cfa_offset 24
 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
  53:main.c        ****     timerInt = 1;
 202              		.loc 1 53 0
 203 0006 364B     		ldr	r3, .L4+16
 204 0008 0122     		movs	r2, #1
 205 000a 1A60     		str	r2, [r3]
  54:main.c        ****     //quadDec_M1 used for turning macros
  55:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 206              		.loc 1 55 0
 207 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 208 0010 0346     		mov	r3, r0
 209 0012 1A46     		mov	r2, r3
 210 0014 334B     		ldr	r3, .L4+20
 211 0016 1A60     		str	r2, [r3]
  56:main.c        ****     
  57:main.c        ****     if ((currentDirection == Forward || 
 212              		.loc 1 57 0
 213 0018 334B     		ldr	r3, .L4+24
 214 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 215 001c 002B     		cmp	r3, #0
 216 001e 17D0     		beq	.L2
  58:main.c        ****         currentDirection == waitForTurn || 
 217              		.loc 1 58 0 discriminator 1
 218 0020 314B     		ldr	r3, .L4+24
 219 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  57:main.c        ****         currentDirection == waitForTurn || 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 6


 220              		.loc 1 57 0 discriminator 1
 221 0024 072B     		cmp	r3, #7
 222 0026 13D0     		beq	.L2
  59:main.c        ****         currentDirection == waitForTurn ||
 223              		.loc 1 59 0
 224 0028 2F4B     		ldr	r3, .L4+24
 225 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58:main.c        ****         currentDirection == waitForTurn || 
 226              		.loc 1 58 0
 227 002c 072B     		cmp	r3, #7
 228 002e 0FD0     		beq	.L2
  60:main.c        ****         currentDirection == waitForRightTurn ||
 229              		.loc 1 60 0
 230 0030 2D4B     		ldr	r3, .L4+24
 231 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  59:main.c        ****         currentDirection == waitForTurn ||
 232              		.loc 1 59 0
 233 0034 022B     		cmp	r3, #2
 234 0036 0BD0     		beq	.L2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 235              		.loc 1 61 0
 236 0038 2B4B     		ldr	r3, .L4+24
 237 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  60:main.c        ****         currentDirection == waitForRightTurn ||
 238              		.loc 1 60 0
 239 003c 082B     		cmp	r3, #8
 240 003e 07D0     		beq	.L2
  62:main.c        ****         currentDirection == AdjustToTheLeft ||
 241              		.loc 1 62 0
 242 0040 294B     		ldr	r3, .L4+24
 243 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 244              		.loc 1 61 0
 245 0044 032B     		cmp	r3, #3
 246 0046 03D0     		beq	.L2
  63:main.c        ****         currentDirection == AdjustToTheRight) &&
 247              		.loc 1 63 0
 248 0048 274B     		ldr	r3, .L4+24
 249 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62:main.c        ****         currentDirection == AdjustToTheLeft ||
 250              		.loc 1 62 0
 251 004c 042B     		cmp	r3, #4
 252 004e 34D1     		bne	.L3
 253              	.L2:
  64:main.c        ****         quadDec2Count != 0) {
 254              		.loc 1 64 0
 255 0050 244B     		ldr	r3, .L4+20
 256 0052 1B68     		ldr	r3, [r3]
  63:main.c        ****         currentDirection == AdjustToTheRight) &&
 257              		.loc 1 63 0
 258 0054 002B     		cmp	r3, #0
 259 0056 30D0     		beq	.L3
 260              	.LBB2:
  65:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  66:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 261              		.loc 1 66 0
 262 0058 224B     		ldr	r3, .L4+20
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 7


 263 005a 1B68     		ldr	r3, [r3]
 264 005c 002B     		cmp	r3, #0
 265 005e B8BF     		it	lt
 266 0060 5B42     		rsblt	r3, r3, #0
 267 0062 1846     		mov	r0, r3
 268 0064 FFF7FEFF 		bl	__aeabi_i2d
 269 0068 19A3     		adr	r3, .L4
 270 006a D3E90023 		ldrd	r2, [r3]
 271 006e FFF7FEFF 		bl	__aeabi_dmul
 272 0072 0346     		mov	r3, r0
 273 0074 0C46     		mov	r4, r1
 274 0076 1846     		mov	r0, r3
 275 0078 2146     		mov	r1, r4
 276 007a 17A3     		adr	r3, .L4+8
 277 007c D3E90023 		ldrd	r2, [r3]
 278 0080 FFF7FEFF 		bl	__aeabi_dmul
 279 0084 0346     		mov	r3, r0
 280 0086 0C46     		mov	r4, r1
 281 0088 1846     		mov	r0, r3
 282 008a 2146     		mov	r1, r4
 283 008c 4FF00002 		mov	r2, #0
 284 0090 164B     		ldr	r3, .L4+28
 285 0092 FFF7FEFF 		bl	__aeabi_ddiv
 286 0096 0346     		mov	r3, r0
 287 0098 0C46     		mov	r4, r1
 288 009a 1846     		mov	r0, r3
 289 009c 2146     		mov	r1, r4
 290 009e FFF7FEFF 		bl	__aeabi_d2f
 291 00a2 0346     		mov	r3, r0
 292 00a4 7B60     		str	r3, [r7, #4]	@ float
  67:main.c        ****         
  68:main.c        ****         totalDistance = totalDistance + newDistance;
 293              		.loc 1 68 0
 294 00a6 124B     		ldr	r3, .L4+32
 295 00a8 1B68     		ldr	r3, [r3]	@ float
 296 00aa 7968     		ldr	r1, [r7, #4]	@ float
 297 00ac 1846     		mov	r0, r3
 298 00ae FFF7FEFF 		bl	__aeabi_fadd
 299 00b2 0346     		mov	r3, r0
 300 00b4 1A46     		mov	r2, r3
 301 00b6 0E4B     		ldr	r3, .L4+32
 302 00b8 1A60     		str	r2, [r3]	@ float
 303              	.L3:
 304              	.LBE2:
  69:main.c        ****     }
  70:main.c        ****     
  71:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 305              		.loc 1 71 0
 306 00ba 0020     		movs	r0, #0
 307 00bc FFF7FEFF 		bl	QuadDec_M2_SetCounter
  72:main.c        ****     QuadDec_M2_Start(); // restart counter
 308              		.loc 1 72 0
 309 00c0 FFF7FEFF 		bl	QuadDec_M2_Start
  73:main.c        ****     
  74:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 310              		.loc 1 74 0
 311 00c4 FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 8


  75:main.c        **** }
 312              		.loc 1 75 0
 313 00c8 00BF     		nop
 314 00ca 0C37     		adds	r7, r7, #12
 315              		.cfi_def_cfa_offset 12
 316 00cc BD46     		mov	sp, r7
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 00ce 90BD     		pop	{r4, r7, pc}
 320              	.L5:
 321              		.align	3
 322              	.L4:
 323 00d0 182D4454 		.word	1413754136
 324 00d4 FB210940 		.word	1074340347
 325 00d8 00000000 		.word	0
 326 00dc 00205040 		.word	1078992896
 327 00e0 00000000 		.word	timerInt
 328 00e4 00000000 		.word	quadDec2Count
 329 00e8 00000000 		.word	currentDirection
 330 00ec 00806C40 		.word	1080852480
 331 00f0 00000000 		.word	totalDistance
 332              		.cfi_endproc
 333              	.LFE64:
 334              		.size	speedTimer, .-speedTimer
 335              		.section	.text.S3_DETECTED,"ax",%progbits
 336              		.align	2
 337              		.global	S3_DETECTED
 338              		.thumb
 339              		.thumb_func
 340              		.type	S3_DETECTED, %function
 341              	S3_DETECTED:
 342              	.LFB65:
  76:main.c        **** 
  77:main.c        **** CY_ISR(S3_DETECTED) {
 343              		.loc 1 77 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348 0000 80B4     		push	{r7}
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 0002 00AF     		add	r7, sp, #0
 352              		.cfi_def_cfa_register 7
  78:main.c        ****     // Sensor has detected WHITE
  79:main.c        ****     s3 = 1; // , Black = 0, White = 1
 353              		.loc 1 79 0
 354 0004 034B     		ldr	r3, .L7
 355 0006 0122     		movs	r2, #1
 356 0008 1A70     		strb	r2, [r3]
  80:main.c        ****     //LED_Write(1u);
  81:main.c        **** }
 357              		.loc 1 81 0
 358 000a 00BF     		nop
 359 000c BD46     		mov	sp, r7
 360              		.cfi_def_cfa_register 13
 361              		@ sp needed
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 9


 362 000e 80BC     		pop	{r7}
 363              		.cfi_restore 7
 364              		.cfi_def_cfa_offset 0
 365 0010 7047     		bx	lr
 366              	.L8:
 367 0012 00BF     		.align	2
 368              	.L7:
 369 0014 00000000 		.word	s3
 370              		.cfi_endproc
 371              	.LFE65:
 372              		.size	S3_DETECTED, .-S3_DETECTED
 373              		.section	.text.S4_DETECTED,"ax",%progbits
 374              		.align	2
 375              		.global	S4_DETECTED
 376              		.thumb
 377              		.thumb_func
 378              		.type	S4_DETECTED, %function
 379              	S4_DETECTED:
 380              	.LFB66:
  82:main.c        **** 
  83:main.c        **** CY_ISR(S4_DETECTED) {
 381              		.loc 1 83 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386 0000 80B4     		push	{r7}
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 7, -4
 389 0002 00AF     		add	r7, sp, #0
 390              		.cfi_def_cfa_register 7
  84:main.c        ****     // Sensor has detected WHITE
  85:main.c        ****     s4 = 1; // , Black = 0, White = 1
 391              		.loc 1 85 0
 392 0004 034B     		ldr	r3, .L10
 393 0006 0122     		movs	r2, #1
 394 0008 1A70     		strb	r2, [r3]
  86:main.c        ****     //LED_Write(1u);
  87:main.c        **** }
 395              		.loc 1 87 0
 396 000a 00BF     		nop
 397 000c BD46     		mov	sp, r7
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 000e 80BC     		pop	{r7}
 401              		.cfi_restore 7
 402              		.cfi_def_cfa_offset 0
 403 0010 7047     		bx	lr
 404              	.L11:
 405 0012 00BF     		.align	2
 406              	.L10:
 407 0014 00000000 		.word	s4
 408              		.cfi_endproc
 409              	.LFE66:
 410              		.size	S4_DETECTED, .-S4_DETECTED
 411              		.section	.text.S5_DETECTED,"ax",%progbits
 412              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 10


 413              		.global	S5_DETECTED
 414              		.thumb
 415              		.thumb_func
 416              		.type	S5_DETECTED, %function
 417              	S5_DETECTED:
 418              	.LFB67:
  88:main.c        **** 
  89:main.c        **** CY_ISR(S5_DETECTED) {
 419              		.loc 1 89 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0000 80B4     		push	{r7}
 425              		.cfi_def_cfa_offset 4
 426              		.cfi_offset 7, -4
 427 0002 00AF     		add	r7, sp, #0
 428              		.cfi_def_cfa_register 7
  90:main.c        ****     // Sensor has detected WHITE
  91:main.c        ****     s5 = 1; // , Black = 0, White = 1
 429              		.loc 1 91 0
 430 0004 034B     		ldr	r3, .L13
 431 0006 0122     		movs	r2, #1
 432 0008 1A70     		strb	r2, [r3]
  92:main.c        ****     //LED_Write(1u);
  93:main.c        **** }
 433              		.loc 1 93 0
 434 000a 00BF     		nop
 435 000c BD46     		mov	sp, r7
 436              		.cfi_def_cfa_register 13
 437              		@ sp needed
 438 000e 80BC     		pop	{r7}
 439              		.cfi_restore 7
 440              		.cfi_def_cfa_offset 0
 441 0010 7047     		bx	lr
 442              	.L14:
 443 0012 00BF     		.align	2
 444              	.L13:
 445 0014 00000000 		.word	s5
 446              		.cfi_endproc
 447              	.LFE67:
 448              		.size	S5_DETECTED, .-S5_DETECTED
 449              		.section	.text.S6_DETECTED,"ax",%progbits
 450              		.align	2
 451              		.global	S6_DETECTED
 452              		.thumb
 453              		.thumb_func
 454              		.type	S6_DETECTED, %function
 455              	S6_DETECTED:
 456              	.LFB68:
  94:main.c        **** 
  95:main.c        **** CY_ISR(S6_DETECTED) {
 457              		.loc 1 95 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461              		@ link register save eliminated.
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 11


 462 0000 80B4     		push	{r7}
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 0002 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
  96:main.c        ****     // Sensor has detected WHITE
  97:main.c        ****     s6 = 1; // , Black = 0, White = 1
 467              		.loc 1 97 0
 468 0004 034B     		ldr	r3, .L16
 469 0006 0122     		movs	r2, #1
 470 0008 1A70     		strb	r2, [r3]
  98:main.c        ****     //LED_Write(1u);
  99:main.c        **** }
 471              		.loc 1 99 0
 472 000a 00BF     		nop
 473 000c BD46     		mov	sp, r7
 474              		.cfi_def_cfa_register 13
 475              		@ sp needed
 476 000e 80BC     		pop	{r7}
 477              		.cfi_restore 7
 478              		.cfi_def_cfa_offset 0
 479 0010 7047     		bx	lr
 480              	.L17:
 481 0012 00BF     		.align	2
 482              	.L16:
 483 0014 00000000 		.word	s6
 484              		.cfi_endproc
 485              	.LFE68:
 486              		.size	S6_DETECTED, .-S6_DETECTED
 487              		.section	.text.TIMER_FINISH,"ax",%progbits
 488              		.align	2
 489              		.global	TIMER_FINISH
 490              		.thumb
 491              		.thumb_func
 492              		.type	TIMER_FINISH, %function
 493              	TIMER_FINISH:
 494              	.LFB69:
 100:main.c        **** 
 101:main.c        **** CY_ISR(TIMER_FINISH) {
 495              		.loc 1 101 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499 0000 80B5     		push	{r7, lr}
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 00AF     		add	r7, sp, #0
 504              		.cfi_def_cfa_register 7
 102:main.c        ****     if (currentDirection == Stop) {
 505              		.loc 1 102 0
 506 0004 0A4B     		ldr	r3, .L21
 507 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 508 0008 052B     		cmp	r3, #5
 509 000a 05D1     		bne	.L19
 103:main.c        ****         stopBuffer = stopBuffer + 1;
 510              		.loc 1 103 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 12


 511 000c 094B     		ldr	r3, .L21+4
 512 000e 1B68     		ldr	r3, [r3]
 513 0010 0133     		adds	r3, r3, #1
 514 0012 084A     		ldr	r2, .L21+4
 515 0014 1360     		str	r3, [r2]
 516 0016 02E0     		b	.L20
 517              	.L19:
 104:main.c        ****     } else {
 105:main.c        ****         stopBuffer = 0;
 518              		.loc 1 105 0
 519 0018 064B     		ldr	r3, .L21+4
 520 001a 0022     		movs	r2, #0
 521 001c 1A60     		str	r2, [r3]
 522              	.L20:
 106:main.c        ****     }
 107:main.c        ****     SetRobotMovement(); 
 523              		.loc 1 107 0
 524 001e FFF7FEFF 		bl	SetRobotMovement
 108:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 525              		.loc 1 108 0
 526 0022 FFF7FEFF 		bl	ResetSensorFlags
 109:main.c        ****     Timer_LED_ReadStatusRegister();
 527              		.loc 1 109 0
 528 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 110:main.c        **** }
 529              		.loc 1 110 0
 530 002a 00BF     		nop
 531 002c 80BD     		pop	{r7, pc}
 532              	.L22:
 533 002e 00BF     		.align	2
 534              	.L21:
 535 0030 00000000 		.word	currentDirection
 536 0034 00000000 		.word	stopBuffer
 537              		.cfi_endproc
 538              	.LFE69:
 539              		.size	TIMER_FINISH, .-TIMER_FINISH
 540              		.section	.text.main,"ax",%progbits
 541              		.align	2
 542              		.global	main
 543              		.thumb
 544              		.thumb_func
 545              		.type	main, %function
 546              	main:
 547              	.LFB70:
 111:main.c        **** 
 112:main.c        **** 
 113:main.c        **** int main()
 114:main.c        **** {
 548              		.loc 1 114 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 13


 557              		.cfi_def_cfa_register 7
 115:main.c        **** // ----- INITIALIZATIONS ----------
 116:main.c        ****     CYGlobalIntEnable;
 558              		.loc 1 116 0
 559              		.syntax unified
 560              	@ 116 "main.c" 1
 561 0004 62B6     		CPSIE   i
 562              	@ 0 "" 2
 117:main.c        ****     ResetSensorFlags();
 563              		.loc 1 117 0
 564              		.thumb
 565              		.syntax unified
 566 0006 FFF7FEFF 		bl	ResetSensorFlags
 118:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 567              		.loc 1 118 0
 568 000a FFF7FEFF 		bl	init
 119:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 569              		.loc 1 119 0
 570 000e 1F48     		ldr	r0, .L27
 571 0010 FFF7FEFF 		bl	isr_speed_StartEx
 120:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 572              		.loc 1 120 0
 573 0014 1E48     		ldr	r0, .L27+4
 574 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 121:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 575              		.loc 1 121 0
 576 001a 1E48     		ldr	r0, .L27+8
 577 001c FFF7FEFF 		bl	S3_detected_StartEx
 122:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 578              		.loc 1 122 0
 579 0020 1D48     		ldr	r0, .L27+12
 580 0022 FFF7FEFF 		bl	S4_detected_StartEx
 123:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 581              		.loc 1 123 0
 582 0026 1D48     		ldr	r0, .L27+16
 583 0028 FFF7FEFF 		bl	S5_detected_StartEx
 124:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 584              		.loc 1 124 0
 585 002c 1C48     		ldr	r0, .L27+20
 586 002e FFF7FEFF 		bl	S6_detected_StartEx
 125:main.c        ****     Timer_LED_Start();
 587              		.loc 1 125 0
 588 0032 FFF7FEFF 		bl	Timer_LED_Start
 126:main.c        ****     instructionList = findPath(map, food_list, 0);
 589              		.loc 1 126 0
 590 0036 0022     		movs	r2, #0
 591 0038 1A49     		ldr	r1, .L27+24
 592 003a 1B48     		ldr	r0, .L27+28
 593 003c FFF7FEFF 		bl	findPath
 594 0040 0246     		mov	r2, r0
 595 0042 1A4B     		ldr	r3, .L27+32
 596 0044 1A60     		str	r2, [r3]
 127:main.c        ****     numSteps = instructionsListLength();
 597              		.loc 1 127 0
 598 0046 FFF7FEFF 		bl	instructionsListLength
 599 004a 0346     		mov	r3, r0
 600 004c 1A46     		mov	r2, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 14


 601 004e 184B     		ldr	r3, .L27+36
 602 0050 1A60     		str	r2, [r3]
 128:main.c        **** // ------USB SETUP ----------------    
 129:main.c        **** #ifdef USE_USB    
 130:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 603              		.loc 1 130 0
 604 0052 0121     		movs	r1, #1
 605 0054 0020     		movs	r0, #0
 606 0056 FFF7FEFF 		bl	USBUART_Start
 131:main.c        **** #endif        
 132:main.c        ****     RF_BT_SELECT_Write(0);
 607              		.loc 1 132 0
 608 005a 0020     		movs	r0, #0
 609 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 610              	.L26:
 133:main.c        ****     
 134:main.c        ****     //usbPutString("Initialised UART");
 135:main.c        ****     for(;;)
 136:main.c        ****     {
 137:main.c        ****         if(timerInt == 1) {
 611              		.loc 1 137 0
 612 0060 144B     		ldr	r3, .L27+40
 613 0062 1B68     		ldr	r3, [r3]
 614 0064 012B     		cmp	r3, #1
 615 0066 08D1     		bne	.L24
 138:main.c        ****             timerInt = 0;
 616              		.loc 1 138 0
 617 0068 124B     		ldr	r3, .L27+40
 618 006a 0022     		movs	r2, #0
 619 006c 1A60     		str	r2, [r3]
 139:main.c        ****             // calculate RPM of M2
 140:main.c        ****             quadCountToRPM(quadDec2Count);
 620              		.loc 1 140 0
 621 006e 124B     		ldr	r3, .L27+44
 622 0070 1B68     		ldr	r3, [r3]
 623 0072 9BB2     		uxth	r3, r3
 624 0074 1846     		mov	r0, r3
 625 0076 FFF7FEFF 		bl	quadCountToRPM
 626              	.L24:
 141:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 142:main.c        ****             //usbPutString(buffer);
 143:main.c        ****             //usbPutString(" ");
 144:main.c        ****         }
 145:main.c        ****         //handle_usb();
 146:main.c        ****         if (flag_KB_string == 1)
 627              		.loc 1 146 0
 628 007a 104B     		ldr	r3, .L27+48
 629 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 007e 012B     		cmp	r3, #1
 631 0080 EED1     		bne	.L26
 147:main.c        ****         {
 148:main.c        ****             //usbPutString("Total Distance: ");
 149:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 150:main.c        ****             //usbPutString(buffer);
 151:main.c        ****             flag_KB_string = 0;
 632              		.loc 1 151 0
 633 0082 0E4B     		ldr	r3, .L27+48
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 15


 634 0084 0022     		movs	r2, #0
 635 0086 1A70     		strb	r2, [r3]
 152:main.c        ****         }           
 153:main.c        ****     }
 636              		.loc 1 153 0
 637 0088 EAE7     		b	.L26
 638              	.L28:
 639 008a 00BF     		.align	2
 640              	.L27:
 641 008c 00000000 		.word	speedTimer
 642 0090 00000000 		.word	TIMER_FINISH
 643 0094 00000000 		.word	S3_DETECTED
 644 0098 00000000 		.word	S4_DETECTED
 645 009c 00000000 		.word	S5_DETECTED
 646 00a0 00000000 		.word	S6_DETECTED
 647 00a4 00000000 		.word	food_list
 648 00a8 00000000 		.word	map
 649 00ac 00000000 		.word	instructionList
 650 00b0 00000000 		.word	numSteps
 651 00b4 00000000 		.word	timerInt
 652 00b8 00000000 		.word	quadDec2Count
 653 00bc 00000000 		.word	flag_KB_string
 654              		.cfi_endproc
 655              	.LFE70:
 656              		.size	main, .-main
 657              		.global	__aeabi_fmul
 658              		.global	__aeabi_f2iz
 659              		.section	.text.quadCountToRPM,"ax",%progbits
 660              		.align	2
 661              		.global	quadCountToRPM
 662              		.thumb
 663              		.thumb_func
 664              		.type	quadCountToRPM, %function
 665              	quadCountToRPM:
 666              	.LFB71:
 154:main.c        ****     return 0;
 155:main.c        **** }
 156:main.c        **** 
 157:main.c        **** // Calculations
 158:main.c        **** //* ========================================
 159:main.c        **** int16 quadCountToRPM(uint16 count)
 160:main.c        **** {
 667              		.loc 1 160 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 16
 670              		@ frame_needed = 1, uses_anonymous_args = 0
 671 0000 90B5     		push	{r4, r7, lr}
 672              		.cfi_def_cfa_offset 12
 673              		.cfi_offset 4, -12
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 85B0     		sub	sp, sp, #20
 677              		.cfi_def_cfa_offset 32
 678 0004 00AF     		add	r7, sp, #0
 679              		.cfi_def_cfa_register 7
 680 0006 0346     		mov	r3, r0
 681 0008 FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 16


 161:main.c        ****     float cps = count/57.00;
 682              		.loc 1 161 0
 683 000a FB88     		ldrh	r3, [r7, #6]
 684 000c 1846     		mov	r0, r3
 685 000e FFF7FEFF 		bl	__aeabi_i2d
 686 0012 4FF00002 		mov	r2, #0
 687 0016 0D4B     		ldr	r3, .L31
 688 0018 FFF7FEFF 		bl	__aeabi_ddiv
 689 001c 0346     		mov	r3, r0
 690 001e 0C46     		mov	r4, r1
 691 0020 1846     		mov	r0, r3
 692 0022 2146     		mov	r1, r4
 693 0024 FFF7FEFF 		bl	__aeabi_d2f
 694 0028 0346     		mov	r3, r0
 695 002a FB60     		str	r3, [r7, #12]	@ float
 162:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 696              		.loc 1 162 0
 697 002c 0849     		ldr	r1, .L31+4
 698 002e F868     		ldr	r0, [r7, #12]	@ float
 699 0030 FFF7FEFF 		bl	__aeabi_fmul
 700 0034 0346     		mov	r3, r0
 701 0036 1846     		mov	r0, r3
 702 0038 FFF7FEFF 		bl	__aeabi_f2iz
 703 003c 0346     		mov	r3, r0
 704 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 163:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 164:main.c        ****     return rpm;
 705              		.loc 1 164 0
 706 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 165:main.c        ****     //usbPutString(buffer);
 166:main.c        ****     //usbPutString("rpm ");
 167:main.c        **** }
 707              		.loc 1 167 0
 708 0044 1846     		mov	r0, r3
 709 0046 1437     		adds	r7, r7, #20
 710              		.cfi_def_cfa_offset 12
 711 0048 BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 004a 90BD     		pop	{r4, r7, pc}
 715              	.L32:
 716              		.align	2
 717              	.L31:
 718 004c 00804C40 		.word	1078755328
 719 0050 00007041 		.word	1097859072
 720              		.cfi_endproc
 721              	.LFE71:
 722              		.size	quadCountToRPM, .-quadCountToRPM
 723              		.section	.text.ResetSensorFlags,"ax",%progbits
 724              		.align	2
 725              		.global	ResetSensorFlags
 726              		.thumb
 727              		.thumb_func
 728              		.type	ResetSensorFlags, %function
 729              	ResetSensorFlags:
 730              	.LFB72:
 168:main.c        **** 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 17


 169:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 170:main.c        **** void ResetSensorFlags() {
 731              		.loc 1 170 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736 0000 80B4     		push	{r7}
 737              		.cfi_def_cfa_offset 4
 738              		.cfi_offset 7, -4
 739 0002 00AF     		add	r7, sp, #0
 740              		.cfi_def_cfa_register 7
 171:main.c        ****     s3 = 0;
 741              		.loc 1 171 0
 742 0004 074B     		ldr	r3, .L34
 743 0006 0022     		movs	r2, #0
 744 0008 1A70     		strb	r2, [r3]
 172:main.c        ****     s4 = 0;
 745              		.loc 1 172 0
 746 000a 074B     		ldr	r3, .L34+4
 747 000c 0022     		movs	r2, #0
 748 000e 1A70     		strb	r2, [r3]
 173:main.c        ****     s5 = 0;
 749              		.loc 1 173 0
 750 0010 064B     		ldr	r3, .L34+8
 751 0012 0022     		movs	r2, #0
 752 0014 1A70     		strb	r2, [r3]
 174:main.c        ****     s6 = 0;
 753              		.loc 1 174 0
 754 0016 064B     		ldr	r3, .L34+12
 755 0018 0022     		movs	r2, #0
 756 001a 1A70     		strb	r2, [r3]
 175:main.c        **** }
 757              		.loc 1 175 0
 758 001c 00BF     		nop
 759 001e BD46     		mov	sp, r7
 760              		.cfi_def_cfa_register 13
 761              		@ sp needed
 762 0020 80BC     		pop	{r7}
 763              		.cfi_restore 7
 764              		.cfi_def_cfa_offset 0
 765 0022 7047     		bx	lr
 766              	.L35:
 767              		.align	2
 768              	.L34:
 769 0024 00000000 		.word	s3
 770 0028 00000000 		.word	s4
 771 002c 00000000 		.word	s5
 772 0030 00000000 		.word	s6
 773              		.cfi_endproc
 774              	.LFE72:
 775              		.size	ResetSensorFlags, .-ResetSensorFlags
 776              		.global	xBlocksize
 777              		.data
 778 0045 000000   		.align	2
 779              		.type	xBlocksize, %object
 780              		.size	xBlocksize, 4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 18


 781              	xBlocksize:
 782 0048 0000FF42 		.word	1124007936
 783              		.global	yBlocksize
 784              		.align	2
 785              		.type	yBlocksize, %object
 786              		.size	yBlocksize, 4
 787              	yBlocksize:
 788 004c 0000A042 		.word	1117782016
 789              		.global	currentRow
 790              		.type	currentRow, %object
 791              		.size	currentRow, 1
 792              	currentRow:
 793 0050 01       		.byte	1
 794              		.global	currentCol
 795              		.type	currentCol, %object
 796              		.size	currentCol, 1
 797              	currentCol:
 798 0051 01       		.byte	1
 799              		.global	stoppedAfterTurn
 800              		.bss
 801              		.type	stoppedAfterTurn, %object
 802              		.size	stoppedAfterTurn, 1
 803              	stoppedAfterTurn:
 804 0034 00       		.space	1
 805              		.global	ignoreSensor
 806              		.type	ignoreSensor, %object
 807              		.size	ignoreSensor, 1
 808              	ignoreSensor:
 809 0035 00       		.space	1
 810              		.global	__aeabi_fcmpge
 811              		.section	.text.CheckSensorDirection,"ax",%progbits
 812              		.align	2
 813              		.global	CheckSensorDirection
 814              		.thumb
 815              		.thumb_func
 816              		.type	CheckSensorDirection, %function
 817              	CheckSensorDirection:
 818              	.LFB73:
 176:main.c        **** 
 177:main.c        **** float xBlocksize = 127.5; // 127.5
 178:main.c        **** float yBlocksize = 80; // 80
 179:main.c        **** uint8 currentRow = 1;
 180:main.c        **** uint8 currentCol = 1;
 181:main.c        **** 
 182:main.c        **** /*enum DirectionState GetNextStep() {
 183:main.c        ****     enum DirectionState directionState;
 184:main.c        ****     // Determines robot movement and orientation to follow optimal path
 185:main.c        ****     // enum DirectionState directionState = Stop;
 186:main.c        ****     previousOrientation = currentOrientation;
 187:main.c        ****     
 188:main.c        ****     if(map[currentRow][currentCol] == 9) {
 189:main.c        ****         directionState = Stop; // reached target
 190:main.c        ****         return directionState;
 191:main.c        ****     }
 192:main.c        ****         
 193:main.c        ****     switch (previousOrientation) {
 194:main.c        ****             case Up:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 19


 195:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 196:main.c        ****                     currentOrientation = Up; 
 197:main.c        ****                     directionState = Forward;
 198:main.c        ****                     currentRow--;// update position
 199:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 200:main.c        ****                     currentOrientation = Left;
 201:main.c        ****                     directionState = waitForLeftTurn;
 202:main.c        ****                     //currentRow--;
 203:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 204:main.c        ****                     currentOrientation = Right;
 205:main.c        ****                     directionState = waitForRightTurn;
 206:main.c        ****                     //currentRow++; // update position
 207:main.c        ****                 }
 208:main.c        ****                 break;
 209:main.c        ****             case Down:
 210:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 211:main.c        ****                     currentOrientation = Down;
 212:main.c        ****                     directionState = Forward;
 213:main.c        ****                     currentRow++;
 214:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 215:main.c        ****                     currentOrientation = Left;
 216:main.c        ****                     directionState = waitForRightTurn;
 217:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 218:main.c        ****                     currentOrientation = Right;
 219:main.c        ****                     directionState = waitForLeftTurn;
 220:main.c        ****                 }
 221:main.c        ****                 break;
 222:main.c        ****             case Left:
 223:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 224:main.c        ****                     currentOrientation = Left;
 225:main.c        ****                     directionState = Forward;
 226:main.c        ****                     currentCol--; // update position
 227:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 228:main.c        ****                     currentOrientation = Up;
 229:main.c        ****                     directionState = waitForRightTurn;
 230:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 231:main.c        ****                     currentOrientation = Down;
 232:main.c        ****                     directionState = waitForLeftTurn;
 233:main.c        ****                 }
 234:main.c        ****                 break;
 235:main.c        ****             case Right:
 236:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 237:main.c        ****                     currentOrientation = Right;
 238:main.c        ****                     directionState = Forward;
 239:main.c        ****                     currentCol++; // update position
 240:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 241:main.c        ****                     currentOrientation = Up;
 242:main.c        ****                     directionState = waitForLeftTurn;
 243:main.c        ****                     //currentCol++; // update position
 244:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 245:main.c        ****                     currentOrientation = Down;
 246:main.c        ****                     directionState = waitForRightTurn;
 247:main.c        ****                     //currentCol--; // update position
 248:main.c        ****                 }
 249:main.c        ****                 break;
 250:main.c        ****             default:
 251:main.c        ****                 break;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 20


 252:main.c        ****         }
 253:main.c        ****     
 254:main.c        ****     return directionState;
 255:main.c        **** }
 256:main.c        **** */
 257:main.c        **** uint8 stoppedAfterTurn = 0;
 258:main.c        **** uint8 ignoreSensor = 0;
 259:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 260:main.c        **** enum RobotMovement CheckSensorDirection() {
 819              		.loc 1 260 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 8
 822              		@ frame_needed = 1, uses_anonymous_args = 0
 823 0000 80B5     		push	{r7, lr}
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 82B0     		sub	sp, sp, #8
 828              		.cfi_def_cfa_offset 16
 829 0004 00AF     		add	r7, sp, #0
 830              		.cfi_def_cfa_register 7
 261:main.c        ****     float blocksize;
 262:main.c        ****     if(currentOrientation == Up || currentOrientation == Down) {
 831              		.loc 1 262 0
 832 0006 964B     		ldr	r3, .L66
 833 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 834 000a 002B     		cmp	r3, #0
 835 000c 03D0     		beq	.L37
 836              		.loc 1 262 0 is_stmt 0 discriminator 1
 837 000e 944B     		ldr	r3, .L66
 838 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 839 0012 012B     		cmp	r3, #1
 840 0014 03D1     		bne	.L38
 841              	.L37:
 263:main.c        ****         blocksize = yBlocksize;
 842              		.loc 1 263 0 is_stmt 1
 843 0016 934B     		ldr	r3, .L66+4
 844 0018 1B68     		ldr	r3, [r3]	@ float
 845 001a 7B60     		str	r3, [r7, #4]	@ float
 846 001c 02E0     		b	.L39
 847              	.L38:
 264:main.c        ****     } else {
 265:main.c        ****         blocksize = xBlocksize;
 848              		.loc 1 265 0
 849 001e 924B     		ldr	r3, .L66+8
 850 0020 1B68     		ldr	r3, [r3]	@ float
 851 0022 7B60     		str	r3, [r7, #4]	@ float
 852              	.L39:
 266:main.c        ****     }
 267:main.c        ****     //if(currentInstruction)
 268:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 853              		.loc 1 268 0
 854 0024 0523     		movs	r3, #5
 855 0026 FB70     		strb	r3, [r7, #3]
 269:main.c        ****     
 270:main.c        ****     if (stoppedAfterTurn == 1) {
 856              		.loc 1 270 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 21


 857 0028 904B     		ldr	r3, .L66+12
 858 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 859 002c 012B     		cmp	r3, #1
 860 002e 16D1     		bne	.L40
 271:main.c        ****         if (stopBuffer <= 50) {
 861              		.loc 1 271 0
 862 0030 8F4B     		ldr	r3, .L66+16
 863 0032 1B68     		ldr	r3, [r3]
 864 0034 322B     		cmp	r3, #50
 865 0036 06D8     		bhi	.L41
 272:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 866              		.loc 1 272 0
 867 0038 0523     		movs	r3, #5
 868 003a FB70     		strb	r3, [r7, #3]
 273:main.c        ****             previousDirection = directionState;
 869              		.loc 1 273 0
 870 003c 8D4A     		ldr	r2, .L66+20
 871 003e FB78     		ldrb	r3, [r7, #3]
 872 0040 1370     		strb	r3, [r2]
 274:main.c        ****             return directionState;
 873              		.loc 1 274 0
 874 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 875 0044 07E1     		b	.L42
 876              	.L41:
 275:main.c        ****         }
 276:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 277:main.c        ****         totalDistance = 0; // reset distance
 877              		.loc 1 277 0
 878 0046 8C4B     		ldr	r3, .L66+24
 879 0048 4FF00002 		mov	r2, #0
 880 004c 1A60     		str	r2, [r3]	@ float
 278:main.c        ****         previousDirection = directionState;
 881              		.loc 1 278 0
 882 004e 894A     		ldr	r2, .L66+20
 883 0050 FB78     		ldrb	r3, [r7, #3]
 884 0052 1370     		strb	r3, [r2]
 279:main.c        ****         stoppedAfterTurn = 0;
 885              		.loc 1 279 0
 886 0054 854B     		ldr	r3, .L66+12
 887 0056 0022     		movs	r2, #0
 888 0058 1A70     		strb	r2, [r3]
 280:main.c        ****         return directionState;
 889              		.loc 1 280 0
 890 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 891 005c FBE0     		b	.L42
 892              	.L40:
 281:main.c        ****     }
 282:main.c        ****     if (totalDistance >= blocksize) {
 893              		.loc 1 282 0
 894 005e 864B     		ldr	r3, .L66+24
 895 0060 1B68     		ldr	r3, [r3]	@ float
 896 0062 7968     		ldr	r1, [r7, #4]	@ float
 897 0064 1846     		mov	r0, r3
 898 0066 FFF7FEFF 		bl	__aeabi_fcmpge
 899 006a 0346     		mov	r3, r0
 900 006c 002B     		cmp	r3, #0
 901 006e 08D0     		beq	.L65
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 22


 283:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 284:main.c        ****         totalDistance = 0; // reset distance
 902              		.loc 1 284 0
 903 0070 814B     		ldr	r3, .L66+24
 904 0072 4FF00002 		mov	r2, #0
 905 0076 1A60     		str	r2, [r3]	@ float
 285:main.c        ****         previousDirection = directionState;
 906              		.loc 1 285 0
 907 0078 7E4A     		ldr	r2, .L66+20
 908 007a FB78     		ldrb	r3, [r7, #3]
 909 007c 1370     		strb	r3, [r2]
 286:main.c        ****         return directionState;
 910              		.loc 1 286 0
 911 007e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 912 0080 E9E0     		b	.L42
 913              	.L65:
 287:main.c        ****     }
 288:main.c        ****     
 289:main.c        ****     // STOP BUFFER * ========================================
 290:main.c        ****     if (previousDirection == Stop) {
 914              		.loc 1 290 0
 915 0082 7C4B     		ldr	r3, .L66+20
 916 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 917 0086 052B     		cmp	r3, #5
 918 0088 0AD1     		bne	.L45
 291:main.c        ****         if (stopBuffer <= 50) {
 919              		.loc 1 291 0
 920 008a 794B     		ldr	r3, .L66+16
 921 008c 1B68     		ldr	r3, [r3]
 922 008e 322B     		cmp	r3, #50
 923 0090 04D8     		bhi	.L46
 292:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 924              		.loc 1 292 0
 925 0092 0523     		movs	r3, #5
 926 0094 FB70     		strb	r3, [r7, #3]
 293:main.c        ****             previousDirection = directionState;
 927              		.loc 1 293 0
 928 0096 774A     		ldr	r2, .L66+20
 929 0098 FB78     		ldrb	r3, [r7, #3]
 930 009a 1370     		strb	r3, [r2]
 931              	.L46:
 294:main.c        ****         } else {
 295:main.c        ****             //directionState = ForwardAfterTurn;
 296:main.c        ****         }
 297:main.c        ****         return directionState;
 932              		.loc 1 297 0
 933 009c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 934 009e DAE0     		b	.L42
 935              	.L45:
 298:main.c        ****     }
 299:main.c        **** 
 300:main.c        ****     // TURNING * ========================================    
 301:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 936              		.loc 1 301 0
 937 00a0 744B     		ldr	r3, .L66+20
 938 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 939 00a4 082B     		cmp	r3, #8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 23


 940 00a6 0ED1     		bne	.L47
 302:main.c        ****         if (s3 || s4) {
 941              		.loc 1 302 0
 942 00a8 744B     		ldr	r3, .L66+28
 943 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 00ac 002B     		cmp	r3, #0
 945 00ae 03D1     		bne	.L48
 946              		.loc 1 302 0 is_stmt 0 discriminator 1
 947 00b0 734B     		ldr	r3, .L66+32
 948 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 00b4 002B     		cmp	r3, #0
 950 00b6 06D0     		beq	.L47
 951              	.L48:
 303:main.c        ****             //ignoreSensor = 0;
 304:main.c        ****             //usbPutString("Forward\n");
 305:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 952              		.loc 1 305 0 is_stmt 1
 953 00b8 0023     		movs	r3, #0
 954 00ba FB70     		strb	r3, [r7, #3]
 306:main.c        ****             previousDirection = directionState;
 955              		.loc 1 306 0
 956 00bc 6D4A     		ldr	r2, .L66+20
 957 00be FB78     		ldrb	r3, [r7, #3]
 958 00c0 1370     		strb	r3, [r2]
 307:main.c        ****             return directionState;
 959              		.loc 1 307 0
 960 00c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 961 00c4 C7E0     		b	.L42
 962              	.L47:
 308:main.c        ****         }
 309:main.c        ****     }
 310:main.c        **** 
 311:main.c        ****     if(previousDirection == waitForRightTurn) {
 963              		.loc 1 311 0
 964 00c6 6B4B     		ldr	r3, .L66+20
 965 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 966 00ca 022B     		cmp	r3, #2
 967 00cc 11D1     		bne	.L49
 312:main.c        ****         //ignoreSensor = 0;
 313:main.c        ****         if(!s4) {
 968              		.loc 1 313 0
 969 00ce 6C4B     		ldr	r3, .L66+32
 970 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 00d2 002B     		cmp	r3, #0
 972 00d4 06D1     		bne	.L50
 314:main.c        ****             //usbPutString("Turn Right\n");
 315:main.c        ****             directionState = TurnRight;
 973              		.loc 1 315 0
 974 00d6 0123     		movs	r3, #1
 975 00d8 FB70     		strb	r3, [r7, #3]
 316:main.c        ****             previousDirection = directionState;
 976              		.loc 1 316 0
 977 00da 664A     		ldr	r2, .L66+20
 978 00dc FB78     		ldrb	r3, [r7, #3]
 979 00de 1370     		strb	r3, [r2]
 317:main.c        ****             return directionState;
 980              		.loc 1 317 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 24


 981 00e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 982 00e2 B8E0     		b	.L42
 983              	.L50:
 318:main.c        ****         } else {
 319:main.c        ****             //usbPutString("Wait for Right Turn\n");
 320:main.c        ****             directionState = waitForRightTurn;
 984              		.loc 1 320 0
 985 00e4 0223     		movs	r3, #2
 986 00e6 FB70     		strb	r3, [r7, #3]
 321:main.c        ****             previousDirection = directionState;
 987              		.loc 1 321 0
 988 00e8 624A     		ldr	r2, .L66+20
 989 00ea FB78     		ldrb	r3, [r7, #3]
 990 00ec 1370     		strb	r3, [r2]
 322:main.c        ****             return directionState;
 991              		.loc 1 322 0
 992 00ee FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 993 00f0 B1E0     		b	.L42
 994              	.L49:
 323:main.c        ****         }
 324:main.c        ****     }
 325:main.c        **** 
 326:main.c        ****     if(previousDirection == waitForLeftTurn) {
 995              		.loc 1 326 0
 996 00f2 604B     		ldr	r3, .L66+20
 997 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 998 00f6 012B     		cmp	r3, #1
 999 00f8 11D1     		bne	.L51
 327:main.c        ****         //ignoreSensor = 0;
 328:main.c        ****         if(!s3) {
 1000              		.loc 1 328 0
 1001 00fa 604B     		ldr	r3, .L66+28
 1002 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 00fe 002B     		cmp	r3, #0
 1004 0100 06D1     		bne	.L52
 329:main.c        ****             //usbPutString("Turn Left\n");
 330:main.c        ****             directionState = TurnLeft;
 1005              		.loc 1 330 0
 1006 0102 0223     		movs	r3, #2
 1007 0104 FB70     		strb	r3, [r7, #3]
 331:main.c        ****             previousDirection = directionState;
 1008              		.loc 1 331 0
 1009 0106 5B4A     		ldr	r2, .L66+20
 1010 0108 FB78     		ldrb	r3, [r7, #3]
 1011 010a 1370     		strb	r3, [r2]
 332:main.c        ****             return directionState;
 1012              		.loc 1 332 0
 1013 010c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1014 010e A2E0     		b	.L42
 1015              	.L52:
 333:main.c        ****         } else {
 334:main.c        ****             //usbPutString("Wait for Left Turn\n");
 335:main.c        ****             directionState = waitForLeftTurn;
 1016              		.loc 1 335 0
 1017 0110 0123     		movs	r3, #1
 1018 0112 FB70     		strb	r3, [r7, #3]
 336:main.c        ****             previousDirection = directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 25


 1019              		.loc 1 336 0
 1020 0114 574A     		ldr	r2, .L66+20
 1021 0116 FB78     		ldrb	r3, [r7, #3]
 1022 0118 1370     		strb	r3, [r2]
 337:main.c        ****             return directionState;
 1023              		.loc 1 337 0
 1024 011a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1025 011c 9BE0     		b	.L42
 1026              	.L51:
 338:main.c        ****         }
 339:main.c        ****     }
 340:main.c        **** 
 341:main.c        ****     if(previousDirection == TurnRight) {
 1027              		.loc 1 341 0
 1028 011e 554B     		ldr	r3, .L66+20
 1029 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1030 0122 012B     		cmp	r3, #1
 1031 0124 24D1     		bne	.L53
 342:main.c        ****         if(s5 && s6) {
 1032              		.loc 1 342 0
 1033 0126 574B     		ldr	r3, .L66+36
 1034 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1035 012a 002B     		cmp	r3, #0
 1036 012c 0AD0     		beq	.L54
 1037              		.loc 1 342 0 is_stmt 0 discriminator 1
 1038 012e 564B     		ldr	r3, .L66+40
 1039 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1040 0132 002B     		cmp	r3, #0
 1041 0134 06D0     		beq	.L54
 343:main.c        ****             //usbPutString("Turn Right\n");
 344:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 1042              		.loc 1 344 0 is_stmt 1
 1043 0136 0123     		movs	r3, #1
 1044 0138 FB70     		strb	r3, [r7, #3]
 345:main.c        ****             previousDirection = directionState;
 1045              		.loc 1 345 0
 1046 013a 4E4A     		ldr	r2, .L66+20
 1047 013c FB78     		ldrb	r3, [r7, #3]
 1048 013e 1370     		strb	r3, [r2]
 346:main.c        ****             return directionState;
 1049              		.loc 1 346 0
 1050 0140 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1051 0142 88E0     		b	.L42
 1052              	.L54:
 347:main.c        ****         } 
 348:main.c        ****         else if (!s5 || !s6) {
 1053              		.loc 1 348 0
 1054 0144 4F4B     		ldr	r3, .L66+36
 1055 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1056 0148 002B     		cmp	r3, #0
 1057 014a 03D0     		beq	.L55
 1058              		.loc 1 348 0 is_stmt 0 discriminator 1
 1059 014c 4E4B     		ldr	r3, .L66+40
 1060 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1061 0150 002B     		cmp	r3, #0
 1062 0152 0DD1     		bne	.L53
 1063              	.L55:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 26


 349:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 350:main.c        ****             //usbPutString("Stop after Right Turn");
 351:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 1064              		.loc 1 351 0 is_stmt 1
 1065 0154 0523     		movs	r3, #5
 1066 0156 FB70     		strb	r3, [r7, #3]
 352:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 1067              		.loc 1 352 0
 1068 0158 474B     		ldr	r3, .L66+24
 1069 015a 4FF00002 		mov	r2, #0
 1070 015e 1A60     		str	r2, [r3]	@ float
 353:main.c        ****             previousDirection = directionState;
 1071              		.loc 1 353 0
 1072 0160 444A     		ldr	r2, .L66+20
 1073 0162 FB78     		ldrb	r3, [r7, #3]
 1074 0164 1370     		strb	r3, [r2]
 354:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 1075              		.loc 1 354 0
 1076 0166 414B     		ldr	r3, .L66+12
 1077 0168 0122     		movs	r2, #1
 1078 016a 1A70     		strb	r2, [r3]
 355:main.c        ****             return directionState;
 1079              		.loc 1 355 0
 1080 016c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1081 016e 72E0     		b	.L42
 1082              	.L53:
 356:main.c        ****         }
 357:main.c        ****     }    
 358:main.c        **** 
 359:main.c        ****     if(previousDirection == TurnLeft) {
 1083              		.loc 1 359 0
 1084 0170 404B     		ldr	r3, .L66+20
 1085 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1086 0174 022B     		cmp	r3, #2
 1087 0176 24D1     		bne	.L56
 360:main.c        ****         if(s5 && s6) {
 1088              		.loc 1 360 0
 1089 0178 424B     		ldr	r3, .L66+36
 1090 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1091 017c 002B     		cmp	r3, #0
 1092 017e 0AD0     		beq	.L57
 1093              		.loc 1 360 0 is_stmt 0 discriminator 1
 1094 0180 414B     		ldr	r3, .L66+40
 1095 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1096 0184 002B     		cmp	r3, #0
 1097 0186 06D0     		beq	.L57
 361:main.c        ****             //usbPutString("Turn Left\n");
 362:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 1098              		.loc 1 362 0 is_stmt 1
 1099 0188 0223     		movs	r3, #2
 1100 018a FB70     		strb	r3, [r7, #3]
 363:main.c        ****             previousDirection = directionState;
 1101              		.loc 1 363 0
 1102 018c 394A     		ldr	r2, .L66+20
 1103 018e FB78     		ldrb	r3, [r7, #3]
 1104 0190 1370     		strb	r3, [r2]
 364:main.c        ****             return directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 27


 1105              		.loc 1 364 0
 1106 0192 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1107 0194 5FE0     		b	.L42
 1108              	.L57:
 365:main.c        ****         } 
 366:main.c        ****         else if (!s5 || !s6) {
 1109              		.loc 1 366 0
 1110 0196 3B4B     		ldr	r3, .L66+36
 1111 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 019a 002B     		cmp	r3, #0
 1113 019c 03D0     		beq	.L58
 1114              		.loc 1 366 0 is_stmt 0 discriminator 1
 1115 019e 3A4B     		ldr	r3, .L66+40
 1116 01a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1117 01a2 002B     		cmp	r3, #0
 1118 01a4 0DD1     		bne	.L56
 1119              	.L58:
 367:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 368:main.c        ****            // usbPutString("Stop after Left Turn\n");
 369:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 1120              		.loc 1 369 0 is_stmt 1
 1121 01a6 0523     		movs	r3, #5
 1122 01a8 FB70     		strb	r3, [r7, #3]
 370:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 1123              		.loc 1 370 0
 1124 01aa 334B     		ldr	r3, .L66+24
 1125 01ac 4FF00002 		mov	r2, #0
 1126 01b0 1A60     		str	r2, [r3]	@ float
 371:main.c        ****             previousDirection = directionState;
 1127              		.loc 1 371 0
 1128 01b2 304A     		ldr	r2, .L66+20
 1129 01b4 FB78     		ldrb	r3, [r7, #3]
 1130 01b6 1370     		strb	r3, [r2]
 372:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 1131              		.loc 1 372 0
 1132 01b8 2C4B     		ldr	r3, .L66+12
 1133 01ba 0122     		movs	r2, #1
 1134 01bc 1A70     		strb	r2, [r3]
 373:main.c        ****             return directionState;
 1135              		.loc 1 373 0
 1136 01be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1137 01c0 49E0     		b	.L42
 1138              	.L56:
 374:main.c        ****         }
 375:main.c        ****     }
 376:main.c        ****     
 377:main.c        ****     // COURSE CORRECTION * ========================================
 378:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 1139              		.loc 1 378 0
 1140 01c2 2C4B     		ldr	r3, .L66+20
 1141 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 01c6 002B     		cmp	r3, #0
 1143 01c8 07D0     		beq	.L59
 1144              		.loc 1 378 0 is_stmt 0 discriminator 1
 1145 01ca 2A4B     		ldr	r3, .L66+20
 1146 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1147 01ce 032B     		cmp	r3, #3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 28


 1148 01d0 03D0     		beq	.L59
 1149              		.loc 1 378 0 discriminator 2
 1150 01d2 284B     		ldr	r3, .L66+20
 1151 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1152 01d6 042B     		cmp	r3, #4
 1153 01d8 15D1     		bne	.L60
 1154              	.L59:
 379:main.c        ****         //ignoreSensor = 0;
 380:main.c        ****         if(s6) {
 1155              		.loc 1 380 0 is_stmt 1
 1156 01da 2B4B     		ldr	r3, .L66+40
 1157 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1158 01de 002B     		cmp	r3, #0
 1159 01e0 06D0     		beq	.L61
 381:main.c        ****             //usbPutString("Adjust to the left\n");
 382:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 1160              		.loc 1 382 0
 1161 01e2 0323     		movs	r3, #3
 1162 01e4 FB70     		strb	r3, [r7, #3]
 383:main.c        ****             previousDirection = directionState;
 1163              		.loc 1 383 0
 1164 01e6 234A     		ldr	r2, .L66+20
 1165 01e8 FB78     		ldrb	r3, [r7, #3]
 1166 01ea 1370     		strb	r3, [r2]
 384:main.c        ****             return directionState;
 1167              		.loc 1 384 0
 1168 01ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1169 01ee 32E0     		b	.L42
 1170              	.L61:
 385:main.c        ****         }
 386:main.c        ****         if(s5) {
 1171              		.loc 1 386 0
 1172 01f0 244B     		ldr	r3, .L66+36
 1173 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1174 01f4 002B     		cmp	r3, #0
 1175 01f6 06D0     		beq	.L60
 387:main.c        ****             //usbPutString("Adjust to the right\n");
 388:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 1176              		.loc 1 388 0
 1177 01f8 0423     		movs	r3, #4
 1178 01fa FB70     		strb	r3, [r7, #3]
 389:main.c        ****             previousDirection = directionState;
 1179              		.loc 1 389 0
 1180 01fc 1D4A     		ldr	r2, .L66+20
 1181 01fe FB78     		ldrb	r3, [r7, #3]
 1182 0200 1370     		strb	r3, [r2]
 390:main.c        ****             return directionState;
 1183              		.loc 1 390 0
 1184 0202 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1185 0204 27E0     		b	.L42
 1186              	.L60:
 391:main.c        ****         }
 392:main.c        ****     }
 393:main.c        ****     
 394:main.c        ****     // FORWARD * ========================================
 395:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 1187              		.loc 1 395 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 29


 1188 0206 1D4B     		ldr	r3, .L66+28
 1189 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1190 020a 002B     		cmp	r3, #0
 1191 020c 12D0     		beq	.L62
 1192              		.loc 1 395 0 is_stmt 0 discriminator 1
 1193 020e 1C4B     		ldr	r3, .L66+32
 1194 0210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1195 0212 002B     		cmp	r3, #0
 1196 0214 0ED0     		beq	.L62
 1197              		.loc 1 395 0 discriminator 2
 1198 0216 1B4B     		ldr	r3, .L66+36
 1199 0218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1200 021a 002B     		cmp	r3, #0
 1201 021c 0AD1     		bne	.L62
 1202              		.loc 1 395 0 discriminator 3
 1203 021e 1A4B     		ldr	r3, .L66+40
 1204 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1205 0222 002B     		cmp	r3, #0
 1206 0224 06D1     		bne	.L62
 396:main.c        ****         //usbPutString("Forward\n");
 397:main.c        ****         directionState = Forward;
 1207              		.loc 1 397 0 is_stmt 1
 1208 0226 0023     		movs	r3, #0
 1209 0228 FB70     		strb	r3, [r7, #3]
 398:main.c        ****         previousDirection = directionState;
 1210              		.loc 1 398 0
 1211 022a 124A     		ldr	r2, .L66+20
 1212 022c FB78     		ldrb	r3, [r7, #3]
 1213 022e 1370     		strb	r3, [r2]
 399:main.c        ****         return directionState;   
 1214              		.loc 1 399 0
 1215 0230 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1216 0232 10E0     		b	.L42
 1217              	.L62:
 400:main.c        ****     }
 401:main.c        **** 
 402:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 403:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 404:main.c        ****     if (previousDirection == Unknown) {
 1218              		.loc 1 404 0
 1219 0234 0F4B     		ldr	r3, .L66+20
 1220 0236 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1221 0238 062B     		cmp	r3, #6
 1222 023a 06D1     		bne	.L63
 405:main.c        ****         directionState = Forward;
 1223              		.loc 1 405 0
 1224 023c 0023     		movs	r3, #0
 1225 023e FB70     		strb	r3, [r7, #3]
 406:main.c        ****         previousDirection = directionState;
 1226              		.loc 1 406 0
 1227 0240 0C4A     		ldr	r2, .L66+20
 1228 0242 FB78     		ldrb	r3, [r7, #3]
 1229 0244 1370     		strb	r3, [r2]
 407:main.c        ****         return directionState;
 1230              		.loc 1 407 0
 1231 0246 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1232 0248 05E0     		b	.L42
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 30


 1233              	.L63:
 408:main.c        ****     }
 409:main.c        **** 
 410:main.c        ****     // Possible reason
 411:main.c        ****     previousDirection = currentDirection;
 1234              		.loc 1 411 0
 1235 024a 104B     		ldr	r3, .L66+44
 1236 024c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1237 024e 094B     		ldr	r3, .L66+20
 1238 0250 1A70     		strb	r2, [r3]
 412:main.c        ****     return previousDirection;
 1239              		.loc 1 412 0
 1240 0252 084B     		ldr	r3, .L66+20
 1241 0254 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1242              	.L42:
 413:main.c        **** }
 1243              		.loc 1 413 0
 1244 0256 1846     		mov	r0, r3
 1245 0258 0837     		adds	r7, r7, #8
 1246              		.cfi_def_cfa_offset 8
 1247 025a BD46     		mov	sp, r7
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 025c 80BD     		pop	{r7, pc}
 1251              	.L67:
 1252 025e 00BF     		.align	2
 1253              	.L66:
 1254 0260 00000000 		.word	currentOrientation
 1255 0264 00000000 		.word	yBlocksize
 1256 0268 00000000 		.word	xBlocksize
 1257 026c 00000000 		.word	stoppedAfterTurn
 1258 0270 00000000 		.word	stopBuffer
 1259 0274 00000000 		.word	previousDirection
 1260 0278 00000000 		.word	totalDistance
 1261 027c 00000000 		.word	s3
 1262 0280 00000000 		.word	s4
 1263 0284 00000000 		.word	s5
 1264 0288 00000000 		.word	s6
 1265 028c 00000000 		.word	currentDirection
 1266              		.cfi_endproc
 1267              	.LFE73:
 1268              		.size	CheckSensorDirection, .-CheckSensorDirection
 1269              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 1270              		.align	2
 1271              		.global	GetMovementAccordingToInstruction
 1272              		.thumb
 1273              		.thumb_func
 1274              		.type	GetMovementAccordingToInstruction, %function
 1275              	GetMovementAccordingToInstruction:
 1276              	.LFB74:
 414:main.c        **** 
 415:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 1277              		.loc 1 415 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 8
 1280              		@ frame_needed = 1, uses_anonymous_args = 0
 1281              		@ link register save eliminated.
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 31


 1282 0000 80B4     		push	{r7}
 1283              		.cfi_def_cfa_offset 4
 1284              		.cfi_offset 7, -4
 1285 0002 83B0     		sub	sp, sp, #12
 1286              		.cfi_def_cfa_offset 16
 1287 0004 00AF     		add	r7, sp, #0
 1288              		.cfi_def_cfa_register 7
 416:main.c        ****     float blocksize;
 417:main.c        ****     if(currentOrientation == Up || currentOrientation == Down) {
 1289              		.loc 1 417 0
 1290 0006 1F4B     		ldr	r3, .L82
 1291 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1292 000a 002B     		cmp	r3, #0
 1293 000c 03D0     		beq	.L69
 1294              		.loc 1 417 0 is_stmt 0 discriminator 1
 1295 000e 1D4B     		ldr	r3, .L82
 1296 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1297 0012 012B     		cmp	r3, #1
 1298 0014 03D1     		bne	.L70
 1299              	.L69:
 418:main.c        ****         blocksize = yBlocksize;
 1300              		.loc 1 418 0 is_stmt 1
 1301 0016 1C4B     		ldr	r3, .L82+4
 1302 0018 1B68     		ldr	r3, [r3]	@ float
 1303 001a 7B60     		str	r3, [r7, #4]	@ float
 1304 001c 02E0     		b	.L71
 1305              	.L70:
 419:main.c        ****     } else {
 420:main.c        ****         blocksize = xBlocksize;
 1306              		.loc 1 420 0
 1307 001e 1B4B     		ldr	r3, .L82+8
 1308 0020 1B68     		ldr	r3, [r3]	@ float
 1309 0022 7B60     		str	r3, [r7, #4]	@ float
 1310              	.L71:
 421:main.c        ****     }
 422:main.c        ****     
 423:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 424:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 425:main.c        ****         // OR an EVENT happens in the current instruction
 426:main.c        ****         // e.g. CurrentInstruction: GoForward 
 427:main.c        ****         //      S3 on BLACK
 428:main.c        ****         //      Check Ignore Count
 429:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 430:main.c        ****     
 431:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 1311              		.loc 1 431 0
 1312 0024 1A4B     		ldr	r3, .L82+12
 1313 0026 1B78     		ldrb	r3, [r3]
 1314 0028 FB70     		strb	r3, [r7, #3]
 432:main.c        ****     
 433:main.c        ****     switch (currentInstructionDirection) {
 1315              		.loc 1 433 0
 1316 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1317 002c 002B     		cmp	r3, #0
 1318 002e 1FD1     		bne	.L80
 434:main.c        ****         case GoForward:
 435:main.c        ****             // if s3 or s4 go off, check ignoreCount
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 32


 436:main.c        ****             //      if ignoreCount == 0, go to next direction
 437:main.c        ****             //      return stop
 438:main.c        ****         
 439:main.c        ****             // if S5 and S6 are on black, move forward
 440:main.c        ****             if (!s5 && !s6) {
 1319              		.loc 1 440 0
 1320 0030 184B     		ldr	r3, .L82+16
 1321 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1322 0034 002B     		cmp	r3, #0
 1323 0036 05D1     		bne	.L74
 1324              		.loc 1 440 0 is_stmt 0 discriminator 1
 1325 0038 174B     		ldr	r3, .L82+20
 1326 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1327 003c 002B     		cmp	r3, #0
 1328 003e 01D1     		bne	.L74
 441:main.c        ****                 return Forward;   
 1329              		.loc 1 441 0 is_stmt 1
 1330 0040 0023     		movs	r3, #0
 1331 0042 19E0     		b	.L75
 1332              	.L74:
 442:main.c        ****             }
 443:main.c        ****         
 444:main.c        ****             // if S5 or S6 are on white, adjust accordingly
 445:main.c        ****             if (s5) {
 1333              		.loc 1 445 0
 1334 0044 134B     		ldr	r3, .L82+16
 1335 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1336 0048 002B     		cmp	r3, #0
 1337 004a 01D0     		beq	.L76
 446:main.c        ****                 return AdjustToTheRight;    
 1338              		.loc 1 446 0
 1339 004c 0423     		movs	r3, #4
 1340 004e 13E0     		b	.L75
 1341              	.L76:
 447:main.c        ****             }
 448:main.c        ****             if (s6) {
 1342              		.loc 1 448 0
 1343 0050 114B     		ldr	r3, .L82+20
 1344 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1345 0054 002B     		cmp	r3, #0
 1346 0056 01D0     		beq	.L77
 449:main.c        ****                 return AdjustToTheLeft;    
 1347              		.loc 1 449 0
 1348 0058 0323     		movs	r3, #3
 1349 005a 0DE0     		b	.L75
 1350              	.L77:
 450:main.c        ****             }
 451:main.c        ****             if (s5 && s6) {
 1351              		.loc 1 451 0
 1352 005c 0D4B     		ldr	r3, .L82+16
 1353 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1354 0060 002B     		cmp	r3, #0
 1355 0062 07D0     		beq	.L81
 1356              		.loc 1 451 0 is_stmt 0 discriminator 1
 1357 0064 0C4B     		ldr	r3, .L82+20
 1358 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1359 0068 002B     		cmp	r3, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 33


 1360 006a 03D0     		beq	.L81
 452:main.c        ****                 return Stop;
 1361              		.loc 1 452 0 is_stmt 1
 1362 006c 0523     		movs	r3, #5
 1363 006e 03E0     		b	.L75
 1364              	.L80:
 453:main.c        ****             }
 454:main.c        ****             break;
 455:main.c        ****         default:
 456:main.c        ****             return Stop;
 1365              		.loc 1 456 0
 1366 0070 0523     		movs	r3, #5
 1367 0072 01E0     		b	.L75
 1368              	.L81:
 454:main.c        ****         default:
 1369              		.loc 1 454 0
 1370 0074 00BF     		nop
 457:main.c        ****             break;
 458:main.c        ****     }
 459:main.c        ****     
 460:main.c        ****     
 461:main.c        ****     
 462:main.c        ****     return Stop;
 1371              		.loc 1 462 0
 1372 0076 0523     		movs	r3, #5
 1373              	.L75:
 463:main.c        **** }
 1374              		.loc 1 463 0
 1375 0078 1846     		mov	r0, r3
 1376 007a 0C37     		adds	r7, r7, #12
 1377              		.cfi_def_cfa_offset 4
 1378 007c BD46     		mov	sp, r7
 1379              		.cfi_def_cfa_register 13
 1380              		@ sp needed
 1381 007e 80BC     		pop	{r7}
 1382              		.cfi_restore 7
 1383              		.cfi_def_cfa_offset 0
 1384 0080 7047     		bx	lr
 1385              	.L83:
 1386 0082 00BF     		.align	2
 1387              	.L82:
 1388 0084 00000000 		.word	currentOrientation
 1389 0088 00000000 		.word	yBlocksize
 1390 008c 00000000 		.word	xBlocksize
 1391 0090 00000000 		.word	currentInstruction
 1392 0094 00000000 		.word	s5
 1393 0098 00000000 		.word	s6
 1394              		.cfi_endproc
 1395              	.LFE74:
 1396              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1397              		.section	.text.MoveToNextInstruction,"ax",%progbits
 1398              		.align	2
 1399              		.global	MoveToNextInstruction
 1400              		.thumb
 1401              		.thumb_func
 1402              		.type	MoveToNextInstruction, %function
 1403              	MoveToNextInstruction:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 34


 1404              	.LFB75:
 464:main.c        **** // get next instruction
 465:main.c        **** 
 466:main.c        **** void MoveToNextInstruction() {
 1405              		.loc 1 466 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 0
 1408              		@ frame_needed = 1, uses_anonymous_args = 0
 1409              		@ link register save eliminated.
 1410 0000 80B4     		push	{r7}
 1411              		.cfi_def_cfa_offset 4
 1412              		.cfi_offset 7, -4
 1413 0002 00AF     		add	r7, sp, #0
 1414              		.cfi_def_cfa_register 7
 467:main.c        ****     instructionIndex++;
 1415              		.loc 1 467 0
 1416 0004 044B     		ldr	r3, .L85
 1417 0006 1B68     		ldr	r3, [r3]
 1418 0008 0133     		adds	r3, r3, #1
 1419 000a 034A     		ldr	r2, .L85
 1420 000c 1360     		str	r3, [r2]
 468:main.c        **** }
 1421              		.loc 1 468 0
 1422 000e 00BF     		nop
 1423 0010 BD46     		mov	sp, r7
 1424              		.cfi_def_cfa_register 13
 1425              		@ sp needed
 1426 0012 80BC     		pop	{r7}
 1427              		.cfi_restore 7
 1428              		.cfi_def_cfa_offset 0
 1429 0014 7047     		bx	lr
 1430              	.L86:
 1431 0016 00BF     		.align	2
 1432              	.L85:
 1433 0018 00000000 		.word	instructionIndex
 1434              		.cfi_endproc
 1435              	.LFE75:
 1436              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 1437              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 1438              		.align	2
 1439              		.global	GetInstructionAtIndex
 1440              		.thumb
 1441              		.thumb_func
 1442              		.type	GetInstructionAtIndex, %function
 1443              	GetInstructionAtIndex:
 1444              	.LFB76:
 469:main.c        **** 
 470:main.c        **** 
 471:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 1445              		.loc 1 471 0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 32
 1448              		@ frame_needed = 1, uses_anonymous_args = 0
 1449              		@ link register save eliminated.
 1450 0000 90B4     		push	{r4, r7}
 1451              		.cfi_def_cfa_offset 8
 1452              		.cfi_offset 4, -8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 35


 1453              		.cfi_offset 7, -4
 1454 0002 88B0     		sub	sp, sp, #32
 1455              		.cfi_def_cfa_offset 40
 1456 0004 00AF     		add	r7, sp, #0
 1457              		.cfi_def_cfa_register 7
 1458 0006 F860     		str	r0, [r7, #12]
 1459 0008 B960     		str	r1, [r7, #8]
 1460 000a 7A60     		str	r2, [r7, #4]
 1461 000c 3B60     		str	r3, [r7]
 1462              	.LBB3:
 472:main.c        ****     Instruction nextInstruction;
 473:main.c        ****     // input is list of instructions and robot will react accordingly
 474:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 1463              		.loc 1 474 0
 1464 000e 3B68     		ldr	r3, [r7]
 1465 0010 FB61     		str	r3, [r7, #28]
 1466 0012 36E0     		b	.L88
 1467              	.L91:
 475:main.c        ****         if(instructionList[i].direction != Skip) {
 1468              		.loc 1 475 0
 1469 0014 FA69     		ldr	r2, [r7, #28]
 1470 0016 1346     		mov	r3, r2
 1471 0018 5B00     		lsls	r3, r3, #1
 1472 001a 1344     		add	r3, r3, r2
 1473 001c 9B00     		lsls	r3, r3, #2
 1474 001e 1A46     		mov	r2, r3
 1475 0020 7B68     		ldr	r3, [r7, #4]
 1476 0022 1344     		add	r3, r3, r2
 1477 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1478 0026 062B     		cmp	r3, #6
 1479 0028 26D0     		beq	.L89
 476:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 1480              		.loc 1 476 0
 1481 002a FA69     		ldr	r2, [r7, #28]
 1482 002c 1346     		mov	r3, r2
 1483 002e 5B00     		lsls	r3, r3, #1
 1484 0030 1344     		add	r3, r3, r2
 1485 0032 9B00     		lsls	r3, r3, #2
 1486 0034 1A46     		mov	r2, r3
 1487 0036 7B68     		ldr	r3, [r7, #4]
 1488 0038 1344     		add	r3, r3, r2
 1489 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1490 003c 3B74     		strb	r3, [r7, #16]
 477:main.c        ****             nextInstruction.ignoreL = instructionList[i].ignoreL;
 1491              		.loc 1 477 0
 1492 003e FA69     		ldr	r2, [r7, #28]
 1493 0040 1346     		mov	r3, r2
 1494 0042 5B00     		lsls	r3, r3, #1
 1495 0044 1344     		add	r3, r3, r2
 1496 0046 9B00     		lsls	r3, r3, #2
 1497 0048 1A46     		mov	r2, r3
 1498 004a 7B68     		ldr	r3, [r7, #4]
 1499 004c 1344     		add	r3, r3, r2
 1500 004e 5B68     		ldr	r3, [r3, #4]
 1501 0050 7B61     		str	r3, [r7, #20]
 478:main.c        ****             nextInstruction.ignoreR = instructionList[i].ignoreR;
 1502              		.loc 1 478 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 36


 1503 0052 FA69     		ldr	r2, [r7, #28]
 1504 0054 1346     		mov	r3, r2
 1505 0056 5B00     		lsls	r3, r3, #1
 1506 0058 1344     		add	r3, r3, r2
 1507 005a 9B00     		lsls	r3, r3, #2
 1508 005c 1A46     		mov	r2, r3
 1509 005e 7B68     		ldr	r3, [r7, #4]
 1510 0060 1344     		add	r3, r3, r2
 1511 0062 9B68     		ldr	r3, [r3, #8]
 1512 0064 BB61     		str	r3, [r7, #24]
 479:main.c        ****             return nextInstruction; // return next instruction
 1513              		.loc 1 479 0
 1514 0066 FB68     		ldr	r3, [r7, #12]
 1515 0068 1C46     		mov	r4, r3
 1516 006a 07F11003 		add	r3, r7, #16
 1517 006e 93E80700 		ldmia	r3, {r0, r1, r2}
 1518 0072 84E80700 		stmia	r4, {r0, r1, r2}
 1519 0076 10E0     		b	.L87
 1520              	.L89:
 480:main.c        ****         }
 481:main.c        ****         instructionIndex = i;
 1521              		.loc 1 481 0 discriminator 2
 1522 0078 FB69     		ldr	r3, [r7, #28]
 1523 007a 3B60     		str	r3, [r7]
 474:main.c        ****         if(instructionList[i].direction != Skip) {
 1524              		.loc 1 474 0 discriminator 2
 1525 007c FB69     		ldr	r3, [r7, #28]
 1526 007e 0133     		adds	r3, r3, #1
 1527 0080 FB61     		str	r3, [r7, #28]
 1528              	.L88:
 474:main.c        ****         if(instructionList[i].direction != Skip) {
 1529              		.loc 1 474 0 is_stmt 0 discriminator 1
 1530 0082 FA69     		ldr	r2, [r7, #28]
 1531 0084 BB68     		ldr	r3, [r7, #8]
 1532 0086 9A42     		cmp	r2, r3
 1533 0088 C4DB     		blt	.L91
 1534              	.LBE3:
 482:main.c        ****     }
 483:main.c        ****     return nextInstruction;
 1535              		.loc 1 483 0 is_stmt 1
 1536 008a FB68     		ldr	r3, [r7, #12]
 1537 008c 1C46     		mov	r4, r3
 1538 008e 07F11003 		add	r3, r7, #16
 1539 0092 93E80700 		ldmia	r3, {r0, r1, r2}
 1540 0096 84E80700 		stmia	r4, {r0, r1, r2}
 1541              	.L87:
 484:main.c        **** }
 1542              		.loc 1 484 0
 1543 009a F868     		ldr	r0, [r7, #12]
 1544 009c 2037     		adds	r7, r7, #32
 1545              		.cfi_def_cfa_offset 8
 1546 009e BD46     		mov	sp, r7
 1547              		.cfi_def_cfa_register 13
 1548              		@ sp needed
 1549 00a0 90BC     		pop	{r4, r7}
 1550              		.cfi_restore 7
 1551              		.cfi_restore 4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 37


 1552              		.cfi_def_cfa_offset 0
 1553 00a2 7047     		bx	lr
 1554              		.cfi_endproc
 1555              	.LFE76:
 1556              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 1557              		.section	.text.SetRobotMovement,"ax",%progbits
 1558              		.align	2
 1559              		.global	SetRobotMovement
 1560              		.thumb
 1561              		.thumb_func
 1562              		.type	SetRobotMovement, %function
 1563              	SetRobotMovement:
 1564              	.LFB77:
 485:main.c        **** 
 486:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 487:main.c        **** void SetRobotMovement() {
 1565              		.loc 1 487 0
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 16
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569 0000 90B5     		push	{r4, r7, lr}
 1570              		.cfi_def_cfa_offset 12
 1571              		.cfi_offset 4, -12
 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574 0002 85B0     		sub	sp, sp, #20
 1575              		.cfi_def_cfa_offset 32
 1576 0004 00AF     		add	r7, sp, #0
 1577              		.cfi_def_cfa_register 7
 488:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 1578              		.loc 1 488 0
 1579 0006 274B     		ldr	r3, .L108
 1580 0008 1968     		ldr	r1, [r3]
 1581 000a 274B     		ldr	r3, .L108+4
 1582 000c 1A68     		ldr	r2, [r3]
 1583 000e 274B     		ldr	r3, .L108+8
 1584 0010 1B68     		ldr	r3, [r3]
 1585 0012 274C     		ldr	r4, .L108+12
 1586 0014 3846     		mov	r0, r7
 1587 0016 FFF7FEFF 		bl	GetInstructionAtIndex
 1588 001a 3B46     		mov	r3, r7
 1589 001c 93E80700 		ldmia	r3, {r0, r1, r2}
 1590 0020 84E80700 		stmia	r4, {r0, r1, r2}
 489:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 1591              		.loc 1 489 0
 1592 0024 FFF7FEFF 		bl	GetMovementAccordingToInstruction
 1593 0028 0346     		mov	r3, r0
 1594 002a 1A46     		mov	r2, r3
 1595 002c 214B     		ldr	r3, .L108+16
 1596 002e 1A70     		strb	r2, [r3]
 490:main.c        ****     // move robot depending on sensors
 491:main.c        ****     switch (currentDirection) {
 1597              		.loc 1 491 0
 1598 0030 204B     		ldr	r3, .L108+16
 1599 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1600 0034 092B     		cmp	r3, #9
 1601 0036 30D8     		bhi	.L106
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 38


 1602 0038 01A2     		adr	r2, .L96
 1603 003a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1604 003e 00BF     		.p2align 2
 1605              	.L96:
 1606 0040 69000000 		.word	.L95+1
 1607 0044 6F000000 		.word	.L97+1
 1608 0048 75000000 		.word	.L98+1
 1609 004c 81000000 		.word	.L99+1
 1610 0050 7B000000 		.word	.L100+1
 1611 0054 87000000 		.word	.L101+1
 1612 0058 99000000 		.word	.L107+1
 1613 005c 99000000 		.word	.L107+1
 1614 0060 8D000000 		.word	.L104+1
 1615 0064 93000000 		.word	.L105+1
 1616              		.p2align 1
 1617              	.L95:
 492:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 493:main.c        ****         case Forward:
 494:main.c        ****             moveForward();
 1618              		.loc 1 494 0
 1619 0068 FFF7FEFF 		bl	moveForward
 495:main.c        ****             break;
 1620              		.loc 1 495 0
 1621 006c 15E0     		b	.L94
 1622              	.L97:
 496:main.c        ****         case TurnRight:
 497:main.c        ****             turnRight();
 1623              		.loc 1 497 0
 1624 006e FFF7FEFF 		bl	turnRight
 498:main.c        ****             break;
 1625              		.loc 1 498 0
 1626 0072 12E0     		b	.L94
 1627              	.L98:
 499:main.c        ****         case TurnLeft:
 500:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1628              		.loc 1 500 0
 1629 0074 FFF7FEFF 		bl	turnLeft
 501:main.c        ****             break;
 1630              		.loc 1 501 0
 1631 0078 0FE0     		b	.L94
 1632              	.L100:
 502:main.c        ****         case AdjustToTheRight:
 503:main.c        ****             adjustRight();
 1633              		.loc 1 503 0
 1634 007a FFF7FEFF 		bl	adjustRight
 504:main.c        ****             break;
 1635              		.loc 1 504 0
 1636 007e 0CE0     		b	.L94
 1637              	.L99:
 505:main.c        ****         case AdjustToTheLeft:
 506:main.c        ****             adjustLeft();
 1638              		.loc 1 506 0
 1639 0080 FFF7FEFF 		bl	adjustLeft
 507:main.c        ****             break;
 1640              		.loc 1 507 0
 1641 0084 09E0     		b	.L94
 1642              	.L101:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 39


 508:main.c        ****         case Stop:
 509:main.c        ****             stopMoving();
 1643              		.loc 1 509 0
 1644 0086 FFF7FEFF 		bl	stopMoving
 510:main.c        ****             break;
 1645              		.loc 1 510 0
 1646 008a 06E0     		b	.L94
 1647              	.L104:
 511:main.c        ****         case ForwardAfterTurn:
 512:main.c        ****             moveForward();
 1648              		.loc 1 512 0
 1649 008c FFF7FEFF 		bl	moveForward
 513:main.c        ****             break;
 1650              		.loc 1 513 0
 1651 0090 03E0     		b	.L94
 1652              	.L105:
 514:main.c        ****         case Backward:
 515:main.c        ****             moveBackward();
 1653              		.loc 1 515 0
 1654 0092 FFF7FEFF 		bl	moveBackward
 516:main.c        ****             break;
 1655              		.loc 1 516 0
 1656 0096 00E0     		b	.L94
 1657              	.L107:
 517:main.c        ****         case waitForTurn:
 518:main.c        ****             break;
 519:main.c        ****         /*case waitForLeftTurn:
 520:main.c        ****             moveForward();
 521:main.c        ****             break;
 522:main.c        ****         case waitForRightTurn:
 523:main.c        ****             moveForward();
 524:main.c        ****             break;*/
 525:main.c        ****         case Unknown:
 526:main.c        ****             // UNKNOWN CONFIGURATION
 527:main.c        ****             break;  
 1658              		.loc 1 527 0
 1659 0098 00BF     		nop
 1660              	.L94:
 1661              	.L106:
 528:main.c        ****     }
 529:main.c        **** }...
 1662              		.loc 1 529 0
 1663 009a 00BF     		nop
 1664 009c 1437     		adds	r7, r7, #20
 1665              		.cfi_def_cfa_offset 12
 1666 009e BD46     		mov	sp, r7
 1667              		.cfi_def_cfa_register 13
 1668              		@ sp needed
 1669 00a0 90BD     		pop	{r4, r7, pc}
 1670              	.L109:
 1671 00a2 00BF     		.align	2
 1672              	.L108:
 1673 00a4 00000000 		.word	numSteps
 1674 00a8 00000000 		.word	instructionList
 1675 00ac 00000000 		.word	instructionIndex
 1676 00b0 00000000 		.word	currentInstruction
 1677 00b4 00000000 		.word	currentDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 40


 1678              		.cfi_endproc
 1679              	.LFE77:
 1680              		.size	SetRobotMovement, .-SetRobotMovement
 1681              		.text
 1682              	.Letext0:
 1683              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1684              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1685              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1686              		.file 5 "vars.h"
 1687              		.file 6 "pathfinding.h"
 1688              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 1689              		.file 8 "map.h"
 1690              		.section	.debug_info,"",%progbits
 1691              	.Ldebug_info0:
 1692 0000 05080000 		.4byte	0x805
 1693 0004 0400     		.2byte	0x4
 1694 0006 00000000 		.4byte	.Ldebug_abbrev0
 1695 000a 04       		.byte	0x4
 1696 000b 01       		.uleb128 0x1
 1697 000c 82000000 		.4byte	.LASF127
 1698 0010 0C       		.byte	0xc
 1699 0011 30000000 		.4byte	.LASF128
 1700 0015 EE040000 		.4byte	.LASF129
 1701 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1702 001d 00000000 		.4byte	0
 1703 0021 00000000 		.4byte	.Ldebug_line0
 1704 0025 02       		.uleb128 0x2
 1705 0026 01       		.byte	0x1
 1706 0027 06       		.byte	0x6
 1707 0028 0B060000 		.4byte	.LASF0
 1708 002c 02       		.uleb128 0x2
 1709 002d 01       		.byte	0x1
 1710 002e 08       		.byte	0x8
 1711 002f 7B050000 		.4byte	.LASF1
 1712 0033 02       		.uleb128 0x2
 1713 0034 02       		.byte	0x2
 1714 0035 05       		.byte	0x5
 1715 0036 3F040000 		.4byte	.LASF2
 1716 003a 02       		.uleb128 0x2
 1717 003b 02       		.byte	0x2
 1718 003c 07       		.byte	0x7
 1719 003d 22060000 		.4byte	.LASF3
 1720 0041 03       		.uleb128 0x3
 1721 0042 55000000 		.4byte	.LASF12
 1722 0046 02       		.byte	0x2
 1723 0047 3F       		.byte	0x3f
 1724 0048 4C000000 		.4byte	0x4c
 1725 004c 02       		.uleb128 0x2
 1726 004d 04       		.byte	0x4
 1727 004e 05       		.byte	0x5
 1728 004f 61040000 		.4byte	.LASF4
 1729 0053 02       		.uleb128 0x2
 1730 0054 04       		.byte	0x4
 1731 0055 07       		.byte	0x7
 1732 0056 37050000 		.4byte	.LASF5
 1733 005a 02       		.uleb128 0x2
 1734 005b 08       		.byte	0x8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 41


 1735 005c 05       		.byte	0x5
 1736 005d 33030000 		.4byte	.LASF6
 1737 0061 02       		.uleb128 0x2
 1738 0062 08       		.byte	0x8
 1739 0063 07       		.byte	0x7
 1740 0064 DD010000 		.4byte	.LASF7
 1741 0068 04       		.uleb128 0x4
 1742 0069 04       		.byte	0x4
 1743 006a 05       		.byte	0x5
 1744 006b 696E7400 		.ascii	"int\000"
 1745 006f 02       		.uleb128 0x2
 1746 0070 04       		.byte	0x4
 1747 0071 07       		.byte	0x7
 1748 0072 48000000 		.4byte	.LASF8
 1749 0076 02       		.uleb128 0x2
 1750 0077 08       		.byte	0x8
 1751 0078 04       		.byte	0x4
 1752 0079 03040000 		.4byte	.LASF9
 1753 007d 02       		.uleb128 0x2
 1754 007e 04       		.byte	0x4
 1755 007f 07       		.byte	0x7
 1756 0080 2E050000 		.4byte	.LASF10
 1757 0084 02       		.uleb128 0x2
 1758 0085 01       		.byte	0x1
 1759 0086 08       		.byte	0x8
 1760 0087 C0020000 		.4byte	.LASF11
 1761 008b 03       		.uleb128 0x3
 1762 008c 54050000 		.4byte	.LASF13
 1763 0090 03       		.byte	0x3
 1764 0091 2C       		.byte	0x2c
 1765 0092 41000000 		.4byte	0x41
 1766 0096 05       		.uleb128 0x5
 1767 0097 78060000 		.4byte	.LASF14
 1768 009b 04       		.byte	0x4
 1769 009c E701     		.2byte	0x1e7
 1770 009e 2C000000 		.4byte	0x2c
 1771 00a2 05       		.uleb128 0x5
 1772 00a3 EF020000 		.4byte	.LASF15
 1773 00a7 04       		.byte	0x4
 1774 00a8 E801     		.2byte	0x1e8
 1775 00aa 3A000000 		.4byte	0x3a
 1776 00ae 05       		.uleb128 0x5
 1777 00af B3030000 		.4byte	.LASF16
 1778 00b3 04       		.byte	0x4
 1779 00b4 E901     		.2byte	0x1e9
 1780 00b6 53000000 		.4byte	0x53
 1781 00ba 05       		.uleb128 0x5
 1782 00bb F6020000 		.4byte	.LASF17
 1783 00bf 04       		.byte	0x4
 1784 00c0 EA01     		.2byte	0x1ea
 1785 00c2 25000000 		.4byte	0x25
 1786 00c6 05       		.uleb128 0x5
 1787 00c7 5F000000 		.4byte	.LASF18
 1788 00cb 04       		.byte	0x4
 1789 00cc EB01     		.2byte	0x1eb
 1790 00ce 33000000 		.4byte	0x33
 1791 00d2 02       		.uleb128 0x2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 42


 1792 00d3 04       		.byte	0x4
 1793 00d4 04       		.byte	0x4
 1794 00d5 A5010000 		.4byte	.LASF19
 1795 00d9 02       		.uleb128 0x2
 1796 00da 08       		.byte	0x8
 1797 00db 04       		.byte	0x4
 1798 00dc 7E060000 		.4byte	.LASF20
 1799 00e0 06       		.uleb128 0x6
 1800 00e1 D5030000 		.4byte	.LASF45
 1801 00e5 20       		.byte	0x20
 1802 00e6 05       		.byte	0x5
 1803 00e7 28       		.byte	0x28
 1804 00e8 B9010000 		.4byte	0x1b9
 1805 00ec 07       		.uleb128 0x7
 1806 00ed DF030000 		.4byte	.LASF21
 1807 00f1 05       		.byte	0x5
 1808 00f2 2A       		.byte	0x2a
 1809 00f3 BA000000 		.4byte	0xba
 1810 00f7 00       		.byte	0
 1811 00f8 07       		.uleb128 0x7
 1812 00f9 D7010000 		.4byte	.LASF22
 1813 00fd 05       		.byte	0x5
 1814 00fe 2B       		.byte	0x2b
 1815 00ff 96000000 		.4byte	0x96
 1816 0103 01       		.byte	0x1
 1817 0104 07       		.uleb128 0x7
 1818 0105 5C050000 		.4byte	.LASF23
 1819 0109 05       		.byte	0x5
 1820 010a 2C       		.byte	0x2c
 1821 010b C6000000 		.4byte	0xc6
 1822 010f 02       		.byte	0x2
 1823 0110 07       		.uleb128 0x7
 1824 0111 97020000 		.4byte	.LASF24
 1825 0115 05       		.byte	0x5
 1826 0116 2D       		.byte	0x2d
 1827 0117 C6000000 		.4byte	0xc6
 1828 011b 04       		.byte	0x4
 1829 011c 07       		.uleb128 0x7
 1830 011d 35060000 		.4byte	.LASF25
 1831 0121 05       		.byte	0x5
 1832 0122 2E       		.byte	0x2e
 1833 0123 C6000000 		.4byte	0xc6
 1834 0127 06       		.byte	0x6
 1835 0128 07       		.uleb128 0x7
 1836 0129 A5060000 		.4byte	.LASF26
 1837 012d 05       		.byte	0x5
 1838 012e 2F       		.byte	0x2f
 1839 012f C6000000 		.4byte	0xc6
 1840 0133 08       		.byte	0x8
 1841 0134 07       		.uleb128 0x7
 1842 0135 78030000 		.4byte	.LASF27
 1843 0139 05       		.byte	0x5
 1844 013a 30       		.byte	0x30
 1845 013b C6000000 		.4byte	0xc6
 1846 013f 0A       		.byte	0xa
 1847 0140 07       		.uleb128 0x7
 1848 0141 C5020000 		.4byte	.LASF28
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 43


 1849 0145 05       		.byte	0x5
 1850 0146 31       		.byte	0x31
 1851 0147 C6000000 		.4byte	0xc6
 1852 014b 0C       		.byte	0xc
 1853 014c 07       		.uleb128 0x7
 1854 014d E4030000 		.4byte	.LASF29
 1855 0151 05       		.byte	0x5
 1856 0152 32       		.byte	0x32
 1857 0153 C6000000 		.4byte	0xc6
 1858 0157 0E       		.byte	0xe
 1859 0158 07       		.uleb128 0x7
 1860 0159 41030000 		.4byte	.LASF30
 1861 015d 05       		.byte	0x5
 1862 015e 33       		.byte	0x33
 1863 015f C6000000 		.4byte	0xc6
 1864 0163 10       		.byte	0x10
 1865 0164 07       		.uleb128 0x7
 1866 0165 D5040000 		.4byte	.LASF31
 1867 0169 05       		.byte	0x5
 1868 016a 34       		.byte	0x34
 1869 016b C6000000 		.4byte	0xc6
 1870 016f 12       		.byte	0x12
 1871 0170 07       		.uleb128 0x7
 1872 0171 C5060000 		.4byte	.LASF32
 1873 0175 05       		.byte	0x5
 1874 0176 35       		.byte	0x35
 1875 0177 C6000000 		.4byte	0xc6
 1876 017b 14       		.byte	0x14
 1877 017c 07       		.uleb128 0x7
 1878 017d 06030000 		.4byte	.LASF33
 1879 0181 05       		.byte	0x5
 1880 0182 36       		.byte	0x36
 1881 0183 C6000000 		.4byte	0xc6
 1882 0187 16       		.byte	0x16
 1883 0188 07       		.uleb128 0x7
 1884 0189 2A010000 		.4byte	.LASF34
 1885 018d 05       		.byte	0x5
 1886 018e 37       		.byte	0x37
 1887 018f C6000000 		.4byte	0xc6
 1888 0193 18       		.byte	0x18
 1889 0194 07       		.uleb128 0x7
 1890 0195 9B040000 		.4byte	.LASF35
 1891 0199 05       		.byte	0x5
 1892 019a 38       		.byte	0x38
 1893 019b C6000000 		.4byte	0xc6
 1894 019f 1A       		.byte	0x1a
 1895 01a0 07       		.uleb128 0x7
 1896 01a1 6F030000 		.4byte	.LASF36
 1897 01a5 05       		.byte	0x5
 1898 01a6 39       		.byte	0x39
 1899 01a7 C6000000 		.4byte	0xc6
 1900 01ab 1C       		.byte	0x1c
 1901 01ac 07       		.uleb128 0x7
 1902 01ad 8A010000 		.4byte	.LASF37
 1903 01b1 05       		.byte	0x5
 1904 01b2 3A       		.byte	0x3a
 1905 01b3 C6000000 		.4byte	0xc6
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 44


 1906 01b7 1E       		.byte	0x1e
 1907 01b8 00       		.byte	0
 1908 01b9 08       		.uleb128 0x8
 1909 01ba 1B000000 		.4byte	.LASF50
 1910 01be 01       		.byte	0x1
 1911 01bf 2C000000 		.4byte	0x2c
 1912 01c3 06       		.byte	0x6
 1913 01c4 0D       		.byte	0xd
 1914 01c5 F4010000 		.4byte	0x1f4
 1915 01c9 09       		.uleb128 0x9
 1916 01ca F5050000 		.4byte	.LASF38
 1917 01ce 00       		.byte	0
 1918 01cf 09       		.uleb128 0x9
 1919 01d0 23030000 		.4byte	.LASF39
 1920 01d4 01       		.byte	0x1
 1921 01d5 09       		.uleb128 0x9
 1922 01d6 BA030000 		.4byte	.LASF40
 1923 01da 02       		.byte	0x2
 1924 01db 09       		.uleb128 0x9
 1925 01dc 5D030000 		.4byte	.LASF41
 1926 01e0 03       		.byte	0x3
 1927 01e1 09       		.uleb128 0x9
 1928 01e2 34020000 		.4byte	.LASF42
 1929 01e6 04       		.byte	0x4
 1930 01e7 09       		.uleb128 0x9
 1931 01e8 7E020000 		.4byte	.LASF43
 1932 01ec 05       		.byte	0x5
 1933 01ed 09       		.uleb128 0x9
 1934 01ee E2050000 		.4byte	.LASF44
 1935 01f2 06       		.byte	0x6
 1936 01f3 00       		.byte	0
 1937 01f4 06       		.uleb128 0x6
 1938 01f5 F4010000 		.4byte	.LASF46
 1939 01f9 0C       		.byte	0xc
 1940 01fa 06       		.byte	0x6
 1941 01fb 0E       		.byte	0xe
 1942 01fc 25020000 		.4byte	0x225
 1943 0200 07       		.uleb128 0x7
 1944 0201 00000000 		.4byte	.LASF47
 1945 0205 06       		.byte	0x6
 1946 0206 0F       		.byte	0xf
 1947 0207 B9010000 		.4byte	0x1b9
 1948 020b 00       		.byte	0
 1949 020c 07       		.uleb128 0x7
 1950 020d CE060000 		.4byte	.LASF48
 1951 0211 06       		.byte	0x6
 1952 0212 10       		.byte	0x10
 1953 0213 68000000 		.4byte	0x68
 1954 0217 04       		.byte	0x4
 1955 0218 07       		.uleb128 0x7
 1956 0219 D6060000 		.4byte	.LASF49
 1957 021d 06       		.byte	0x6
 1958 021e 11       		.byte	0x11
 1959 021f 68000000 		.4byte	0x68
 1960 0223 08       		.byte	0x8
 1961 0224 00       		.byte	0
 1962 0225 03       		.uleb128 0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 45


 1963 0226 F4010000 		.4byte	.LASF46
 1964 022a 06       		.byte	0x6
 1965 022b 12       		.byte	0x12
 1966 022c F4010000 		.4byte	0x1f4
 1967 0230 08       		.uleb128 0x8
 1968 0231 B9040000 		.4byte	.LASF51
 1969 0235 01       		.byte	0x1
 1970 0236 2C000000 		.4byte	0x2c
 1971 023a 06       		.byte	0x6
 1972 023b 14       		.byte	0x14
 1973 023c 58020000 		.4byte	0x258
 1974 0240 0A       		.uleb128 0xa
 1975 0241 557000   		.ascii	"Up\000"
 1976 0244 00       		.byte	0
 1977 0245 09       		.uleb128 0x9
 1978 0246 CA040000 		.4byte	.LASF52
 1979 024a 01       		.byte	0x1
 1980 024b 09       		.uleb128 0x9
 1981 024c 13030000 		.4byte	.LASF53
 1982 0250 02       		.byte	0x2
 1983 0251 09       		.uleb128 0x9
 1984 0252 CF040000 		.4byte	.LASF54
 1985 0256 03       		.byte	0x3
 1986 0257 00       		.byte	0
 1987 0258 08       		.uleb128 0x8
 1988 0259 6D050000 		.4byte	.LASF55
 1989 025d 01       		.byte	0x1
 1990 025e 2C000000 		.4byte	0x2c
 1991 0262 01       		.byte	0x1
 1992 0263 18       		.byte	0x18
 1993 0264 A5020000 		.4byte	0x2a5
 1994 0268 09       		.uleb128 0x9
 1995 0269 81040000 		.4byte	.LASF56
 1996 026d 00       		.byte	0
 1997 026e 09       		.uleb128 0x9
 1998 026f CB030000 		.4byte	.LASF57
 1999 0273 01       		.byte	0x1
 2000 0274 09       		.uleb128 0x9
 2001 0275 8A030000 		.4byte	.LASF58
 2002 0279 02       		.byte	0x2
 2003 027a 09       		.uleb128 0x9
 2004 027b 5F060000 		.4byte	.LASF59
 2005 027f 03       		.byte	0x3
 2006 0280 09       		.uleb128 0x9
 2007 0281 9F050000 		.4byte	.LASF60
 2008 0285 04       		.byte	0x4
 2009 0286 09       		.uleb128 0x9
 2010 0287 B0050000 		.4byte	.LASF61
 2011 028b 05       		.byte	0x5
 2012 028c 09       		.uleb128 0x9
 2013 028d 9C030000 		.4byte	.LASF62
 2014 0291 06       		.byte	0x6
 2015 0292 09       		.uleb128 0x9
 2016 0293 8B020000 		.4byte	.LASF63
 2017 0297 07       		.byte	0x7
 2018 0298 09       		.uleb128 0x9
 2019 0299 0A000000 		.4byte	.LASF64
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 46


 2020 029d 08       		.byte	0x8
 2021 029e 09       		.uleb128 0x9
 2022 029f 6F060000 		.4byte	.LASF65
 2023 02a3 09       		.byte	0x9
 2024 02a4 00       		.byte	0
 2025 02a5 0B       		.uleb128 0xb
 2026 02a6 18030000 		.4byte	.LASF73
 2027 02aa 01       		.byte	0x1
 2028 02ab 34       		.byte	0x34
 2029 02ac 00000000 		.4byte	.LFB64
 2030 02b0 F4000000 		.4byte	.LFE64-.LFB64
 2031 02b4 01       		.uleb128 0x1
 2032 02b5 9C       		.byte	0x9c
 2033 02b6 D3020000 		.4byte	0x2d3
 2034 02ba 0C       		.uleb128 0xc
 2035 02bb 58000000 		.4byte	.LBB2
 2036 02bf 62000000 		.4byte	.LBE2-.LBB2
 2037 02c3 0D       		.uleb128 0xd
 2038 02c4 63030000 		.4byte	.LASF72
 2039 02c8 01       		.byte	0x1
 2040 02c9 42       		.byte	0x42
 2041 02ca D2000000 		.4byte	0xd2
 2042 02ce 02       		.uleb128 0x2
 2043 02cf 91       		.byte	0x91
 2044 02d0 6C       		.sleb128 -20
 2045 02d1 00       		.byte	0
 2046 02d2 00       		.byte	0
 2047 02d3 0E       		.uleb128 0xe
 2048 02d4 55040000 		.4byte	.LASF66
 2049 02d8 01       		.byte	0x1
 2050 02d9 4D       		.byte	0x4d
 2051 02da 00000000 		.4byte	.LFB65
 2052 02de 18000000 		.4byte	.LFE65-.LFB65
 2053 02e2 01       		.uleb128 0x1
 2054 02e3 9C       		.byte	0x9c
 2055 02e4 0E       		.uleb128 0xe
 2056 02e5 49040000 		.4byte	.LASF67
 2057 02e9 01       		.byte	0x1
 2058 02ea 53       		.byte	0x53
 2059 02eb 00000000 		.4byte	.LFB66
 2060 02ef 18000000 		.4byte	.LFE66-.LFB66
 2061 02f3 01       		.uleb128 0x1
 2062 02f4 9C       		.byte	0x9c
 2063 02f5 0E       		.uleb128 0xe
 2064 02f6 FF050000 		.4byte	.LASF68
 2065 02fa 01       		.byte	0x1
 2066 02fb 59       		.byte	0x59
 2067 02fc 00000000 		.4byte	.LFB67
 2068 0300 18000000 		.4byte	.LFE67-.LFB67
 2069 0304 01       		.uleb128 0x1
 2070 0305 9C       		.byte	0x9c
 2071 0306 0E       		.uleb128 0xe
 2072 0307 10010000 		.4byte	.LASF69
 2073 030b 01       		.byte	0x1
 2074 030c 5F       		.byte	0x5f
 2075 030d 00000000 		.4byte	.LFB68
 2076 0311 18000000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 47


 2077 0315 01       		.uleb128 0x1
 2078 0316 9C       		.byte	0x9c
 2079 0317 0F       		.uleb128 0xf
 2080 0318 1D020000 		.4byte	.LASF70
 2081 031c 01       		.byte	0x1
 2082 031d 65       		.byte	0x65
 2083 031e 00000000 		.4byte	.LFB69
 2084 0322 38000000 		.4byte	.LFE69-.LFB69
 2085 0326 01       		.uleb128 0x1
 2086 0327 9C       		.byte	0x9c
 2087 0328 10       		.uleb128 0x10
 2088 0329 47060000 		.4byte	.LASF71
 2089 032d 01       		.byte	0x1
 2090 032e 71       		.byte	0x71
 2091 032f 68000000 		.4byte	0x68
 2092 0333 00000000 		.4byte	.LFB70
 2093 0337 C0000000 		.4byte	.LFE70-.LFB70
 2094 033b 01       		.uleb128 0x1
 2095 033c 9C       		.byte	0x9c
 2096 033d 11       		.uleb128 0x11
 2097 033e 62020000 		.4byte	.LASF81
 2098 0342 01       		.byte	0x1
 2099 0343 9F       		.byte	0x9f
 2100 0344 C6000000 		.4byte	0xc6
 2101 0348 00000000 		.4byte	.LFB71
 2102 034c 54000000 		.4byte	.LFE71-.LFB71
 2103 0350 01       		.uleb128 0x1
 2104 0351 9C       		.byte	0x9c
 2105 0352 81030000 		.4byte	0x381
 2106 0356 12       		.uleb128 0x12
 2107 0357 D1010000 		.4byte	.LASF83
 2108 035b 01       		.byte	0x1
 2109 035c 9F       		.byte	0x9f
 2110 035d A2000000 		.4byte	0xa2
 2111 0361 02       		.uleb128 0x2
 2112 0362 91       		.byte	0x91
 2113 0363 66       		.sleb128 -26
 2114 0364 13       		.uleb128 0x13
 2115 0365 63707300 		.ascii	"cps\000"
 2116 0369 01       		.byte	0x1
 2117 036a A1       		.byte	0xa1
 2118 036b D2000000 		.4byte	0xd2
 2119 036f 02       		.uleb128 0x2
 2120 0370 91       		.byte	0x91
 2121 0371 6C       		.sleb128 -20
 2122 0372 13       		.uleb128 0x13
 2123 0373 72706D00 		.ascii	"rpm\000"
 2124 0377 01       		.byte	0x1
 2125 0378 A2       		.byte	0xa2
 2126 0379 C6000000 		.4byte	0xc6
 2127 037d 02       		.uleb128 0x2
 2128 037e 91       		.byte	0x91
 2129 037f 6A       		.sleb128 -22
 2130 0380 00       		.byte	0
 2131 0381 14       		.uleb128 0x14
 2132 0382 79010000 		.4byte	.LASF79
 2133 0386 01       		.byte	0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 48


 2134 0387 AA       		.byte	0xaa
 2135 0388 00000000 		.4byte	.LFB72
 2136 038c 34000000 		.4byte	.LFE72-.LFB72
 2137 0390 01       		.uleb128 0x1
 2138 0391 9C       		.byte	0x9c
 2139 0392 15       		.uleb128 0x15
 2140 0393 85060000 		.4byte	.LASF74
 2141 0397 01       		.byte	0x1
 2142 0398 0401     		.2byte	0x104
 2143 039a 58020000 		.4byte	0x258
 2144 039e 00000000 		.4byte	.LFB73
 2145 03a2 90020000 		.4byte	.LFE73-.LFB73
 2146 03a6 01       		.uleb128 0x1
 2147 03a7 9C       		.byte	0x9c
 2148 03a8 CB030000 		.4byte	0x3cb
 2149 03ac 16       		.uleb128 0x16
 2150 03ad 37000000 		.4byte	.LASF75
 2151 03b1 01       		.byte	0x1
 2152 03b2 0501     		.2byte	0x105
 2153 03b4 D2000000 		.4byte	0xd2
 2154 03b8 02       		.uleb128 0x2
 2155 03b9 91       		.byte	0x91
 2156 03ba 74       		.sleb128 -12
 2157 03bb 16       		.uleb128 0x16
 2158 03bc A4030000 		.4byte	.LASF76
 2159 03c0 01       		.byte	0x1
 2160 03c1 0C01     		.2byte	0x10c
 2161 03c3 58020000 		.4byte	0x258
 2162 03c7 02       		.uleb128 0x2
 2163 03c8 91       		.byte	0x91
 2164 03c9 73       		.sleb128 -13
 2165 03ca 00       		.byte	0
 2166 03cb 17       		.uleb128 0x17
 2167 03cc 3B010000 		.4byte	.LASF77
 2168 03d0 01       		.byte	0x1
 2169 03d1 9F01     		.2byte	0x19f
 2170 03d3 58020000 		.4byte	0x258
 2171 03d7 00000000 		.4byte	.LFB74
 2172 03db 9C000000 		.4byte	.LFE74-.LFB74
 2173 03df 01       		.uleb128 0x1
 2174 03e0 9C       		.byte	0x9c
 2175 03e1 04040000 		.4byte	0x404
 2176 03e5 16       		.uleb128 0x16
 2177 03e6 37000000 		.4byte	.LASF75
 2178 03ea 01       		.byte	0x1
 2179 03eb A001     		.2byte	0x1a0
 2180 03ed D2000000 		.4byte	0xd2
 2181 03f1 02       		.uleb128 0x2
 2182 03f2 91       		.byte	0x91
 2183 03f3 74       		.sleb128 -12
 2184 03f4 16       		.uleb128 0x16
 2185 03f5 AB010000 		.4byte	.LASF78
 2186 03f9 01       		.byte	0x1
 2187 03fa AF01     		.2byte	0x1af
 2188 03fc B9010000 		.4byte	0x1b9
 2189 0400 02       		.uleb128 0x2
 2190 0401 91       		.byte	0x91
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 49


 2191 0402 73       		.sleb128 -13
 2192 0403 00       		.byte	0
 2193 0404 18       		.uleb128 0x18
 2194 0405 A3040000 		.4byte	.LASF80
 2195 0409 01       		.byte	0x1
 2196 040a D201     		.2byte	0x1d2
 2197 040c 00000000 		.4byte	.LFB75
 2198 0410 1C000000 		.4byte	.LFE75-.LFB75
 2199 0414 01       		.uleb128 0x1
 2200 0415 9C       		.byte	0x9c
 2201 0416 19       		.uleb128 0x19
 2202 0417 B5050000 		.4byte	.LASF82
 2203 041b 01       		.byte	0x1
 2204 041c D701     		.2byte	0x1d7
 2205 041e 25020000 		.4byte	0x225
 2206 0422 00000000 		.4byte	.LFB76
 2207 0426 A4000000 		.4byte	.LFE76-.LFB76
 2208 042a 01       		.uleb128 0x1
 2209 042b 9C       		.byte	0x9c
 2210 042c 84040000 		.4byte	0x484
 2211 0430 1A       		.uleb128 0x1a
 2212 0431 32010000 		.4byte	.LASF84
 2213 0435 01       		.byte	0x1
 2214 0436 D701     		.2byte	0x1d7
 2215 0438 68000000 		.4byte	0x68
 2216 043c 02       		.uleb128 0x2
 2217 043d 91       		.byte	0x91
 2218 043e 60       		.sleb128 -32
 2219 043f 1A       		.uleb128 0x1a
 2220 0440 CE020000 		.4byte	.LASF85
 2221 0444 01       		.byte	0x1
 2222 0445 D701     		.2byte	0x1d7
 2223 0447 84040000 		.4byte	0x484
 2224 044b 02       		.uleb128 0x2
 2225 044c 91       		.byte	0x91
 2226 044d 5C       		.sleb128 -36
 2227 044e 1A       		.uleb128 0x1a
 2228 044f DE020000 		.4byte	.LASF86
 2229 0453 01       		.byte	0x1
 2230 0454 D701     		.2byte	0x1d7
 2231 0456 68000000 		.4byte	0x68
 2232 045a 02       		.uleb128 0x2
 2233 045b 91       		.byte	0x91
 2234 045c 58       		.sleb128 -40
 2235 045d 16       		.uleb128 0x16
 2236 045e 72000000 		.4byte	.LASF87
 2237 0462 01       		.byte	0x1
 2238 0463 D801     		.2byte	0x1d8
 2239 0465 25020000 		.4byte	0x225
 2240 0469 02       		.uleb128 0x2
 2241 046a 91       		.byte	0x91
 2242 046b 68       		.sleb128 -24
 2243 046c 0C       		.uleb128 0xc
 2244 046d 0E000000 		.4byte	.LBB3
 2245 0471 7C000000 		.4byte	.LBE3-.LBB3
 2246 0475 1B       		.uleb128 0x1b
 2247 0476 6900     		.ascii	"i\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 50


 2248 0478 01       		.byte	0x1
 2249 0479 DA01     		.2byte	0x1da
 2250 047b 68000000 		.4byte	0x68
 2251 047f 02       		.uleb128 0x2
 2252 0480 91       		.byte	0x91
 2253 0481 74       		.sleb128 -12
 2254 0482 00       		.byte	0
 2255 0483 00       		.byte	0
 2256 0484 1C       		.uleb128 0x1c
 2257 0485 04       		.byte	0x4
 2258 0486 25020000 		.4byte	0x225
 2259 048a 1D       		.uleb128 0x1d
 2260 048b 0C020000 		.4byte	.LASF88
 2261 048f 01       		.byte	0x1
 2262 0490 E701     		.2byte	0x1e7
 2263 0492 00000000 		.4byte	.LFB77
 2264 0496 B8000000 		.4byte	.LFE77-.LFB77
 2265 049a 01       		.uleb128 0x1
 2266 049b 9C       		.byte	0x9c
 2267 049c 1E       		.uleb128 0x1e
 2268 049d 6A040000 		.4byte	.LASF89
 2269 04a1 07       		.byte	0x7
 2270 04a2 1207     		.2byte	0x712
 2271 04a4 A8040000 		.4byte	0x4a8
 2272 04a8 1F       		.uleb128 0x1f
 2273 04a9 8B000000 		.4byte	0x8b
 2274 04ad 20       		.uleb128 0x20
 2275 04ae 747300   		.ascii	"ts\000"
 2276 04b1 05       		.byte	0x5
 2277 04b2 10       		.byte	0x10
 2278 04b3 96000000 		.4byte	0x96
 2279 04b7 05       		.uleb128 0x5
 2280 04b8 03       		.byte	0x3
 2281 04b9 00000000 		.4byte	ts
 2282 04bd 21       		.uleb128 0x21
 2283 04be CB050000 		.4byte	.LASF90
 2284 04c2 05       		.byte	0x5
 2285 04c3 11       		.byte	0x11
 2286 04c4 A2000000 		.4byte	0xa2
 2287 04c8 05       		.uleb128 0x5
 2288 04c9 03       		.byte	0x3
 2289 04ca 00000000 		.4byte	ts_enc
 2290 04ce 21       		.uleb128 0x21
 2291 04cf 77040000 		.4byte	.LASF91
 2292 04d3 05       		.byte	0x5
 2293 04d4 12       		.byte	0x12
 2294 04d5 A2000000 		.4byte	0xa2
 2295 04d9 05       		.uleb128 0x5
 2296 04da 03       		.byte	0x3
 2297 04db 00000000 		.4byte	ts_update
 2298 04df 21       		.uleb128 0x21
 2299 04e0 93030000 		.4byte	.LASF92
 2300 04e4 05       		.byte	0x5
 2301 04e5 13       		.byte	0x13
 2302 04e6 A2000000 		.4byte	0xa2
 2303 04ea 05       		.uleb128 0x5
 2304 04eb 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 51


 2305 04ec 00000000 		.4byte	ts_speed
 2306 04f0 21       		.uleb128 0x21
 2307 04f1 A2020000 		.4byte	.LASF93
 2308 04f5 05       		.byte	0x5
 2309 04f6 14       		.byte	0x14
 2310 04f7 A2000000 		.4byte	0xa2
 2311 04fb 05       		.uleb128 0x5
 2312 04fc 03       		.byte	0x3
 2313 04fd 00000000 		.4byte	ts_display
 2314 0501 21       		.uleb128 0x21
 2315 0502 56020000 		.4byte	.LASF94
 2316 0506 05       		.byte	0x5
 2317 0507 16       		.byte	0x16
 2318 0508 96000000 		.4byte	0x96
 2319 050c 05       		.uleb128 0x5
 2320 050d 03       		.byte	0x3
 2321 050e 00000000 		.4byte	flag_ts_enc
 2322 0512 21       		.uleb128 0x21
 2323 0513 47020000 		.4byte	.LASF95
 2324 0517 05       		.byte	0x5
 2325 0518 17       		.byte	0x17
 2326 0519 96000000 		.4byte	0x96
 2327 051d 05       		.uleb128 0x5
 2328 051e 03       		.byte	0x3
 2329 051f 00000000 		.4byte	flag_ts_update
 2330 0523 21       		.uleb128 0x21
 2331 0524 0F040000 		.4byte	.LASF96
 2332 0528 05       		.byte	0x5
 2333 0529 18       		.byte	0x18
 2334 052a 96000000 		.4byte	0x96
 2335 052e 05       		.uleb128 0x5
 2336 052f 03       		.byte	0x3
 2337 0530 00000000 		.4byte	flag_ts_speed
 2338 0534 21       		.uleb128 0x21
 2339 0535 D2050000 		.4byte	.LASF97
 2340 0539 05       		.byte	0x5
 2341 053a 19       		.byte	0x19
 2342 053b 96000000 		.4byte	0x96
 2343 053f 05       		.uleb128 0x5
 2344 0540 03       		.byte	0x3
 2345 0541 00000000 		.4byte	flag_ts_display
 2346 0545 21       		.uleb128 0x21
 2347 0546 2C040000 		.4byte	.LASF98
 2348 054a 05       		.byte	0x5
 2349 054b 1B       		.byte	0x1b
 2350 054c 96000000 		.4byte	0x96
 2351 0550 05       		.uleb128 0x5
 2352 0551 03       		.byte	0x3
 2353 0552 00000000 		.4byte	flag_rx
 2354 0556 21       		.uleb128 0x21
 2355 0557 00020000 		.4byte	.LASF99
 2356 055b 05       		.byte	0x5
 2357 055c 1C       		.byte	0x1c
 2358 055d 96000000 		.4byte	0x96
 2359 0561 05       		.uleb128 0x5
 2360 0562 03       		.byte	0x3
 2361 0563 00000000 		.4byte	flag_packet
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 52


 2362 0567 21       		.uleb128 0x21
 2363 0568 B6060000 		.4byte	.LASF100
 2364 056c 05       		.byte	0x5
 2365 056d 1D       		.byte	0x1d
 2366 056e 96000000 		.4byte	0x96
 2367 0572 05       		.uleb128 0x5
 2368 0573 03       		.byte	0x3
 2369 0574 00000000 		.4byte	flag_KB_string
 2370 0578 21       		.uleb128 0x21
 2371 0579 1D040000 		.4byte	.LASF101
 2372 057d 05       		.byte	0x5
 2373 057e 1F       		.byte	0x1f
 2374 057f 96000000 		.4byte	0x96
 2375 0583 05       		.uleb128 0x5
 2376 0584 03       		.byte	0x3
 2377 0585 00000000 		.4byte	dataready_flag
 2378 0589 21       		.uleb128 0x21
 2379 058a 5D010000 		.4byte	.LASF102
 2380 058e 05       		.byte	0x5
 2381 058f 21       		.byte	0x21
 2382 0590 96000000 		.4byte	0x96
 2383 0594 05       		.uleb128 0x5
 2384 0595 03       		.byte	0x3
 2385 0596 00000000 		.4byte	flag_rf_transmission_active
 2386 059a 22       		.uleb128 0x22
 2387 059b 84000000 		.4byte	0x84
 2388 059f AA050000 		.4byte	0x5aa
 2389 05a3 23       		.uleb128 0x23
 2390 05a4 7D000000 		.4byte	0x7d
 2391 05a8 3F       		.byte	0x3f
 2392 05a9 00       		.byte	0
 2393 05aa 21       		.uleb128 0x21
 2394 05ab E7050000 		.4byte	.LASF103
 2395 05af 05       		.byte	0x5
 2396 05b0 24       		.byte	0x24
 2397 05b1 9A050000 		.4byte	0x59a
 2398 05b5 05       		.uleb128 0x5
 2399 05b6 03       		.byte	0x3
 2400 05b7 00000000 		.4byte	displaystring
 2401 05bb 21       		.uleb128 0x21
 2402 05bc 9A050000 		.4byte	.LASF104
 2403 05c0 05       		.byte	0x5
 2404 05c1 25       		.byte	0x25
 2405 05c2 9A050000 		.4byte	0x59a
 2406 05c6 05       		.uleb128 0x5
 2407 05c7 03       		.byte	0x3
 2408 05c8 00000000 		.4byte	line
 2409 05cc 21       		.uleb128 0x21
 2410 05cd 67050000 		.4byte	.LASF105
 2411 05d1 05       		.byte	0x5
 2412 05d2 25       		.byte	0x25
 2413 05d3 9A050000 		.4byte	0x59a
 2414 05d7 05       		.uleb128 0x5
 2415 05d8 03       		.byte	0x3
 2416 05d9 00000000 		.4byte	entry
 2417 05dd 22       		.uleb128 0x22
 2418 05de 96000000 		.4byte	0x96
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 53


 2419 05e2 ED050000 		.4byte	0x5ed
 2420 05e6 23       		.uleb128 0x23
 2421 05e7 7D000000 		.4byte	0x7d
 2422 05eb 3F       		.byte	0x3f
 2423 05ec 00       		.byte	0
 2424 05ed 21       		.uleb128 0x21
 2425 05ee C7010000 		.4byte	.LASF106
 2426 05f2 05       		.byte	0x5
 2427 05f3 26       		.byte	0x26
 2428 05f4 DD050000 		.4byte	0x5dd
 2429 05f8 05       		.uleb128 0x5
 2430 05f9 03       		.byte	0x3
 2431 05fa 00000000 		.4byte	usbBuffer
 2432 05fe 21       		.uleb128 0x21
 2433 05ff 65000000 		.4byte	.LASF107
 2434 0603 05       		.byte	0x5
 2435 0604 3C       		.byte	0x3c
 2436 0605 E0000000 		.4byte	0xe0
 2437 0609 05       		.uleb128 0x5
 2438 060a 03       		.byte	0x3
 2439 060b 00000000 		.4byte	system_state
 2440 060f 22       		.uleb128 0x22
 2441 0610 68000000 		.4byte	0x68
 2442 0614 25060000 		.4byte	0x625
 2443 0618 23       		.uleb128 0x23
 2444 0619 7D000000 		.4byte	0x7d
 2445 061d 0E       		.byte	0xe
 2446 061e 23       		.uleb128 0x23
 2447 061f 7D000000 		.4byte	0x7d
 2448 0623 12       		.byte	0x12
 2449 0624 00       		.byte	0
 2450 0625 24       		.uleb128 0x24
 2451 0626 6D617000 		.ascii	"map\000"
 2452 062a 08       		.byte	0x8
 2453 062b 04       		.byte	0x4
 2454 062c 0F060000 		.4byte	0x60f
 2455 0630 22       		.uleb128 0x22
 2456 0631 68000000 		.4byte	0x68
 2457 0635 46060000 		.4byte	0x646
 2458 0639 23       		.uleb128 0x23
 2459 063a 7D000000 		.4byte	0x7d
 2460 063e 04       		.byte	0x4
 2461 063f 23       		.uleb128 0x23
 2462 0640 7D000000 		.4byte	0x7d
 2463 0644 01       		.byte	0x1
 2464 0645 00       		.byte	0
 2465 0646 25       		.uleb128 0x25
 2466 0647 80030000 		.4byte	.LASF108
 2467 064b 08       		.byte	0x8
 2468 064c 05       		.byte	0x5
 2469 064d 30060000 		.4byte	0x630
 2470 0651 21       		.uleb128 0x21
 2471 0652 DD040000 		.4byte	.LASF109
 2472 0656 01       		.byte	0x1
 2473 0657 19       		.byte	0x19
 2474 0658 58020000 		.4byte	0x258
 2475 065c 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 54


 2476 065d 03       		.byte	0x3
 2477 065e 00000000 		.4byte	currentDirection
 2478 0662 21       		.uleb128 0x21
 2479 0663 F1030000 		.4byte	.LASF110
 2480 0667 01       		.byte	0x1
 2481 0668 19       		.byte	0x19
 2482 0669 58020000 		.4byte	0x258
 2483 066d 05       		.uleb128 0x5
 2484 066e 03       		.byte	0x3
 2485 066f 00000000 		.4byte	previousDirection
 2486 0673 21       		.uleb128 0x21
 2487 0674 AD020000 		.4byte	.LASF111
 2488 0678 01       		.byte	0x1
 2489 0679 1B       		.byte	0x1b
 2490 067a 30020000 		.4byte	0x230
 2491 067e 05       		.uleb128 0x5
 2492 067f 03       		.byte	0x3
 2493 0680 00000000 		.4byte	currentOrientation
 2494 0684 21       		.uleb128 0x21
 2495 0685 49030000 		.4byte	.LASF112
 2496 0689 01       		.byte	0x1
 2497 068a 1B       		.byte	0x1b
 2498 068b 30020000 		.4byte	0x230
 2499 068f 05       		.uleb128 0x5
 2500 0690 03       		.byte	0x3
 2501 0691 00000000 		.4byte	previousOrientation
 2502 0695 21       		.uleb128 0x21
 2503 0696 4C060000 		.4byte	.LASF113
 2504 069a 01       		.byte	0x1
 2505 069b 1C       		.byte	0x1c
 2506 069c 25020000 		.4byte	0x225
 2507 06a0 05       		.uleb128 0x5
 2508 06a1 03       		.byte	0x3
 2509 06a2 00000000 		.4byte	currentInstruction
 2510 06a6 21       		.uleb128 0x21
 2511 06a7 32010000 		.4byte	.LASF84
 2512 06ab 01       		.byte	0x1
 2513 06ac 1D       		.byte	0x1d
 2514 06ad 68000000 		.4byte	0x68
 2515 06b1 05       		.uleb128 0x5
 2516 06b2 03       		.byte	0x3
 2517 06b3 00000000 		.4byte	numSteps
 2518 06b7 21       		.uleb128 0x21
 2519 06b8 CE020000 		.4byte	.LASF85
 2520 06bc 01       		.byte	0x1
 2521 06bd 1F       		.byte	0x1f
 2522 06be 84040000 		.4byte	0x484
 2523 06c2 05       		.uleb128 0x5
 2524 06c3 03       		.byte	0x3
 2525 06c4 00000000 		.4byte	instructionList
 2526 06c8 21       		.uleb128 0x21
 2527 06c9 DE020000 		.4byte	.LASF86
 2528 06cd 01       		.byte	0x1
 2529 06ce 20       		.byte	0x20
 2530 06cf AE000000 		.4byte	0xae
 2531 06d3 05       		.uleb128 0x5
 2532 06d4 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 55


 2533 06d5 00000000 		.4byte	instructionIndex
 2534 06d9 20       		.uleb128 0x20
 2535 06da 733300   		.ascii	"s3\000"
 2536 06dd 01       		.byte	0x1
 2537 06de 24       		.byte	0x24
 2538 06df 96000000 		.4byte	0x96
 2539 06e3 05       		.uleb128 0x5
 2540 06e4 03       		.byte	0x3
 2541 06e5 00000000 		.4byte	s3
 2542 06e9 20       		.uleb128 0x20
 2543 06ea 733400   		.ascii	"s4\000"
 2544 06ed 01       		.byte	0x1
 2545 06ee 24       		.byte	0x24
 2546 06ef 96000000 		.4byte	0x96
 2547 06f3 05       		.uleb128 0x5
 2548 06f4 03       		.byte	0x3
 2549 06f5 00000000 		.4byte	s4
 2550 06f9 20       		.uleb128 0x20
 2551 06fa 733500   		.ascii	"s5\000"
 2552 06fd 01       		.byte	0x1
 2553 06fe 24       		.byte	0x24
 2554 06ff 96000000 		.4byte	0x96
 2555 0703 05       		.uleb128 0x5
 2556 0704 03       		.byte	0x3
 2557 0705 00000000 		.4byte	s5
 2558 0709 20       		.uleb128 0x20
 2559 070a 733600   		.ascii	"s6\000"
 2560 070d 01       		.byte	0x1
 2561 070e 24       		.byte	0x24
 2562 070f 96000000 		.4byte	0x96
 2563 0713 05       		.uleb128 0x5
 2564 0714 03       		.byte	0x3
 2565 0715 00000000 		.4byte	s6
 2566 0719 21       		.uleb128 0x21
 2567 071a 89040000 		.4byte	.LASF114
 2568 071e 01       		.byte	0x1
 2569 071f 29       		.byte	0x29
 2570 0720 AE000000 		.4byte	0xae
 2571 0724 05       		.uleb128 0x5
 2572 0725 03       		.byte	0x3
 2573 0726 00000000 		.4byte	totalMilliseconds
 2574 072a 21       		.uleb128 0x21
 2575 072b 1C010000 		.4byte	.LASF115
 2576 072f 01       		.byte	0x1
 2577 0730 2A       		.byte	0x2a
 2578 0731 D2000000 		.4byte	0xd2
 2579 0735 05       		.uleb128 0x5
 2580 0736 03       		.byte	0x3
 2581 0737 00000000 		.4byte	totalDistance
 2582 073b 22       		.uleb128 0x22
 2583 073c 84000000 		.4byte	0x84
 2584 0740 4B070000 		.4byte	0x74b
 2585 0744 23       		.uleb128 0x23
 2586 0745 7D000000 		.4byte	0x7d
 2587 0749 44       		.byte	0x44
 2588 074a 00       		.byte	0
 2589 074b 21       		.uleb128 0x21
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 56


 2590 074c 41000000 		.4byte	.LASF116
 2591 0750 01       		.byte	0x1
 2592 0751 2C       		.byte	0x2c
 2593 0752 3B070000 		.4byte	0x73b
 2594 0756 05       		.uleb128 0x5
 2595 0757 03       		.byte	0x3
 2596 0758 00000000 		.4byte	buffer
 2597 075c 21       		.uleb128 0x21
 2598 075d 97010000 		.4byte	.LASF117
 2599 0761 01       		.byte	0x1
 2600 0762 2D       		.byte	0x2d
 2601 0763 68000000 		.4byte	0x68
 2602 0767 05       		.uleb128 0x5
 2603 0768 03       		.byte	0x3
 2604 0769 00000000 		.4byte	quadDec2Count
 2605 076d 21       		.uleb128 0x21
 2606 076e AD060000 		.4byte	.LASF118
 2607 0772 01       		.byte	0x1
 2608 0773 2E       		.byte	0x2e
 2609 0774 68000000 		.4byte	0x68
 2610 0778 05       		.uleb128 0x5
 2611 0779 03       		.byte	0x3
 2612 077a 00000000 		.4byte	timerInt
 2613 077e 21       		.uleb128 0x21
 2614 077f 2A020000 		.4byte	.LASF119
 2615 0783 01       		.byte	0x1
 2616 0784 2F       		.byte	0x2f
 2617 0785 68000000 		.4byte	0x68
 2618 0789 05       		.uleb128 0x5
 2619 078a 03       		.byte	0x3
 2620 078b 00000000 		.4byte	keepLedOn
 2621 078f 21       		.uleb128 0x21
 2622 0790 49050000 		.4byte	.LASF120
 2623 0794 01       		.byte	0x1
 2624 0795 30       		.byte	0x30
 2625 0796 AE000000 		.4byte	0xae
 2626 079a 05       		.uleb128 0x5
 2627 079b 03       		.byte	0x3
 2628 079c 00000000 		.4byte	stopBuffer
 2629 07a0 21       		.uleb128 0x21
 2630 07a1 FB020000 		.4byte	.LASF121
 2631 07a5 01       		.byte	0x1
 2632 07a6 B1       		.byte	0xb1
 2633 07a7 D2000000 		.4byte	0xd2
 2634 07ab 05       		.uleb128 0x5
 2635 07ac 03       		.byte	0x3
 2636 07ad 00000000 		.4byte	xBlocksize
 2637 07b1 21       		.uleb128 0x21
 2638 07b2 34040000 		.4byte	.LASF122
 2639 07b6 01       		.byte	0x1
 2640 07b7 B2       		.byte	0xb2
 2641 07b8 D2000000 		.4byte	0xd2
 2642 07bc 05       		.uleb128 0x5
 2643 07bd 03       		.byte	0x3
 2644 07be 00000000 		.4byte	yBlocksize
 2645 07c2 21       		.uleb128 0x21
 2646 07c3 17060000 		.4byte	.LASF123
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 57


 2647 07c7 01       		.byte	0x1
 2648 07c8 B3       		.byte	0xb3
 2649 07c9 96000000 		.4byte	0x96
 2650 07cd 05       		.uleb128 0x5
 2651 07ce 03       		.byte	0x3
 2652 07cf 00000000 		.4byte	currentRow
 2653 07d3 21       		.uleb128 0x21
 2654 07d4 9A060000 		.4byte	.LASF124
 2655 07d8 01       		.byte	0x1
 2656 07d9 B4       		.byte	0xb4
 2657 07da 96000000 		.4byte	0x96
 2658 07de 05       		.uleb128 0x5
 2659 07df 03       		.byte	0x3
 2660 07e0 00000000 		.4byte	currentCol
 2661 07e4 26       		.uleb128 0x26
 2662 07e5 89050000 		.4byte	.LASF125
 2663 07e9 01       		.byte	0x1
 2664 07ea 0101     		.2byte	0x101
 2665 07ec 96000000 		.4byte	0x96
 2666 07f0 05       		.uleb128 0x5
 2667 07f1 03       		.byte	0x3
 2668 07f2 00000000 		.4byte	stoppedAfterTurn
 2669 07f6 26       		.uleb128 0x26
 2670 07f7 71020000 		.4byte	.LASF126
 2671 07fb 01       		.byte	0x1
 2672 07fc 0201     		.2byte	0x102
 2673 07fe 96000000 		.4byte	0x96
 2674 0802 05       		.uleb128 0x5
 2675 0803 03       		.byte	0x3
 2676 0804 00000000 		.4byte	ignoreSensor
 2677 0808 00       		.byte	0
 2678              		.section	.debug_abbrev,"",%progbits
 2679              	.Ldebug_abbrev0:
 2680 0000 01       		.uleb128 0x1
 2681 0001 11       		.uleb128 0x11
 2682 0002 01       		.byte	0x1
 2683 0003 25       		.uleb128 0x25
 2684 0004 0E       		.uleb128 0xe
 2685 0005 13       		.uleb128 0x13
 2686 0006 0B       		.uleb128 0xb
 2687 0007 03       		.uleb128 0x3
 2688 0008 0E       		.uleb128 0xe
 2689 0009 1B       		.uleb128 0x1b
 2690 000a 0E       		.uleb128 0xe
 2691 000b 55       		.uleb128 0x55
 2692 000c 17       		.uleb128 0x17
 2693 000d 11       		.uleb128 0x11
 2694 000e 01       		.uleb128 0x1
 2695 000f 10       		.uleb128 0x10
 2696 0010 17       		.uleb128 0x17
 2697 0011 00       		.byte	0
 2698 0012 00       		.byte	0
 2699 0013 02       		.uleb128 0x2
 2700 0014 24       		.uleb128 0x24
 2701 0015 00       		.byte	0
 2702 0016 0B       		.uleb128 0xb
 2703 0017 0B       		.uleb128 0xb
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 58


 2704 0018 3E       		.uleb128 0x3e
 2705 0019 0B       		.uleb128 0xb
 2706 001a 03       		.uleb128 0x3
 2707 001b 0E       		.uleb128 0xe
 2708 001c 00       		.byte	0
 2709 001d 00       		.byte	0
 2710 001e 03       		.uleb128 0x3
 2711 001f 16       		.uleb128 0x16
 2712 0020 00       		.byte	0
 2713 0021 03       		.uleb128 0x3
 2714 0022 0E       		.uleb128 0xe
 2715 0023 3A       		.uleb128 0x3a
 2716 0024 0B       		.uleb128 0xb
 2717 0025 3B       		.uleb128 0x3b
 2718 0026 0B       		.uleb128 0xb
 2719 0027 49       		.uleb128 0x49
 2720 0028 13       		.uleb128 0x13
 2721 0029 00       		.byte	0
 2722 002a 00       		.byte	0
 2723 002b 04       		.uleb128 0x4
 2724 002c 24       		.uleb128 0x24
 2725 002d 00       		.byte	0
 2726 002e 0B       		.uleb128 0xb
 2727 002f 0B       		.uleb128 0xb
 2728 0030 3E       		.uleb128 0x3e
 2729 0031 0B       		.uleb128 0xb
 2730 0032 03       		.uleb128 0x3
 2731 0033 08       		.uleb128 0x8
 2732 0034 00       		.byte	0
 2733 0035 00       		.byte	0
 2734 0036 05       		.uleb128 0x5
 2735 0037 16       		.uleb128 0x16
 2736 0038 00       		.byte	0
 2737 0039 03       		.uleb128 0x3
 2738 003a 0E       		.uleb128 0xe
 2739 003b 3A       		.uleb128 0x3a
 2740 003c 0B       		.uleb128 0xb
 2741 003d 3B       		.uleb128 0x3b
 2742 003e 05       		.uleb128 0x5
 2743 003f 49       		.uleb128 0x49
 2744 0040 13       		.uleb128 0x13
 2745 0041 00       		.byte	0
 2746 0042 00       		.byte	0
 2747 0043 06       		.uleb128 0x6
 2748 0044 13       		.uleb128 0x13
 2749 0045 01       		.byte	0x1
 2750 0046 03       		.uleb128 0x3
 2751 0047 0E       		.uleb128 0xe
 2752 0048 0B       		.uleb128 0xb
 2753 0049 0B       		.uleb128 0xb
 2754 004a 3A       		.uleb128 0x3a
 2755 004b 0B       		.uleb128 0xb
 2756 004c 3B       		.uleb128 0x3b
 2757 004d 0B       		.uleb128 0xb
 2758 004e 01       		.uleb128 0x1
 2759 004f 13       		.uleb128 0x13
 2760 0050 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 59


 2761 0051 00       		.byte	0
 2762 0052 07       		.uleb128 0x7
 2763 0053 0D       		.uleb128 0xd
 2764 0054 00       		.byte	0
 2765 0055 03       		.uleb128 0x3
 2766 0056 0E       		.uleb128 0xe
 2767 0057 3A       		.uleb128 0x3a
 2768 0058 0B       		.uleb128 0xb
 2769 0059 3B       		.uleb128 0x3b
 2770 005a 0B       		.uleb128 0xb
 2771 005b 49       		.uleb128 0x49
 2772 005c 13       		.uleb128 0x13
 2773 005d 38       		.uleb128 0x38
 2774 005e 0B       		.uleb128 0xb
 2775 005f 00       		.byte	0
 2776 0060 00       		.byte	0
 2777 0061 08       		.uleb128 0x8
 2778 0062 04       		.uleb128 0x4
 2779 0063 01       		.byte	0x1
 2780 0064 03       		.uleb128 0x3
 2781 0065 0E       		.uleb128 0xe
 2782 0066 0B       		.uleb128 0xb
 2783 0067 0B       		.uleb128 0xb
 2784 0068 49       		.uleb128 0x49
 2785 0069 13       		.uleb128 0x13
 2786 006a 3A       		.uleb128 0x3a
 2787 006b 0B       		.uleb128 0xb
 2788 006c 3B       		.uleb128 0x3b
 2789 006d 0B       		.uleb128 0xb
 2790 006e 01       		.uleb128 0x1
 2791 006f 13       		.uleb128 0x13
 2792 0070 00       		.byte	0
 2793 0071 00       		.byte	0
 2794 0072 09       		.uleb128 0x9
 2795 0073 28       		.uleb128 0x28
 2796 0074 00       		.byte	0
 2797 0075 03       		.uleb128 0x3
 2798 0076 0E       		.uleb128 0xe
 2799 0077 1C       		.uleb128 0x1c
 2800 0078 0B       		.uleb128 0xb
 2801 0079 00       		.byte	0
 2802 007a 00       		.byte	0
 2803 007b 0A       		.uleb128 0xa
 2804 007c 28       		.uleb128 0x28
 2805 007d 00       		.byte	0
 2806 007e 03       		.uleb128 0x3
 2807 007f 08       		.uleb128 0x8
 2808 0080 1C       		.uleb128 0x1c
 2809 0081 0B       		.uleb128 0xb
 2810 0082 00       		.byte	0
 2811 0083 00       		.byte	0
 2812 0084 0B       		.uleb128 0xb
 2813 0085 2E       		.uleb128 0x2e
 2814 0086 01       		.byte	0x1
 2815 0087 3F       		.uleb128 0x3f
 2816 0088 19       		.uleb128 0x19
 2817 0089 03       		.uleb128 0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 60


 2818 008a 0E       		.uleb128 0xe
 2819 008b 3A       		.uleb128 0x3a
 2820 008c 0B       		.uleb128 0xb
 2821 008d 3B       		.uleb128 0x3b
 2822 008e 0B       		.uleb128 0xb
 2823 008f 27       		.uleb128 0x27
 2824 0090 19       		.uleb128 0x19
 2825 0091 11       		.uleb128 0x11
 2826 0092 01       		.uleb128 0x1
 2827 0093 12       		.uleb128 0x12
 2828 0094 06       		.uleb128 0x6
 2829 0095 40       		.uleb128 0x40
 2830 0096 18       		.uleb128 0x18
 2831 0097 9642     		.uleb128 0x2116
 2832 0099 19       		.uleb128 0x19
 2833 009a 01       		.uleb128 0x1
 2834 009b 13       		.uleb128 0x13
 2835 009c 00       		.byte	0
 2836 009d 00       		.byte	0
 2837 009e 0C       		.uleb128 0xc
 2838 009f 0B       		.uleb128 0xb
 2839 00a0 01       		.byte	0x1
 2840 00a1 11       		.uleb128 0x11
 2841 00a2 01       		.uleb128 0x1
 2842 00a3 12       		.uleb128 0x12
 2843 00a4 06       		.uleb128 0x6
 2844 00a5 00       		.byte	0
 2845 00a6 00       		.byte	0
 2846 00a7 0D       		.uleb128 0xd
 2847 00a8 34       		.uleb128 0x34
 2848 00a9 00       		.byte	0
 2849 00aa 03       		.uleb128 0x3
 2850 00ab 0E       		.uleb128 0xe
 2851 00ac 3A       		.uleb128 0x3a
 2852 00ad 0B       		.uleb128 0xb
 2853 00ae 3B       		.uleb128 0x3b
 2854 00af 0B       		.uleb128 0xb
 2855 00b0 49       		.uleb128 0x49
 2856 00b1 13       		.uleb128 0x13
 2857 00b2 02       		.uleb128 0x2
 2858 00b3 18       		.uleb128 0x18
 2859 00b4 00       		.byte	0
 2860 00b5 00       		.byte	0
 2861 00b6 0E       		.uleb128 0xe
 2862 00b7 2E       		.uleb128 0x2e
 2863 00b8 00       		.byte	0
 2864 00b9 3F       		.uleb128 0x3f
 2865 00ba 19       		.uleb128 0x19
 2866 00bb 03       		.uleb128 0x3
 2867 00bc 0E       		.uleb128 0xe
 2868 00bd 3A       		.uleb128 0x3a
 2869 00be 0B       		.uleb128 0xb
 2870 00bf 3B       		.uleb128 0x3b
 2871 00c0 0B       		.uleb128 0xb
 2872 00c1 27       		.uleb128 0x27
 2873 00c2 19       		.uleb128 0x19
 2874 00c3 11       		.uleb128 0x11
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 61


 2875 00c4 01       		.uleb128 0x1
 2876 00c5 12       		.uleb128 0x12
 2877 00c6 06       		.uleb128 0x6
 2878 00c7 40       		.uleb128 0x40
 2879 00c8 18       		.uleb128 0x18
 2880 00c9 9742     		.uleb128 0x2117
 2881 00cb 19       		.uleb128 0x19
 2882 00cc 00       		.byte	0
 2883 00cd 00       		.byte	0
 2884 00ce 0F       		.uleb128 0xf
 2885 00cf 2E       		.uleb128 0x2e
 2886 00d0 00       		.byte	0
 2887 00d1 3F       		.uleb128 0x3f
 2888 00d2 19       		.uleb128 0x19
 2889 00d3 03       		.uleb128 0x3
 2890 00d4 0E       		.uleb128 0xe
 2891 00d5 3A       		.uleb128 0x3a
 2892 00d6 0B       		.uleb128 0xb
 2893 00d7 3B       		.uleb128 0x3b
 2894 00d8 0B       		.uleb128 0xb
 2895 00d9 27       		.uleb128 0x27
 2896 00da 19       		.uleb128 0x19
 2897 00db 11       		.uleb128 0x11
 2898 00dc 01       		.uleb128 0x1
 2899 00dd 12       		.uleb128 0x12
 2900 00de 06       		.uleb128 0x6
 2901 00df 40       		.uleb128 0x40
 2902 00e0 18       		.uleb128 0x18
 2903 00e1 9642     		.uleb128 0x2116
 2904 00e3 19       		.uleb128 0x19
 2905 00e4 00       		.byte	0
 2906 00e5 00       		.byte	0
 2907 00e6 10       		.uleb128 0x10
 2908 00e7 2E       		.uleb128 0x2e
 2909 00e8 00       		.byte	0
 2910 00e9 3F       		.uleb128 0x3f
 2911 00ea 19       		.uleb128 0x19
 2912 00eb 03       		.uleb128 0x3
 2913 00ec 0E       		.uleb128 0xe
 2914 00ed 3A       		.uleb128 0x3a
 2915 00ee 0B       		.uleb128 0xb
 2916 00ef 3B       		.uleb128 0x3b
 2917 00f0 0B       		.uleb128 0xb
 2918 00f1 49       		.uleb128 0x49
 2919 00f2 13       		.uleb128 0x13
 2920 00f3 11       		.uleb128 0x11
 2921 00f4 01       		.uleb128 0x1
 2922 00f5 12       		.uleb128 0x12
 2923 00f6 06       		.uleb128 0x6
 2924 00f7 40       		.uleb128 0x40
 2925 00f8 18       		.uleb128 0x18
 2926 00f9 9642     		.uleb128 0x2116
 2927 00fb 19       		.uleb128 0x19
 2928 00fc 00       		.byte	0
 2929 00fd 00       		.byte	0
 2930 00fe 11       		.uleb128 0x11
 2931 00ff 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 62


 2932 0100 01       		.byte	0x1
 2933 0101 3F       		.uleb128 0x3f
 2934 0102 19       		.uleb128 0x19
 2935 0103 03       		.uleb128 0x3
 2936 0104 0E       		.uleb128 0xe
 2937 0105 3A       		.uleb128 0x3a
 2938 0106 0B       		.uleb128 0xb
 2939 0107 3B       		.uleb128 0x3b
 2940 0108 0B       		.uleb128 0xb
 2941 0109 27       		.uleb128 0x27
 2942 010a 19       		.uleb128 0x19
 2943 010b 49       		.uleb128 0x49
 2944 010c 13       		.uleb128 0x13
 2945 010d 11       		.uleb128 0x11
 2946 010e 01       		.uleb128 0x1
 2947 010f 12       		.uleb128 0x12
 2948 0110 06       		.uleb128 0x6
 2949 0111 40       		.uleb128 0x40
 2950 0112 18       		.uleb128 0x18
 2951 0113 9642     		.uleb128 0x2116
 2952 0115 19       		.uleb128 0x19
 2953 0116 01       		.uleb128 0x1
 2954 0117 13       		.uleb128 0x13
 2955 0118 00       		.byte	0
 2956 0119 00       		.byte	0
 2957 011a 12       		.uleb128 0x12
 2958 011b 05       		.uleb128 0x5
 2959 011c 00       		.byte	0
 2960 011d 03       		.uleb128 0x3
 2961 011e 0E       		.uleb128 0xe
 2962 011f 3A       		.uleb128 0x3a
 2963 0120 0B       		.uleb128 0xb
 2964 0121 3B       		.uleb128 0x3b
 2965 0122 0B       		.uleb128 0xb
 2966 0123 49       		.uleb128 0x49
 2967 0124 13       		.uleb128 0x13
 2968 0125 02       		.uleb128 0x2
 2969 0126 18       		.uleb128 0x18
 2970 0127 00       		.byte	0
 2971 0128 00       		.byte	0
 2972 0129 13       		.uleb128 0x13
 2973 012a 34       		.uleb128 0x34
 2974 012b 00       		.byte	0
 2975 012c 03       		.uleb128 0x3
 2976 012d 08       		.uleb128 0x8
 2977 012e 3A       		.uleb128 0x3a
 2978 012f 0B       		.uleb128 0xb
 2979 0130 3B       		.uleb128 0x3b
 2980 0131 0B       		.uleb128 0xb
 2981 0132 49       		.uleb128 0x49
 2982 0133 13       		.uleb128 0x13
 2983 0134 02       		.uleb128 0x2
 2984 0135 18       		.uleb128 0x18
 2985 0136 00       		.byte	0
 2986 0137 00       		.byte	0
 2987 0138 14       		.uleb128 0x14
 2988 0139 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 63


 2989 013a 00       		.byte	0
 2990 013b 3F       		.uleb128 0x3f
 2991 013c 19       		.uleb128 0x19
 2992 013d 03       		.uleb128 0x3
 2993 013e 0E       		.uleb128 0xe
 2994 013f 3A       		.uleb128 0x3a
 2995 0140 0B       		.uleb128 0xb
 2996 0141 3B       		.uleb128 0x3b
 2997 0142 0B       		.uleb128 0xb
 2998 0143 11       		.uleb128 0x11
 2999 0144 01       		.uleb128 0x1
 3000 0145 12       		.uleb128 0x12
 3001 0146 06       		.uleb128 0x6
 3002 0147 40       		.uleb128 0x40
 3003 0148 18       		.uleb128 0x18
 3004 0149 9742     		.uleb128 0x2117
 3005 014b 19       		.uleb128 0x19
 3006 014c 00       		.byte	0
 3007 014d 00       		.byte	0
 3008 014e 15       		.uleb128 0x15
 3009 014f 2E       		.uleb128 0x2e
 3010 0150 01       		.byte	0x1
 3011 0151 3F       		.uleb128 0x3f
 3012 0152 19       		.uleb128 0x19
 3013 0153 03       		.uleb128 0x3
 3014 0154 0E       		.uleb128 0xe
 3015 0155 3A       		.uleb128 0x3a
 3016 0156 0B       		.uleb128 0xb
 3017 0157 3B       		.uleb128 0x3b
 3018 0158 05       		.uleb128 0x5
 3019 0159 49       		.uleb128 0x49
 3020 015a 13       		.uleb128 0x13
 3021 015b 11       		.uleb128 0x11
 3022 015c 01       		.uleb128 0x1
 3023 015d 12       		.uleb128 0x12
 3024 015e 06       		.uleb128 0x6
 3025 015f 40       		.uleb128 0x40
 3026 0160 18       		.uleb128 0x18
 3027 0161 9642     		.uleb128 0x2116
 3028 0163 19       		.uleb128 0x19
 3029 0164 01       		.uleb128 0x1
 3030 0165 13       		.uleb128 0x13
 3031 0166 00       		.byte	0
 3032 0167 00       		.byte	0
 3033 0168 16       		.uleb128 0x16
 3034 0169 34       		.uleb128 0x34
 3035 016a 00       		.byte	0
 3036 016b 03       		.uleb128 0x3
 3037 016c 0E       		.uleb128 0xe
 3038 016d 3A       		.uleb128 0x3a
 3039 016e 0B       		.uleb128 0xb
 3040 016f 3B       		.uleb128 0x3b
 3041 0170 05       		.uleb128 0x5
 3042 0171 49       		.uleb128 0x49
 3043 0172 13       		.uleb128 0x13
 3044 0173 02       		.uleb128 0x2
 3045 0174 18       		.uleb128 0x18
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 64


 3046 0175 00       		.byte	0
 3047 0176 00       		.byte	0
 3048 0177 17       		.uleb128 0x17
 3049 0178 2E       		.uleb128 0x2e
 3050 0179 01       		.byte	0x1
 3051 017a 3F       		.uleb128 0x3f
 3052 017b 19       		.uleb128 0x19
 3053 017c 03       		.uleb128 0x3
 3054 017d 0E       		.uleb128 0xe
 3055 017e 3A       		.uleb128 0x3a
 3056 017f 0B       		.uleb128 0xb
 3057 0180 3B       		.uleb128 0x3b
 3058 0181 05       		.uleb128 0x5
 3059 0182 49       		.uleb128 0x49
 3060 0183 13       		.uleb128 0x13
 3061 0184 11       		.uleb128 0x11
 3062 0185 01       		.uleb128 0x1
 3063 0186 12       		.uleb128 0x12
 3064 0187 06       		.uleb128 0x6
 3065 0188 40       		.uleb128 0x40
 3066 0189 18       		.uleb128 0x18
 3067 018a 9742     		.uleb128 0x2117
 3068 018c 19       		.uleb128 0x19
 3069 018d 01       		.uleb128 0x1
 3070 018e 13       		.uleb128 0x13
 3071 018f 00       		.byte	0
 3072 0190 00       		.byte	0
 3073 0191 18       		.uleb128 0x18
 3074 0192 2E       		.uleb128 0x2e
 3075 0193 00       		.byte	0
 3076 0194 3F       		.uleb128 0x3f
 3077 0195 19       		.uleb128 0x19
 3078 0196 03       		.uleb128 0x3
 3079 0197 0E       		.uleb128 0xe
 3080 0198 3A       		.uleb128 0x3a
 3081 0199 0B       		.uleb128 0xb
 3082 019a 3B       		.uleb128 0x3b
 3083 019b 05       		.uleb128 0x5
 3084 019c 11       		.uleb128 0x11
 3085 019d 01       		.uleb128 0x1
 3086 019e 12       		.uleb128 0x12
 3087 019f 06       		.uleb128 0x6
 3088 01a0 40       		.uleb128 0x40
 3089 01a1 18       		.uleb128 0x18
 3090 01a2 9742     		.uleb128 0x2117
 3091 01a4 19       		.uleb128 0x19
 3092 01a5 00       		.byte	0
 3093 01a6 00       		.byte	0
 3094 01a7 19       		.uleb128 0x19
 3095 01a8 2E       		.uleb128 0x2e
 3096 01a9 01       		.byte	0x1
 3097 01aa 3F       		.uleb128 0x3f
 3098 01ab 19       		.uleb128 0x19
 3099 01ac 03       		.uleb128 0x3
 3100 01ad 0E       		.uleb128 0xe
 3101 01ae 3A       		.uleb128 0x3a
 3102 01af 0B       		.uleb128 0xb
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 65


 3103 01b0 3B       		.uleb128 0x3b
 3104 01b1 05       		.uleb128 0x5
 3105 01b2 27       		.uleb128 0x27
 3106 01b3 19       		.uleb128 0x19
 3107 01b4 49       		.uleb128 0x49
 3108 01b5 13       		.uleb128 0x13
 3109 01b6 11       		.uleb128 0x11
 3110 01b7 01       		.uleb128 0x1
 3111 01b8 12       		.uleb128 0x12
 3112 01b9 06       		.uleb128 0x6
 3113 01ba 40       		.uleb128 0x40
 3114 01bb 18       		.uleb128 0x18
 3115 01bc 9742     		.uleb128 0x2117
 3116 01be 19       		.uleb128 0x19
 3117 01bf 01       		.uleb128 0x1
 3118 01c0 13       		.uleb128 0x13
 3119 01c1 00       		.byte	0
 3120 01c2 00       		.byte	0
 3121 01c3 1A       		.uleb128 0x1a
 3122 01c4 05       		.uleb128 0x5
 3123 01c5 00       		.byte	0
 3124 01c6 03       		.uleb128 0x3
 3125 01c7 0E       		.uleb128 0xe
 3126 01c8 3A       		.uleb128 0x3a
 3127 01c9 0B       		.uleb128 0xb
 3128 01ca 3B       		.uleb128 0x3b
 3129 01cb 05       		.uleb128 0x5
 3130 01cc 49       		.uleb128 0x49
 3131 01cd 13       		.uleb128 0x13
 3132 01ce 02       		.uleb128 0x2
 3133 01cf 18       		.uleb128 0x18
 3134 01d0 00       		.byte	0
 3135 01d1 00       		.byte	0
 3136 01d2 1B       		.uleb128 0x1b
 3137 01d3 34       		.uleb128 0x34
 3138 01d4 00       		.byte	0
 3139 01d5 03       		.uleb128 0x3
 3140 01d6 08       		.uleb128 0x8
 3141 01d7 3A       		.uleb128 0x3a
 3142 01d8 0B       		.uleb128 0xb
 3143 01d9 3B       		.uleb128 0x3b
 3144 01da 05       		.uleb128 0x5
 3145 01db 49       		.uleb128 0x49
 3146 01dc 13       		.uleb128 0x13
 3147 01dd 02       		.uleb128 0x2
 3148 01de 18       		.uleb128 0x18
 3149 01df 00       		.byte	0
 3150 01e0 00       		.byte	0
 3151 01e1 1C       		.uleb128 0x1c
 3152 01e2 0F       		.uleb128 0xf
 3153 01e3 00       		.byte	0
 3154 01e4 0B       		.uleb128 0xb
 3155 01e5 0B       		.uleb128 0xb
 3156 01e6 49       		.uleb128 0x49
 3157 01e7 13       		.uleb128 0x13
 3158 01e8 00       		.byte	0
 3159 01e9 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 66


 3160 01ea 1D       		.uleb128 0x1d
 3161 01eb 2E       		.uleb128 0x2e
 3162 01ec 00       		.byte	0
 3163 01ed 3F       		.uleb128 0x3f
 3164 01ee 19       		.uleb128 0x19
 3165 01ef 03       		.uleb128 0x3
 3166 01f0 0E       		.uleb128 0xe
 3167 01f1 3A       		.uleb128 0x3a
 3168 01f2 0B       		.uleb128 0xb
 3169 01f3 3B       		.uleb128 0x3b
 3170 01f4 05       		.uleb128 0x5
 3171 01f5 11       		.uleb128 0x11
 3172 01f6 01       		.uleb128 0x1
 3173 01f7 12       		.uleb128 0x12
 3174 01f8 06       		.uleb128 0x6
 3175 01f9 40       		.uleb128 0x40
 3176 01fa 18       		.uleb128 0x18
 3177 01fb 9642     		.uleb128 0x2116
 3178 01fd 19       		.uleb128 0x19
 3179 01fe 00       		.byte	0
 3180 01ff 00       		.byte	0
 3181 0200 1E       		.uleb128 0x1e
 3182 0201 34       		.uleb128 0x34
 3183 0202 00       		.byte	0
 3184 0203 03       		.uleb128 0x3
 3185 0204 0E       		.uleb128 0xe
 3186 0205 3A       		.uleb128 0x3a
 3187 0206 0B       		.uleb128 0xb
 3188 0207 3B       		.uleb128 0x3b
 3189 0208 05       		.uleb128 0x5
 3190 0209 49       		.uleb128 0x49
 3191 020a 13       		.uleb128 0x13
 3192 020b 3F       		.uleb128 0x3f
 3193 020c 19       		.uleb128 0x19
 3194 020d 3C       		.uleb128 0x3c
 3195 020e 19       		.uleb128 0x19
 3196 020f 00       		.byte	0
 3197 0210 00       		.byte	0
 3198 0211 1F       		.uleb128 0x1f
 3199 0212 35       		.uleb128 0x35
 3200 0213 00       		.byte	0
 3201 0214 49       		.uleb128 0x49
 3202 0215 13       		.uleb128 0x13
 3203 0216 00       		.byte	0
 3204 0217 00       		.byte	0
 3205 0218 20       		.uleb128 0x20
 3206 0219 34       		.uleb128 0x34
 3207 021a 00       		.byte	0
 3208 021b 03       		.uleb128 0x3
 3209 021c 08       		.uleb128 0x8
 3210 021d 3A       		.uleb128 0x3a
 3211 021e 0B       		.uleb128 0xb
 3212 021f 3B       		.uleb128 0x3b
 3213 0220 0B       		.uleb128 0xb
 3214 0221 49       		.uleb128 0x49
 3215 0222 13       		.uleb128 0x13
 3216 0223 3F       		.uleb128 0x3f
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 67


 3217 0224 19       		.uleb128 0x19
 3218 0225 02       		.uleb128 0x2
 3219 0226 18       		.uleb128 0x18
 3220 0227 00       		.byte	0
 3221 0228 00       		.byte	0
 3222 0229 21       		.uleb128 0x21
 3223 022a 34       		.uleb128 0x34
 3224 022b 00       		.byte	0
 3225 022c 03       		.uleb128 0x3
 3226 022d 0E       		.uleb128 0xe
 3227 022e 3A       		.uleb128 0x3a
 3228 022f 0B       		.uleb128 0xb
 3229 0230 3B       		.uleb128 0x3b
 3230 0231 0B       		.uleb128 0xb
 3231 0232 49       		.uleb128 0x49
 3232 0233 13       		.uleb128 0x13
 3233 0234 3F       		.uleb128 0x3f
 3234 0235 19       		.uleb128 0x19
 3235 0236 02       		.uleb128 0x2
 3236 0237 18       		.uleb128 0x18
 3237 0238 00       		.byte	0
 3238 0239 00       		.byte	0
 3239 023a 22       		.uleb128 0x22
 3240 023b 01       		.uleb128 0x1
 3241 023c 01       		.byte	0x1
 3242 023d 49       		.uleb128 0x49
 3243 023e 13       		.uleb128 0x13
 3244 023f 01       		.uleb128 0x1
 3245 0240 13       		.uleb128 0x13
 3246 0241 00       		.byte	0
 3247 0242 00       		.byte	0
 3248 0243 23       		.uleb128 0x23
 3249 0244 21       		.uleb128 0x21
 3250 0245 00       		.byte	0
 3251 0246 49       		.uleb128 0x49
 3252 0247 13       		.uleb128 0x13
 3253 0248 2F       		.uleb128 0x2f
 3254 0249 0B       		.uleb128 0xb
 3255 024a 00       		.byte	0
 3256 024b 00       		.byte	0
 3257 024c 24       		.uleb128 0x24
 3258 024d 34       		.uleb128 0x34
 3259 024e 00       		.byte	0
 3260 024f 03       		.uleb128 0x3
 3261 0250 08       		.uleb128 0x8
 3262 0251 3A       		.uleb128 0x3a
 3263 0252 0B       		.uleb128 0xb
 3264 0253 3B       		.uleb128 0x3b
 3265 0254 0B       		.uleb128 0xb
 3266 0255 49       		.uleb128 0x49
 3267 0256 13       		.uleb128 0x13
 3268 0257 3F       		.uleb128 0x3f
 3269 0258 19       		.uleb128 0x19
 3270 0259 3C       		.uleb128 0x3c
 3271 025a 19       		.uleb128 0x19
 3272 025b 00       		.byte	0
 3273 025c 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 68


 3274 025d 25       		.uleb128 0x25
 3275 025e 34       		.uleb128 0x34
 3276 025f 00       		.byte	0
 3277 0260 03       		.uleb128 0x3
 3278 0261 0E       		.uleb128 0xe
 3279 0262 3A       		.uleb128 0x3a
 3280 0263 0B       		.uleb128 0xb
 3281 0264 3B       		.uleb128 0x3b
 3282 0265 0B       		.uleb128 0xb
 3283 0266 49       		.uleb128 0x49
 3284 0267 13       		.uleb128 0x13
 3285 0268 3F       		.uleb128 0x3f
 3286 0269 19       		.uleb128 0x19
 3287 026a 3C       		.uleb128 0x3c
 3288 026b 19       		.uleb128 0x19
 3289 026c 00       		.byte	0
 3290 026d 00       		.byte	0
 3291 026e 26       		.uleb128 0x26
 3292 026f 34       		.uleb128 0x34
 3293 0270 00       		.byte	0
 3294 0271 03       		.uleb128 0x3
 3295 0272 0E       		.uleb128 0xe
 3296 0273 3A       		.uleb128 0x3a
 3297 0274 0B       		.uleb128 0xb
 3298 0275 3B       		.uleb128 0x3b
 3299 0276 05       		.uleb128 0x5
 3300 0277 49       		.uleb128 0x49
 3301 0278 13       		.uleb128 0x13
 3302 0279 3F       		.uleb128 0x3f
 3303 027a 19       		.uleb128 0x19
 3304 027b 02       		.uleb128 0x2
 3305 027c 18       		.uleb128 0x18
 3306 027d 00       		.byte	0
 3307 027e 00       		.byte	0
 3308 027f 00       		.byte	0
 3309              		.section	.debug_aranges,"",%progbits
 3310 0000 84000000 		.4byte	0x84
 3311 0004 0200     		.2byte	0x2
 3312 0006 00000000 		.4byte	.Ldebug_info0
 3313 000a 04       		.byte	0x4
 3314 000b 00       		.byte	0
 3315 000c 0000     		.2byte	0
 3316 000e 0000     		.2byte	0
 3317 0010 00000000 		.4byte	.LFB64
 3318 0014 F4000000 		.4byte	.LFE64-.LFB64
 3319 0018 00000000 		.4byte	.LFB65
 3320 001c 18000000 		.4byte	.LFE65-.LFB65
 3321 0020 00000000 		.4byte	.LFB66
 3322 0024 18000000 		.4byte	.LFE66-.LFB66
 3323 0028 00000000 		.4byte	.LFB67
 3324 002c 18000000 		.4byte	.LFE67-.LFB67
 3325 0030 00000000 		.4byte	.LFB68
 3326 0034 18000000 		.4byte	.LFE68-.LFB68
 3327 0038 00000000 		.4byte	.LFB69
 3328 003c 38000000 		.4byte	.LFE69-.LFB69
 3329 0040 00000000 		.4byte	.LFB70
 3330 0044 C0000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 69


 3331 0048 00000000 		.4byte	.LFB71
 3332 004c 54000000 		.4byte	.LFE71-.LFB71
 3333 0050 00000000 		.4byte	.LFB72
 3334 0054 34000000 		.4byte	.LFE72-.LFB72
 3335 0058 00000000 		.4byte	.LFB73
 3336 005c 90020000 		.4byte	.LFE73-.LFB73
 3337 0060 00000000 		.4byte	.LFB74
 3338 0064 9C000000 		.4byte	.LFE74-.LFB74
 3339 0068 00000000 		.4byte	.LFB75
 3340 006c 1C000000 		.4byte	.LFE75-.LFB75
 3341 0070 00000000 		.4byte	.LFB76
 3342 0074 A4000000 		.4byte	.LFE76-.LFB76
 3343 0078 00000000 		.4byte	.LFB77
 3344 007c B8000000 		.4byte	.LFE77-.LFB77
 3345 0080 00000000 		.4byte	0
 3346 0084 00000000 		.4byte	0
 3347              		.section	.debug_ranges,"",%progbits
 3348              	.Ldebug_ranges0:
 3349 0000 00000000 		.4byte	.LFB64
 3350 0004 F4000000 		.4byte	.LFE64
 3351 0008 00000000 		.4byte	.LFB65
 3352 000c 18000000 		.4byte	.LFE65
 3353 0010 00000000 		.4byte	.LFB66
 3354 0014 18000000 		.4byte	.LFE66
 3355 0018 00000000 		.4byte	.LFB67
 3356 001c 18000000 		.4byte	.LFE67
 3357 0020 00000000 		.4byte	.LFB68
 3358 0024 18000000 		.4byte	.LFE68
 3359 0028 00000000 		.4byte	.LFB69
 3360 002c 38000000 		.4byte	.LFE69
 3361 0030 00000000 		.4byte	.LFB70
 3362 0034 C0000000 		.4byte	.LFE70
 3363 0038 00000000 		.4byte	.LFB71
 3364 003c 54000000 		.4byte	.LFE71
 3365 0040 00000000 		.4byte	.LFB72
 3366 0044 34000000 		.4byte	.LFE72
 3367 0048 00000000 		.4byte	.LFB73
 3368 004c 90020000 		.4byte	.LFE73
 3369 0050 00000000 		.4byte	.LFB74
 3370 0054 9C000000 		.4byte	.LFE74
 3371 0058 00000000 		.4byte	.LFB75
 3372 005c 1C000000 		.4byte	.LFE75
 3373 0060 00000000 		.4byte	.LFB76
 3374 0064 A4000000 		.4byte	.LFE76
 3375 0068 00000000 		.4byte	.LFB77
 3376 006c B8000000 		.4byte	.LFE77
 3377 0070 00000000 		.4byte	0
 3378 0074 00000000 		.4byte	0
 3379              		.section	.debug_line,"",%progbits
 3380              	.Ldebug_line0:
 3381 0000 9E030000 		.section	.debug_str,"MS",%progbits,1
 3381      02007001 
 3381      00000201 
 3381      FB0E0D00 
 3381      01010101 
 3382              	.LASF47:
 3383 0000 64697265 		.ascii	"direction\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 70


 3383      6374696F 
 3383      6E00
 3384              	.LASF64:
 3385 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3385      61726441 
 3385      66746572 
 3385      5475726E 
 3385      00
 3386              	.LASF50:
 3387 001b 496E7374 		.ascii	"InstructionDirection\000"
 3387      72756374 
 3387      696F6E44 
 3387      69726563 
 3387      74696F6E 
 3388              	.LASF128:
 3389 0030 6D61696E 		.ascii	"main.c\000"
 3389      2E6300
 3390              	.LASF75:
 3391 0037 626C6F63 		.ascii	"blocksize\000"
 3391      6B73697A 
 3391      6500
 3392              	.LASF116:
 3393 0041 62756666 		.ascii	"buffer\000"
 3393      657200
 3394              	.LASF8:
 3395 0048 756E7369 		.ascii	"unsigned int\000"
 3395      676E6564 
 3395      20696E74 
 3395      00
 3396              	.LASF12:
 3397 0055 5F5F696E 		.ascii	"__int32_t\000"
 3397      7433325F 
 3397      7400
 3398              	.LASF18:
 3399 005f 696E7431 		.ascii	"int16\000"
 3399      3600
 3400              	.LASF107:
 3401 0065 73797374 		.ascii	"system_state\000"
 3401      656D5F73 
 3401      74617465 
 3401      00
 3402              	.LASF87:
 3403 0072 6E657874 		.ascii	"nextInstruction\000"
 3403      496E7374 
 3403      72756374 
 3403      696F6E00 
 3404              	.LASF127:
 3405 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3405      43313120 
 3405      352E342E 
 3405      31203230 
 3405      31363036 
 3406 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3406      20726576 
 3406      6973696F 
 3406      6E203233 
 3406      37373135 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 71


 3407 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3407      66756E63 
 3407      74696F6E 
 3407      2D736563 
 3407      74696F6E 
 3408              	.LASF69:
 3409 0110 53365F44 		.ascii	"S6_DETECTED\000"
 3409      45544543 
 3409      54454400 
 3410              	.LASF115:
 3411 011c 746F7461 		.ascii	"totalDistance\000"
 3411      6C446973 
 3411      74616E63 
 3411      6500
 3412              	.LASF34:
 3413 012a 67325F78 		.ascii	"g2_xpos\000"
 3413      706F7300 
 3414              	.LASF84:
 3415 0132 6E756D53 		.ascii	"numSteps\000"
 3415      74657073 
 3415      00
 3416              	.LASF77:
 3417 013b 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 3417      6F76656D 
 3417      656E7441 
 3417      63636F72 
 3417      64696E67 
 3418              	.LASF102:
 3419 015d 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3419      5F72665F 
 3419      7472616E 
 3419      736D6973 
 3419      73696F6E 
 3420              	.LASF79:
 3421 0179 52657365 		.ascii	"ResetSensorFlags\000"
 3421      7453656E 
 3421      736F7246 
 3421      6C616773 
 3421      00
 3422              	.LASF37:
 3423 018a 67325F64 		.ascii	"g2_direction\000"
 3423      69726563 
 3423      74696F6E 
 3423      00
 3424              	.LASF117:
 3425 0197 71756164 		.ascii	"quadDec2Count\000"
 3425      44656332 
 3425      436F756E 
 3425      7400
 3426              	.LASF19:
 3427 01a5 666C6F61 		.ascii	"float\000"
 3427      7400
 3428              	.LASF78:
 3429 01ab 63757272 		.ascii	"currentInstructionDirection\000"
 3429      656E7449 
 3429      6E737472 
 3429      75637469 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 72


 3429      6F6E4469 
 3430              	.LASF106:
 3431 01c7 75736242 		.ascii	"usbBuffer\000"
 3431      75666665 
 3431      7200
 3432              	.LASF83:
 3433 01d1 636F756E 		.ascii	"count\000"
 3433      7400
 3434              	.LASF22:
 3435 01d7 696E6465 		.ascii	"index\000"
 3435      7800
 3436              	.LASF7:
 3437 01dd 6C6F6E67 		.ascii	"long long unsigned int\000"
 3437      206C6F6E 
 3437      6720756E 
 3437      7369676E 
 3437      65642069 
 3438              	.LASF46:
 3439 01f4 496E7374 		.ascii	"Instruction\000"
 3439      72756374 
 3439      696F6E00 
 3440              	.LASF99:
 3441 0200 666C6167 		.ascii	"flag_packet\000"
 3441      5F706163 
 3441      6B657400 
 3442              	.LASF88:
 3443 020c 53657452 		.ascii	"SetRobotMovement\000"
 3443      6F626F74 
 3443      4D6F7665 
 3443      6D656E74 
 3443      00
 3444              	.LASF70:
 3445 021d 54494D45 		.ascii	"TIMER_FINISH\000"
 3445      525F4649 
 3445      4E495348 
 3445      00
 3446              	.LASF119:
 3447 022a 6B656570 		.ascii	"keepLedOn\000"
 3447      4C65644F 
 3447      6E00
 3448              	.LASF42:
 3449 0234 466F7277 		.ascii	"ForwardUntilTarget\000"
 3449      61726455 
 3449      6E74696C 
 3449      54617267 
 3449      657400
 3450              	.LASF95:
 3451 0247 666C6167 		.ascii	"flag_ts_update\000"
 3451      5F74735F 
 3451      75706461 
 3451      746500
 3452              	.LASF94:
 3453 0256 666C6167 		.ascii	"flag_ts_enc\000"
 3453      5F74735F 
 3453      656E6300 
 3454              	.LASF81:
 3455 0262 71756164 		.ascii	"quadCountToRPM\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 73


 3455      436F756E 
 3455      74546F52 
 3455      504D00
 3456              	.LASF126:
 3457 0271 69676E6F 		.ascii	"ignoreSensor\000"
 3457      72655365 
 3457      6E736F72 
 3457      00
 3458              	.LASF43:
 3459 027e 53746F70 		.ascii	"StopAtTarget\000"
 3459      41745461 
 3459      72676574 
 3459      00
 3460              	.LASF63:
 3461 028b 77616974 		.ascii	"waitForTurn\000"
 3461      466F7254 
 3461      75726E00 
 3462              	.LASF24:
 3463 0297 726F626F 		.ascii	"robot_ypos\000"
 3463      745F7970 
 3463      6F7300
 3464              	.LASF93:
 3465 02a2 74735F64 		.ascii	"ts_display\000"
 3465      6973706C 
 3465      617900
 3466              	.LASF111:
 3467 02ad 63757272 		.ascii	"currentOrientation\000"
 3467      656E744F 
 3467      7269656E 
 3467      74617469 
 3467      6F6E00
 3468              	.LASF11:
 3469 02c0 63686172 		.ascii	"char\000"
 3469      00
 3470              	.LASF28:
 3471 02c5 67305F73 		.ascii	"g0_speed\000"
 3471      70656564 
 3471      00
 3472              	.LASF85:
 3473 02ce 696E7374 		.ascii	"instructionList\000"
 3473      72756374 
 3473      696F6E4C 
 3473      69737400 
 3474              	.LASF86:
 3475 02de 696E7374 		.ascii	"instructionIndex\000"
 3475      72756374 
 3475      696F6E49 
 3475      6E646578 
 3475      00
 3476              	.LASF15:
 3477 02ef 75696E74 		.ascii	"uint16\000"
 3477      313600
 3478              	.LASF17:
 3479 02f6 696E7438 		.ascii	"int8\000"
 3479      00
 3480              	.LASF121:
 3481 02fb 78426C6F 		.ascii	"xBlocksize\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 74


 3481      636B7369 
 3481      7A6500
 3482              	.LASF33:
 3483 0306 67315F64 		.ascii	"g1_direction\000"
 3483      69726563 
 3483      74696F6E 
 3483      00
 3484              	.LASF53:
 3485 0313 4C656674 		.ascii	"Left\000"
 3485      00
 3486              	.LASF73:
 3487 0318 73706565 		.ascii	"speedTimer\000"
 3487      6454696D 
 3487      657200
 3488              	.LASF39:
 3489 0323 77616974 		.ascii	"waitForLeftTurn\000"
 3489      466F724C 
 3489      65667454 
 3489      75726E00 
 3490              	.LASF6:
 3491 0333 6C6F6E67 		.ascii	"long long int\000"
 3491      206C6F6E 
 3491      6720696E 
 3491      7400
 3492              	.LASF30:
 3493 0341 67315F78 		.ascii	"g1_xpos\000"
 3493      706F7300 
 3494              	.LASF112:
 3495 0349 70726576 		.ascii	"previousOrientation\000"
 3495      696F7573 
 3495      4F726965 
 3495      6E746174 
 3495      696F6E00 
 3496              	.LASF41:
 3497 035d 75547572 		.ascii	"uTurn\000"
 3497      6E00
 3498              	.LASF72:
 3499 0363 6E657744 		.ascii	"newDistance\000"
 3499      69737461 
 3499      6E636500 
 3500              	.LASF36:
 3501 036f 67325F73 		.ascii	"g2_speed\000"
 3501      70656564 
 3501      00
 3502              	.LASF27:
 3503 0378 67305F79 		.ascii	"g0_ypos\000"
 3503      706F7300 
 3504              	.LASF108:
 3505 0380 666F6F64 		.ascii	"food_list\000"
 3505      5F6C6973 
 3505      7400
 3506              	.LASF58:
 3507 038a 5475726E 		.ascii	"TurnLeft\000"
 3507      4C656674 
 3507      00
 3508              	.LASF92:
 3509 0393 74735F73 		.ascii	"ts_speed\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 75


 3509      70656564 
 3509      00
 3510              	.LASF62:
 3511 039c 556E6B6E 		.ascii	"Unknown\000"
 3511      6F776E00 
 3512              	.LASF76:
 3513 03a4 64697265 		.ascii	"directionState\000"
 3513      6374696F 
 3513      6E537461 
 3513      746500
 3514              	.LASF16:
 3515 03b3 75696E74 		.ascii	"uint32\000"
 3515      333200
 3516              	.LASF40:
 3517 03ba 77616974 		.ascii	"waitForRightTurn\000"
 3517      466F7252 
 3517      69676874 
 3517      5475726E 
 3517      00
 3518              	.LASF57:
 3519 03cb 5475726E 		.ascii	"TurnRight\000"
 3519      52696768 
 3519      7400
 3520              	.LASF45:
 3521 03d5 64617461 		.ascii	"data_main\000"
 3521      5F6D6169 
 3521      6E00
 3522              	.LASF21:
 3523 03df 72737369 		.ascii	"rssi\000"
 3523      00
 3524              	.LASF29:
 3525 03e4 67305F64 		.ascii	"g0_direction\000"
 3525      69726563 
 3525      74696F6E 
 3525      00
 3526              	.LASF110:
 3527 03f1 70726576 		.ascii	"previousDirection\000"
 3527      696F7573 
 3527      44697265 
 3527      6374696F 
 3527      6E00
 3528              	.LASF9:
 3529 0403 6C6F6E67 		.ascii	"long double\000"
 3529      20646F75 
 3529      626C6500 
 3530              	.LASF96:
 3531 040f 666C6167 		.ascii	"flag_ts_speed\000"
 3531      5F74735F 
 3531      73706565 
 3531      6400
 3532              	.LASF101:
 3533 041d 64617461 		.ascii	"dataready_flag\000"
 3533      72656164 
 3533      795F666C 
 3533      616700
 3534              	.LASF98:
 3535 042c 666C6167 		.ascii	"flag_rx\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 76


 3535      5F727800 
 3536              	.LASF122:
 3537 0434 79426C6F 		.ascii	"yBlocksize\000"
 3537      636B7369 
 3537      7A6500
 3538              	.LASF2:
 3539 043f 73686F72 		.ascii	"short int\000"
 3539      7420696E 
 3539      7400
 3540              	.LASF67:
 3541 0449 53345F44 		.ascii	"S4_DETECTED\000"
 3541      45544543 
 3541      54454400 
 3542              	.LASF66:
 3543 0455 53335F44 		.ascii	"S3_DETECTED\000"
 3543      45544543 
 3543      54454400 
 3544              	.LASF4:
 3545 0461 6C6F6E67 		.ascii	"long int\000"
 3545      20696E74 
 3545      00
 3546              	.LASF89:
 3547 046a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3547      52784275 
 3547      66666572 
 3547      00
 3548              	.LASF91:
 3549 0477 74735F75 		.ascii	"ts_update\000"
 3549      70646174 
 3549      6500
 3550              	.LASF56:
 3551 0481 466F7277 		.ascii	"Forward\000"
 3551      61726400 
 3552              	.LASF114:
 3553 0489 746F7461 		.ascii	"totalMilliseconds\000"
 3553      6C4D696C 
 3553      6C697365 
 3553      636F6E64 
 3553      7300
 3554              	.LASF35:
 3555 049b 67325F79 		.ascii	"g2_ypos\000"
 3555      706F7300 
 3556              	.LASF80:
 3557 04a3 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 3557      546F4E65 
 3557      7874496E 
 3557      73747275 
 3557      6374696F 
 3558              	.LASF51:
 3559 04b9 4F726965 		.ascii	"OrientationState\000"
 3559      6E746174 
 3559      696F6E53 
 3559      74617465 
 3559      00
 3560              	.LASF52:
 3561 04ca 446F776E 		.ascii	"Down\000"
 3561      00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 77


 3562              	.LASF54:
 3563 04cf 52696768 		.ascii	"Right\000"
 3563      7400
 3564              	.LASF31:
 3565 04d5 67315F79 		.ascii	"g1_ypos\000"
 3565      706F7300 
 3566              	.LASF109:
 3567 04dd 63757272 		.ascii	"currentDirection\000"
 3567      656E7444 
 3567      69726563 
 3567      74696F6E 
 3567      00
 3568              	.LASF129:
 3569 04ee 483A5C33 		.ascii	"H:\\301-Robot\\psoc student pack\\psoc_code_base\\C"
 3569      30312D52 
 3569      6F626F74 
 3569      5C70736F 
 3569      63207374 
 3570 051d 53333031 		.ascii	"S301_Class.cydsn\000"
 3570      5F436C61 
 3570      73732E63 
 3570      7964736E 
 3570      00
 3571              	.LASF10:
 3572 052e 73697A65 		.ascii	"sizetype\000"
 3572      74797065 
 3572      00
 3573              	.LASF5:
 3574 0537 6C6F6E67 		.ascii	"long unsigned int\000"
 3574      20756E73 
 3574      69676E65 
 3574      6420696E 
 3574      7400
 3575              	.LASF120:
 3576 0549 73746F70 		.ascii	"stopBuffer\000"
 3576      42756666 
 3576      657200
 3577              	.LASF13:
 3578 0554 696E7433 		.ascii	"int32_t\000"
 3578      325F7400 
 3579              	.LASF23:
 3580 055c 726F626F 		.ascii	"robot_xpos\000"
 3580      745F7870 
 3580      6F7300
 3581              	.LASF105:
 3582 0567 656E7472 		.ascii	"entry\000"
 3582      7900
 3583              	.LASF55:
 3584 056d 526F626F 		.ascii	"RobotMovement\000"
 3584      744D6F76 
 3584      656D656E 
 3584      7400
 3585              	.LASF1:
 3586 057b 756E7369 		.ascii	"unsigned char\000"
 3586      676E6564 
 3586      20636861 
 3586      7200
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 78


 3587              	.LASF125:
 3588 0589 73746F70 		.ascii	"stoppedAfterTurn\000"
 3588      70656441 
 3588      66746572 
 3588      5475726E 
 3588      00
 3589              	.LASF104:
 3590 059a 6C696E65 		.ascii	"line\000"
 3590      00
 3591              	.LASF60:
 3592 059f 41646A75 		.ascii	"AdjustToTheRight\000"
 3592      7374546F 
 3592      54686552 
 3592      69676874 
 3592      00
 3593              	.LASF61:
 3594 05b0 53746F70 		.ascii	"Stop\000"
 3594      00
 3595              	.LASF82:
 3596 05b5 47657449 		.ascii	"GetInstructionAtIndex\000"
 3596      6E737472 
 3596      75637469 
 3596      6F6E4174 
 3596      496E6465 
 3597              	.LASF90:
 3598 05cb 74735F65 		.ascii	"ts_enc\000"
 3598      6E6300
 3599              	.LASF97:
 3600 05d2 666C6167 		.ascii	"flag_ts_display\000"
 3600      5F74735F 
 3600      64697370 
 3600      6C617900 
 3601              	.LASF44:
 3602 05e2 536B6970 		.ascii	"Skip\000"
 3602      00
 3603              	.LASF103:
 3604 05e7 64697370 		.ascii	"displaystring\000"
 3604      6C617973 
 3604      7472696E 
 3604      6700
 3605              	.LASF38:
 3606 05f5 476F466F 		.ascii	"GoForward\000"
 3606      72776172 
 3606      6400
 3607              	.LASF68:
 3608 05ff 53355F44 		.ascii	"S5_DETECTED\000"
 3608      45544543 
 3608      54454400 
 3609              	.LASF0:
 3610 060b 7369676E 		.ascii	"signed char\000"
 3610      65642063 
 3610      68617200 
 3611              	.LASF123:
 3612 0617 63757272 		.ascii	"currentRow\000"
 3612      656E7452 
 3612      6F7700
 3613              	.LASF3:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 79


 3614 0622 73686F72 		.ascii	"short unsigned int\000"
 3614      7420756E 
 3614      7369676E 
 3614      65642069 
 3614      6E7400
 3615              	.LASF25:
 3616 0635 726F626F 		.ascii	"robot_orientation\000"
 3616      745F6F72 
 3616      69656E74 
 3616      6174696F 
 3616      6E00
 3617              	.LASF71:
 3618 0647 6D61696E 		.ascii	"main\000"
 3618      00
 3619              	.LASF113:
 3620 064c 63757272 		.ascii	"currentInstruction\000"
 3620      656E7449 
 3620      6E737472 
 3620      75637469 
 3620      6F6E00
 3621              	.LASF59:
 3622 065f 41646A75 		.ascii	"AdjustToTheLeft\000"
 3622      7374546F 
 3622      5468654C 
 3622      65667400 
 3623              	.LASF65:
 3624 066f 4261636B 		.ascii	"Backward\000"
 3624      77617264 
 3624      00
 3625              	.LASF14:
 3626 0678 75696E74 		.ascii	"uint8\000"
 3626      3800
 3627              	.LASF20:
 3628 067e 646F7562 		.ascii	"double\000"
 3628      6C6500
 3629              	.LASF74:
 3630 0685 43686563 		.ascii	"CheckSensorDirection\000"
 3630      6B53656E 
 3630      736F7244 
 3630      69726563 
 3630      74696F6E 
 3631              	.LASF124:
 3632 069a 63757272 		.ascii	"currentCol\000"
 3632      656E7443 
 3632      6F6C00
 3633              	.LASF26:
 3634 06a5 67305F78 		.ascii	"g0_xpos\000"
 3634      706F7300 
 3635              	.LASF118:
 3636 06ad 74696D65 		.ascii	"timerInt\000"
 3636      72496E74 
 3636      00
 3637              	.LASF100:
 3638 06b6 666C6167 		.ascii	"flag_KB_string\000"
 3638      5F4B425F 
 3638      73747269 
 3638      6E6700
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccYLuq48.s 			page 80


 3639              	.LASF32:
 3640 06c5 67315F73 		.ascii	"g1_speed\000"
 3640      70656564 
 3640      00
 3641              	.LASF48:
 3642 06ce 69676E6F 		.ascii	"ignoreL\000"
 3642      72654C00 
 3643              	.LASF49:
 3644 06d6 69676E6F 		.ascii	"ignoreR\000"
 3644      72655200 
 3645              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
