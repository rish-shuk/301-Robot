ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentRobotOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 01       		.byte	1
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	turnFinishedFlag
 176              		.type	turnFinishedFlag, %object
 177              		.size	turnFinishedFlag, 1
 178              	turnFinishedFlag:
 179 0034 00       		.space	1
 180              		.global	forwardUntilTargetStartedFlag
 181              		.type	forwardUntilTargetStartedFlag, %object
 182              		.size	forwardUntilTargetStartedFlag, 1
 183              	forwardUntilTargetStartedFlag:
 184 0035 00       		.space	1
 185              		.global	blockSizeTotal
 186 0036 0000     		.align	2
 187              		.type	blockSizeTotal, %object
 188              		.size	blockSizeTotal, 4
 189              	blockSizeTotal:
 190 0038 00000000 		.space	4
 191              		.global	__aeabi_i2d
 192              		.global	__aeabi_dmul
 193              		.global	__aeabi_ddiv
 194              		.global	__aeabi_d2f
 195              		.global	__aeabi_fadd
 196              		.section	.text.speedTimer,"ax",%progbits
 197              		.align	2
 198              		.global	speedTimer
 199              		.thumb
 200              		.thumb_func
 201              		.type	speedTimer, %function
 202              	speedTimer:
 203              	.LFB64:
 204              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 5


  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentRobotOrientation, previousOrientation = Down;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
  34:main.c        **** float CalculateDistanceToTravel(float blockSize);
  35:main.c        **** void MoveToNextInstruction();
  36:main.c        **** // ----------------------------------------
  37:main.c        **** uint8 s3, s4, s5, s6 = 0;
  38:main.c        **** //* ========================================
  39:main.c        **** // Calculating Distance
  40:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  41:main.c        **** 
  42:main.c        **** uint32 totalMilliseconds = 0;
  43:main.c        **** float totalDistance = 0; // in mm
  44:main.c        **** //* ========================================
  45:main.c        **** char buffer[69];
  46:main.c        **** int quadDec2Count = 0;
  47:main.c        **** int timerInt = 0;
  48:main.c        **** int keepLedOn = 0;
  49:main.c        **** // ========================================= FLAGS
  50:main.c        **** uint32 stopBuffer = 0;
  51:main.c        **** uint8 turnFinishedFlag = 0;
  52:main.c        **** uint8 forwardUntilTargetStartedFlag = 0;
  53:main.c        **** float blockSizeTotal = 0;
  54:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  55:main.c        **** 
  56:main.c        **** CY_ISR (speedTimer) {
 205              		.loc 1 56 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 8
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 90B5     		push	{r4, r7, lr}
 210              		.cfi_def_cfa_offset 12
 211              		.cfi_offset 4, -12
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  57:main.c        ****     timerInt = 1;
 218              		.loc 1 57 0
 219 0006 344B     		ldr	r3, .L4+16
 220 0008 0122     		movs	r2, #1
 221 000a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 6


  58:main.c        ****     //quadDec_M1 used for turning macros
  59:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 222              		.loc 1 59 0
 223 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 224 0010 0346     		mov	r3, r0
 225 0012 1A46     		mov	r2, r3
 226 0014 314B     		ldr	r3, .L4+20
 227 0016 1A60     		str	r2, [r3]
  60:main.c        ****     
  61:main.c        ****     if ((currentDirection == Forward || 
 228              		.loc 1 61 0
 229 0018 314B     		ldr	r3, .L4+24
 230 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 231 001c 002B     		cmp	r3, #0
 232 001e 13D0     		beq	.L2
  62:main.c        ****         currentDirection == ForwardAfterTurn ||
 233              		.loc 1 62 0 discriminator 1
 234 0020 2F4B     		ldr	r3, .L4+24
 235 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 236              		.loc 1 61 0 discriminator 1
 237 0024 082B     		cmp	r3, #8
 238 0026 0FD0     		beq	.L2
  63:main.c        ****         currentDirection == waitForTurn || 
 239              		.loc 1 63 0
 240 0028 2D4B     		ldr	r3, .L4+24
 241 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62:main.c        ****         currentDirection == ForwardAfterTurn ||
 242              		.loc 1 62 0
 243 002c 072B     		cmp	r3, #7
 244 002e 0BD0     		beq	.L2
  64:main.c        ****         currentDirection == AdjustToTheLeft ||
 245              		.loc 1 64 0
 246 0030 2B4B     		ldr	r3, .L4+24
 247 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  63:main.c        ****         currentDirection == waitForTurn || 
 248              		.loc 1 63 0
 249 0034 032B     		cmp	r3, #3
 250 0036 07D0     		beq	.L2
  65:main.c        ****         currentDirection == AdjustToTheRight ||
 251              		.loc 1 65 0
 252 0038 294B     		ldr	r3, .L4+24
 253 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  64:main.c        ****         currentDirection == AdjustToTheLeft ||
 254              		.loc 1 64 0
 255 003c 042B     		cmp	r3, #4
 256 003e 03D0     		beq	.L2
  66:main.c        ****         currentDirection == Backward) &&
 257              		.loc 1 66 0
 258 0040 274B     		ldr	r3, .L4+24
 259 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  65:main.c        ****         currentDirection == AdjustToTheRight ||
 260              		.loc 1 65 0
 261 0044 092B     		cmp	r3, #9
 262 0046 34D1     		bne	.L3
 263              	.L2:
  67:main.c        ****         quadDec2Count != 0) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 7


 264              		.loc 1 67 0
 265 0048 244B     		ldr	r3, .L4+20
 266 004a 1B68     		ldr	r3, [r3]
  66:main.c        ****         currentDirection == Backward) &&
 267              		.loc 1 66 0
 268 004c 002B     		cmp	r3, #0
 269 004e 30D0     		beq	.L3
 270              	.LBB2:
  68:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  69:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 271              		.loc 1 69 0
 272 0050 224B     		ldr	r3, .L4+20
 273 0052 1B68     		ldr	r3, [r3]
 274 0054 002B     		cmp	r3, #0
 275 0056 B8BF     		it	lt
 276 0058 5B42     		rsblt	r3, r3, #0
 277 005a 1846     		mov	r0, r3
 278 005c FFF7FEFF 		bl	__aeabi_i2d
 279 0060 19A3     		adr	r3, .L4
 280 0062 D3E90023 		ldrd	r2, [r3]
 281 0066 FFF7FEFF 		bl	__aeabi_dmul
 282 006a 0346     		mov	r3, r0
 283 006c 0C46     		mov	r4, r1
 284 006e 1846     		mov	r0, r3
 285 0070 2146     		mov	r1, r4
 286 0072 17A3     		adr	r3, .L4+8
 287 0074 D3E90023 		ldrd	r2, [r3]
 288 0078 FFF7FEFF 		bl	__aeabi_dmul
 289 007c 0346     		mov	r3, r0
 290 007e 0C46     		mov	r4, r1
 291 0080 1846     		mov	r0, r3
 292 0082 2146     		mov	r1, r4
 293 0084 4FF00002 		mov	r2, #0
 294 0088 164B     		ldr	r3, .L4+28
 295 008a FFF7FEFF 		bl	__aeabi_ddiv
 296 008e 0346     		mov	r3, r0
 297 0090 0C46     		mov	r4, r1
 298 0092 1846     		mov	r0, r3
 299 0094 2146     		mov	r1, r4
 300 0096 FFF7FEFF 		bl	__aeabi_d2f
 301 009a 0346     		mov	r3, r0
 302 009c 7B60     		str	r3, [r7, #4]	@ float
  70:main.c        ****         
  71:main.c        ****         totalDistance = totalDistance + newDistance;
 303              		.loc 1 71 0
 304 009e 124B     		ldr	r3, .L4+32
 305 00a0 1B68     		ldr	r3, [r3]	@ float
 306 00a2 7968     		ldr	r1, [r7, #4]	@ float
 307 00a4 1846     		mov	r0, r3
 308 00a6 FFF7FEFF 		bl	__aeabi_fadd
 309 00aa 0346     		mov	r3, r0
 310 00ac 1A46     		mov	r2, r3
 311 00ae 0E4B     		ldr	r3, .L4+32
 312 00b0 1A60     		str	r2, [r3]	@ float
 313              	.L3:
 314              	.LBE2:
  72:main.c        ****     }
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 8


  73:main.c        ****     
  74:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 315              		.loc 1 74 0
 316 00b2 0020     		movs	r0, #0
 317 00b4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
  75:main.c        ****     QuadDec_M2_Start(); // restart counter
 318              		.loc 1 75 0
 319 00b8 FFF7FEFF 		bl	QuadDec_M2_Start
  76:main.c        ****     
  77:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 320              		.loc 1 77 0
 321 00bc FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  78:main.c        **** }
 322              		.loc 1 78 0
 323 00c0 00BF     		nop
 324 00c2 0C37     		adds	r7, r7, #12
 325              		.cfi_def_cfa_offset 12
 326 00c4 BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 00c6 90BD     		pop	{r4, r7, pc}
 330              	.L5:
 331              		.align	3
 332              	.L4:
 333 00c8 182D4454 		.word	1413754136
 334 00cc FB210940 		.word	1074340347
 335 00d0 00000000 		.word	0
 336 00d4 00205040 		.word	1078992896
 337 00d8 00000000 		.word	timerInt
 338 00dc 00000000 		.word	quadDec2Count
 339 00e0 00000000 		.word	currentDirection
 340 00e4 00806C40 		.word	1080852480
 341 00e8 00000000 		.word	totalDistance
 342              		.cfi_endproc
 343              	.LFE64:
 344              		.size	speedTimer, .-speedTimer
 345              		.section	.text.S3_DETECTED,"ax",%progbits
 346              		.align	2
 347              		.global	S3_DETECTED
 348              		.thumb
 349              		.thumb_func
 350              		.type	S3_DETECTED, %function
 351              	S3_DETECTED:
 352              	.LFB65:
  79:main.c        **** 
  80:main.c        **** CY_ISR(S3_DETECTED) {
 353              		.loc 1 80 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0000 80B4     		push	{r7}
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 0002 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
  81:main.c        ****     // Sensor has detected WHITE
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 9


  82:main.c        ****     s3 = 1; // , Black = 0, White = 1
 363              		.loc 1 82 0
 364 0004 034B     		ldr	r3, .L7
 365 0006 0122     		movs	r2, #1
 366 0008 1A70     		strb	r2, [r3]
  83:main.c        ****     //LED_Write(1u);
  84:main.c        **** }
 367              		.loc 1 84 0
 368 000a 00BF     		nop
 369 000c BD46     		mov	sp, r7
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 000e 80BC     		pop	{r7}
 373              		.cfi_restore 7
 374              		.cfi_def_cfa_offset 0
 375 0010 7047     		bx	lr
 376              	.L8:
 377 0012 00BF     		.align	2
 378              	.L7:
 379 0014 00000000 		.word	s3
 380              		.cfi_endproc
 381              	.LFE65:
 382              		.size	S3_DETECTED, .-S3_DETECTED
 383              		.section	.text.S4_DETECTED,"ax",%progbits
 384              		.align	2
 385              		.global	S4_DETECTED
 386              		.thumb
 387              		.thumb_func
 388              		.type	S4_DETECTED, %function
 389              	S4_DETECTED:
 390              	.LFB66:
  85:main.c        **** 
  86:main.c        **** CY_ISR(S4_DETECTED) {
 391              		.loc 1 86 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
  87:main.c        ****     // Sensor has detected WHITE
  88:main.c        ****     s4 = 1; // , Black = 0, White = 1
 401              		.loc 1 88 0
 402 0004 034B     		ldr	r3, .L10
 403 0006 0122     		movs	r2, #1
 404 0008 1A70     		strb	r2, [r3]
  89:main.c        ****     //LED_Write(1u);
  90:main.c        **** }
 405              		.loc 1 90 0
 406 000a 00BF     		nop
 407 000c BD46     		mov	sp, r7
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 000e 80BC     		pop	{r7}
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 10


 411              		.cfi_restore 7
 412              		.cfi_def_cfa_offset 0
 413 0010 7047     		bx	lr
 414              	.L11:
 415 0012 00BF     		.align	2
 416              	.L10:
 417 0014 00000000 		.word	s4
 418              		.cfi_endproc
 419              	.LFE66:
 420              		.size	S4_DETECTED, .-S4_DETECTED
 421              		.section	.text.S5_DETECTED,"ax",%progbits
 422              		.align	2
 423              		.global	S5_DETECTED
 424              		.thumb
 425              		.thumb_func
 426              		.type	S5_DETECTED, %function
 427              	S5_DETECTED:
 428              	.LFB67:
  91:main.c        **** 
  92:main.c        **** CY_ISR(S5_DETECTED) {
 429              		.loc 1 92 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
  93:main.c        ****     // Sensor has detected WHITE
  94:main.c        ****     s5 = 1; // , Black = 0, White = 1
 439              		.loc 1 94 0
 440 0004 034B     		ldr	r3, .L13
 441 0006 0122     		movs	r2, #1
 442 0008 1A70     		strb	r2, [r3]
  95:main.c        ****     //LED_Write(1u);
  96:main.c        **** }
 443              		.loc 1 96 0
 444 000a 00BF     		nop
 445 000c BD46     		mov	sp, r7
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 000e 80BC     		pop	{r7}
 449              		.cfi_restore 7
 450              		.cfi_def_cfa_offset 0
 451 0010 7047     		bx	lr
 452              	.L14:
 453 0012 00BF     		.align	2
 454              	.L13:
 455 0014 00000000 		.word	s5
 456              		.cfi_endproc
 457              	.LFE67:
 458              		.size	S5_DETECTED, .-S5_DETECTED
 459              		.section	.text.S6_DETECTED,"ax",%progbits
 460              		.align	2
 461              		.global	S6_DETECTED
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 11


 462              		.thumb
 463              		.thumb_func
 464              		.type	S6_DETECTED, %function
 465              	S6_DETECTED:
 466              	.LFB68:
  97:main.c        **** 
  98:main.c        **** CY_ISR(S6_DETECTED) {
 467              		.loc 1 98 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 7, -4
 475 0002 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
  99:main.c        ****     // Sensor has detected WHITE
 100:main.c        ****     s6 = 1; // , Black = 0, White = 1
 477              		.loc 1 100 0
 478 0004 034B     		ldr	r3, .L16
 479 0006 0122     		movs	r2, #1
 480 0008 1A70     		strb	r2, [r3]
 101:main.c        ****     //LED_Write(1u);
 102:main.c        **** }
 481              		.loc 1 102 0
 482 000a 00BF     		nop
 483 000c BD46     		mov	sp, r7
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 000e 80BC     		pop	{r7}
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 0010 7047     		bx	lr
 490              	.L17:
 491 0012 00BF     		.align	2
 492              	.L16:
 493 0014 00000000 		.word	s6
 494              		.cfi_endproc
 495              	.LFE68:
 496              		.size	S6_DETECTED, .-S6_DETECTED
 497              		.section	.text.TIMER_FINISH,"ax",%progbits
 498              		.align	2
 499              		.global	TIMER_FINISH
 500              		.thumb
 501              		.thumb_func
 502              		.type	TIMER_FINISH, %function
 503              	TIMER_FINISH:
 504              	.LFB69:
 103:main.c        **** 
 104:main.c        **** CY_ISR(TIMER_FINISH) {
 505              		.loc 1 104 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 12


 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 105:main.c        ****     if (currentDirection == Stop) {
 515              		.loc 1 105 0
 516 0004 0A4B     		ldr	r3, .L21
 517 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 0008 052B     		cmp	r3, #5
 519 000a 05D1     		bne	.L19
 106:main.c        ****         stopBuffer = stopBuffer + 1;
 520              		.loc 1 106 0
 521 000c 094B     		ldr	r3, .L21+4
 522 000e 1B68     		ldr	r3, [r3]
 523 0010 0133     		adds	r3, r3, #1
 524 0012 084A     		ldr	r2, .L21+4
 525 0014 1360     		str	r3, [r2]
 526 0016 02E0     		b	.L20
 527              	.L19:
 107:main.c        ****     } else {
 108:main.c        ****         stopBuffer = 0;
 528              		.loc 1 108 0
 529 0018 064B     		ldr	r3, .L21+4
 530 001a 0022     		movs	r2, #0
 531 001c 1A60     		str	r2, [r3]
 532              	.L20:
 109:main.c        ****     }
 110:main.c        ****     SetRobotMovement(); 
 533              		.loc 1 110 0
 534 001e FFF7FEFF 		bl	SetRobotMovement
 111:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 535              		.loc 1 111 0
 536 0022 FFF7FEFF 		bl	ResetSensorFlags
 112:main.c        ****     Timer_LED_ReadStatusRegister();
 537              		.loc 1 112 0
 538 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 113:main.c        **** }
 539              		.loc 1 113 0
 540 002a 00BF     		nop
 541 002c 80BD     		pop	{r7, pc}
 542              	.L22:
 543 002e 00BF     		.align	2
 544              	.L21:
 545 0030 00000000 		.word	currentDirection
 546 0034 00000000 		.word	stopBuffer
 547              		.cfi_endproc
 548              	.LFE69:
 549              		.size	TIMER_FINISH, .-TIMER_FINISH
 550              		.section	.text.main,"ax",%progbits
 551              		.align	2
 552              		.global	main
 553              		.thumb
 554              		.thumb_func
 555              		.type	main, %function
 556              	main:
 557              	.LFB70:
 114:main.c        **** 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 13


 115:main.c        **** 
 116:main.c        **** int main()
 117:main.c        **** {
 558              		.loc 1 117 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 0000 80B5     		push	{r7, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 118:main.c        **** // ----- INITIALIZATIONS ----------
 119:main.c        ****     CYGlobalIntEnable;
 568              		.loc 1 119 0
 569              		.syntax unified
 570              	@ 119 "main.c" 1
 571 0004 62B6     		CPSIE   i
 572              	@ 0 "" 2
 120:main.c        ****     ResetSensorFlags();
 573              		.loc 1 120 0
 574              		.thumb
 575              		.syntax unified
 576 0006 FFF7FEFF 		bl	ResetSensorFlags
 121:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 577              		.loc 1 121 0
 578 000a FFF7FEFF 		bl	init
 122:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 579              		.loc 1 122 0
 580 000e 1F48     		ldr	r0, .L27
 581 0010 FFF7FEFF 		bl	isr_speed_StartEx
 123:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 582              		.loc 1 123 0
 583 0014 1E48     		ldr	r0, .L27+4
 584 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 124:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 585              		.loc 1 124 0
 586 001a 1E48     		ldr	r0, .L27+8
 587 001c FFF7FEFF 		bl	S3_detected_StartEx
 125:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 588              		.loc 1 125 0
 589 0020 1D48     		ldr	r0, .L27+12
 590 0022 FFF7FEFF 		bl	S4_detected_StartEx
 126:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 591              		.loc 1 126 0
 592 0026 1D48     		ldr	r0, .L27+16
 593 0028 FFF7FEFF 		bl	S5_detected_StartEx
 127:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 594              		.loc 1 127 0
 595 002c 1C48     		ldr	r0, .L27+20
 596 002e FFF7FEFF 		bl	S6_detected_StartEx
 128:main.c        ****     Timer_LED_Start();
 597              		.loc 1 128 0
 598 0032 FFF7FEFF 		bl	Timer_LED_Start
 129:main.c        ****     instructionList = findPath(map, food_list, 0);
 599              		.loc 1 129 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 14


 600 0036 0022     		movs	r2, #0
 601 0038 1A49     		ldr	r1, .L27+24
 602 003a 1B48     		ldr	r0, .L27+28
 603 003c FFF7FEFF 		bl	findPath
 604 0040 0246     		mov	r2, r0
 605 0042 1A4B     		ldr	r3, .L27+32
 606 0044 1A60     		str	r2, [r3]
 130:main.c        ****     numSteps = instructionsListLength();
 607              		.loc 1 130 0
 608 0046 FFF7FEFF 		bl	instructionsListLength
 609 004a 0346     		mov	r3, r0
 610 004c 1A46     		mov	r2, r3
 611 004e 184B     		ldr	r3, .L27+36
 612 0050 1A60     		str	r2, [r3]
 131:main.c        **** // ------USB SETUP ----------------    
 132:main.c        **** #ifdef USE_USB    
 133:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 613              		.loc 1 133 0
 614 0052 0121     		movs	r1, #1
 615 0054 0020     		movs	r0, #0
 616 0056 FFF7FEFF 		bl	USBUART_Start
 134:main.c        **** #endif        
 135:main.c        ****     RF_BT_SELECT_Write(0);
 617              		.loc 1 135 0
 618 005a 0020     		movs	r0, #0
 619 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 620              	.L26:
 136:main.c        ****     
 137:main.c        ****     //usbPutString("Initialised UART");
 138:main.c        ****     for(;;)
 139:main.c        ****     {
 140:main.c        ****         if(timerInt == 1) {
 621              		.loc 1 140 0
 622 0060 144B     		ldr	r3, .L27+40
 623 0062 1B68     		ldr	r3, [r3]
 624 0064 012B     		cmp	r3, #1
 625 0066 08D1     		bne	.L24
 141:main.c        ****             timerInt = 0;
 626              		.loc 1 141 0
 627 0068 124B     		ldr	r3, .L27+40
 628 006a 0022     		movs	r2, #0
 629 006c 1A60     		str	r2, [r3]
 142:main.c        ****             // calculate RPM of M2
 143:main.c        ****             quadCountToRPM(quadDec2Count);
 630              		.loc 1 143 0
 631 006e 124B     		ldr	r3, .L27+44
 632 0070 1B68     		ldr	r3, [r3]
 633 0072 9BB2     		uxth	r3, r3
 634 0074 1846     		mov	r0, r3
 635 0076 FFF7FEFF 		bl	quadCountToRPM
 636              	.L24:
 144:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 145:main.c        ****             //usbPutString(buffer);
 146:main.c        ****             //usbPutString(" ");
 147:main.c        ****         }
 148:main.c        ****         //handle_usb();
 149:main.c        ****         if (flag_KB_string == 1)
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 15


 637              		.loc 1 149 0
 638 007a 104B     		ldr	r3, .L27+48
 639 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 007e 012B     		cmp	r3, #1
 641 0080 EED1     		bne	.L26
 150:main.c        ****         {
 151:main.c        ****             //usbPutString("Total Distance: ");
 152:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 153:main.c        ****             //usbPutString(buffer);
 154:main.c        ****             flag_KB_string = 0;
 642              		.loc 1 154 0
 643 0082 0E4B     		ldr	r3, .L27+48
 644 0084 0022     		movs	r2, #0
 645 0086 1A70     		strb	r2, [r3]
 155:main.c        ****         }           
 156:main.c        ****     }
 646              		.loc 1 156 0
 647 0088 EAE7     		b	.L26
 648              	.L28:
 649 008a 00BF     		.align	2
 650              	.L27:
 651 008c 00000000 		.word	speedTimer
 652 0090 00000000 		.word	TIMER_FINISH
 653 0094 00000000 		.word	S3_DETECTED
 654 0098 00000000 		.word	S4_DETECTED
 655 009c 00000000 		.word	S5_DETECTED
 656 00a0 00000000 		.word	S6_DETECTED
 657 00a4 00000000 		.word	food_list
 658 00a8 00000000 		.word	map
 659 00ac 00000000 		.word	instructionList
 660 00b0 00000000 		.word	numSteps
 661 00b4 00000000 		.word	timerInt
 662 00b8 00000000 		.word	quadDec2Count
 663 00bc 00000000 		.word	flag_KB_string
 664              		.cfi_endproc
 665              	.LFE70:
 666              		.size	main, .-main
 667              		.global	__aeabi_fmul
 668              		.global	__aeabi_f2iz
 669              		.section	.text.quadCountToRPM,"ax",%progbits
 670              		.align	2
 671              		.global	quadCountToRPM
 672              		.thumb
 673              		.thumb_func
 674              		.type	quadCountToRPM, %function
 675              	quadCountToRPM:
 676              	.LFB71:
 157:main.c        ****     return 0;
 158:main.c        **** }
 159:main.c        **** 
 160:main.c        **** // Calculations
 161:main.c        **** //* ========================================
 162:main.c        **** int16 quadCountToRPM(uint16 count)
 163:main.c        **** {
 677              		.loc 1 163 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 16


 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 90B5     		push	{r4, r7, lr}
 682              		.cfi_def_cfa_offset 12
 683              		.cfi_offset 4, -12
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 85B0     		sub	sp, sp, #20
 687              		.cfi_def_cfa_offset 32
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 690 0006 0346     		mov	r3, r0
 691 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 164:main.c        ****     float cps = count/57.00;
 692              		.loc 1 164 0
 693 000a FB88     		ldrh	r3, [r7, #6]
 694 000c 1846     		mov	r0, r3
 695 000e FFF7FEFF 		bl	__aeabi_i2d
 696 0012 4FF00002 		mov	r2, #0
 697 0016 0D4B     		ldr	r3, .L31
 698 0018 FFF7FEFF 		bl	__aeabi_ddiv
 699 001c 0346     		mov	r3, r0
 700 001e 0C46     		mov	r4, r1
 701 0020 1846     		mov	r0, r3
 702 0022 2146     		mov	r1, r4
 703 0024 FFF7FEFF 		bl	__aeabi_d2f
 704 0028 0346     		mov	r3, r0
 705 002a FB60     		str	r3, [r7, #12]	@ float
 165:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 706              		.loc 1 165 0
 707 002c 0849     		ldr	r1, .L31+4
 708 002e F868     		ldr	r0, [r7, #12]	@ float
 709 0030 FFF7FEFF 		bl	__aeabi_fmul
 710 0034 0346     		mov	r3, r0
 711 0036 1846     		mov	r0, r3
 712 0038 FFF7FEFF 		bl	__aeabi_f2iz
 713 003c 0346     		mov	r3, r0
 714 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 166:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 167:main.c        ****     return rpm;
 715              		.loc 1 167 0
 716 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 168:main.c        ****     //usbPutString(buffer);
 169:main.c        ****     //usbPutString("rpm ");
 170:main.c        **** }
 717              		.loc 1 170 0
 718 0044 1846     		mov	r0, r3
 719 0046 1437     		adds	r7, r7, #20
 720              		.cfi_def_cfa_offset 12
 721 0048 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 004a 90BD     		pop	{r4, r7, pc}
 725              	.L32:
 726              		.align	2
 727              	.L31:
 728 004c 00804C40 		.word	1078755328
 729 0050 00007041 		.word	1097859072
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 17


 730              		.cfi_endproc
 731              	.LFE71:
 732              		.size	quadCountToRPM, .-quadCountToRPM
 733              		.section	.text.ResetSensorFlags,"ax",%progbits
 734              		.align	2
 735              		.global	ResetSensorFlags
 736              		.thumb
 737              		.thumb_func
 738              		.type	ResetSensorFlags, %function
 739              	ResetSensorFlags:
 740              	.LFB72:
 171:main.c        **** 
 172:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 173:main.c        **** void ResetSensorFlags() {
 741              		.loc 1 173 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 0000 80B4     		push	{r7}
 747              		.cfi_def_cfa_offset 4
 748              		.cfi_offset 7, -4
 749 0002 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 174:main.c        ****     s3 = 0;
 751              		.loc 1 174 0
 752 0004 074B     		ldr	r3, .L34
 753 0006 0022     		movs	r2, #0
 754 0008 1A70     		strb	r2, [r3]
 175:main.c        ****     s4 = 0;
 755              		.loc 1 175 0
 756 000a 074B     		ldr	r3, .L34+4
 757 000c 0022     		movs	r2, #0
 758 000e 1A70     		strb	r2, [r3]
 176:main.c        ****     s5 = 0;
 759              		.loc 1 176 0
 760 0010 064B     		ldr	r3, .L34+8
 761 0012 0022     		movs	r2, #0
 762 0014 1A70     		strb	r2, [r3]
 177:main.c        ****     s6 = 0;
 763              		.loc 1 177 0
 764 0016 064B     		ldr	r3, .L34+12
 765 0018 0022     		movs	r2, #0
 766 001a 1A70     		strb	r2, [r3]
 178:main.c        **** }
 767              		.loc 1 178 0
 768 001c 00BF     		nop
 769 001e BD46     		mov	sp, r7
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 0020 80BC     		pop	{r7}
 773              		.cfi_restore 7
 774              		.cfi_def_cfa_offset 0
 775 0022 7047     		bx	lr
 776              	.L35:
 777              		.align	2
 778              	.L34:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 18


 779 0024 00000000 		.word	s3
 780 0028 00000000 		.word	s4
 781 002c 00000000 		.word	s5
 782 0030 00000000 		.word	s6
 783              		.cfi_endproc
 784              	.LFE72:
 785              		.size	ResetSensorFlags, .-ResetSensorFlags
 786              		.global	xBlocksize
 787              		.data
 788 0045 000000   		.align	2
 789              		.type	xBlocksize, %object
 790              		.size	xBlocksize, 4
 791              	xBlocksize:
 792 0048 0000F442 		.word	1123287040
 793              		.global	yBlocksize
 794              		.align	2
 795              		.type	yBlocksize, %object
 796              		.size	yBlocksize, 4
 797              	yBlocksize:
 798 004c 0000A042 		.word	1117782016
 799              		.global	currentRow
 800              		.type	currentRow, %object
 801              		.size	currentRow, 1
 802              	currentRow:
 803 0050 01       		.byte	1
 804              		.global	currentCol
 805              		.type	currentCol, %object
 806              		.size	currentCol, 1
 807              	currentCol:
 808 0051 01       		.byte	1
 809              		.section	.text.ForwardCourseCorrection,"ax",%progbits
 810              		.align	2
 811              		.global	ForwardCourseCorrection
 812              		.thumb
 813              		.thumb_func
 814              		.type	ForwardCourseCorrection, %function
 815              	ForwardCourseCorrection:
 816              	.LFB73:
 179:main.c        **** 
 180:main.c        **** float xBlocksize = 122; // 122 mm
 181:main.c        **** float yBlocksize = 80; // 80 mm
 182:main.c        **** uint8 currentRow = 1;
 183:main.c        **** uint8 currentCol = 1;
 184:main.c        **** 
 185:main.c        **** /*enum DirectionState GetNextStep() {
 186:main.c        ****     enum DirectionState directionState;
 187:main.c        ****     // Determines robot movement and orientation to follow optimal path
 188:main.c        ****     // enum DirectionState directionState = Stop;
 189:main.c        ****     previousOrientation = currentOrientation;
 190:main.c        ****     
 191:main.c        ****     if(map[currentRow][currentCol] == 9) {
 192:main.c        ****         directionState = Stop; // reached target
 193:main.c        ****         return directionState;
 194:main.c        ****     }
 195:main.c        ****         
 196:main.c        ****     switch (previousOrientation) {
 197:main.c        ****             case Up:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 19


 198:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 199:main.c        ****                     currentOrientation = Up; 
 200:main.c        ****                     directionState = Forward;
 201:main.c        ****                     currentRow--;// update position
 202:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 203:main.c        ****                     currentOrientation = Left;
 204:main.c        ****                     directionState = waitForLeftTurn;
 205:main.c        ****                     //currentRow--;
 206:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 207:main.c        ****                     currentOrientation = Right;
 208:main.c        ****                     directionState = waitForRightTurn;
 209:main.c        ****                     //currentRow++; // update position
 210:main.c        ****                 }
 211:main.c        ****                 break;
 212:main.c        ****             case Down:
 213:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 214:main.c        ****                     currentOrientation = Down;
 215:main.c        ****                     directionState = Forward;
 216:main.c        ****                     currentRow++;
 217:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 218:main.c        ****                     currentOrientation = Left;
 219:main.c        ****                     directionState = waitForRightTurn;
 220:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 221:main.c        ****                     currentOrientation = Right;
 222:main.c        ****                     directionState = waitForLeftTurn;
 223:main.c        ****                 }
 224:main.c        ****                 break;
 225:main.c        ****             case Left:
 226:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 227:main.c        ****                     currentOrientation = Left;
 228:main.c        ****                     directionState = Forward;
 229:main.c        ****                     currentCol--; // update position
 230:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 231:main.c        ****                     currentOrientation = Up;
 232:main.c        ****                     directionState = waitForRightTurn;
 233:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 234:main.c        ****                     currentOrientation = Down;
 235:main.c        ****                     directionState = waitForLeftTurn;
 236:main.c        ****                 }
 237:main.c        ****                 break;
 238:main.c        ****             case Right:
 239:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 240:main.c        ****                     currentOrientation = Right;
 241:main.c        ****                     directionState = Forward;
 242:main.c        ****                     currentCol++; // update position
 243:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 244:main.c        ****                     currentOrientation = Up;
 245:main.c        ****                     directionState = waitForLeftTurn;
 246:main.c        ****                     //currentCol++; // update position
 247:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 248:main.c        ****                     currentOrientation = Down;
 249:main.c        ****                     directionState = waitForRightTurn;
 250:main.c        ****                     //currentCol--; // update position
 251:main.c        ****                 }
 252:main.c        ****                 break;
 253:main.c        ****             default:
 254:main.c        ****                 break;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 20


 255:main.c        ****         }
 256:main.c        ****     
 257:main.c        ****     return directionState;
 258:main.c        **** }
 259:main.c        **** */
 260:main.c        **** //uint8 stoppedAfterTurn = 0;
 261:main.c        **** //uint8 ignoreSensor = 0;
 262:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 263:main.c        **** /*
 264:main.c        **** enum RobotMovement CheckSensorDirection() {
 265:main.c        ****     float blocksize;
 266:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 267:main.c        ****         blocksize = yBlocksize;
 268:main.c        ****     } else {
 269:main.c        ****         blocksize = xBlocksize;
 270:main.c        ****     }
 271:main.c        ****     //if(currentInstruction)
 272:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 273:main.c        ****     
 274:main.c        ****     if (stoppedAfterTurn == 1) {
 275:main.c        ****         if (stopBuffer <= 50) {
 276:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 277:main.c        ****             previousDirection = directionState;
 278:main.c        ****             return directionState;
 279:main.c        ****         }
 280:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 281:main.c        ****         totalDistance = 0; // reset distance
 282:main.c        ****         previousDirection = directionState;
 283:main.c        ****         stoppedAfterTurn = 0;
 284:main.c        ****         return directionState;
 285:main.c        ****     }
 286:main.c        ****     if (totalDistance >= blocksize) {
 287:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 288:main.c        ****         totalDistance = 0; // reset distance
 289:main.c        ****         previousDirection = directionState;
 290:main.c        ****         return directionState;
 291:main.c        ****     }
 292:main.c        ****     
 293:main.c        ****     // STOP BUFFER * ========================================
 294:main.c        ****     if (previousDirection == Stop) {
 295:main.c        ****         if (stopBuffer <= 50) {
 296:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 297:main.c        ****             previousDirection = directionState;
 298:main.c        ****         } else {
 299:main.c        ****             //directionState = ForwardAfterTurn;
 300:main.c        ****         }
 301:main.c        ****         return directionState;
 302:main.c        ****     }
 303:main.c        **** 
 304:main.c        ****     // TURNING * ========================================    
 305:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 306:main.c        ****         if (s3 || s4) {
 307:main.c        ****             //ignoreSensor = 0;
 308:main.c        ****             //usbPutString("Forward\n");
 309:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 310:main.c        ****             previousDirection = directionState;
 311:main.c        ****             return directionState;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 21


 312:main.c        ****         }
 313:main.c        ****     }
 314:main.c        **** 
 315:main.c        ****     if(previousDirection == waitForRightTurn) {
 316:main.c        ****         //ignoreSensor = 0;
 317:main.c        ****         if(!s4) {
 318:main.c        ****             //usbPutString("Turn Right\n");
 319:main.c        ****             directionState = TurnRight;
 320:main.c        ****             previousDirection = directionState;
 321:main.c        ****             return directionState;
 322:main.c        ****         } else {
 323:main.c        ****             //usbPutString("Wait for Right Turn\n");
 324:main.c        ****             directionState = waitForRightTurn;
 325:main.c        ****             previousDirection = directionState;
 326:main.c        ****             return directionState;
 327:main.c        ****         }
 328:main.c        ****     }
 329:main.c        **** 
 330:main.c        ****     if(previousDirection == waitForLeftTurn) {
 331:main.c        ****         //ignoreSensor = 0;
 332:main.c        ****         if(!s3) {
 333:main.c        ****             //usbPutString("Turn Left\n");
 334:main.c        ****             directionState = TurnLeft;
 335:main.c        ****             previousDirection = directionState;
 336:main.c        ****             return directionState;
 337:main.c        ****         } else {
 338:main.c        ****             //usbPutString("Wait for Left Turn\n");
 339:main.c        ****             directionState = waitForLeftTurn;
 340:main.c        ****             previousDirection = directionState;
 341:main.c        ****             return directionState;
 342:main.c        ****         }
 343:main.c        ****     }
 344:main.c        **** 
 345:main.c        ****     if(previousDirection == TurnRight) {
 346:main.c        ****         if(s5 && s6) {
 347:main.c        ****             //usbPutString("Turn Right\n");
 348:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 349:main.c        ****             previousDirection = directionState;
 350:main.c        ****             return directionState;
 351:main.c        ****         } 
 352:main.c        ****         else if (!s5 || !s6) {
 353:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 354:main.c        ****             //usbPutString("Stop after Right Turn");
 355:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 356:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 357:main.c        ****             previousDirection = directionState;
 358:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 359:main.c        ****             return directionState;
 360:main.c        ****         }
 361:main.c        ****     }    
 362:main.c        **** 
 363:main.c        ****     if(previousDirection == TurnLeft) {
 364:main.c        ****         if(s5 && s6) {
 365:main.c        ****             //usbPutString("Turn Left\n");
 366:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 367:main.c        ****             previousDirection = directionState;
 368:main.c        ****             return directionState;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 22


 369:main.c        ****         } 
 370:main.c        ****         else if (!s5 || !s6) {
 371:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 372:main.c        ****            // usbPutString("Stop after Left Turn\n");
 373:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 374:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 375:main.c        ****             previousDirection = directionState;
 376:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 377:main.c        ****             return directionState;
 378:main.c        ****         }
 379:main.c        ****     }
 380:main.c        ****     
 381:main.c        ****     // COURSE CORRECTION * ========================================
 382:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 383:main.c        ****         //ignoreSensor = 0;
 384:main.c        ****         if(s6) {
 385:main.c        ****             //usbPutString("Adjust to the left\n");
 386:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 387:main.c        ****             previousDirection = directionState;
 388:main.c        ****             return directionState;
 389:main.c        ****         }
 390:main.c        ****         if(s5) {
 391:main.c        ****             //usbPutString("Adjust to the right\n");
 392:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 393:main.c        ****             previousDirection = directionState;
 394:main.c        ****             return directionState;
 395:main.c        ****         }
 396:main.c        ****     }
 397:main.c        ****     
 398:main.c        ****     // FORWARD * ========================================
 399:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 400:main.c        ****         //usbPutString("Forward\n");
 401:main.c        ****         directionState = Forward;
 402:main.c        ****         previousDirection = directionState;
 403:main.c        ****         return directionState;   
 404:main.c        ****     }
 405:main.c        **** 
 406:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 407:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 408:main.c        ****     if (previousDirection == Unknown) {
 409:main.c        ****         directionState = Forward;
 410:main.c        ****         previousDirection = directionState;
 411:main.c        ****         return directionState;
 412:main.c        ****     }
 413:main.c        **** 
 414:main.c        ****     // Possible reason
 415:main.c        ****     previousDirection = currentDirection;
 416:main.c        ****     return previousDirection;
 417:main.c        **** }
 418:main.c        **** */
 419:main.c        **** 
 420:main.c        **** enum RobotMovement ForwardCourseCorrection();
 421:main.c        **** enum RobotMovement ForwardCourseCorrection() {
 817              		.loc 1 421 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 0
 820              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 23


 821              		@ link register save eliminated.
 822 0000 80B4     		push	{r7}
 823              		.cfi_def_cfa_offset 4
 824              		.cfi_offset 7, -4
 825 0002 00AF     		add	r7, sp, #0
 826              		.cfi_def_cfa_register 7
 422:main.c        ****     // if S5 and S6 are on black, move forward
 423:main.c        ****     if (!s5 && !s6) {
 827              		.loc 1 423 0
 828 0004 1C4B     		ldr	r3, .L44
 829 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830 0008 002B     		cmp	r3, #0
 831 000a 0FD1     		bne	.L37
 832              		.loc 1 423 0 is_stmt 0 discriminator 1
 833 000c 1B4B     		ldr	r3, .L44+4
 834 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 835 0010 002B     		cmp	r3, #0
 836 0012 0BD1     		bne	.L37
 424:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 837              		.loc 1 424 0 is_stmt 1
 838 0014 1A4B     		ldr	r3, .L44+8
 839 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 840 0018 032B     		cmp	r3, #3
 841 001a 01D0     		beq	.L38
 425:main.c        ****             return AdjustToTheLeft;
 842              		.loc 1 425 0
 843 001c 0323     		movs	r3, #3
 844 001e 26E0     		b	.L39
 845              	.L38:
 426:main.c        ****         }
 427:main.c        ****         if (previousDirection != AdjustToTheRight) {
 846              		.loc 1 427 0
 847 0020 174B     		ldr	r3, .L44+8
 848 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 849 0024 042B     		cmp	r3, #4
 850 0026 01D0     		beq	.L37
 428:main.c        ****             return AdjustToTheRight;    
 851              		.loc 1 428 0
 852 0028 0423     		movs	r3, #4
 853 002a 20E0     		b	.L39
 854              	.L37:
 429:main.c        ****         }
 430:main.c        ****     }
 431:main.c        ****     
 432:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 433:main.c        ****     if (s5 && s6) {
 855              		.loc 1 433 0
 856 002c 124B     		ldr	r3, .L44
 857 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 858 0030 002B     		cmp	r3, #0
 859 0032 0FD0     		beq	.L40
 860              		.loc 1 433 0 is_stmt 0 discriminator 1
 861 0034 114B     		ldr	r3, .L44+4
 862 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 863 0038 002B     		cmp	r3, #0
 864 003a 0BD0     		beq	.L40
 434:main.c        ****         if (previousDirection != AdjustToTheLeft) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 24


 865              		.loc 1 434 0 is_stmt 1
 866 003c 104B     		ldr	r3, .L44+8
 867 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 868 0040 032B     		cmp	r3, #3
 869 0042 01D0     		beq	.L41
 435:main.c        ****             return AdjustToTheLeft;
 870              		.loc 1 435 0
 871 0044 0323     		movs	r3, #3
 872 0046 12E0     		b	.L39
 873              	.L41:
 436:main.c        ****         }
 437:main.c        ****         if (previousDirection != AdjustToTheRight) {
 874              		.loc 1 437 0
 875 0048 0D4B     		ldr	r3, .L44+8
 876 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 877 004c 042B     		cmp	r3, #4
 878 004e 01D0     		beq	.L40
 438:main.c        ****             return AdjustToTheRight;    
 879              		.loc 1 438 0
 880 0050 0423     		movs	r3, #4
 881 0052 0CE0     		b	.L39
 882              	.L40:
 439:main.c        ****         }
 440:main.c        ****     }
 441:main.c        **** 
 442:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 443:main.c        ****     if (s5) {
 883              		.loc 1 443 0
 884 0054 084B     		ldr	r3, .L44
 885 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 886 0058 002B     		cmp	r3, #0
 887 005a 01D0     		beq	.L42
 444:main.c        ****         return AdjustToTheRight;    
 888              		.loc 1 444 0
 889 005c 0423     		movs	r3, #4
 890 005e 06E0     		b	.L39
 891              	.L42:
 445:main.c        ****     }
 446:main.c        ****     if (s6) {
 892              		.loc 1 446 0
 893 0060 064B     		ldr	r3, .L44+4
 894 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 895 0064 002B     		cmp	r3, #0
 896 0066 01D0     		beq	.L43
 447:main.c        ****         return AdjustToTheLeft;    
 897              		.loc 1 447 0
 898 0068 0323     		movs	r3, #3
 899 006a 00E0     		b	.L39
 900              	.L43:
 448:main.c        ****     }
 449:main.c        ****    
 450:main.c        ****     // We should never actually get to this point
 451:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 452:main.c        ****     return Stop;
 901              		.loc 1 452 0
 902 006c 0523     		movs	r3, #5
 903              	.L39:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 25


 453:main.c        **** }
 904              		.loc 1 453 0
 905 006e 1846     		mov	r0, r3
 906 0070 BD46     		mov	sp, r7
 907              		.cfi_def_cfa_register 13
 908              		@ sp needed
 909 0072 80BC     		pop	{r7}
 910              		.cfi_restore 7
 911              		.cfi_def_cfa_offset 0
 912 0074 7047     		bx	lr
 913              	.L45:
 914 0076 00BF     		.align	2
 915              	.L44:
 916 0078 00000000 		.word	s5
 917 007c 00000000 		.word	s6
 918 0080 00000000 		.word	previousDirection
 919              		.cfi_endproc
 920              	.LFE73:
 921              		.size	ForwardCourseCorrection, .-ForwardCourseCorrection
 922              		.global	__aeabi_fcmpge
 923              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 924              		.align	2
 925              		.global	GetMovementAccordingToInstruction
 926              		.thumb
 927              		.thumb_func
 928              		.type	GetMovementAccordingToInstruction, %function
 929              	GetMovementAccordingToInstruction:
 930              	.LFB74:
 454:main.c        **** 
 455:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 931              		.loc 1 455 0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 8
 934              		@ frame_needed = 1, uses_anonymous_args = 0
 935 0000 80B5     		push	{r7, lr}
 936              		.cfi_def_cfa_offset 8
 937              		.cfi_offset 7, -8
 938              		.cfi_offset 14, -4
 939 0002 82B0     		sub	sp, sp, #8
 940              		.cfi_def_cfa_offset 16
 941 0004 00AF     		add	r7, sp, #0
 942              		.cfi_def_cfa_register 7
 456:main.c        ****     float blocksize;
 457:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 943              		.loc 1 457 0
 944 0006 854B     		ldr	r3, .L82
 945 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 946 000a 002B     		cmp	r3, #0
 947 000c 03D0     		beq	.L47
 948              		.loc 1 457 0 is_stmt 0 discriminator 1
 949 000e 834B     		ldr	r3, .L82
 950 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 951 0012 012B     		cmp	r3, #1
 952 0014 03D1     		bne	.L48
 953              	.L47:
 458:main.c        ****         blocksize = yBlocksize;
 954              		.loc 1 458 0 is_stmt 1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 26


 955 0016 824B     		ldr	r3, .L82+4
 956 0018 1B68     		ldr	r3, [r3]	@ float
 957 001a 7B60     		str	r3, [r7, #4]	@ float
 958 001c 02E0     		b	.L49
 959              	.L48:
 459:main.c        ****     } else {
 460:main.c        ****         blocksize = xBlocksize;
 960              		.loc 1 460 0
 961 001e 814B     		ldr	r3, .L82+8
 962 0020 1B68     		ldr	r3, [r3]	@ float
 963 0022 7B60     		str	r3, [r7, #4]	@ float
 964              	.L49:
 461:main.c        ****     }
 462:main.c        ****     
 463:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 464:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 465:main.c        ****         // OR an EVENT happens in the current instruction
 466:main.c        ****         // e.g. CurrentInstruction: GoForward 
 467:main.c        ****         //      S3 on BLACK
 468:main.c        ****         //      Check Ignore Count
 469:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 470:main.c        ****     
 471:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 965              		.loc 1 471 0
 966 0024 804B     		ldr	r3, .L82+12
 967 0026 1B78     		ldrb	r3, [r3]
 968 0028 FB70     		strb	r3, [r7, #3]
 472:main.c        ****     
 473:main.c        ****     switch (currentInstructionDirection) {
 969              		.loc 1 473 0
 970 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 971 002c 052B     		cmp	r3, #5
 972 002e 00F2F080 		bhi	.L50
 973 0032 01A2     		adr	r2, .L52
 974 0034 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 975              		.p2align 2
 976              	.L52:
 977 0038 51000000 		.word	.L51+1
 978 003c 9D000000 		.word	.L53+1
 979 0040 1F010000 		.word	.L54+1
 980 0044 13020000 		.word	.L50+1
 981 0048 A1010000 		.word	.L55+1
 982 004c ED010000 		.word	.L56+1
 983              		.p2align 1
 984              	.L51:
 474:main.c        ****         case GoForward:
 475:main.c        ****             // if s3 or s4 go off, check ignoreCount
 476:main.c        ****             //      if ignoreCount == 0, go to next direction
 477:main.c        ****             //      return stop
 478:main.c        ****             if (!s3) {
 985              		.loc 1 478 0
 986 0050 764B     		ldr	r3, .L82+16
 987 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988 0054 002B     		cmp	r3, #0
 989 0056 0CD1     		bne	.L57
 479:main.c        ****                 if (currentInstruction.ignoreL == 0) {
 990              		.loc 1 479 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 27


 991 0058 734B     		ldr	r3, .L82+12
 992 005a 5B68     		ldr	r3, [r3, #4]
 993 005c 002B     		cmp	r3, #0
 994 005e 03D1     		bne	.L58
 480:main.c        ****                     MoveToNextInstruction();
 995              		.loc 1 480 0
 996 0060 FFF7FEFF 		bl	MoveToNextInstruction
 481:main.c        ****                     return Stop;
 997              		.loc 1 481 0
 998 0064 0523     		movs	r3, #5
 999 0066 D5E0     		b	.L59
 1000              	.L58:
 482:main.c        ****                 } else {
 483:main.c        ****                     currentInstruction.ignoreL--; // decrement ignoreL
 1001              		.loc 1 483 0
 1002 0068 6F4B     		ldr	r3, .L82+12
 1003 006a 5B68     		ldr	r3, [r3, #4]
 1004 006c 013B     		subs	r3, r3, #1
 1005 006e 6E4A     		ldr	r2, .L82+12
 1006 0070 5360     		str	r3, [r2, #4]
 1007              	.L57:
 484:main.c        ****                 }
 485:main.c        ****             }
 486:main.c        ****             
 487:main.c        ****             if (!s4) {
 1008              		.loc 1 487 0
 1009 0072 6F4B     		ldr	r3, .L82+20
 1010 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1011 0076 002B     		cmp	r3, #0
 1012 0078 0CD1     		bne	.L60
 488:main.c        ****                 if (currentInstruction.ignoreR == 0) {
 1013              		.loc 1 488 0
 1014 007a 6B4B     		ldr	r3, .L82+12
 1015 007c 9B68     		ldr	r3, [r3, #8]
 1016 007e 002B     		cmp	r3, #0
 1017 0080 03D1     		bne	.L61
 489:main.c        ****                     MoveToNextInstruction();
 1018              		.loc 1 489 0
 1019 0082 FFF7FEFF 		bl	MoveToNextInstruction
 490:main.c        ****                     return Stop;
 1020              		.loc 1 490 0
 1021 0086 0523     		movs	r3, #5
 1022 0088 C4E0     		b	.L59
 1023              	.L61:
 491:main.c        ****                 } else {
 492:main.c        ****                     currentInstruction.ignoreR--; // decrement ignoreR
 1024              		.loc 1 492 0
 1025 008a 674B     		ldr	r3, .L82+12
 1026 008c 9B68     		ldr	r3, [r3, #8]
 1027 008e 013B     		subs	r3, r3, #1
 1028 0090 654A     		ldr	r2, .L82+12
 1029 0092 9360     		str	r3, [r2, #8]
 1030              	.L60:
 493:main.c        ****                 }
 494:main.c        ****             }
 495:main.c        ****             return ForwardCourseCorrection();
 1031              		.loc 1 495 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 28


 1032 0094 FFF7FEFF 		bl	ForwardCourseCorrection
 1033 0098 0346     		mov	r3, r0
 1034 009a BBE0     		b	.L59
 1035              	.L53:
 496:main.c        ****             break;
 497:main.c        ****         case waitForLeftTurn:
 498:main.c        ****             // continue moving forward until s3 goes on black
 499:main.c        ****             // if we are turning left already
 500:main.c        ****                 // wait until s5 || s6 are on black
 501:main.c        ****                 // return stop
 502:main.c        ****             if (turnFinishedFlag) {
 1036              		.loc 1 502 0
 1037 009c 654B     		ldr	r3, .L82+24
 1038 009e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1039 00a0 002B     		cmp	r3, #0
 1040 00a2 11D0     		beq	.L62
 503:main.c        ****                 if (turnFinishedFlag) {
 1041              		.loc 1 503 0
 1042 00a4 634B     		ldr	r3, .L82+24
 1043 00a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1044 00a8 002B     		cmp	r3, #0
 1045 00aa 0DD0     		beq	.L62
 504:main.c        ****                     if (s3) {
 1046              		.loc 1 504 0
 1047 00ac 5F4B     		ldr	r3, .L82+16
 1048 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1049 00b0 002B     		cmp	r3, #0
 1050 00b2 05D0     		beq	.L63
 505:main.c        ****                         turnFinishedFlag = 0;
 1051              		.loc 1 505 0
 1052 00b4 5F4B     		ldr	r3, .L82+24
 1053 00b6 0022     		movs	r2, #0
 1054 00b8 1A70     		strb	r2, [r3]
 506:main.c        ****                         MoveToNextInstruction();    
 1055              		.loc 1 506 0
 1056 00ba FFF7FEFF 		bl	MoveToNextInstruction
 1057 00be 03E0     		b	.L62
 1058              	.L63:
 507:main.c        ****                     }
 508:main.c        ****                     else {
 509:main.c        ****                         return ForwardCourseCorrection();        
 1059              		.loc 1 509 0
 1060 00c0 FFF7FEFF 		bl	ForwardCourseCorrection
 1061 00c4 0346     		mov	r3, r0
 1062 00c6 A5E0     		b	.L59
 1063              	.L62:
 510:main.c        ****                     }
 511:main.c        ****                 }
 512:main.c        ****             }
 513:main.c        ****             
 514:main.c        ****             if (currentDirection == Stop) {
 1064              		.loc 1 514 0
 1065 00c8 5B4B     		ldr	r3, .L82+28
 1066 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1067 00cc 052B     		cmp	r3, #5
 1068 00ce 09D1     		bne	.L64
 515:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 29


 516:main.c        ****                 if (stopBuffer <= 50) {
 1069              		.loc 1 516 0
 1070 00d0 5A4B     		ldr	r3, .L82+32
 1071 00d2 1B68     		ldr	r3, [r3]
 1072 00d4 322B     		cmp	r3, #50
 1073 00d6 01D8     		bhi	.L65
 517:main.c        ****                     return Stop;   
 1074              		.loc 1 517 0
 1075 00d8 0523     		movs	r3, #5
 1076 00da 9BE0     		b	.L59
 1077              	.L65:
 518:main.c        ****                 }
 519:main.c        ****                 return ForwardCourseCorrection();
 1078              		.loc 1 519 0
 1079 00dc FFF7FEFF 		bl	ForwardCourseCorrection
 1080 00e0 0346     		mov	r3, r0
 1081 00e2 97E0     		b	.L59
 1082              	.L64:
 520:main.c        ****             }
 521:main.c        ****          
 522:main.c        ****             // if we are already turning left, then check if s5 && s6 are on black
 523:main.c        ****             if (currentDirection == TurnLeft) {
 1083              		.loc 1 523 0
 1084 00e4 544B     		ldr	r3, .L82+28
 1085 00e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1086 00e8 022B     		cmp	r3, #2
 1087 00ea 0ED1     		bne	.L66
 524:main.c        ****                 if (!s5 && !s6) {
 1088              		.loc 1 524 0
 1089 00ec 544B     		ldr	r3, .L82+36
 1090 00ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1091 00f0 002B     		cmp	r3, #0
 1092 00f2 08D1     		bne	.L67
 1093              		.loc 1 524 0 is_stmt 0 discriminator 1
 1094 00f4 534B     		ldr	r3, .L82+40
 1095 00f6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1096 00f8 002B     		cmp	r3, #0
 1097 00fa 04D1     		bne	.L67
 525:main.c        ****                     turnFinishedFlag = 1;
 1098              		.loc 1 525 0 is_stmt 1
 1099 00fc 4D4B     		ldr	r3, .L82+24
 1100 00fe 0122     		movs	r2, #1
 1101 0100 1A70     		strb	r2, [r3]
 526:main.c        ****                     return Stop;
 1102              		.loc 1 526 0
 1103 0102 0523     		movs	r3, #5
 1104 0104 86E0     		b	.L59
 1105              	.L67:
 527:main.c        ****                 }
 528:main.c        ****                 else
 529:main.c        ****                 {
 530:main.c        ****                     return TurnLeft;
 1106              		.loc 1 530 0
 1107 0106 0223     		movs	r3, #2
 1108 0108 84E0     		b	.L59
 1109              	.L66:
 531:main.c        ****                 }
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 30


 532:main.c        ****             }
 533:main.c        ****             
 534:main.c        ****             // If we are not already turning left then once s3 goes on BLACK, turn left
 535:main.c        ****             if (!s3) {
 1110              		.loc 1 535 0
 1111 010a 484B     		ldr	r3, .L82+16
 1112 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1113 010e 002B     		cmp	r3, #0
 1114 0110 01D1     		bne	.L68
 536:main.c        ****                 return TurnLeft;
 1115              		.loc 1 536 0
 1116 0112 0223     		movs	r3, #2
 1117 0114 7EE0     		b	.L59
 1118              	.L68:
 537:main.c        ****             }
 538:main.c        ****             
 539:main.c        ****             // Otherwise, keep going forward
 540:main.c        ****             return ForwardCourseCorrection(); 
 1119              		.loc 1 540 0
 1120 0116 FFF7FEFF 		bl	ForwardCourseCorrection
 1121 011a 0346     		mov	r3, r0
 1122 011c 7AE0     		b	.L59
 1123              	.L54:
 541:main.c        ****             break;
 542:main.c        ****         case waitForRightTurn:
 543:main.c        ****             // continue moving forward until s4 goes on black
 544:main.c        ****             // if we are turning left already
 545:main.c        ****                 // wait until s5 || s6 are on black
 546:main.c        ****                 // return stop
 547:main.c        ****             if (turnFinishedFlag) {
 1124              		.loc 1 547 0
 1125 011e 454B     		ldr	r3, .L82+24
 1126 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1127 0122 002B     		cmp	r3, #0
 1128 0124 11D0     		beq	.L69
 548:main.c        ****                 if (turnFinishedFlag) {
 1129              		.loc 1 548 0
 1130 0126 434B     		ldr	r3, .L82+24
 1131 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1132 012a 002B     		cmp	r3, #0
 1133 012c 0DD0     		beq	.L69
 549:main.c        ****                     if (s3) {
 1134              		.loc 1 549 0
 1135 012e 3F4B     		ldr	r3, .L82+16
 1136 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1137 0132 002B     		cmp	r3, #0
 1138 0134 05D0     		beq	.L70
 550:main.c        ****                         turnFinishedFlag = 0;
 1139              		.loc 1 550 0
 1140 0136 3F4B     		ldr	r3, .L82+24
 1141 0138 0022     		movs	r2, #0
 1142 013a 1A70     		strb	r2, [r3]
 551:main.c        ****                         MoveToNextInstruction();    
 1143              		.loc 1 551 0
 1144 013c FFF7FEFF 		bl	MoveToNextInstruction
 1145 0140 03E0     		b	.L69
 1146              	.L70:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 31


 552:main.c        ****                     }
 553:main.c        ****                     else {
 554:main.c        ****                         return ForwardCourseCorrection();        
 1147              		.loc 1 554 0
 1148 0142 FFF7FEFF 		bl	ForwardCourseCorrection
 1149 0146 0346     		mov	r3, r0
 1150 0148 64E0     		b	.L59
 1151              	.L69:
 555:main.c        ****                     }
 556:main.c        ****                 }
 557:main.c        ****             }
 558:main.c        ****             
 559:main.c        ****             if (currentDirection == Stop) {
 1152              		.loc 1 559 0
 1153 014a 3B4B     		ldr	r3, .L82+28
 1154 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1155 014e 052B     		cmp	r3, #5
 1156 0150 09D1     		bne	.L71
 560:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 561:main.c        ****                 if (stopBuffer <= 50) {
 1157              		.loc 1 561 0
 1158 0152 3A4B     		ldr	r3, .L82+32
 1159 0154 1B68     		ldr	r3, [r3]
 1160 0156 322B     		cmp	r3, #50
 1161 0158 01D8     		bhi	.L72
 562:main.c        ****                     return Stop;   
 1162              		.loc 1 562 0
 1163 015a 0523     		movs	r3, #5
 1164 015c 5AE0     		b	.L59
 1165              	.L72:
 563:main.c        ****                 }
 564:main.c        **** 
 565:main.c        ****                 return ForwardCourseCorrection();
 1166              		.loc 1 565 0
 1167 015e FFF7FEFF 		bl	ForwardCourseCorrection
 1168 0162 0346     		mov	r3, r0
 1169 0164 56E0     		b	.L59
 1170              	.L71:
 566:main.c        ****             }
 567:main.c        ****                       
 568:main.c        ****             // if we are already turning right, then check if s5 && s6 are on black
 569:main.c        ****             if (currentDirection == TurnRight) {
 1171              		.loc 1 569 0
 1172 0166 344B     		ldr	r3, .L82+28
 1173 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1174 016a 012B     		cmp	r3, #1
 1175 016c 0ED1     		bne	.L73
 570:main.c        ****                 if (!s5 && !s6) {
 1176              		.loc 1 570 0
 1177 016e 344B     		ldr	r3, .L82+36
 1178 0170 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1179 0172 002B     		cmp	r3, #0
 1180 0174 08D1     		bne	.L74
 1181              		.loc 1 570 0 is_stmt 0 discriminator 1
 1182 0176 334B     		ldr	r3, .L82+40
 1183 0178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1184 017a 002B     		cmp	r3, #0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 32


 1185 017c 04D1     		bne	.L74
 571:main.c        ****                     turnFinishedFlag = 1;
 1186              		.loc 1 571 0 is_stmt 1
 1187 017e 2D4B     		ldr	r3, .L82+24
 1188 0180 0122     		movs	r2, #1
 1189 0182 1A70     		strb	r2, [r3]
 572:main.c        ****                     return Stop;
 1190              		.loc 1 572 0
 1191 0184 0523     		movs	r3, #5
 1192 0186 45E0     		b	.L59
 1193              	.L74:
 573:main.c        ****                 }
 574:main.c        ****                 else
 575:main.c        ****                 {
 576:main.c        ****                     return TurnRight;
 1194              		.loc 1 576 0
 1195 0188 0123     		movs	r3, #1
 1196 018a 43E0     		b	.L59
 1197              	.L73:
 577:main.c        ****                 }
 578:main.c        ****             }
 579:main.c        ****             
 580:main.c        ****             // If we are not already turning right then once s4 goes on BLACK, turn left
 581:main.c        ****             if (!s4) {
 1198              		.loc 1 581 0
 1199 018c 284B     		ldr	r3, .L82+20
 1200 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1201 0190 002B     		cmp	r3, #0
 1202 0192 01D1     		bne	.L75
 582:main.c        ****                 return TurnRight;
 1203              		.loc 1 582 0
 1204 0194 0123     		movs	r3, #1
 1205 0196 3DE0     		b	.L59
 1206              	.L75:
 583:main.c        ****             }
 584:main.c        ****             
 585:main.c        ****             // Otherwise, keep going forward
 586:main.c        ****             return ForwardCourseCorrection(); 
 1207              		.loc 1 586 0
 1208 0198 FFF7FEFF 		bl	ForwardCourseCorrection
 1209 019c 0346     		mov	r3, r0
 1210 019e 39E0     		b	.L59
 1211              	.L55:
 587:main.c        ****             break;
 588:main.c        ****         case ForwardUntilTarget:
 589:main.c        ****             // Reset distance on first iteration of this instruction
 590:main.c        ****             if (!forwardUntilTargetStartedFlag) {
 1212              		.loc 1 590 0
 1213 01a0 294B     		ldr	r3, .L82+44
 1214 01a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1215 01a4 002B     		cmp	r3, #0
 1216 01a6 0ED1     		bne	.L76
 591:main.c        ****                 forwardUntilTargetStartedFlag = 1;
 1217              		.loc 1 591 0
 1218 01a8 274B     		ldr	r3, .L82+44
 1219 01aa 0122     		movs	r2, #1
 1220 01ac 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 33


 592:main.c        ****                 totalDistance = 0;
 1221              		.loc 1 592 0
 1222 01ae 274B     		ldr	r3, .L82+48
 1223 01b0 4FF00002 		mov	r2, #0
 1224 01b4 1A60     		str	r2, [r3]	@ float
 593:main.c        **** 
 594:main.c        ****                 blockSizeTotal = blocksize * 6;
 1225              		.loc 1 594 0
 1226 01b6 2649     		ldr	r1, .L82+52
 1227 01b8 7868     		ldr	r0, [r7, #4]	@ float
 1228 01ba FFF7FEFF 		bl	__aeabi_fmul
 1229 01be 0346     		mov	r3, r0
 1230 01c0 1A46     		mov	r2, r3
 1231 01c2 244B     		ldr	r3, .L82+56
 1232 01c4 1A60     		str	r2, [r3]	@ float
 1233              	.L76:
 595:main.c        ****             }
 596:main.c        ****             
 597:main.c        ****             // If totalDistance >= blockSizeTotal then we should be at target
 598:main.c        ****             if (totalDistance >= blockSizeTotal) {
 1234              		.loc 1 598 0
 1235 01c6 214B     		ldr	r3, .L82+48
 1236 01c8 1A68     		ldr	r2, [r3]	@ float
 1237 01ca 224B     		ldr	r3, .L82+56
 1238 01cc 1B68     		ldr	r3, [r3]	@ float
 1239 01ce 1946     		mov	r1, r3
 1240 01d0 1046     		mov	r0, r2
 1241 01d2 FFF7FEFF 		bl	__aeabi_fcmpge
 1242 01d6 0346     		mov	r3, r0
 1243 01d8 002B     		cmp	r3, #0
 1244 01da 03D0     		beq	.L81
 599:main.c        ****                 // Get next instruction
 600:main.c        ****                 MoveToNextInstruction();
 1245              		.loc 1 600 0
 1246 01dc FFF7FEFF 		bl	MoveToNextInstruction
 601:main.c        ****                 return Stop;
 1247              		.loc 1 601 0
 1248 01e0 0523     		movs	r3, #5
 1249 01e2 17E0     		b	.L59
 1250              	.L81:
 602:main.c        ****             }
 603:main.c        ****             
 604:main.c        ****             return ForwardCourseCorrection();
 1251              		.loc 1 604 0
 1252 01e4 FFF7FEFF 		bl	ForwardCourseCorrection
 1253 01e8 0346     		mov	r3, r0
 1254 01ea 13E0     		b	.L59
 1255              	.L56:
 605:main.c        ****             break;
 606:main.c        ****         case StopAtTarget:
 607:main.c        ****             // Reset Forward Until Target Flags (Had to move in here to make it work)
 608:main.c        ****             // Reset flags
 609:main.c        ****             totalDistance = 0;
 1256              		.loc 1 609 0
 1257 01ec 174B     		ldr	r3, .L82+48
 1258 01ee 4FF00002 		mov	r2, #0
 1259 01f2 1A60     		str	r2, [r3]	@ float
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 34


 610:main.c        ****             forwardUntilTargetStartedFlag = 0;
 1260              		.loc 1 610 0
 1261 01f4 144B     		ldr	r3, .L82+44
 1262 01f6 0022     		movs	r2, #0
 1263 01f8 1A70     		strb	r2, [r3]
 611:main.c        ****             blockSizeTotal = 0;
 1264              		.loc 1 611 0
 1265 01fa 164B     		ldr	r3, .L82+56
 1266 01fc 4FF00002 		mov	r2, #0
 1267 0200 1A60     		str	r2, [r3]	@ float
 612:main.c        ****             
 613:main.c        ****             if (stopBuffer <= 200) {
 1268              		.loc 1 613 0
 1269 0202 0E4B     		ldr	r3, .L82+32
 1270 0204 1B68     		ldr	r3, [r3]
 1271 0206 C82B     		cmp	r3, #200
 1272 0208 01D8     		bhi	.L79
 614:main.c        ****                 return Stop;    
 1273              		.loc 1 614 0
 1274 020a 0523     		movs	r3, #5
 1275 020c 02E0     		b	.L59
 1276              	.L79:
 615:main.c        ****             }
 616:main.c        ****             return TurnRight;
 1277              		.loc 1 616 0
 1278 020e 0123     		movs	r3, #1
 1279 0210 00E0     		b	.L59
 1280              	.L50:
 617:main.c        ****             break;
 618:main.c        ****         default:
 619:main.c        ****             return Stop;
 1281              		.loc 1 619 0
 1282 0212 0523     		movs	r3, #5
 1283              	.L59:
 620:main.c        ****             break;
 621:main.c        ****     }
 622:main.c        ****     return Stop;
 623:main.c        **** }
 1284              		.loc 1 623 0
 1285 0214 1846     		mov	r0, r3
 1286 0216 0837     		adds	r7, r7, #8
 1287              		.cfi_def_cfa_offset 8
 1288 0218 BD46     		mov	sp, r7
 1289              		.cfi_def_cfa_register 13
 1290              		@ sp needed
 1291 021a 80BD     		pop	{r7, pc}
 1292              	.L83:
 1293              		.align	2
 1294              	.L82:
 1295 021c 00000000 		.word	currentRobotOrientation
 1296 0220 00000000 		.word	yBlocksize
 1297 0224 00000000 		.word	xBlocksize
 1298 0228 00000000 		.word	currentInstruction
 1299 022c 00000000 		.word	s3
 1300 0230 00000000 		.word	s4
 1301 0234 00000000 		.word	turnFinishedFlag
 1302 0238 00000000 		.word	currentDirection
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 35


 1303 023c 00000000 		.word	stopBuffer
 1304 0240 00000000 		.word	s5
 1305 0244 00000000 		.word	s6
 1306 0248 00000000 		.word	forwardUntilTargetStartedFlag
 1307 024c 00000000 		.word	totalDistance
 1308 0250 0000C040 		.word	1086324736
 1309 0254 00000000 		.word	blockSizeTotal
 1310              		.cfi_endproc
 1311              	.LFE74:
 1312              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1313              		.global	__aeabi_i2f
 1314              		.section	.text.CalculateDistanceToTravel,"ax",%progbits
 1315              		.align	2
 1316              		.global	CalculateDistanceToTravel
 1317              		.thumb
 1318              		.thumb_func
 1319              		.type	CalculateDistanceToTravel, %function
 1320              	CalculateDistanceToTravel:
 1321              	.LFB75:
 624:main.c        **** 
 625:main.c        **** // Calculate total blocksize to travel until target
 626:main.c        **** float CalculateDistanceToTravel(float blockSize) {
 1322              		.loc 1 626 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 40
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326 0000 80B5     		push	{r7, lr}
 1327              		.cfi_def_cfa_offset 8
 1328              		.cfi_offset 7, -8
 1329              		.cfi_offset 14, -4
 1330 0002 8AB0     		sub	sp, sp, #40
 1331              		.cfi_def_cfa_offset 48
 1332 0004 00AF     		add	r7, sp, #0
 1333              		.cfi_def_cfa_register 7
 1334 0006 7860     		str	r0, [r7, #4]	@ float
 627:main.c        ****     float totalBlockSize;
 628:main.c        ****     
 629:main.c        ****     // Check for Row, Col that target is 
 630:main.c        ****     int targetRow = food_list[0][0];
 1335              		.loc 1 630 0
 1336 0008 9D4B     		ldr	r3, .L129
 1337 000a 1B68     		ldr	r3, [r3]
 1338 000c 3B61     		str	r3, [r7, #16]
 631:main.c        ****     int targetCol = food_list[0][1];
 1339              		.loc 1 631 0
 1340 000e 9C4B     		ldr	r3, .L129
 1341 0010 5B68     		ldr	r3, [r3, #4]
 1342 0012 FB60     		str	r3, [r7, #12]
 632:main.c        ****     
 633:main.c        ****     int pathCount = 0;
 1343              		.loc 1 633 0
 1344 0014 0023     		movs	r3, #0
 1345 0016 7B62     		str	r3, [r7, #36]
 634:main.c        ****     
 635:main.c        ****     // Depending on the robot orientation
 636:main.c        ****     // count++ if row, col is 8
 637:main.c        ****     // count reset if row, col is 1 or 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 36


 638:main.c        ****     // save count if row, col is 9
 639:main.c        ****     switch (currentRobotOrientation) {
 1346              		.loc 1 639 0
 1347 0018 9A4B     		ldr	r3, .L129+4
 1348 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1349 001c 032B     		cmp	r3, #3
 1350 001e 00F21F81 		bhi	.L85
 1351 0022 01A2     		adr	r2, .L87
 1352 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1353              		.p2align 2
 1354              	.L87:
 1355 0028 39000000 		.word	.L86+1
 1356 002c C3000000 		.word	.L88+1
 1357 0030 4D010000 		.word	.L89+1
 1358 0034 D7010000 		.word	.L90+1
 1359              		.p2align 1
 1360              	.L86:
 1361              	.LBB3:
 640:main.c        ****         case Up:
 641:main.c        ****             // Column
 642:main.c        ****             // Start from Bottom (since we're facing up)
 643:main.c        ****             for (int i = MAX_ROWS; i >= 0; i--) {
 1362              		.loc 1 643 0
 1363 0038 0F23     		movs	r3, #15
 1364 003a 3B62     		str	r3, [r7, #32]
 1365 003c 3BE0     		b	.L91
 1366              	.L97:
 644:main.c        ****                 if (map[i][targetCol] == 9) {
 1367              		.loc 1 644 0
 1368 003e 9249     		ldr	r1, .L129+8
 1369 0040 3A6A     		ldr	r2, [r7, #32]
 1370 0042 1346     		mov	r3, r2
 1371 0044 DB00     		lsls	r3, r3, #3
 1372 0046 1344     		add	r3, r3, r2
 1373 0048 5B00     		lsls	r3, r3, #1
 1374 004a 1344     		add	r3, r3, r2
 1375 004c FA68     		ldr	r2, [r7, #12]
 1376 004e 1344     		add	r3, r3, r2
 1377 0050 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1378 0054 092B     		cmp	r3, #9
 1379 0056 32D0     		beq	.L124
 645:main.c        ****                     break;    
 646:main.c        ****                 }
 647:main.c        ****                 if (map[i][targetCol] == 8) {
 1380              		.loc 1 647 0
 1381 0058 8B49     		ldr	r1, .L129+8
 1382 005a 3A6A     		ldr	r2, [r7, #32]
 1383 005c 1346     		mov	r3, r2
 1384 005e DB00     		lsls	r3, r3, #3
 1385 0060 1344     		add	r3, r3, r2
 1386 0062 5B00     		lsls	r3, r3, #1
 1387 0064 1344     		add	r3, r3, r2
 1388 0066 FA68     		ldr	r2, [r7, #12]
 1389 0068 1344     		add	r3, r3, r2
 1390 006a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1391 006e 082B     		cmp	r3, #8
 1392 0070 02D1     		bne	.L94
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 37


 648:main.c        ****                     pathCount++;    
 1393              		.loc 1 648 0
 1394 0072 7B6A     		ldr	r3, [r7, #36]
 1395 0074 0133     		adds	r3, r3, #1
 1396 0076 7B62     		str	r3, [r7, #36]
 1397              	.L94:
 649:main.c        ****                 }
 650:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1398              		.loc 1 650 0
 1399 0078 8349     		ldr	r1, .L129+8
 1400 007a 3A6A     		ldr	r2, [r7, #32]
 1401 007c 1346     		mov	r3, r2
 1402 007e DB00     		lsls	r3, r3, #3
 1403 0080 1344     		add	r3, r3, r2
 1404 0082 5B00     		lsls	r3, r3, #1
 1405 0084 1344     		add	r3, r3, r2
 1406 0086 FA68     		ldr	r2, [r7, #12]
 1407 0088 1344     		add	r3, r3, r2
 1408 008a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1409 008e 002B     		cmp	r3, #0
 1410 0090 0CD0     		beq	.L95
 1411              		.loc 1 650 0 is_stmt 0 discriminator 1
 1412 0092 7D49     		ldr	r1, .L129+8
 1413 0094 3A6A     		ldr	r2, [r7, #32]
 1414 0096 1346     		mov	r3, r2
 1415 0098 DB00     		lsls	r3, r3, #3
 1416 009a 1344     		add	r3, r3, r2
 1417 009c 5B00     		lsls	r3, r3, #1
 1418 009e 1344     		add	r3, r3, r2
 1419 00a0 FA68     		ldr	r2, [r7, #12]
 1420 00a2 1344     		add	r3, r3, r2
 1421 00a4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1422 00a8 012B     		cmp	r3, #1
 1423 00aa 01D1     		bne	.L96
 1424              	.L95:
 651:main.c        ****                     pathCount = 0;
 1425              		.loc 1 651 0 is_stmt 1
 1426 00ac 0023     		movs	r3, #0
 1427 00ae 7B62     		str	r3, [r7, #36]
 1428              	.L96:
 643:main.c        ****                 if (map[i][targetCol] == 9) {
 1429              		.loc 1 643 0 discriminator 2
 1430 00b0 3B6A     		ldr	r3, [r7, #32]
 1431 00b2 013B     		subs	r3, r3, #1
 1432 00b4 3B62     		str	r3, [r7, #32]
 1433              	.L91:
 643:main.c        ****                 if (map[i][targetCol] == 9) {
 1434              		.loc 1 643 0 is_stmt 0 discriminator 1
 1435 00b6 3B6A     		ldr	r3, [r7, #32]
 1436 00b8 002B     		cmp	r3, #0
 1437 00ba C0DA     		bge	.L97
 1438              	.LBE3:
 652:main.c        ****                 }
 653:main.c        ****             }
 654:main.c        ****             break;
 1439              		.loc 1 654 0 is_stmt 1
 1440 00bc D0E0     		b	.L85
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 38


 1441              	.L124:
 1442              	.LBB4:
 645:main.c        ****                 }
 1443              		.loc 1 645 0
 1444 00be 00BF     		nop
 1445              	.LBE4:
 1446              		.loc 1 654 0
 1447 00c0 CEE0     		b	.L85
 1448              	.L88:
 1449              	.LBB5:
 655:main.c        ****         case Down:
 656:main.c        ****             // Target Column, Check Row
 657:main.c        ****             // Start from Top
 658:main.c        ****             for (int i = 0; i < MAX_ROWS; i++) {
 1450              		.loc 1 658 0
 1451 00c2 0023     		movs	r3, #0
 1452 00c4 FB61     		str	r3, [r7, #28]
 1453 00c6 3BE0     		b	.L98
 1454              	.L104:
 659:main.c        ****                 if (map[i][targetCol] == 9) {
 1455              		.loc 1 659 0
 1456 00c8 6F49     		ldr	r1, .L129+8
 1457 00ca FA69     		ldr	r2, [r7, #28]
 1458 00cc 1346     		mov	r3, r2
 1459 00ce DB00     		lsls	r3, r3, #3
 1460 00d0 1344     		add	r3, r3, r2
 1461 00d2 5B00     		lsls	r3, r3, #1
 1462 00d4 1344     		add	r3, r3, r2
 1463 00d6 FA68     		ldr	r2, [r7, #12]
 1464 00d8 1344     		add	r3, r3, r2
 1465 00da 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1466 00de 092B     		cmp	r3, #9
 1467 00e0 32D0     		beq	.L125
 660:main.c        ****                     break;    
 661:main.c        ****                 }
 662:main.c        ****                 if (map[i][targetCol] == 8) {
 1468              		.loc 1 662 0
 1469 00e2 6949     		ldr	r1, .L129+8
 1470 00e4 FA69     		ldr	r2, [r7, #28]
 1471 00e6 1346     		mov	r3, r2
 1472 00e8 DB00     		lsls	r3, r3, #3
 1473 00ea 1344     		add	r3, r3, r2
 1474 00ec 5B00     		lsls	r3, r3, #1
 1475 00ee 1344     		add	r3, r3, r2
 1476 00f0 FA68     		ldr	r2, [r7, #12]
 1477 00f2 1344     		add	r3, r3, r2
 1478 00f4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1479 00f8 082B     		cmp	r3, #8
 1480 00fa 02D1     		bne	.L101
 663:main.c        ****                     pathCount++;    
 1481              		.loc 1 663 0
 1482 00fc 7B6A     		ldr	r3, [r7, #36]
 1483 00fe 0133     		adds	r3, r3, #1
 1484 0100 7B62     		str	r3, [r7, #36]
 1485              	.L101:
 664:main.c        ****                 }
 665:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 39


 1486              		.loc 1 665 0
 1487 0102 6149     		ldr	r1, .L129+8
 1488 0104 FA69     		ldr	r2, [r7, #28]
 1489 0106 1346     		mov	r3, r2
 1490 0108 DB00     		lsls	r3, r3, #3
 1491 010a 1344     		add	r3, r3, r2
 1492 010c 5B00     		lsls	r3, r3, #1
 1493 010e 1344     		add	r3, r3, r2
 1494 0110 FA68     		ldr	r2, [r7, #12]
 1495 0112 1344     		add	r3, r3, r2
 1496 0114 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1497 0118 002B     		cmp	r3, #0
 1498 011a 0CD0     		beq	.L102
 1499              		.loc 1 665 0 is_stmt 0 discriminator 1
 1500 011c 5A49     		ldr	r1, .L129+8
 1501 011e FA69     		ldr	r2, [r7, #28]
 1502 0120 1346     		mov	r3, r2
 1503 0122 DB00     		lsls	r3, r3, #3
 1504 0124 1344     		add	r3, r3, r2
 1505 0126 5B00     		lsls	r3, r3, #1
 1506 0128 1344     		add	r3, r3, r2
 1507 012a FA68     		ldr	r2, [r7, #12]
 1508 012c 1344     		add	r3, r3, r2
 1509 012e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1510 0132 012B     		cmp	r3, #1
 1511 0134 01D1     		bne	.L103
 1512              	.L102:
 666:main.c        ****                     pathCount = 0;
 1513              		.loc 1 666 0 is_stmt 1
 1514 0136 0023     		movs	r3, #0
 1515 0138 7B62     		str	r3, [r7, #36]
 1516              	.L103:
 658:main.c        ****                 if (map[i][targetCol] == 9) {
 1517              		.loc 1 658 0 discriminator 2
 1518 013a FB69     		ldr	r3, [r7, #28]
 1519 013c 0133     		adds	r3, r3, #1
 1520 013e FB61     		str	r3, [r7, #28]
 1521              	.L98:
 658:main.c        ****                 if (map[i][targetCol] == 9) {
 1522              		.loc 1 658 0 is_stmt 0 discriminator 1
 1523 0140 FB69     		ldr	r3, [r7, #28]
 1524 0142 0E2B     		cmp	r3, #14
 1525 0144 C0DD     		ble	.L104
 1526              	.LBE5:
 667:main.c        ****                 }
 668:main.c        ****             }
 669:main.c        ****             break;
 1527              		.loc 1 669 0 is_stmt 1
 1528 0146 8BE0     		b	.L85
 1529              	.L125:
 1530              	.LBB6:
 660:main.c        ****                 }
 1531              		.loc 1 660 0
 1532 0148 00BF     		nop
 1533              	.LBE6:
 1534              		.loc 1 669 0
 1535 014a 89E0     		b	.L85
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 40


 1536              	.L89:
 1537              	.LBB7:
 670:main.c        ****         case Left:
 671:main.c        ****             // Target Row, Check Col
 672:main.c        ****             // Start from Right
 673:main.c        ****             for (int i = MAX_COLS; i >= 0; i--) {
 1538              		.loc 1 673 0
 1539 014c 1323     		movs	r3, #19
 1540 014e BB61     		str	r3, [r7, #24]
 1541 0150 3BE0     		b	.L105
 1542              	.L111:
 674:main.c        ****                 if (map[targetRow][i] == 9) {
 1543              		.loc 1 674 0
 1544 0152 4D49     		ldr	r1, .L129+8
 1545 0154 3A69     		ldr	r2, [r7, #16]
 1546 0156 1346     		mov	r3, r2
 1547 0158 DB00     		lsls	r3, r3, #3
 1548 015a 1344     		add	r3, r3, r2
 1549 015c 5B00     		lsls	r3, r3, #1
 1550 015e 1344     		add	r3, r3, r2
 1551 0160 BA69     		ldr	r2, [r7, #24]
 1552 0162 1344     		add	r3, r3, r2
 1553 0164 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1554 0168 092B     		cmp	r3, #9
 1555 016a 32D0     		beq	.L126
 675:main.c        ****                     break;    
 676:main.c        ****                 }
 677:main.c        ****                 if (map[targetRow][i] == 8) {
 1556              		.loc 1 677 0
 1557 016c 4649     		ldr	r1, .L129+8
 1558 016e 3A69     		ldr	r2, [r7, #16]
 1559 0170 1346     		mov	r3, r2
 1560 0172 DB00     		lsls	r3, r3, #3
 1561 0174 1344     		add	r3, r3, r2
 1562 0176 5B00     		lsls	r3, r3, #1
 1563 0178 1344     		add	r3, r3, r2
 1564 017a BA69     		ldr	r2, [r7, #24]
 1565 017c 1344     		add	r3, r3, r2
 1566 017e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1567 0182 082B     		cmp	r3, #8
 1568 0184 02D1     		bne	.L108
 678:main.c        ****                     pathCount++;    
 1569              		.loc 1 678 0
 1570 0186 7B6A     		ldr	r3, [r7, #36]
 1571 0188 0133     		adds	r3, r3, #1
 1572 018a 7B62     		str	r3, [r7, #36]
 1573              	.L108:
 679:main.c        ****                 }
 680:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1574              		.loc 1 680 0
 1575 018c 3E49     		ldr	r1, .L129+8
 1576 018e 3A69     		ldr	r2, [r7, #16]
 1577 0190 1346     		mov	r3, r2
 1578 0192 DB00     		lsls	r3, r3, #3
 1579 0194 1344     		add	r3, r3, r2
 1580 0196 5B00     		lsls	r3, r3, #1
 1581 0198 1344     		add	r3, r3, r2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 41


 1582 019a BA69     		ldr	r2, [r7, #24]
 1583 019c 1344     		add	r3, r3, r2
 1584 019e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1585 01a2 002B     		cmp	r3, #0
 1586 01a4 0CD0     		beq	.L109
 1587              		.loc 1 680 0 is_stmt 0 discriminator 1
 1588 01a6 3849     		ldr	r1, .L129+8
 1589 01a8 BA69     		ldr	r2, [r7, #24]
 1590 01aa 1346     		mov	r3, r2
 1591 01ac DB00     		lsls	r3, r3, #3
 1592 01ae 1344     		add	r3, r3, r2
 1593 01b0 5B00     		lsls	r3, r3, #1
 1594 01b2 1344     		add	r3, r3, r2
 1595 01b4 FA68     		ldr	r2, [r7, #12]
 1596 01b6 1344     		add	r3, r3, r2
 1597 01b8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1598 01bc 012B     		cmp	r3, #1
 1599 01be 01D1     		bne	.L110
 1600              	.L109:
 681:main.c        ****                     pathCount = 0;
 1601              		.loc 1 681 0 is_stmt 1
 1602 01c0 0023     		movs	r3, #0
 1603 01c2 7B62     		str	r3, [r7, #36]
 1604              	.L110:
 673:main.c        ****                 if (map[targetRow][i] == 9) {
 1605              		.loc 1 673 0 discriminator 2
 1606 01c4 BB69     		ldr	r3, [r7, #24]
 1607 01c6 013B     		subs	r3, r3, #1
 1608 01c8 BB61     		str	r3, [r7, #24]
 1609              	.L105:
 673:main.c        ****                 if (map[targetRow][i] == 9) {
 1610              		.loc 1 673 0 is_stmt 0 discriminator 1
 1611 01ca BB69     		ldr	r3, [r7, #24]
 1612 01cc 002B     		cmp	r3, #0
 1613 01ce C0DA     		bge	.L111
 1614              	.LBE7:
 682:main.c        ****                 }
 683:main.c        ****             }
 684:main.c        ****             break;
 1615              		.loc 1 684 0 is_stmt 1
 1616 01d0 46E0     		b	.L85
 1617              	.L126:
 1618              	.LBB8:
 675:main.c        ****                 }
 1619              		.loc 1 675 0
 1620 01d2 00BF     		nop
 1621              	.LBE8:
 1622              		.loc 1 684 0
 1623 01d4 44E0     		b	.L85
 1624              	.L90:
 1625              	.LBB9:
 685:main.c        ****         
 686:main.c        ****         case Right:
 687:main.c        ****             // Target Row, Check Col
 688:main.c        ****             // Start from Left
 689:main.c        ****             for (int i = 0; i < MAX_COLS; i++) {
 1626              		.loc 1 689 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 42


 1627 01d6 0023     		movs	r3, #0
 1628 01d8 7B61     		str	r3, [r7, #20]
 1629 01da 3BE0     		b	.L112
 1630              	.L118:
 690:main.c        ****                 if (map[targetRow][i] == 9) {
 1631              		.loc 1 690 0
 1632 01dc 2A49     		ldr	r1, .L129+8
 1633 01de 3A69     		ldr	r2, [r7, #16]
 1634 01e0 1346     		mov	r3, r2
 1635 01e2 DB00     		lsls	r3, r3, #3
 1636 01e4 1344     		add	r3, r3, r2
 1637 01e6 5B00     		lsls	r3, r3, #1
 1638 01e8 1344     		add	r3, r3, r2
 1639 01ea 7A69     		ldr	r2, [r7, #20]
 1640 01ec 1344     		add	r3, r3, r2
 1641 01ee 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1642 01f2 092B     		cmp	r3, #9
 1643 01f4 32D0     		beq	.L127
 691:main.c        ****                     break;    
 692:main.c        ****                 }
 693:main.c        ****                 if (map[targetRow][i] == 8) {
 1644              		.loc 1 693 0
 1645 01f6 2449     		ldr	r1, .L129+8
 1646 01f8 3A69     		ldr	r2, [r7, #16]
 1647 01fa 1346     		mov	r3, r2
 1648 01fc DB00     		lsls	r3, r3, #3
 1649 01fe 1344     		add	r3, r3, r2
 1650 0200 5B00     		lsls	r3, r3, #1
 1651 0202 1344     		add	r3, r3, r2
 1652 0204 7A69     		ldr	r2, [r7, #20]
 1653 0206 1344     		add	r3, r3, r2
 1654 0208 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1655 020c 082B     		cmp	r3, #8
 1656 020e 02D1     		bne	.L115
 694:main.c        ****                     pathCount++;    
 1657              		.loc 1 694 0
 1658 0210 7B6A     		ldr	r3, [r7, #36]
 1659 0212 0133     		adds	r3, r3, #1
 1660 0214 7B62     		str	r3, [r7, #36]
 1661              	.L115:
 695:main.c        ****                 }
 696:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1662              		.loc 1 696 0
 1663 0216 1C49     		ldr	r1, .L129+8
 1664 0218 3A69     		ldr	r2, [r7, #16]
 1665 021a 1346     		mov	r3, r2
 1666 021c DB00     		lsls	r3, r3, #3
 1667 021e 1344     		add	r3, r3, r2
 1668 0220 5B00     		lsls	r3, r3, #1
 1669 0222 1344     		add	r3, r3, r2
 1670 0224 7A69     		ldr	r2, [r7, #20]
 1671 0226 1344     		add	r3, r3, r2
 1672 0228 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1673 022c 002B     		cmp	r3, #0
 1674 022e 0CD0     		beq	.L116
 1675              		.loc 1 696 0 is_stmt 0 discriminator 1
 1676 0230 1549     		ldr	r1, .L129+8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 43


 1677 0232 7A69     		ldr	r2, [r7, #20]
 1678 0234 1346     		mov	r3, r2
 1679 0236 DB00     		lsls	r3, r3, #3
 1680 0238 1344     		add	r3, r3, r2
 1681 023a 5B00     		lsls	r3, r3, #1
 1682 023c 1344     		add	r3, r3, r2
 1683 023e FA68     		ldr	r2, [r7, #12]
 1684 0240 1344     		add	r3, r3, r2
 1685 0242 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1686 0246 012B     		cmp	r3, #1
 1687 0248 01D1     		bne	.L117
 1688              	.L116:
 697:main.c        ****                     pathCount = 0;
 1689              		.loc 1 697 0 is_stmt 1
 1690 024a 0023     		movs	r3, #0
 1691 024c 7B62     		str	r3, [r7, #36]
 1692              	.L117:
 689:main.c        ****                 if (map[targetRow][i] == 9) {
 1693              		.loc 1 689 0 discriminator 2
 1694 024e 7B69     		ldr	r3, [r7, #20]
 1695 0250 0133     		adds	r3, r3, #1
 1696 0252 7B61     		str	r3, [r7, #20]
 1697              	.L112:
 689:main.c        ****                 if (map[targetRow][i] == 9) {
 1698              		.loc 1 689 0 is_stmt 0 discriminator 1
 1699 0254 7B69     		ldr	r3, [r7, #20]
 1700 0256 122B     		cmp	r3, #18
 1701 0258 C0DD     		ble	.L118
 1702              	.LBE9:
 698:main.c        ****                 }
 699:main.c        **** 
 700:main.c        ****             }
 701:main.c        ****             break;
 1703              		.loc 1 701 0 is_stmt 1
 1704 025a 00E0     		b	.L128
 1705              	.L127:
 1706              	.LBB10:
 691:main.c        ****                 }
 1707              		.loc 1 691 0
 1708 025c 00BF     		nop
 1709              	.L128:
 1710              	.LBE10:
 1711              		.loc 1 701 0
 1712 025e 00BF     		nop
 1713              	.L85:
 702:main.c        ****         
 703:main.c        ****     }
 704:main.c        ****     totalBlockSize = blockSize * pathCount;
 1714              		.loc 1 704 0
 1715 0260 786A     		ldr	r0, [r7, #36]
 1716 0262 FFF7FEFF 		bl	__aeabi_i2f
 1717 0266 0346     		mov	r3, r0
 1718 0268 7968     		ldr	r1, [r7, #4]	@ float
 1719 026a 1846     		mov	r0, r3
 1720 026c FFF7FEFF 		bl	__aeabi_fmul
 1721 0270 0346     		mov	r3, r0
 1722 0272 BB60     		str	r3, [r7, #8]	@ float
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 44


 705:main.c        ****     return totalBlockSize;
 1723              		.loc 1 705 0
 1724 0274 BB68     		ldr	r3, [r7, #8]	@ float
 706:main.c        **** }
 1725              		.loc 1 706 0
 1726 0276 1846     		mov	r0, r3
 1727 0278 2837     		adds	r7, r7, #40
 1728              		.cfi_def_cfa_offset 8
 1729 027a BD46     		mov	sp, r7
 1730              		.cfi_def_cfa_register 13
 1731              		@ sp needed
 1732 027c 80BD     		pop	{r7, pc}
 1733              	.L130:
 1734 027e 00BF     		.align	2
 1735              	.L129:
 1736 0280 00000000 		.word	food_list
 1737 0284 00000000 		.word	currentRobotOrientation
 1738 0288 00000000 		.word	map
 1739              		.cfi_endproc
 1740              	.LFE75:
 1741              		.size	CalculateDistanceToTravel, .-CalculateDistanceToTravel
 1742              		.section	.text.MoveToNextInstruction,"ax",%progbits
 1743              		.align	2
 1744              		.global	MoveToNextInstruction
 1745              		.thumb
 1746              		.thumb_func
 1747              		.type	MoveToNextInstruction, %function
 1748              	MoveToNextInstruction:
 1749              	.LFB76:
 707:main.c        **** 
 708:main.c        **** // get next instruction
 709:main.c        **** void MoveToNextInstruction() {
 1750              		.loc 1 709 0
 1751              		.cfi_startproc
 1752              		@ args = 0, pretend = 0, frame = 0
 1753              		@ frame_needed = 1, uses_anonymous_args = 0
 1754              		@ link register save eliminated.
 1755 0000 80B4     		push	{r7}
 1756              		.cfi_def_cfa_offset 4
 1757              		.cfi_offset 7, -4
 1758 0002 00AF     		add	r7, sp, #0
 1759              		.cfi_def_cfa_register 7
 710:main.c        ****     instructionIndex++;
 1760              		.loc 1 710 0
 1761 0004 044B     		ldr	r3, .L132
 1762 0006 1B68     		ldr	r3, [r3]
 1763 0008 0133     		adds	r3, r3, #1
 1764 000a 034A     		ldr	r2, .L132
 1765 000c 1360     		str	r3, [r2]
 711:main.c        **** }
 1766              		.loc 1 711 0
 1767 000e 00BF     		nop
 1768 0010 BD46     		mov	sp, r7
 1769              		.cfi_def_cfa_register 13
 1770              		@ sp needed
 1771 0012 80BC     		pop	{r7}
 1772              		.cfi_restore 7
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 45


 1773              		.cfi_def_cfa_offset 0
 1774 0014 7047     		bx	lr
 1775              	.L133:
 1776 0016 00BF     		.align	2
 1777              	.L132:
 1778 0018 00000000 		.word	instructionIndex
 1779              		.cfi_endproc
 1780              	.LFE76:
 1781              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 1782              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 1783              		.align	2
 1784              		.global	GetInstructionAtIndex
 1785              		.thumb
 1786              		.thumb_func
 1787              		.type	GetInstructionAtIndex, %function
 1788              	GetInstructionAtIndex:
 1789              	.LFB77:
 712:main.c        **** 
 713:main.c        **** 
 714:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 1790              		.loc 1 714 0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 32
 1793              		@ frame_needed = 1, uses_anonymous_args = 0
 1794              		@ link register save eliminated.
 1795 0000 90B4     		push	{r4, r7}
 1796              		.cfi_def_cfa_offset 8
 1797              		.cfi_offset 4, -8
 1798              		.cfi_offset 7, -4
 1799 0002 88B0     		sub	sp, sp, #32
 1800              		.cfi_def_cfa_offset 40
 1801 0004 00AF     		add	r7, sp, #0
 1802              		.cfi_def_cfa_register 7
 1803 0006 F860     		str	r0, [r7, #12]
 1804 0008 B960     		str	r1, [r7, #8]
 1805 000a 7A60     		str	r2, [r7, #4]
 1806 000c 3B60     		str	r3, [r7]
 1807              	.LBB11:
 715:main.c        ****     Instruction nextInstruction;
 716:main.c        ****     // input is list of instructions and robot will react accordingly
 717:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 1808              		.loc 1 717 0
 1809 000e 3B68     		ldr	r3, [r7]
 1810 0010 FB61     		str	r3, [r7, #28]
 1811 0012 37E0     		b	.L135
 1812              	.L138:
 718:main.c        ****         if(instructionList[i].direction != Skip) {
 1813              		.loc 1 718 0
 1814 0014 FA69     		ldr	r2, [r7, #28]
 1815 0016 1346     		mov	r3, r2
 1816 0018 5B00     		lsls	r3, r3, #1
 1817 001a 1344     		add	r3, r3, r2
 1818 001c 9B00     		lsls	r3, r3, #2
 1819 001e 1A46     		mov	r2, r3
 1820 0020 7B68     		ldr	r3, [r7, #4]
 1821 0022 1344     		add	r3, r3, r2
 1822 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 46


 1823 0026 062B     		cmp	r3, #6
 1824 0028 26D0     		beq	.L136
 719:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 1825              		.loc 1 719 0
 1826 002a FA69     		ldr	r2, [r7, #28]
 1827 002c 1346     		mov	r3, r2
 1828 002e 5B00     		lsls	r3, r3, #1
 1829 0030 1344     		add	r3, r3, r2
 1830 0032 9B00     		lsls	r3, r3, #2
 1831 0034 1A46     		mov	r2, r3
 1832 0036 7B68     		ldr	r3, [r7, #4]
 1833 0038 1344     		add	r3, r3, r2
 1834 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1835 003c 3B74     		strb	r3, [r7, #16]
 720:main.c        ****             nextInstruction.ignoreL = instructionList[i].ignoreL;
 1836              		.loc 1 720 0
 1837 003e FA69     		ldr	r2, [r7, #28]
 1838 0040 1346     		mov	r3, r2
 1839 0042 5B00     		lsls	r3, r3, #1
 1840 0044 1344     		add	r3, r3, r2
 1841 0046 9B00     		lsls	r3, r3, #2
 1842 0048 1A46     		mov	r2, r3
 1843 004a 7B68     		ldr	r3, [r7, #4]
 1844 004c 1344     		add	r3, r3, r2
 1845 004e 5B68     		ldr	r3, [r3, #4]
 1846 0050 7B61     		str	r3, [r7, #20]
 721:main.c        ****             nextInstruction.ignoreR = instructionList[i].ignoreR;
 1847              		.loc 1 721 0
 1848 0052 FA69     		ldr	r2, [r7, #28]
 1849 0054 1346     		mov	r3, r2
 1850 0056 5B00     		lsls	r3, r3, #1
 1851 0058 1344     		add	r3, r3, r2
 1852 005a 9B00     		lsls	r3, r3, #2
 1853 005c 1A46     		mov	r2, r3
 1854 005e 7B68     		ldr	r3, [r7, #4]
 1855 0060 1344     		add	r3, r3, r2
 1856 0062 9B68     		ldr	r3, [r3, #8]
 1857 0064 BB61     		str	r3, [r7, #24]
 722:main.c        ****             return nextInstruction; // return next instruction and parameters
 1858              		.loc 1 722 0
 1859 0066 FB68     		ldr	r3, [r7, #12]
 1860 0068 1C46     		mov	r4, r3
 1861 006a 07F11003 		add	r3, r7, #16
 1862 006e 93E80700 		ldmia	r3, {r0, r1, r2}
 1863 0072 84E80700 		stmia	r4, {r0, r1, r2}
 1864 0076 11E0     		b	.L134
 1865              	.L136:
 723:main.c        ****         }
 724:main.c        ****         instructionIndex++; // update instructionIndex = i;
 1866              		.loc 1 724 0 discriminator 2
 1867 0078 3B68     		ldr	r3, [r7]
 1868 007a 0133     		adds	r3, r3, #1
 1869 007c 3B60     		str	r3, [r7]
 717:main.c        ****         if(instructionList[i].direction != Skip) {
 1870              		.loc 1 717 0 discriminator 2
 1871 007e FB69     		ldr	r3, [r7, #28]
 1872 0080 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 47


 1873 0082 FB61     		str	r3, [r7, #28]
 1874              	.L135:
 717:main.c        ****         if(instructionList[i].direction != Skip) {
 1875              		.loc 1 717 0 is_stmt 0 discriminator 1
 1876 0084 FA69     		ldr	r2, [r7, #28]
 1877 0086 BB68     		ldr	r3, [r7, #8]
 1878 0088 9A42     		cmp	r2, r3
 1879 008a C3DB     		blt	.L138
 1880              	.LBE11:
 725:main.c        ****     }
 726:main.c        ****     return nextInstruction;
 1881              		.loc 1 726 0 is_stmt 1
 1882 008c FB68     		ldr	r3, [r7, #12]
 1883 008e 1C46     		mov	r4, r3
 1884 0090 07F11003 		add	r3, r7, #16
 1885 0094 93E80700 		ldmia	r3, {r0, r1, r2}
 1886 0098 84E80700 		stmia	r4, {r0, r1, r2}
 1887              	.L134:
 727:main.c        **** }
 1888              		.loc 1 727 0
 1889 009c F868     		ldr	r0, [r7, #12]
 1890 009e 2037     		adds	r7, r7, #32
 1891              		.cfi_def_cfa_offset 8
 1892 00a0 BD46     		mov	sp, r7
 1893              		.cfi_def_cfa_register 13
 1894              		@ sp needed
 1895 00a2 90BC     		pop	{r4, r7}
 1896              		.cfi_restore 7
 1897              		.cfi_restore 4
 1898              		.cfi_def_cfa_offset 0
 1899 00a4 7047     		bx	lr
 1900              		.cfi_endproc
 1901              	.LFE77:
 1902              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 1903 00a6 00BF     		.section	.text.SetRobotMovement,"ax",%progbits
 1904              		.align	2
 1905              		.global	SetRobotMovement
 1906              		.thumb
 1907              		.thumb_func
 1908              		.type	SetRobotMovement, %function
 1909              	SetRobotMovement:
 1910              	.LFB78:
 728:main.c        **** 
 729:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 730:main.c        **** void SetRobotMovement() {
 1911              		.loc 1 730 0
 1912              		.cfi_startproc
 1913              		@ args = 0, pretend = 0, frame = 16
 1914              		@ frame_needed = 1, uses_anonymous_args = 0
 1915 0000 90B5     		push	{r4, r7, lr}
 1916              		.cfi_def_cfa_offset 12
 1917              		.cfi_offset 4, -12
 1918              		.cfi_offset 7, -8
 1919              		.cfi_offset 14, -4
 1920 0002 85B0     		sub	sp, sp, #20
 1921              		.cfi_def_cfa_offset 32
 1922 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 48


 1923              		.cfi_def_cfa_register 7
 731:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 1924              		.loc 1 731 0
 1925 0006 294B     		ldr	r3, .L155
 1926 0008 1968     		ldr	r1, [r3]
 1927 000a 294B     		ldr	r3, .L155+4
 1928 000c 1A68     		ldr	r2, [r3]
 1929 000e 294B     		ldr	r3, .L155+8
 1930 0010 1B68     		ldr	r3, [r3]
 1931 0012 294C     		ldr	r4, .L155+12
 1932 0014 3846     		mov	r0, r7
 1933 0016 FFF7FEFF 		bl	GetInstructionAtIndex
 1934 001a 3B46     		mov	r3, r7
 1935 001c 93E80700 		ldmia	r3, {r0, r1, r2}
 1936 0020 84E80700 		stmia	r4, {r0, r1, r2}
 732:main.c        ****     previousDirection = currentDirection;
 1937              		.loc 1 732 0
 1938 0024 254B     		ldr	r3, .L155+16
 1939 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1940 0028 254B     		ldr	r3, .L155+20
 1941 002a 1A70     		strb	r2, [r3]
 733:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 1942              		.loc 1 733 0
 1943 002c FFF7FEFF 		bl	GetMovementAccordingToInstruction
 1944 0030 0346     		mov	r3, r0
 1945 0032 1A46     		mov	r2, r3
 1946 0034 214B     		ldr	r3, .L155+16
 1947 0036 1A70     		strb	r2, [r3]
 734:main.c        ****     // move robot depending on sensors
 735:main.c        ****     switch (currentDirection) {
 1948              		.loc 1 735 0
 1949 0038 204B     		ldr	r3, .L155+16
 1950 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1951 003c 092B     		cmp	r3, #9
 1952 003e 30D8     		bhi	.L153
 1953 0040 01A2     		adr	r2, .L143
 1954 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1955 0046 00BF     		.p2align 2
 1956              	.L143:
 1957 0048 71000000 		.word	.L142+1
 1958 004c 77000000 		.word	.L144+1
 1959 0050 7D000000 		.word	.L145+1
 1960 0054 89000000 		.word	.L146+1
 1961 0058 83000000 		.word	.L147+1
 1962 005c 8F000000 		.word	.L148+1
 1963 0060 A1000000 		.word	.L154+1
 1964 0064 A1000000 		.word	.L154+1
 1965 0068 95000000 		.word	.L151+1
 1966 006c 9B000000 		.word	.L152+1
 1967              		.p2align 1
 1968              	.L142:
 736:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 737:main.c        ****         case Forward:
 738:main.c        ****             moveForward();
 1969              		.loc 1 738 0
 1970 0070 FFF7FEFF 		bl	moveForward
 739:main.c        ****             break;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 49


 1971              		.loc 1 739 0
 1972 0074 15E0     		b	.L141
 1973              	.L144:
 740:main.c        ****         case TurnRight:
 741:main.c        ****             turnRight();
 1974              		.loc 1 741 0
 1975 0076 FFF7FEFF 		bl	turnRight
 742:main.c        ****             break;
 1976              		.loc 1 742 0
 1977 007a 12E0     		b	.L141
 1978              	.L145:
 743:main.c        ****         case TurnLeft:
 744:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1979              		.loc 1 744 0
 1980 007c FFF7FEFF 		bl	turnLeft
 745:main.c        ****             break;
 1981              		.loc 1 745 0
 1982 0080 0FE0     		b	.L141
 1983              	.L147:
 746:main.c        ****         case AdjustToTheRight:
 747:main.c        ****             adjustRight();
 1984              		.loc 1 747 0
 1985 0082 FFF7FEFF 		bl	adjustRight
 748:main.c        ****             break;
 1986              		.loc 1 748 0
 1987 0086 0CE0     		b	.L141
 1988              	.L146:
 749:main.c        ****         case AdjustToTheLeft:
 750:main.c        ****             adjustLeft();
 1989              		.loc 1 750 0
 1990 0088 FFF7FEFF 		bl	adjustLeft
 751:main.c        ****             break;
 1991              		.loc 1 751 0
 1992 008c 09E0     		b	.L141
 1993              	.L148:
 752:main.c        ****         case Stop:
 753:main.c        ****             stopMoving();
 1994              		.loc 1 753 0
 1995 008e FFF7FEFF 		bl	stopMoving
 754:main.c        ****             break;
 1996              		.loc 1 754 0
 1997 0092 06E0     		b	.L141
 1998              	.L151:
 755:main.c        ****         case ForwardAfterTurn:
 756:main.c        ****             moveForward();
 1999              		.loc 1 756 0
 2000 0094 FFF7FEFF 		bl	moveForward
 757:main.c        ****             break;
 2001              		.loc 1 757 0
 2002 0098 03E0     		b	.L141
 2003              	.L152:
 758:main.c        ****         case Backward:
 759:main.c        ****             moveBackward();
 2004              		.loc 1 759 0
 2005 009a FFF7FEFF 		bl	moveBackward
 760:main.c        ****             break;
 2006              		.loc 1 760 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 50


 2007 009e 00E0     		b	.L141
 2008              	.L154:
 761:main.c        ****         case waitForTurn:
 762:main.c        ****             break;
 763:main.c        ****         /*case waitForLeftTurn:
 764:main.c        ****             moveForward();
 765:main.c        ****             break;
 766:main.c        ****         case waitForRightTurn:
 767:main.c        ****             moveForward();
 768:main.c        ****             break;*/
 769:main.c        ****         case Unknown:
 770:main.c        ****             // UNKNOWN CONFIGURATION
 771:main.c        ****             break;  
 2009              		.loc 1 771 0
 2010 00a0 00BF     		nop
 2011              	.L141:
 2012              	.L153:
 772:main.c        ****     }
 773:main.c        **** }...
 2013              		.loc 1 773 0
 2014 00a2 00BF     		nop
 2015 00a4 1437     		adds	r7, r7, #20
 2016              		.cfi_def_cfa_offset 12
 2017 00a6 BD46     		mov	sp, r7
 2018              		.cfi_def_cfa_register 13
 2019              		@ sp needed
 2020 00a8 90BD     		pop	{r4, r7, pc}
 2021              	.L156:
 2022 00aa 00BF     		.align	2
 2023              	.L155:
 2024 00ac 00000000 		.word	numSteps
 2025 00b0 00000000 		.word	instructionList
 2026 00b4 00000000 		.word	instructionIndex
 2027 00b8 00000000 		.word	currentInstruction
 2028 00bc 00000000 		.word	currentDirection
 2029 00c0 00000000 		.word	previousDirection
 2030              		.cfi_endproc
 2031              	.LFE78:
 2032              		.size	SetRobotMovement, .-SetRobotMovement
 2033              		.text
 2034              	.Letext0:
 2035              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2036              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2037              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2038              		.file 5 "vars.h"
 2039              		.file 6 "pathfinding.h"
 2040              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2041              		.file 8 "map.h"
 2042              		.section	.debug_info,"",%progbits
 2043              	.Ldebug_info0:
 2044 0000 AF080000 		.4byte	0x8af
 2045 0004 0400     		.2byte	0x4
 2046 0006 00000000 		.4byte	.Ldebug_abbrev0
 2047 000a 04       		.byte	0x4
 2048 000b 01       		.uleb128 0x1
 2049 000c 82000000 		.4byte	.LASF133
 2050 0010 0C       		.byte	0xc
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 51


 2051 0011 30000000 		.4byte	.LASF134
 2052 0015 11030000 		.4byte	.LASF135
 2053 0019 60000000 		.4byte	.Ldebug_ranges0+0x60
 2054 001d 00000000 		.4byte	0
 2055 0021 00000000 		.4byte	.Ldebug_line0
 2056 0025 02       		.uleb128 0x2
 2057 0026 01       		.byte	0x1
 2058 0027 06       		.byte	0x6
 2059 0028 8C060000 		.4byte	.LASF0
 2060 002c 02       		.uleb128 0x2
 2061 002d 01       		.byte	0x1
 2062 002e 08       		.byte	0x8
 2063 002f F3050000 		.4byte	.LASF1
 2064 0033 02       		.uleb128 0x2
 2065 0034 02       		.byte	0x2
 2066 0035 05       		.byte	0x5
 2067 0036 F7040000 		.4byte	.LASF2
 2068 003a 02       		.uleb128 0x2
 2069 003b 02       		.byte	0x2
 2070 003c 07       		.byte	0x7
 2071 003d A3060000 		.4byte	.LASF3
 2072 0041 03       		.uleb128 0x3
 2073 0042 55000000 		.4byte	.LASF12
 2074 0046 02       		.byte	0x2
 2075 0047 3F       		.byte	0x3f
 2076 0048 4C000000 		.4byte	0x4c
 2077 004c 02       		.uleb128 0x2
 2078 004d 04       		.byte	0x4
 2079 004e 05       		.byte	0x5
 2080 004f 19050000 		.4byte	.LASF4
 2081 0053 02       		.uleb128 0x2
 2082 0054 04       		.byte	0x4
 2083 0055 07       		.byte	0x7
 2084 0056 AF050000 		.4byte	.LASF5
 2085 005a 02       		.uleb128 0x2
 2086 005b 08       		.byte	0x8
 2087 005c 05       		.byte	0x5
 2088 005d EB030000 		.4byte	.LASF6
 2089 0061 02       		.uleb128 0x2
 2090 0062 08       		.byte	0x8
 2091 0063 07       		.byte	0x7
 2092 0064 3F020000 		.4byte	.LASF7
 2093 0068 04       		.uleb128 0x4
 2094 0069 04       		.byte	0x4
 2095 006a 05       		.byte	0x5
 2096 006b 696E7400 		.ascii	"int\000"
 2097 006f 02       		.uleb128 0x2
 2098 0070 04       		.byte	0x4
 2099 0071 07       		.byte	0x7
 2100 0072 48000000 		.4byte	.LASF8
 2101 0076 02       		.uleb128 0x2
 2102 0077 08       		.byte	0x8
 2103 0078 04       		.byte	0x4
 2104 0079 BB040000 		.4byte	.LASF9
 2105 007d 02       		.uleb128 0x2
 2106 007e 04       		.byte	0x4
 2107 007f 07       		.byte	0x7
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 52


 2108 0080 A6050000 		.4byte	.LASF10
 2109 0084 02       		.uleb128 0x2
 2110 0085 01       		.byte	0x1
 2111 0086 08       		.byte	0x8
 2112 0087 0C030000 		.4byte	.LASF11
 2113 008b 03       		.uleb128 0x3
 2114 008c CC050000 		.4byte	.LASF13
 2115 0090 03       		.byte	0x3
 2116 0091 2C       		.byte	0x2c
 2117 0092 41000000 		.4byte	0x41
 2118 0096 05       		.uleb128 0x5
 2119 0097 F9060000 		.4byte	.LASF14
 2120 009b 04       		.byte	0x4
 2121 009c E701     		.2byte	0x1e7
 2122 009e 2C000000 		.4byte	0x2c
 2123 00a2 05       		.uleb128 0x5
 2124 00a3 8C030000 		.4byte	.LASF15
 2125 00a7 04       		.byte	0x4
 2126 00a8 E801     		.2byte	0x1e8
 2127 00aa 3A000000 		.4byte	0x3a
 2128 00ae 05       		.uleb128 0x5
 2129 00af 6B040000 		.4byte	.LASF16
 2130 00b3 04       		.byte	0x4
 2131 00b4 E901     		.2byte	0x1e9
 2132 00b6 53000000 		.4byte	0x53
 2133 00ba 05       		.uleb128 0x5
 2134 00bb 93030000 		.4byte	.LASF17
 2135 00bf 04       		.byte	0x4
 2136 00c0 EA01     		.2byte	0x1ea
 2137 00c2 25000000 		.4byte	0x25
 2138 00c6 05       		.uleb128 0x5
 2139 00c7 5F000000 		.4byte	.LASF18
 2140 00cb 04       		.byte	0x4
 2141 00cc EB01     		.2byte	0x1eb
 2142 00ce 33000000 		.4byte	0x33
 2143 00d2 02       		.uleb128 0x2
 2144 00d3 04       		.byte	0x4
 2145 00d4 04       		.byte	0x4
 2146 00d5 07020000 		.4byte	.LASF19
 2147 00d9 02       		.uleb128 0x2
 2148 00da 08       		.byte	0x8
 2149 00db 04       		.byte	0x4
 2150 00dc FF060000 		.4byte	.LASF20
 2151 00e0 06       		.uleb128 0x6
 2152 00e1 8D040000 		.4byte	.LASF45
 2153 00e5 20       		.byte	0x20
 2154 00e6 05       		.byte	0x5
 2155 00e7 28       		.byte	0x28
 2156 00e8 B9010000 		.4byte	0x1b9
 2157 00ec 07       		.uleb128 0x7
 2158 00ed 97040000 		.4byte	.LASF21
 2159 00f1 05       		.byte	0x5
 2160 00f2 2A       		.byte	0x2a
 2161 00f3 BA000000 		.4byte	0xba
 2162 00f7 00       		.byte	0
 2163 00f8 07       		.uleb128 0x7
 2164 00f9 39020000 		.4byte	.LASF22
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 53


 2165 00fd 05       		.byte	0x5
 2166 00fe 2B       		.byte	0x2b
 2167 00ff 96000000 		.4byte	0x96
 2168 0103 01       		.byte	0x1
 2169 0104 07       		.uleb128 0x7
 2170 0105 D4050000 		.4byte	.LASF23
 2171 0109 05       		.byte	0x5
 2172 010a 2C       		.byte	0x2c
 2173 010b C6000000 		.4byte	0xc6
 2174 010f 02       		.byte	0x2
 2175 0110 07       		.uleb128 0x7
 2176 0111 F6020000 		.4byte	.LASF24
 2177 0115 05       		.byte	0x5
 2178 0116 2D       		.byte	0x2d
 2179 0117 C6000000 		.4byte	0xc6
 2180 011b 04       		.byte	0x4
 2181 011c 07       		.uleb128 0x7
 2182 011d B6060000 		.4byte	.LASF25
 2183 0121 05       		.byte	0x5
 2184 0122 2E       		.byte	0x2e
 2185 0123 C6000000 		.4byte	0xc6
 2186 0127 06       		.byte	0x6
 2187 0128 07       		.uleb128 0x7
 2188 0129 20070000 		.4byte	.LASF26
 2189 012d 05       		.byte	0x5
 2190 012e 2F       		.byte	0x2f
 2191 012f C6000000 		.4byte	0xc6
 2192 0133 08       		.byte	0x8
 2193 0134 07       		.uleb128 0x7
 2194 0135 3F040000 		.4byte	.LASF27
 2195 0139 05       		.byte	0x5
 2196 013a 30       		.byte	0x30
 2197 013b C6000000 		.4byte	0xc6
 2198 013f 0A       		.byte	0xa
 2199 0140 07       		.uleb128 0x7
 2200 0141 62030000 		.4byte	.LASF28
 2201 0145 05       		.byte	0x5
 2202 0146 31       		.byte	0x31
 2203 0147 C6000000 		.4byte	0xc6
 2204 014b 0C       		.byte	0xc
 2205 014c 07       		.uleb128 0x7
 2206 014d 9C040000 		.4byte	.LASF29
 2207 0151 05       		.byte	0x5
 2208 0152 32       		.byte	0x32
 2209 0153 C6000000 		.4byte	0xc6
 2210 0157 0E       		.byte	0xe
 2211 0158 07       		.uleb128 0x7
 2212 0159 F9030000 		.4byte	.LASF30
 2213 015d 05       		.byte	0x5
 2214 015e 33       		.byte	0x33
 2215 015f C6000000 		.4byte	0xc6
 2216 0163 10       		.byte	0x10
 2217 0164 07       		.uleb128 0x7
 2218 0165 8D050000 		.4byte	.LASF31
 2219 0169 05       		.byte	0x5
 2220 016a 34       		.byte	0x34
 2221 016b C6000000 		.4byte	0xc6
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 54


 2222 016f 12       		.byte	0x12
 2223 0170 07       		.uleb128 0x7
 2224 0171 40070000 		.4byte	.LASF32
 2225 0175 05       		.byte	0x5
 2226 0176 35       		.byte	0x35
 2227 0177 C6000000 		.4byte	0xc6
 2228 017b 14       		.byte	0x14
 2229 017c 07       		.uleb128 0x7
 2230 017d A3030000 		.4byte	.LASF33
 2231 0181 05       		.byte	0x5
 2232 0182 36       		.byte	0x36
 2233 0183 C6000000 		.4byte	0xc6
 2234 0187 16       		.byte	0x16
 2235 0188 07       		.uleb128 0x7
 2236 0189 2A010000 		.4byte	.LASF34
 2237 018d 05       		.byte	0x5
 2238 018e 37       		.byte	0x37
 2239 018f C6000000 		.4byte	0xc6
 2240 0193 18       		.byte	0x18
 2241 0194 07       		.uleb128 0x7
 2242 0195 53050000 		.4byte	.LASF35
 2243 0199 05       		.byte	0x5
 2244 019a 38       		.byte	0x38
 2245 019b C6000000 		.4byte	0xc6
 2246 019f 1A       		.byte	0x1a
 2247 01a0 07       		.uleb128 0x7
 2248 01a1 36040000 		.4byte	.LASF36
 2249 01a5 05       		.byte	0x5
 2250 01a6 39       		.byte	0x39
 2251 01a7 C6000000 		.4byte	0xc6
 2252 01ab 1C       		.byte	0x1c
 2253 01ac 07       		.uleb128 0x7
 2254 01ad E2010000 		.4byte	.LASF37
 2255 01b1 05       		.byte	0x5
 2256 01b2 3A       		.byte	0x3a
 2257 01b3 C6000000 		.4byte	0xc6
 2258 01b7 1E       		.byte	0x1e
 2259 01b8 00       		.byte	0
 2260 01b9 08       		.uleb128 0x8
 2261 01ba 1B000000 		.4byte	.LASF50
 2262 01be 01       		.byte	0x1
 2263 01bf 2C000000 		.4byte	0x2c
 2264 01c3 06       		.byte	0x6
 2265 01c4 0D       		.byte	0xd
 2266 01c5 F4010000 		.4byte	0x1f4
 2267 01c9 09       		.uleb128 0x9
 2268 01ca 76060000 		.4byte	.LASF38
 2269 01ce 00       		.byte	0
 2270 01cf 09       		.uleb128 0x9
 2271 01d0 DB030000 		.4byte	.LASF39
 2272 01d4 01       		.byte	0x1
 2273 01d5 09       		.uleb128 0x9
 2274 01d6 72040000 		.4byte	.LASF40
 2275 01da 02       		.byte	0x2
 2276 01db 09       		.uleb128 0x9
 2277 01dc 24040000 		.4byte	.LASF41
 2278 01e0 03       		.byte	0x3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 55


 2279 01e1 09       		.uleb128 0x9
 2280 01e2 96020000 		.4byte	.LASF42
 2281 01e6 04       		.byte	0x4
 2282 01e7 09       		.uleb128 0x9
 2283 01e8 DD020000 		.4byte	.LASF43
 2284 01ec 05       		.byte	0x5
 2285 01ed 09       		.uleb128 0x9
 2286 01ee 63060000 		.4byte	.LASF44
 2287 01f2 06       		.byte	0x6
 2288 01f3 00       		.byte	0
 2289 01f4 06       		.uleb128 0x6
 2290 01f5 56020000 		.4byte	.LASF46
 2291 01f9 0C       		.byte	0xc
 2292 01fa 06       		.byte	0x6
 2293 01fb 0E       		.byte	0xe
 2294 01fc 25020000 		.4byte	0x225
 2295 0200 07       		.uleb128 0x7
 2296 0201 00000000 		.4byte	.LASF47
 2297 0205 06       		.byte	0x6
 2298 0206 0F       		.byte	0xf
 2299 0207 B9010000 		.4byte	0x1b9
 2300 020b 00       		.byte	0
 2301 020c 07       		.uleb128 0x7
 2302 020d 49070000 		.4byte	.LASF48
 2303 0211 06       		.byte	0x6
 2304 0212 10       		.byte	0x10
 2305 0213 68000000 		.4byte	0x68
 2306 0217 04       		.byte	0x4
 2307 0218 07       		.uleb128 0x7
 2308 0219 51070000 		.4byte	.LASF49
 2309 021d 06       		.byte	0x6
 2310 021e 11       		.byte	0x11
 2311 021f 68000000 		.4byte	0x68
 2312 0223 08       		.byte	0x8
 2313 0224 00       		.byte	0
 2314 0225 03       		.uleb128 0x3
 2315 0226 56020000 		.4byte	.LASF46
 2316 022a 06       		.byte	0x6
 2317 022b 12       		.byte	0x12
 2318 022c F4010000 		.4byte	0x1f4
 2319 0230 08       		.uleb128 0x8
 2320 0231 71050000 		.4byte	.LASF51
 2321 0235 01       		.byte	0x1
 2322 0236 2C000000 		.4byte	0x2c
 2323 023a 06       		.byte	0x6
 2324 023b 14       		.byte	0x14
 2325 023c 58020000 		.4byte	0x258
 2326 0240 0A       		.uleb128 0xa
 2327 0241 557000   		.ascii	"Up\000"
 2328 0244 00       		.byte	0
 2329 0245 09       		.uleb128 0x9
 2330 0246 82050000 		.4byte	.LASF52
 2331 024a 01       		.byte	0x1
 2332 024b 09       		.uleb128 0x9
 2333 024c B0030000 		.4byte	.LASF53
 2334 0250 02       		.byte	0x2
 2335 0251 09       		.uleb128 0x9
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 56


 2336 0252 87050000 		.4byte	.LASF54
 2337 0256 03       		.byte	0x3
 2338 0257 00       		.byte	0
 2339 0258 08       		.uleb128 0x8
 2340 0259 E5050000 		.4byte	.LASF55
 2341 025d 01       		.byte	0x1
 2342 025e 2C000000 		.4byte	0x2c
 2343 0262 01       		.byte	0x1
 2344 0263 18       		.byte	0x18
 2345 0264 A5020000 		.4byte	0x2a5
 2346 0268 09       		.uleb128 0x9
 2347 0269 39050000 		.4byte	.LASF56
 2348 026d 00       		.byte	0
 2349 026e 09       		.uleb128 0x9
 2350 026f 83040000 		.4byte	.LASF57
 2351 0273 01       		.byte	0x1
 2352 0274 09       		.uleb128 0x9
 2353 0275 51040000 		.4byte	.LASF58
 2354 0279 02       		.byte	0x2
 2355 027a 09       		.uleb128 0x9
 2356 027b E0060000 		.4byte	.LASF59
 2357 027f 03       		.byte	0x3
 2358 0280 09       		.uleb128 0x9
 2359 0281 20060000 		.4byte	.LASF60
 2360 0285 04       		.byte	0x4
 2361 0286 09       		.uleb128 0x9
 2362 0287 31060000 		.4byte	.LASF61
 2363 028b 05       		.byte	0x5
 2364 028c 09       		.uleb128 0x9
 2365 028d 63040000 		.4byte	.LASF62
 2366 0291 06       		.byte	0x6
 2367 0292 09       		.uleb128 0x9
 2368 0293 EA020000 		.4byte	.LASF63
 2369 0297 07       		.byte	0x7
 2370 0298 09       		.uleb128 0x9
 2371 0299 0A000000 		.4byte	.LASF64
 2372 029d 08       		.byte	0x8
 2373 029e 09       		.uleb128 0x9
 2374 029f F0060000 		.4byte	.LASF65
 2375 02a3 09       		.byte	0x9
 2376 02a4 00       		.byte	0
 2377 02a5 0B       		.uleb128 0xb
 2378 02a6 B5030000 		.4byte	.LASF74
 2379 02aa 01       		.byte	0x1
 2380 02ab 38       		.byte	0x38
 2381 02ac 00000000 		.4byte	.LFB64
 2382 02b0 EC000000 		.4byte	.LFE64-.LFB64
 2383 02b4 01       		.uleb128 0x1
 2384 02b5 9C       		.byte	0x9c
 2385 02b6 D3020000 		.4byte	0x2d3
 2386 02ba 0C       		.uleb128 0xc
 2387 02bb 50000000 		.4byte	.LBB2
 2388 02bf 62000000 		.4byte	.LBE2-.LBB2
 2389 02c3 0D       		.uleb128 0xd
 2390 02c4 2A040000 		.4byte	.LASF72
 2391 02c8 01       		.byte	0x1
 2392 02c9 45       		.byte	0x45
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 57


 2393 02ca D2000000 		.4byte	0xd2
 2394 02ce 02       		.uleb128 0x2
 2395 02cf 91       		.byte	0x91
 2396 02d0 6C       		.sleb128 -20
 2397 02d1 00       		.byte	0
 2398 02d2 00       		.byte	0
 2399 02d3 0E       		.uleb128 0xe
 2400 02d4 0D050000 		.4byte	.LASF66
 2401 02d8 01       		.byte	0x1
 2402 02d9 50       		.byte	0x50
 2403 02da 00000000 		.4byte	.LFB65
 2404 02de 18000000 		.4byte	.LFE65-.LFB65
 2405 02e2 01       		.uleb128 0x1
 2406 02e3 9C       		.byte	0x9c
 2407 02e4 0E       		.uleb128 0xe
 2408 02e5 01050000 		.4byte	.LASF67
 2409 02e9 01       		.byte	0x1
 2410 02ea 56       		.byte	0x56
 2411 02eb 00000000 		.4byte	.LFB66
 2412 02ef 18000000 		.4byte	.LFE66-.LFB66
 2413 02f3 01       		.uleb128 0x1
 2414 02f4 9C       		.byte	0x9c
 2415 02f5 0E       		.uleb128 0xe
 2416 02f6 80060000 		.4byte	.LASF68
 2417 02fa 01       		.byte	0x1
 2418 02fb 5C       		.byte	0x5c
 2419 02fc 00000000 		.4byte	.LFB67
 2420 0300 18000000 		.4byte	.LFE67-.LFB67
 2421 0304 01       		.uleb128 0x1
 2422 0305 9C       		.byte	0x9c
 2423 0306 0E       		.uleb128 0xe
 2424 0307 10010000 		.4byte	.LASF69
 2425 030b 01       		.byte	0x1
 2426 030c 62       		.byte	0x62
 2427 030d 00000000 		.4byte	.LFB68
 2428 0311 18000000 		.4byte	.LFE68-.LFB68
 2429 0315 01       		.uleb128 0x1
 2430 0316 9C       		.byte	0x9c
 2431 0317 0F       		.uleb128 0xf
 2432 0318 7F020000 		.4byte	.LASF70
 2433 031c 01       		.byte	0x1
 2434 031d 68       		.byte	0x68
 2435 031e 00000000 		.4byte	.LFB69
 2436 0322 38000000 		.4byte	.LFE69-.LFB69
 2437 0326 01       		.uleb128 0x1
 2438 0327 9C       		.byte	0x9c
 2439 0328 10       		.uleb128 0x10
 2440 0329 C8060000 		.4byte	.LASF71
 2441 032d 01       		.byte	0x1
 2442 032e 74       		.byte	0x74
 2443 032f 68000000 		.4byte	0x68
 2444 0333 00000000 		.4byte	.LFB70
 2445 0337 C0000000 		.4byte	.LFE70-.LFB70
 2446 033b 01       		.uleb128 0x1
 2447 033c 9C       		.byte	0x9c
 2448 033d 11       		.uleb128 0x11
 2449 033e C4020000 		.4byte	.LASF78
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 58


 2450 0342 01       		.byte	0x1
 2451 0343 A2       		.byte	0xa2
 2452 0344 C6000000 		.4byte	0xc6
 2453 0348 00000000 		.4byte	.LFB71
 2454 034c 54000000 		.4byte	.LFE71-.LFB71
 2455 0350 01       		.uleb128 0x1
 2456 0351 9C       		.byte	0x9c
 2457 0352 81030000 		.4byte	0x381
 2458 0356 12       		.uleb128 0x12
 2459 0357 33020000 		.4byte	.LASF80
 2460 035b 01       		.byte	0x1
 2461 035c A2       		.byte	0xa2
 2462 035d A2000000 		.4byte	0xa2
 2463 0361 02       		.uleb128 0x2
 2464 0362 91       		.byte	0x91
 2465 0363 66       		.sleb128 -26
 2466 0364 13       		.uleb128 0x13
 2467 0365 63707300 		.ascii	"cps\000"
 2468 0369 01       		.byte	0x1
 2469 036a A4       		.byte	0xa4
 2470 036b D2000000 		.4byte	0xd2
 2471 036f 02       		.uleb128 0x2
 2472 0370 91       		.byte	0x91
 2473 0371 6C       		.sleb128 -20
 2474 0372 13       		.uleb128 0x13
 2475 0373 72706D00 		.ascii	"rpm\000"
 2476 0377 01       		.byte	0x1
 2477 0378 A5       		.byte	0xa5
 2478 0379 C6000000 		.4byte	0xc6
 2479 037d 02       		.uleb128 0x2
 2480 037e 91       		.byte	0x91
 2481 037f 6A       		.sleb128 -22
 2482 0380 00       		.byte	0
 2483 0381 14       		.uleb128 0x14
 2484 0382 D1010000 		.4byte	.LASF86
 2485 0386 01       		.byte	0x1
 2486 0387 AD       		.byte	0xad
 2487 0388 00000000 		.4byte	.LFB72
 2488 038c 34000000 		.4byte	.LFE72-.LFB72
 2489 0390 01       		.uleb128 0x1
 2490 0391 9C       		.byte	0x9c
 2491 0392 15       		.uleb128 0x15
 2492 0393 A1010000 		.4byte	.LASF73
 2493 0397 01       		.byte	0x1
 2494 0398 A501     		.2byte	0x1a5
 2495 039a 58020000 		.4byte	0x258
 2496 039e 00000000 		.4byte	.LFB73
 2497 03a2 84000000 		.4byte	.LFE73-.LFB73
 2498 03a6 01       		.uleb128 0x1
 2499 03a7 9C       		.byte	0x9c
 2500 03a8 16       		.uleb128 0x16
 2501 03a9 63010000 		.4byte	.LASF75
 2502 03ad 01       		.byte	0x1
 2503 03ae C701     		.2byte	0x1c7
 2504 03b0 58020000 		.4byte	0x258
 2505 03b4 00000000 		.4byte	.LFB74
 2506 03b8 58020000 		.4byte	.LFE74-.LFB74
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 59


 2507 03bc 01       		.uleb128 0x1
 2508 03bd 9C       		.byte	0x9c
 2509 03be E1030000 		.4byte	0x3e1
 2510 03c2 17       		.uleb128 0x17
 2511 03c3 37000000 		.4byte	.LASF76
 2512 03c7 01       		.byte	0x1
 2513 03c8 C801     		.2byte	0x1c8
 2514 03ca D2000000 		.4byte	0xd2
 2515 03ce 02       		.uleb128 0x2
 2516 03cf 91       		.byte	0x91
 2517 03d0 74       		.sleb128 -12
 2518 03d1 17       		.uleb128 0x17
 2519 03d2 0D020000 		.4byte	.LASF77
 2520 03d6 01       		.byte	0x1
 2521 03d7 D701     		.2byte	0x1d7
 2522 03d9 B9010000 		.4byte	0x1b9
 2523 03dd 02       		.uleb128 0x2
 2524 03de 91       		.byte	0x91
 2525 03df 73       		.sleb128 -13
 2526 03e0 00       		.byte	0
 2527 03e1 18       		.uleb128 0x18
 2528 03e2 06060000 		.4byte	.LASF79
 2529 03e6 01       		.byte	0x1
 2530 03e7 7202     		.2byte	0x272
 2531 03e9 D2000000 		.4byte	0xd2
 2532 03ed 00000000 		.4byte	.LFB75
 2533 03f1 8C020000 		.4byte	.LFE75-.LFB75
 2534 03f5 01       		.uleb128 0x1
 2535 03f6 9C       		.byte	0x9c
 2536 03f7 9F040000 		.4byte	0x49f
 2537 03fb 19       		.uleb128 0x19
 2538 03fc D3020000 		.4byte	.LASF81
 2539 0400 01       		.byte	0x1
 2540 0401 7202     		.2byte	0x272
 2541 0403 D2000000 		.4byte	0xd2
 2542 0407 02       		.uleb128 0x2
 2543 0408 91       		.byte	0x91
 2544 0409 54       		.sleb128 -44
 2545 040a 17       		.uleb128 0x17
 2546 040b 11070000 		.4byte	.LASF82
 2547 040f 01       		.byte	0x1
 2548 0410 7302     		.2byte	0x273
 2549 0412 D2000000 		.4byte	0xd2
 2550 0416 02       		.uleb128 0x2
 2551 0417 91       		.byte	0x91
 2552 0418 58       		.sleb128 -40
 2553 0419 17       		.uleb128 0x17
 2554 041a 59010000 		.4byte	.LASF83
 2555 041e 01       		.byte	0x1
 2556 041f 7602     		.2byte	0x276
 2557 0421 68000000 		.4byte	0x68
 2558 0425 02       		.uleb128 0x2
 2559 0426 91       		.byte	0x91
 2560 0427 60       		.sleb128 -32
 2561 0428 17       		.uleb128 0x17
 2562 0429 EF010000 		.4byte	.LASF84
 2563 042d 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 60


 2564 042e 7702     		.2byte	0x277
 2565 0430 68000000 		.4byte	0x68
 2566 0434 02       		.uleb128 0x2
 2567 0435 91       		.byte	0x91
 2568 0436 5C       		.sleb128 -36
 2569 0437 17       		.uleb128 0x17
 2570 0438 C0030000 		.4byte	.LASF85
 2571 043c 01       		.byte	0x1
 2572 043d 7902     		.2byte	0x279
 2573 043f 68000000 		.4byte	0x68
 2574 0443 02       		.uleb128 0x2
 2575 0444 91       		.byte	0x91
 2576 0445 74       		.sleb128 -12
 2577 0446 1A       		.uleb128 0x1a
 2578 0447 00000000 		.4byte	.Ldebug_ranges0+0
 2579 044b 5D040000 		.4byte	0x45d
 2580 044f 1B       		.uleb128 0x1b
 2581 0450 6900     		.ascii	"i\000"
 2582 0452 01       		.byte	0x1
 2583 0453 8302     		.2byte	0x283
 2584 0455 68000000 		.4byte	0x68
 2585 0459 02       		.uleb128 0x2
 2586 045a 91       		.byte	0x91
 2587 045b 70       		.sleb128 -16
 2588 045c 00       		.byte	0
 2589 045d 1A       		.uleb128 0x1a
 2590 045e 18000000 		.4byte	.Ldebug_ranges0+0x18
 2591 0462 74040000 		.4byte	0x474
 2592 0466 1B       		.uleb128 0x1b
 2593 0467 6900     		.ascii	"i\000"
 2594 0469 01       		.byte	0x1
 2595 046a 9202     		.2byte	0x292
 2596 046c 68000000 		.4byte	0x68
 2597 0470 02       		.uleb128 0x2
 2598 0471 91       		.byte	0x91
 2599 0472 6C       		.sleb128 -20
 2600 0473 00       		.byte	0
 2601 0474 1A       		.uleb128 0x1a
 2602 0475 30000000 		.4byte	.Ldebug_ranges0+0x30
 2603 0479 8B040000 		.4byte	0x48b
 2604 047d 1B       		.uleb128 0x1b
 2605 047e 6900     		.ascii	"i\000"
 2606 0480 01       		.byte	0x1
 2607 0481 A102     		.2byte	0x2a1
 2608 0483 68000000 		.4byte	0x68
 2609 0487 02       		.uleb128 0x2
 2610 0488 91       		.byte	0x91
 2611 0489 68       		.sleb128 -24
 2612 048a 00       		.byte	0
 2613 048b 1C       		.uleb128 0x1c
 2614 048c 48000000 		.4byte	.Ldebug_ranges0+0x48
 2615 0490 1B       		.uleb128 0x1b
 2616 0491 6900     		.ascii	"i\000"
 2617 0493 01       		.byte	0x1
 2618 0494 B102     		.2byte	0x2b1
 2619 0496 68000000 		.4byte	0x68
 2620 049a 02       		.uleb128 0x2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 61


 2621 049b 91       		.byte	0x91
 2622 049c 64       		.sleb128 -28
 2623 049d 00       		.byte	0
 2624 049e 00       		.byte	0
 2625 049f 1D       		.uleb128 0x1d
 2626 04a0 5B050000 		.4byte	.LASF87
 2627 04a4 01       		.byte	0x1
 2628 04a5 C502     		.2byte	0x2c5
 2629 04a7 00000000 		.4byte	.LFB76
 2630 04ab 1C000000 		.4byte	.LFE76-.LFB76
 2631 04af 01       		.uleb128 0x1
 2632 04b0 9C       		.byte	0x9c
 2633 04b1 1E       		.uleb128 0x1e
 2634 04b2 36060000 		.4byte	.LASF88
 2635 04b6 01       		.byte	0x1
 2636 04b7 CA02     		.2byte	0x2ca
 2637 04b9 25020000 		.4byte	0x225
 2638 04bd 00000000 		.4byte	.LFB77
 2639 04c1 A6000000 		.4byte	.LFE77-.LFB77
 2640 04c5 01       		.uleb128 0x1
 2641 04c6 9C       		.byte	0x9c
 2642 04c7 1F050000 		.4byte	0x51f
 2643 04cb 19       		.uleb128 0x19
 2644 04cc 50010000 		.4byte	.LASF89
 2645 04d0 01       		.byte	0x1
 2646 04d1 CA02     		.2byte	0x2ca
 2647 04d3 68000000 		.4byte	0x68
 2648 04d7 02       		.uleb128 0x2
 2649 04d8 91       		.byte	0x91
 2650 04d9 60       		.sleb128 -32
 2651 04da 19       		.uleb128 0x19
 2652 04db 6B030000 		.4byte	.LASF90
 2653 04df 01       		.byte	0x1
 2654 04e0 CA02     		.2byte	0x2ca
 2655 04e2 1F050000 		.4byte	0x51f
 2656 04e6 02       		.uleb128 0x2
 2657 04e7 91       		.byte	0x91
 2658 04e8 5C       		.sleb128 -36
 2659 04e9 19       		.uleb128 0x19
 2660 04ea 7B030000 		.4byte	.LASF91
 2661 04ee 01       		.byte	0x1
 2662 04ef CA02     		.2byte	0x2ca
 2663 04f1 68000000 		.4byte	0x68
 2664 04f5 02       		.uleb128 0x2
 2665 04f6 91       		.byte	0x91
 2666 04f7 58       		.sleb128 -40
 2667 04f8 17       		.uleb128 0x17
 2668 04f9 72000000 		.4byte	.LASF92
 2669 04fd 01       		.byte	0x1
 2670 04fe CB02     		.2byte	0x2cb
 2671 0500 25020000 		.4byte	0x225
 2672 0504 02       		.uleb128 0x2
 2673 0505 91       		.byte	0x91
 2674 0506 68       		.sleb128 -24
 2675 0507 0C       		.uleb128 0xc
 2676 0508 0E000000 		.4byte	.LBB11
 2677 050c 7E000000 		.4byte	.LBE11-.LBB11
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 62


 2678 0510 1B       		.uleb128 0x1b
 2679 0511 6900     		.ascii	"i\000"
 2680 0513 01       		.byte	0x1
 2681 0514 CD02     		.2byte	0x2cd
 2682 0516 68000000 		.4byte	0x68
 2683 051a 02       		.uleb128 0x2
 2684 051b 91       		.byte	0x91
 2685 051c 74       		.sleb128 -12
 2686 051d 00       		.byte	0
 2687 051e 00       		.byte	0
 2688 051f 1F       		.uleb128 0x1f
 2689 0520 04       		.byte	0x4
 2690 0521 25020000 		.4byte	0x225
 2691 0525 20       		.uleb128 0x20
 2692 0526 6E020000 		.4byte	.LASF93
 2693 052a 01       		.byte	0x1
 2694 052b DA02     		.2byte	0x2da
 2695 052d 00000000 		.4byte	.LFB78
 2696 0531 C4000000 		.4byte	.LFE78-.LFB78
 2697 0535 01       		.uleb128 0x1
 2698 0536 9C       		.byte	0x9c
 2699 0537 21       		.uleb128 0x21
 2700 0538 22050000 		.4byte	.LASF94
 2701 053c 07       		.byte	0x7
 2702 053d 1207     		.2byte	0x712
 2703 053f 43050000 		.4byte	0x543
 2704 0543 22       		.uleb128 0x22
 2705 0544 8B000000 		.4byte	0x8b
 2706 0548 23       		.uleb128 0x23
 2707 0549 747300   		.ascii	"ts\000"
 2708 054c 05       		.byte	0x5
 2709 054d 10       		.byte	0x10
 2710 054e 96000000 		.4byte	0x96
 2711 0552 05       		.uleb128 0x5
 2712 0553 03       		.byte	0x3
 2713 0554 00000000 		.4byte	ts
 2714 0558 24       		.uleb128 0x24
 2715 0559 4C060000 		.4byte	.LASF95
 2716 055d 05       		.byte	0x5
 2717 055e 11       		.byte	0x11
 2718 055f A2000000 		.4byte	0xa2
 2719 0563 05       		.uleb128 0x5
 2720 0564 03       		.byte	0x3
 2721 0565 00000000 		.4byte	ts_enc
 2722 0569 24       		.uleb128 0x24
 2723 056a 2F050000 		.4byte	.LASF96
 2724 056e 05       		.byte	0x5
 2725 056f 12       		.byte	0x12
 2726 0570 A2000000 		.4byte	0xa2
 2727 0574 05       		.uleb128 0x5
 2728 0575 03       		.byte	0x3
 2729 0576 00000000 		.4byte	ts_update
 2730 057a 24       		.uleb128 0x24
 2731 057b 5A040000 		.4byte	.LASF97
 2732 057f 05       		.byte	0x5
 2733 0580 13       		.byte	0x13
 2734 0581 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 63


 2735 0585 05       		.uleb128 0x5
 2736 0586 03       		.byte	0x3
 2737 0587 00000000 		.4byte	ts_speed
 2738 058b 24       		.uleb128 0x24
 2739 058c 01030000 		.4byte	.LASF98
 2740 0590 05       		.byte	0x5
 2741 0591 14       		.byte	0x14
 2742 0592 A2000000 		.4byte	0xa2
 2743 0596 05       		.uleb128 0x5
 2744 0597 03       		.byte	0x3
 2745 0598 00000000 		.4byte	ts_display
 2746 059c 24       		.uleb128 0x24
 2747 059d B8020000 		.4byte	.LASF99
 2748 05a1 05       		.byte	0x5
 2749 05a2 16       		.byte	0x16
 2750 05a3 96000000 		.4byte	0x96
 2751 05a7 05       		.uleb128 0x5
 2752 05a8 03       		.byte	0x3
 2753 05a9 00000000 		.4byte	flag_ts_enc
 2754 05ad 24       		.uleb128 0x24
 2755 05ae A9020000 		.4byte	.LASF100
 2756 05b2 05       		.byte	0x5
 2757 05b3 17       		.byte	0x17
 2758 05b4 96000000 		.4byte	0x96
 2759 05b8 05       		.uleb128 0x5
 2760 05b9 03       		.byte	0x3
 2761 05ba 00000000 		.4byte	flag_ts_update
 2762 05be 24       		.uleb128 0x24
 2763 05bf C7040000 		.4byte	.LASF101
 2764 05c3 05       		.byte	0x5
 2765 05c4 18       		.byte	0x18
 2766 05c5 96000000 		.4byte	0x96
 2767 05c9 05       		.uleb128 0x5
 2768 05ca 03       		.byte	0x3
 2769 05cb 00000000 		.4byte	flag_ts_speed
 2770 05cf 24       		.uleb128 0x24
 2771 05d0 53060000 		.4byte	.LASF102
 2772 05d4 05       		.byte	0x5
 2773 05d5 19       		.byte	0x19
 2774 05d6 96000000 		.4byte	0x96
 2775 05da 05       		.uleb128 0x5
 2776 05db 03       		.byte	0x3
 2777 05dc 00000000 		.4byte	flag_ts_display
 2778 05e0 24       		.uleb128 0x24
 2779 05e1 E4040000 		.4byte	.LASF103
 2780 05e5 05       		.byte	0x5
 2781 05e6 1B       		.byte	0x1b
 2782 05e7 96000000 		.4byte	0x96
 2783 05eb 05       		.uleb128 0x5
 2784 05ec 03       		.byte	0x3
 2785 05ed 00000000 		.4byte	flag_rx
 2786 05f1 24       		.uleb128 0x24
 2787 05f2 62020000 		.4byte	.LASF104
 2788 05f6 05       		.byte	0x5
 2789 05f7 1C       		.byte	0x1c
 2790 05f8 96000000 		.4byte	0x96
 2791 05fc 05       		.uleb128 0x5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 64


 2792 05fd 03       		.byte	0x3
 2793 05fe 00000000 		.4byte	flag_packet
 2794 0602 24       		.uleb128 0x24
 2795 0603 31070000 		.4byte	.LASF105
 2796 0607 05       		.byte	0x5
 2797 0608 1D       		.byte	0x1d
 2798 0609 96000000 		.4byte	0x96
 2799 060d 05       		.uleb128 0x5
 2800 060e 03       		.byte	0x3
 2801 060f 00000000 		.4byte	flag_KB_string
 2802 0613 24       		.uleb128 0x24
 2803 0614 D5040000 		.4byte	.LASF106
 2804 0618 05       		.byte	0x5
 2805 0619 1F       		.byte	0x1f
 2806 061a 96000000 		.4byte	0x96
 2807 061e 05       		.uleb128 0x5
 2808 061f 03       		.byte	0x3
 2809 0620 00000000 		.4byte	dataready_flag
 2810 0624 24       		.uleb128 0x24
 2811 0625 85010000 		.4byte	.LASF107
 2812 0629 05       		.byte	0x5
 2813 062a 21       		.byte	0x21
 2814 062b 96000000 		.4byte	0x96
 2815 062f 05       		.uleb128 0x5
 2816 0630 03       		.byte	0x3
 2817 0631 00000000 		.4byte	flag_rf_transmission_active
 2818 0635 25       		.uleb128 0x25
 2819 0636 84000000 		.4byte	0x84
 2820 063a 45060000 		.4byte	0x645
 2821 063e 26       		.uleb128 0x26
 2822 063f 7D000000 		.4byte	0x7d
 2823 0643 3F       		.byte	0x3f
 2824 0644 00       		.byte	0
 2825 0645 24       		.uleb128 0x24
 2826 0646 68060000 		.4byte	.LASF108
 2827 064a 05       		.byte	0x5
 2828 064b 24       		.byte	0x24
 2829 064c 35060000 		.4byte	0x635
 2830 0650 05       		.uleb128 0x5
 2831 0651 03       		.byte	0x3
 2832 0652 00000000 		.4byte	displaystring
 2833 0656 24       		.uleb128 0x24
 2834 0657 01060000 		.4byte	.LASF109
 2835 065b 05       		.byte	0x5
 2836 065c 25       		.byte	0x25
 2837 065d 35060000 		.4byte	0x635
 2838 0661 05       		.uleb128 0x5
 2839 0662 03       		.byte	0x3
 2840 0663 00000000 		.4byte	line
 2841 0667 24       		.uleb128 0x24
 2842 0668 DF050000 		.4byte	.LASF110
 2843 066c 05       		.byte	0x5
 2844 066d 25       		.byte	0x25
 2845 066e 35060000 		.4byte	0x635
 2846 0672 05       		.uleb128 0x5
 2847 0673 03       		.byte	0x3
 2848 0674 00000000 		.4byte	entry
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 65


 2849 0678 25       		.uleb128 0x25
 2850 0679 96000000 		.4byte	0x96
 2851 067d 88060000 		.4byte	0x688
 2852 0681 26       		.uleb128 0x26
 2853 0682 7D000000 		.4byte	0x7d
 2854 0686 3F       		.byte	0x3f
 2855 0687 00       		.byte	0
 2856 0688 24       		.uleb128 0x24
 2857 0689 29020000 		.4byte	.LASF111
 2858 068d 05       		.byte	0x5
 2859 068e 26       		.byte	0x26
 2860 068f 78060000 		.4byte	0x678
 2861 0693 05       		.uleb128 0x5
 2862 0694 03       		.byte	0x3
 2863 0695 00000000 		.4byte	usbBuffer
 2864 0699 24       		.uleb128 0x24
 2865 069a 65000000 		.4byte	.LASF112
 2866 069e 05       		.byte	0x5
 2867 069f 3C       		.byte	0x3c
 2868 06a0 E0000000 		.4byte	0xe0
 2869 06a4 05       		.uleb128 0x5
 2870 06a5 03       		.byte	0x3
 2871 06a6 00000000 		.4byte	system_state
 2872 06aa 25       		.uleb128 0x25
 2873 06ab 68000000 		.4byte	0x68
 2874 06af C0060000 		.4byte	0x6c0
 2875 06b3 26       		.uleb128 0x26
 2876 06b4 7D000000 		.4byte	0x7d
 2877 06b8 0E       		.byte	0xe
 2878 06b9 26       		.uleb128 0x26
 2879 06ba 7D000000 		.4byte	0x7d
 2880 06be 12       		.byte	0x12
 2881 06bf 00       		.byte	0
 2882 06c0 27       		.uleb128 0x27
 2883 06c1 6D617000 		.ascii	"map\000"
 2884 06c5 08       		.byte	0x8
 2885 06c6 04       		.byte	0x4
 2886 06c7 AA060000 		.4byte	0x6aa
 2887 06cb 25       		.uleb128 0x25
 2888 06cc 68000000 		.4byte	0x68
 2889 06d0 E1060000 		.4byte	0x6e1
 2890 06d4 26       		.uleb128 0x26
 2891 06d5 7D000000 		.4byte	0x7d
 2892 06d9 04       		.byte	0x4
 2893 06da 26       		.uleb128 0x26
 2894 06db 7D000000 		.4byte	0x7d
 2895 06df 01       		.byte	0x1
 2896 06e0 00       		.byte	0
 2897 06e1 28       		.uleb128 0x28
 2898 06e2 47040000 		.4byte	.LASF113
 2899 06e6 08       		.byte	0x8
 2900 06e7 05       		.byte	0x5
 2901 06e8 CB060000 		.4byte	0x6cb
 2902 06ec 24       		.uleb128 0x24
 2903 06ed 95050000 		.4byte	.LASF114
 2904 06f1 01       		.byte	0x1
 2905 06f2 19       		.byte	0x19
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 66


 2906 06f3 58020000 		.4byte	0x258
 2907 06f7 05       		.uleb128 0x5
 2908 06f8 03       		.byte	0x3
 2909 06f9 00000000 		.4byte	currentDirection
 2910 06fd 24       		.uleb128 0x24
 2911 06fe A9040000 		.4byte	.LASF115
 2912 0702 01       		.byte	0x1
 2913 0703 19       		.byte	0x19
 2914 0704 58020000 		.4byte	0x258
 2915 0708 05       		.uleb128 0x5
 2916 0709 03       		.byte	0x3
 2917 070a 00000000 		.4byte	previousDirection
 2918 070e 24       		.uleb128 0x24
 2919 070f B9010000 		.4byte	.LASF116
 2920 0713 01       		.byte	0x1
 2921 0714 1B       		.byte	0x1b
 2922 0715 30020000 		.4byte	0x230
 2923 0719 05       		.uleb128 0x5
 2924 071a 03       		.byte	0x3
 2925 071b 00000000 		.4byte	currentRobotOrientation
 2926 071f 24       		.uleb128 0x24
 2927 0720 10040000 		.4byte	.LASF117
 2928 0724 01       		.byte	0x1
 2929 0725 1B       		.byte	0x1b
 2930 0726 30020000 		.4byte	0x230
 2931 072a 05       		.uleb128 0x5
 2932 072b 03       		.byte	0x3
 2933 072c 00000000 		.4byte	previousOrientation
 2934 0730 24       		.uleb128 0x24
 2935 0731 CD060000 		.4byte	.LASF118
 2936 0735 01       		.byte	0x1
 2937 0736 1C       		.byte	0x1c
 2938 0737 25020000 		.4byte	0x225
 2939 073b 05       		.uleb128 0x5
 2940 073c 03       		.byte	0x3
 2941 073d 00000000 		.4byte	currentInstruction
 2942 0741 24       		.uleb128 0x24
 2943 0742 50010000 		.4byte	.LASF89
 2944 0746 01       		.byte	0x1
 2945 0747 1D       		.byte	0x1d
 2946 0748 68000000 		.4byte	0x68
 2947 074c 05       		.uleb128 0x5
 2948 074d 03       		.byte	0x3
 2949 074e 00000000 		.4byte	numSteps
 2950 0752 24       		.uleb128 0x24
 2951 0753 6B030000 		.4byte	.LASF90
 2952 0757 01       		.byte	0x1
 2953 0758 1F       		.byte	0x1f
 2954 0759 1F050000 		.4byte	0x51f
 2955 075d 05       		.uleb128 0x5
 2956 075e 03       		.byte	0x3
 2957 075f 00000000 		.4byte	instructionList
 2958 0763 24       		.uleb128 0x24
 2959 0764 7B030000 		.4byte	.LASF91
 2960 0768 01       		.byte	0x1
 2961 0769 20       		.byte	0x20
 2962 076a AE000000 		.4byte	0xae
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 67


 2963 076e 05       		.uleb128 0x5
 2964 076f 03       		.byte	0x3
 2965 0770 00000000 		.4byte	instructionIndex
 2966 0774 23       		.uleb128 0x23
 2967 0775 733300   		.ascii	"s3\000"
 2968 0778 01       		.byte	0x1
 2969 0779 25       		.byte	0x25
 2970 077a 96000000 		.4byte	0x96
 2971 077e 05       		.uleb128 0x5
 2972 077f 03       		.byte	0x3
 2973 0780 00000000 		.4byte	s3
 2974 0784 23       		.uleb128 0x23
 2975 0785 733400   		.ascii	"s4\000"
 2976 0788 01       		.byte	0x1
 2977 0789 25       		.byte	0x25
 2978 078a 96000000 		.4byte	0x96
 2979 078e 05       		.uleb128 0x5
 2980 078f 03       		.byte	0x3
 2981 0790 00000000 		.4byte	s4
 2982 0794 23       		.uleb128 0x23
 2983 0795 733500   		.ascii	"s5\000"
 2984 0798 01       		.byte	0x1
 2985 0799 25       		.byte	0x25
 2986 079a 96000000 		.4byte	0x96
 2987 079e 05       		.uleb128 0x5
 2988 079f 03       		.byte	0x3
 2989 07a0 00000000 		.4byte	s5
 2990 07a4 23       		.uleb128 0x23
 2991 07a5 733600   		.ascii	"s6\000"
 2992 07a8 01       		.byte	0x1
 2993 07a9 25       		.byte	0x25
 2994 07aa 96000000 		.4byte	0x96
 2995 07ae 05       		.uleb128 0x5
 2996 07af 03       		.byte	0x3
 2997 07b0 00000000 		.4byte	s6
 2998 07b4 24       		.uleb128 0x24
 2999 07b5 41050000 		.4byte	.LASF119
 3000 07b9 01       		.byte	0x1
 3001 07ba 2A       		.byte	0x2a
 3002 07bb AE000000 		.4byte	0xae
 3003 07bf 05       		.uleb128 0x5
 3004 07c0 03       		.byte	0x3
 3005 07c1 00000000 		.4byte	totalMilliseconds
 3006 07c5 24       		.uleb128 0x24
 3007 07c6 1C010000 		.4byte	.LASF120
 3008 07ca 01       		.byte	0x1
 3009 07cb 2B       		.byte	0x2b
 3010 07cc D2000000 		.4byte	0xd2
 3011 07d0 05       		.uleb128 0x5
 3012 07d1 03       		.byte	0x3
 3013 07d2 00000000 		.4byte	totalDistance
 3014 07d6 25       		.uleb128 0x25
 3015 07d7 84000000 		.4byte	0x84
 3016 07db E6070000 		.4byte	0x7e6
 3017 07df 26       		.uleb128 0x26
 3018 07e0 7D000000 		.4byte	0x7d
 3019 07e4 44       		.byte	0x44
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 68


 3020 07e5 00       		.byte	0
 3021 07e6 24       		.uleb128 0x24
 3022 07e7 41000000 		.4byte	.LASF121
 3023 07eb 01       		.byte	0x1
 3024 07ec 2D       		.byte	0x2d
 3025 07ed D6070000 		.4byte	0x7d6
 3026 07f1 05       		.uleb128 0x5
 3027 07f2 03       		.byte	0x3
 3028 07f3 00000000 		.4byte	buffer
 3029 07f7 24       		.uleb128 0x24
 3030 07f8 F9010000 		.4byte	.LASF122
 3031 07fc 01       		.byte	0x1
 3032 07fd 2E       		.byte	0x2e
 3033 07fe 68000000 		.4byte	0x68
 3034 0802 05       		.uleb128 0x5
 3035 0803 03       		.byte	0x3
 3036 0804 00000000 		.4byte	quadDec2Count
 3037 0808 24       		.uleb128 0x24
 3038 0809 28070000 		.4byte	.LASF123
 3039 080d 01       		.byte	0x1
 3040 080e 2F       		.byte	0x2f
 3041 080f 68000000 		.4byte	0x68
 3042 0813 05       		.uleb128 0x5
 3043 0814 03       		.byte	0x3
 3044 0815 00000000 		.4byte	timerInt
 3045 0819 24       		.uleb128 0x24
 3046 081a 8C020000 		.4byte	.LASF124
 3047 081e 01       		.byte	0x1
 3048 081f 30       		.byte	0x30
 3049 0820 68000000 		.4byte	0x68
 3050 0824 05       		.uleb128 0x5
 3051 0825 03       		.byte	0x3
 3052 0826 00000000 		.4byte	keepLedOn
 3053 082a 24       		.uleb128 0x24
 3054 082b C1050000 		.4byte	.LASF125
 3055 082f 01       		.byte	0x1
 3056 0830 32       		.byte	0x32
 3057 0831 AE000000 		.4byte	0xae
 3058 0835 05       		.uleb128 0x5
 3059 0836 03       		.byte	0x3
 3060 0837 00000000 		.4byte	stopBuffer
 3061 083b 24       		.uleb128 0x24
 3062 083c CA030000 		.4byte	.LASF126
 3063 0840 01       		.byte	0x1
 3064 0841 33       		.byte	0x33
 3065 0842 96000000 		.4byte	0x96
 3066 0846 05       		.uleb128 0x5
 3067 0847 03       		.byte	0x3
 3068 0848 00000000 		.4byte	turnFinishedFlag
 3069 084c 24       		.uleb128 0x24
 3070 084d 32010000 		.4byte	.LASF127
 3071 0851 01       		.byte	0x1
 3072 0852 34       		.byte	0x34
 3073 0853 96000000 		.4byte	0x96
 3074 0857 05       		.uleb128 0x5
 3075 0858 03       		.byte	0x3
 3076 0859 00000000 		.4byte	forwardUntilTargetStartedFlag
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 69


 3077 085d 24       		.uleb128 0x24
 3078 085e 01040000 		.4byte	.LASF128
 3079 0862 01       		.byte	0x1
 3080 0863 35       		.byte	0x35
 3081 0864 D2000000 		.4byte	0xd2
 3082 0868 05       		.uleb128 0x5
 3083 0869 03       		.byte	0x3
 3084 086a 00000000 		.4byte	blockSizeTotal
 3085 086e 24       		.uleb128 0x24
 3086 086f 98030000 		.4byte	.LASF129
 3087 0873 01       		.byte	0x1
 3088 0874 B4       		.byte	0xb4
 3089 0875 D2000000 		.4byte	0xd2
 3090 0879 05       		.uleb128 0x5
 3091 087a 03       		.byte	0x3
 3092 087b 00000000 		.4byte	xBlocksize
 3093 087f 24       		.uleb128 0x24
 3094 0880 EC040000 		.4byte	.LASF130
 3095 0884 01       		.byte	0x1
 3096 0885 B5       		.byte	0xb5
 3097 0886 D2000000 		.4byte	0xd2
 3098 088a 05       		.uleb128 0x5
 3099 088b 03       		.byte	0x3
 3100 088c 00000000 		.4byte	yBlocksize
 3101 0890 24       		.uleb128 0x24
 3102 0891 98060000 		.4byte	.LASF131
 3103 0895 01       		.byte	0x1
 3104 0896 B6       		.byte	0xb6
 3105 0897 96000000 		.4byte	0x96
 3106 089b 05       		.uleb128 0x5
 3107 089c 03       		.byte	0x3
 3108 089d 00000000 		.4byte	currentRow
 3109 08a1 24       		.uleb128 0x24
 3110 08a2 06070000 		.4byte	.LASF132
 3111 08a6 01       		.byte	0x1
 3112 08a7 B7       		.byte	0xb7
 3113 08a8 96000000 		.4byte	0x96
 3114 08ac 05       		.uleb128 0x5
 3115 08ad 03       		.byte	0x3
 3116 08ae 00000000 		.4byte	currentCol
 3117 08b2 00       		.byte	0
 3118              		.section	.debug_abbrev,"",%progbits
 3119              	.Ldebug_abbrev0:
 3120 0000 01       		.uleb128 0x1
 3121 0001 11       		.uleb128 0x11
 3122 0002 01       		.byte	0x1
 3123 0003 25       		.uleb128 0x25
 3124 0004 0E       		.uleb128 0xe
 3125 0005 13       		.uleb128 0x13
 3126 0006 0B       		.uleb128 0xb
 3127 0007 03       		.uleb128 0x3
 3128 0008 0E       		.uleb128 0xe
 3129 0009 1B       		.uleb128 0x1b
 3130 000a 0E       		.uleb128 0xe
 3131 000b 55       		.uleb128 0x55
 3132 000c 17       		.uleb128 0x17
 3133 000d 11       		.uleb128 0x11
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 70


 3134 000e 01       		.uleb128 0x1
 3135 000f 10       		.uleb128 0x10
 3136 0010 17       		.uleb128 0x17
 3137 0011 00       		.byte	0
 3138 0012 00       		.byte	0
 3139 0013 02       		.uleb128 0x2
 3140 0014 24       		.uleb128 0x24
 3141 0015 00       		.byte	0
 3142 0016 0B       		.uleb128 0xb
 3143 0017 0B       		.uleb128 0xb
 3144 0018 3E       		.uleb128 0x3e
 3145 0019 0B       		.uleb128 0xb
 3146 001a 03       		.uleb128 0x3
 3147 001b 0E       		.uleb128 0xe
 3148 001c 00       		.byte	0
 3149 001d 00       		.byte	0
 3150 001e 03       		.uleb128 0x3
 3151 001f 16       		.uleb128 0x16
 3152 0020 00       		.byte	0
 3153 0021 03       		.uleb128 0x3
 3154 0022 0E       		.uleb128 0xe
 3155 0023 3A       		.uleb128 0x3a
 3156 0024 0B       		.uleb128 0xb
 3157 0025 3B       		.uleb128 0x3b
 3158 0026 0B       		.uleb128 0xb
 3159 0027 49       		.uleb128 0x49
 3160 0028 13       		.uleb128 0x13
 3161 0029 00       		.byte	0
 3162 002a 00       		.byte	0
 3163 002b 04       		.uleb128 0x4
 3164 002c 24       		.uleb128 0x24
 3165 002d 00       		.byte	0
 3166 002e 0B       		.uleb128 0xb
 3167 002f 0B       		.uleb128 0xb
 3168 0030 3E       		.uleb128 0x3e
 3169 0031 0B       		.uleb128 0xb
 3170 0032 03       		.uleb128 0x3
 3171 0033 08       		.uleb128 0x8
 3172 0034 00       		.byte	0
 3173 0035 00       		.byte	0
 3174 0036 05       		.uleb128 0x5
 3175 0037 16       		.uleb128 0x16
 3176 0038 00       		.byte	0
 3177 0039 03       		.uleb128 0x3
 3178 003a 0E       		.uleb128 0xe
 3179 003b 3A       		.uleb128 0x3a
 3180 003c 0B       		.uleb128 0xb
 3181 003d 3B       		.uleb128 0x3b
 3182 003e 05       		.uleb128 0x5
 3183 003f 49       		.uleb128 0x49
 3184 0040 13       		.uleb128 0x13
 3185 0041 00       		.byte	0
 3186 0042 00       		.byte	0
 3187 0043 06       		.uleb128 0x6
 3188 0044 13       		.uleb128 0x13
 3189 0045 01       		.byte	0x1
 3190 0046 03       		.uleb128 0x3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 71


 3191 0047 0E       		.uleb128 0xe
 3192 0048 0B       		.uleb128 0xb
 3193 0049 0B       		.uleb128 0xb
 3194 004a 3A       		.uleb128 0x3a
 3195 004b 0B       		.uleb128 0xb
 3196 004c 3B       		.uleb128 0x3b
 3197 004d 0B       		.uleb128 0xb
 3198 004e 01       		.uleb128 0x1
 3199 004f 13       		.uleb128 0x13
 3200 0050 00       		.byte	0
 3201 0051 00       		.byte	0
 3202 0052 07       		.uleb128 0x7
 3203 0053 0D       		.uleb128 0xd
 3204 0054 00       		.byte	0
 3205 0055 03       		.uleb128 0x3
 3206 0056 0E       		.uleb128 0xe
 3207 0057 3A       		.uleb128 0x3a
 3208 0058 0B       		.uleb128 0xb
 3209 0059 3B       		.uleb128 0x3b
 3210 005a 0B       		.uleb128 0xb
 3211 005b 49       		.uleb128 0x49
 3212 005c 13       		.uleb128 0x13
 3213 005d 38       		.uleb128 0x38
 3214 005e 0B       		.uleb128 0xb
 3215 005f 00       		.byte	0
 3216 0060 00       		.byte	0
 3217 0061 08       		.uleb128 0x8
 3218 0062 04       		.uleb128 0x4
 3219 0063 01       		.byte	0x1
 3220 0064 03       		.uleb128 0x3
 3221 0065 0E       		.uleb128 0xe
 3222 0066 0B       		.uleb128 0xb
 3223 0067 0B       		.uleb128 0xb
 3224 0068 49       		.uleb128 0x49
 3225 0069 13       		.uleb128 0x13
 3226 006a 3A       		.uleb128 0x3a
 3227 006b 0B       		.uleb128 0xb
 3228 006c 3B       		.uleb128 0x3b
 3229 006d 0B       		.uleb128 0xb
 3230 006e 01       		.uleb128 0x1
 3231 006f 13       		.uleb128 0x13
 3232 0070 00       		.byte	0
 3233 0071 00       		.byte	0
 3234 0072 09       		.uleb128 0x9
 3235 0073 28       		.uleb128 0x28
 3236 0074 00       		.byte	0
 3237 0075 03       		.uleb128 0x3
 3238 0076 0E       		.uleb128 0xe
 3239 0077 1C       		.uleb128 0x1c
 3240 0078 0B       		.uleb128 0xb
 3241 0079 00       		.byte	0
 3242 007a 00       		.byte	0
 3243 007b 0A       		.uleb128 0xa
 3244 007c 28       		.uleb128 0x28
 3245 007d 00       		.byte	0
 3246 007e 03       		.uleb128 0x3
 3247 007f 08       		.uleb128 0x8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 72


 3248 0080 1C       		.uleb128 0x1c
 3249 0081 0B       		.uleb128 0xb
 3250 0082 00       		.byte	0
 3251 0083 00       		.byte	0
 3252 0084 0B       		.uleb128 0xb
 3253 0085 2E       		.uleb128 0x2e
 3254 0086 01       		.byte	0x1
 3255 0087 3F       		.uleb128 0x3f
 3256 0088 19       		.uleb128 0x19
 3257 0089 03       		.uleb128 0x3
 3258 008a 0E       		.uleb128 0xe
 3259 008b 3A       		.uleb128 0x3a
 3260 008c 0B       		.uleb128 0xb
 3261 008d 3B       		.uleb128 0x3b
 3262 008e 0B       		.uleb128 0xb
 3263 008f 27       		.uleb128 0x27
 3264 0090 19       		.uleb128 0x19
 3265 0091 11       		.uleb128 0x11
 3266 0092 01       		.uleb128 0x1
 3267 0093 12       		.uleb128 0x12
 3268 0094 06       		.uleb128 0x6
 3269 0095 40       		.uleb128 0x40
 3270 0096 18       		.uleb128 0x18
 3271 0097 9642     		.uleb128 0x2116
 3272 0099 19       		.uleb128 0x19
 3273 009a 01       		.uleb128 0x1
 3274 009b 13       		.uleb128 0x13
 3275 009c 00       		.byte	0
 3276 009d 00       		.byte	0
 3277 009e 0C       		.uleb128 0xc
 3278 009f 0B       		.uleb128 0xb
 3279 00a0 01       		.byte	0x1
 3280 00a1 11       		.uleb128 0x11
 3281 00a2 01       		.uleb128 0x1
 3282 00a3 12       		.uleb128 0x12
 3283 00a4 06       		.uleb128 0x6
 3284 00a5 00       		.byte	0
 3285 00a6 00       		.byte	0
 3286 00a7 0D       		.uleb128 0xd
 3287 00a8 34       		.uleb128 0x34
 3288 00a9 00       		.byte	0
 3289 00aa 03       		.uleb128 0x3
 3290 00ab 0E       		.uleb128 0xe
 3291 00ac 3A       		.uleb128 0x3a
 3292 00ad 0B       		.uleb128 0xb
 3293 00ae 3B       		.uleb128 0x3b
 3294 00af 0B       		.uleb128 0xb
 3295 00b0 49       		.uleb128 0x49
 3296 00b1 13       		.uleb128 0x13
 3297 00b2 02       		.uleb128 0x2
 3298 00b3 18       		.uleb128 0x18
 3299 00b4 00       		.byte	0
 3300 00b5 00       		.byte	0
 3301 00b6 0E       		.uleb128 0xe
 3302 00b7 2E       		.uleb128 0x2e
 3303 00b8 00       		.byte	0
 3304 00b9 3F       		.uleb128 0x3f
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 73


 3305 00ba 19       		.uleb128 0x19
 3306 00bb 03       		.uleb128 0x3
 3307 00bc 0E       		.uleb128 0xe
 3308 00bd 3A       		.uleb128 0x3a
 3309 00be 0B       		.uleb128 0xb
 3310 00bf 3B       		.uleb128 0x3b
 3311 00c0 0B       		.uleb128 0xb
 3312 00c1 27       		.uleb128 0x27
 3313 00c2 19       		.uleb128 0x19
 3314 00c3 11       		.uleb128 0x11
 3315 00c4 01       		.uleb128 0x1
 3316 00c5 12       		.uleb128 0x12
 3317 00c6 06       		.uleb128 0x6
 3318 00c7 40       		.uleb128 0x40
 3319 00c8 18       		.uleb128 0x18
 3320 00c9 9742     		.uleb128 0x2117
 3321 00cb 19       		.uleb128 0x19
 3322 00cc 00       		.byte	0
 3323 00cd 00       		.byte	0
 3324 00ce 0F       		.uleb128 0xf
 3325 00cf 2E       		.uleb128 0x2e
 3326 00d0 00       		.byte	0
 3327 00d1 3F       		.uleb128 0x3f
 3328 00d2 19       		.uleb128 0x19
 3329 00d3 03       		.uleb128 0x3
 3330 00d4 0E       		.uleb128 0xe
 3331 00d5 3A       		.uleb128 0x3a
 3332 00d6 0B       		.uleb128 0xb
 3333 00d7 3B       		.uleb128 0x3b
 3334 00d8 0B       		.uleb128 0xb
 3335 00d9 27       		.uleb128 0x27
 3336 00da 19       		.uleb128 0x19
 3337 00db 11       		.uleb128 0x11
 3338 00dc 01       		.uleb128 0x1
 3339 00dd 12       		.uleb128 0x12
 3340 00de 06       		.uleb128 0x6
 3341 00df 40       		.uleb128 0x40
 3342 00e0 18       		.uleb128 0x18
 3343 00e1 9642     		.uleb128 0x2116
 3344 00e3 19       		.uleb128 0x19
 3345 00e4 00       		.byte	0
 3346 00e5 00       		.byte	0
 3347 00e6 10       		.uleb128 0x10
 3348 00e7 2E       		.uleb128 0x2e
 3349 00e8 00       		.byte	0
 3350 00e9 3F       		.uleb128 0x3f
 3351 00ea 19       		.uleb128 0x19
 3352 00eb 03       		.uleb128 0x3
 3353 00ec 0E       		.uleb128 0xe
 3354 00ed 3A       		.uleb128 0x3a
 3355 00ee 0B       		.uleb128 0xb
 3356 00ef 3B       		.uleb128 0x3b
 3357 00f0 0B       		.uleb128 0xb
 3358 00f1 49       		.uleb128 0x49
 3359 00f2 13       		.uleb128 0x13
 3360 00f3 11       		.uleb128 0x11
 3361 00f4 01       		.uleb128 0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 74


 3362 00f5 12       		.uleb128 0x12
 3363 00f6 06       		.uleb128 0x6
 3364 00f7 40       		.uleb128 0x40
 3365 00f8 18       		.uleb128 0x18
 3366 00f9 9642     		.uleb128 0x2116
 3367 00fb 19       		.uleb128 0x19
 3368 00fc 00       		.byte	0
 3369 00fd 00       		.byte	0
 3370 00fe 11       		.uleb128 0x11
 3371 00ff 2E       		.uleb128 0x2e
 3372 0100 01       		.byte	0x1
 3373 0101 3F       		.uleb128 0x3f
 3374 0102 19       		.uleb128 0x19
 3375 0103 03       		.uleb128 0x3
 3376 0104 0E       		.uleb128 0xe
 3377 0105 3A       		.uleb128 0x3a
 3378 0106 0B       		.uleb128 0xb
 3379 0107 3B       		.uleb128 0x3b
 3380 0108 0B       		.uleb128 0xb
 3381 0109 27       		.uleb128 0x27
 3382 010a 19       		.uleb128 0x19
 3383 010b 49       		.uleb128 0x49
 3384 010c 13       		.uleb128 0x13
 3385 010d 11       		.uleb128 0x11
 3386 010e 01       		.uleb128 0x1
 3387 010f 12       		.uleb128 0x12
 3388 0110 06       		.uleb128 0x6
 3389 0111 40       		.uleb128 0x40
 3390 0112 18       		.uleb128 0x18
 3391 0113 9642     		.uleb128 0x2116
 3392 0115 19       		.uleb128 0x19
 3393 0116 01       		.uleb128 0x1
 3394 0117 13       		.uleb128 0x13
 3395 0118 00       		.byte	0
 3396 0119 00       		.byte	0
 3397 011a 12       		.uleb128 0x12
 3398 011b 05       		.uleb128 0x5
 3399 011c 00       		.byte	0
 3400 011d 03       		.uleb128 0x3
 3401 011e 0E       		.uleb128 0xe
 3402 011f 3A       		.uleb128 0x3a
 3403 0120 0B       		.uleb128 0xb
 3404 0121 3B       		.uleb128 0x3b
 3405 0122 0B       		.uleb128 0xb
 3406 0123 49       		.uleb128 0x49
 3407 0124 13       		.uleb128 0x13
 3408 0125 02       		.uleb128 0x2
 3409 0126 18       		.uleb128 0x18
 3410 0127 00       		.byte	0
 3411 0128 00       		.byte	0
 3412 0129 13       		.uleb128 0x13
 3413 012a 34       		.uleb128 0x34
 3414 012b 00       		.byte	0
 3415 012c 03       		.uleb128 0x3
 3416 012d 08       		.uleb128 0x8
 3417 012e 3A       		.uleb128 0x3a
 3418 012f 0B       		.uleb128 0xb
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 75


 3419 0130 3B       		.uleb128 0x3b
 3420 0131 0B       		.uleb128 0xb
 3421 0132 49       		.uleb128 0x49
 3422 0133 13       		.uleb128 0x13
 3423 0134 02       		.uleb128 0x2
 3424 0135 18       		.uleb128 0x18
 3425 0136 00       		.byte	0
 3426 0137 00       		.byte	0
 3427 0138 14       		.uleb128 0x14
 3428 0139 2E       		.uleb128 0x2e
 3429 013a 00       		.byte	0
 3430 013b 3F       		.uleb128 0x3f
 3431 013c 19       		.uleb128 0x19
 3432 013d 03       		.uleb128 0x3
 3433 013e 0E       		.uleb128 0xe
 3434 013f 3A       		.uleb128 0x3a
 3435 0140 0B       		.uleb128 0xb
 3436 0141 3B       		.uleb128 0x3b
 3437 0142 0B       		.uleb128 0xb
 3438 0143 11       		.uleb128 0x11
 3439 0144 01       		.uleb128 0x1
 3440 0145 12       		.uleb128 0x12
 3441 0146 06       		.uleb128 0x6
 3442 0147 40       		.uleb128 0x40
 3443 0148 18       		.uleb128 0x18
 3444 0149 9742     		.uleb128 0x2117
 3445 014b 19       		.uleb128 0x19
 3446 014c 00       		.byte	0
 3447 014d 00       		.byte	0
 3448 014e 15       		.uleb128 0x15
 3449 014f 2E       		.uleb128 0x2e
 3450 0150 00       		.byte	0
 3451 0151 3F       		.uleb128 0x3f
 3452 0152 19       		.uleb128 0x19
 3453 0153 03       		.uleb128 0x3
 3454 0154 0E       		.uleb128 0xe
 3455 0155 3A       		.uleb128 0x3a
 3456 0156 0B       		.uleb128 0xb
 3457 0157 3B       		.uleb128 0x3b
 3458 0158 05       		.uleb128 0x5
 3459 0159 49       		.uleb128 0x49
 3460 015a 13       		.uleb128 0x13
 3461 015b 11       		.uleb128 0x11
 3462 015c 01       		.uleb128 0x1
 3463 015d 12       		.uleb128 0x12
 3464 015e 06       		.uleb128 0x6
 3465 015f 40       		.uleb128 0x40
 3466 0160 18       		.uleb128 0x18
 3467 0161 9742     		.uleb128 0x2117
 3468 0163 19       		.uleb128 0x19
 3469 0164 00       		.byte	0
 3470 0165 00       		.byte	0
 3471 0166 16       		.uleb128 0x16
 3472 0167 2E       		.uleb128 0x2e
 3473 0168 01       		.byte	0x1
 3474 0169 3F       		.uleb128 0x3f
 3475 016a 19       		.uleb128 0x19
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 76


 3476 016b 03       		.uleb128 0x3
 3477 016c 0E       		.uleb128 0xe
 3478 016d 3A       		.uleb128 0x3a
 3479 016e 0B       		.uleb128 0xb
 3480 016f 3B       		.uleb128 0x3b
 3481 0170 05       		.uleb128 0x5
 3482 0171 49       		.uleb128 0x49
 3483 0172 13       		.uleb128 0x13
 3484 0173 11       		.uleb128 0x11
 3485 0174 01       		.uleb128 0x1
 3486 0175 12       		.uleb128 0x12
 3487 0176 06       		.uleb128 0x6
 3488 0177 40       		.uleb128 0x40
 3489 0178 18       		.uleb128 0x18
 3490 0179 9642     		.uleb128 0x2116
 3491 017b 19       		.uleb128 0x19
 3492 017c 01       		.uleb128 0x1
 3493 017d 13       		.uleb128 0x13
 3494 017e 00       		.byte	0
 3495 017f 00       		.byte	0
 3496 0180 17       		.uleb128 0x17
 3497 0181 34       		.uleb128 0x34
 3498 0182 00       		.byte	0
 3499 0183 03       		.uleb128 0x3
 3500 0184 0E       		.uleb128 0xe
 3501 0185 3A       		.uleb128 0x3a
 3502 0186 0B       		.uleb128 0xb
 3503 0187 3B       		.uleb128 0x3b
 3504 0188 05       		.uleb128 0x5
 3505 0189 49       		.uleb128 0x49
 3506 018a 13       		.uleb128 0x13
 3507 018b 02       		.uleb128 0x2
 3508 018c 18       		.uleb128 0x18
 3509 018d 00       		.byte	0
 3510 018e 00       		.byte	0
 3511 018f 18       		.uleb128 0x18
 3512 0190 2E       		.uleb128 0x2e
 3513 0191 01       		.byte	0x1
 3514 0192 3F       		.uleb128 0x3f
 3515 0193 19       		.uleb128 0x19
 3516 0194 03       		.uleb128 0x3
 3517 0195 0E       		.uleb128 0xe
 3518 0196 3A       		.uleb128 0x3a
 3519 0197 0B       		.uleb128 0xb
 3520 0198 3B       		.uleb128 0x3b
 3521 0199 05       		.uleb128 0x5
 3522 019a 27       		.uleb128 0x27
 3523 019b 19       		.uleb128 0x19
 3524 019c 49       		.uleb128 0x49
 3525 019d 13       		.uleb128 0x13
 3526 019e 11       		.uleb128 0x11
 3527 019f 01       		.uleb128 0x1
 3528 01a0 12       		.uleb128 0x12
 3529 01a1 06       		.uleb128 0x6
 3530 01a2 40       		.uleb128 0x40
 3531 01a3 18       		.uleb128 0x18
 3532 01a4 9642     		.uleb128 0x2116
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 77


 3533 01a6 19       		.uleb128 0x19
 3534 01a7 01       		.uleb128 0x1
 3535 01a8 13       		.uleb128 0x13
 3536 01a9 00       		.byte	0
 3537 01aa 00       		.byte	0
 3538 01ab 19       		.uleb128 0x19
 3539 01ac 05       		.uleb128 0x5
 3540 01ad 00       		.byte	0
 3541 01ae 03       		.uleb128 0x3
 3542 01af 0E       		.uleb128 0xe
 3543 01b0 3A       		.uleb128 0x3a
 3544 01b1 0B       		.uleb128 0xb
 3545 01b2 3B       		.uleb128 0x3b
 3546 01b3 05       		.uleb128 0x5
 3547 01b4 49       		.uleb128 0x49
 3548 01b5 13       		.uleb128 0x13
 3549 01b6 02       		.uleb128 0x2
 3550 01b7 18       		.uleb128 0x18
 3551 01b8 00       		.byte	0
 3552 01b9 00       		.byte	0
 3553 01ba 1A       		.uleb128 0x1a
 3554 01bb 0B       		.uleb128 0xb
 3555 01bc 01       		.byte	0x1
 3556 01bd 55       		.uleb128 0x55
 3557 01be 17       		.uleb128 0x17
 3558 01bf 01       		.uleb128 0x1
 3559 01c0 13       		.uleb128 0x13
 3560 01c1 00       		.byte	0
 3561 01c2 00       		.byte	0
 3562 01c3 1B       		.uleb128 0x1b
 3563 01c4 34       		.uleb128 0x34
 3564 01c5 00       		.byte	0
 3565 01c6 03       		.uleb128 0x3
 3566 01c7 08       		.uleb128 0x8
 3567 01c8 3A       		.uleb128 0x3a
 3568 01c9 0B       		.uleb128 0xb
 3569 01ca 3B       		.uleb128 0x3b
 3570 01cb 05       		.uleb128 0x5
 3571 01cc 49       		.uleb128 0x49
 3572 01cd 13       		.uleb128 0x13
 3573 01ce 02       		.uleb128 0x2
 3574 01cf 18       		.uleb128 0x18
 3575 01d0 00       		.byte	0
 3576 01d1 00       		.byte	0
 3577 01d2 1C       		.uleb128 0x1c
 3578 01d3 0B       		.uleb128 0xb
 3579 01d4 01       		.byte	0x1
 3580 01d5 55       		.uleb128 0x55
 3581 01d6 17       		.uleb128 0x17
 3582 01d7 00       		.byte	0
 3583 01d8 00       		.byte	0
 3584 01d9 1D       		.uleb128 0x1d
 3585 01da 2E       		.uleb128 0x2e
 3586 01db 00       		.byte	0
 3587 01dc 3F       		.uleb128 0x3f
 3588 01dd 19       		.uleb128 0x19
 3589 01de 03       		.uleb128 0x3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 78


 3590 01df 0E       		.uleb128 0xe
 3591 01e0 3A       		.uleb128 0x3a
 3592 01e1 0B       		.uleb128 0xb
 3593 01e2 3B       		.uleb128 0x3b
 3594 01e3 05       		.uleb128 0x5
 3595 01e4 11       		.uleb128 0x11
 3596 01e5 01       		.uleb128 0x1
 3597 01e6 12       		.uleb128 0x12
 3598 01e7 06       		.uleb128 0x6
 3599 01e8 40       		.uleb128 0x40
 3600 01e9 18       		.uleb128 0x18
 3601 01ea 9742     		.uleb128 0x2117
 3602 01ec 19       		.uleb128 0x19
 3603 01ed 00       		.byte	0
 3604 01ee 00       		.byte	0
 3605 01ef 1E       		.uleb128 0x1e
 3606 01f0 2E       		.uleb128 0x2e
 3607 01f1 01       		.byte	0x1
 3608 01f2 3F       		.uleb128 0x3f
 3609 01f3 19       		.uleb128 0x19
 3610 01f4 03       		.uleb128 0x3
 3611 01f5 0E       		.uleb128 0xe
 3612 01f6 3A       		.uleb128 0x3a
 3613 01f7 0B       		.uleb128 0xb
 3614 01f8 3B       		.uleb128 0x3b
 3615 01f9 05       		.uleb128 0x5
 3616 01fa 27       		.uleb128 0x27
 3617 01fb 19       		.uleb128 0x19
 3618 01fc 49       		.uleb128 0x49
 3619 01fd 13       		.uleb128 0x13
 3620 01fe 11       		.uleb128 0x11
 3621 01ff 01       		.uleb128 0x1
 3622 0200 12       		.uleb128 0x12
 3623 0201 06       		.uleb128 0x6
 3624 0202 40       		.uleb128 0x40
 3625 0203 18       		.uleb128 0x18
 3626 0204 9742     		.uleb128 0x2117
 3627 0206 19       		.uleb128 0x19
 3628 0207 01       		.uleb128 0x1
 3629 0208 13       		.uleb128 0x13
 3630 0209 00       		.byte	0
 3631 020a 00       		.byte	0
 3632 020b 1F       		.uleb128 0x1f
 3633 020c 0F       		.uleb128 0xf
 3634 020d 00       		.byte	0
 3635 020e 0B       		.uleb128 0xb
 3636 020f 0B       		.uleb128 0xb
 3637 0210 49       		.uleb128 0x49
 3638 0211 13       		.uleb128 0x13
 3639 0212 00       		.byte	0
 3640 0213 00       		.byte	0
 3641 0214 20       		.uleb128 0x20
 3642 0215 2E       		.uleb128 0x2e
 3643 0216 00       		.byte	0
 3644 0217 3F       		.uleb128 0x3f
 3645 0218 19       		.uleb128 0x19
 3646 0219 03       		.uleb128 0x3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 79


 3647 021a 0E       		.uleb128 0xe
 3648 021b 3A       		.uleb128 0x3a
 3649 021c 0B       		.uleb128 0xb
 3650 021d 3B       		.uleb128 0x3b
 3651 021e 05       		.uleb128 0x5
 3652 021f 11       		.uleb128 0x11
 3653 0220 01       		.uleb128 0x1
 3654 0221 12       		.uleb128 0x12
 3655 0222 06       		.uleb128 0x6
 3656 0223 40       		.uleb128 0x40
 3657 0224 18       		.uleb128 0x18
 3658 0225 9642     		.uleb128 0x2116
 3659 0227 19       		.uleb128 0x19
 3660 0228 00       		.byte	0
 3661 0229 00       		.byte	0
 3662 022a 21       		.uleb128 0x21
 3663 022b 34       		.uleb128 0x34
 3664 022c 00       		.byte	0
 3665 022d 03       		.uleb128 0x3
 3666 022e 0E       		.uleb128 0xe
 3667 022f 3A       		.uleb128 0x3a
 3668 0230 0B       		.uleb128 0xb
 3669 0231 3B       		.uleb128 0x3b
 3670 0232 05       		.uleb128 0x5
 3671 0233 49       		.uleb128 0x49
 3672 0234 13       		.uleb128 0x13
 3673 0235 3F       		.uleb128 0x3f
 3674 0236 19       		.uleb128 0x19
 3675 0237 3C       		.uleb128 0x3c
 3676 0238 19       		.uleb128 0x19
 3677 0239 00       		.byte	0
 3678 023a 00       		.byte	0
 3679 023b 22       		.uleb128 0x22
 3680 023c 35       		.uleb128 0x35
 3681 023d 00       		.byte	0
 3682 023e 49       		.uleb128 0x49
 3683 023f 13       		.uleb128 0x13
 3684 0240 00       		.byte	0
 3685 0241 00       		.byte	0
 3686 0242 23       		.uleb128 0x23
 3687 0243 34       		.uleb128 0x34
 3688 0244 00       		.byte	0
 3689 0245 03       		.uleb128 0x3
 3690 0246 08       		.uleb128 0x8
 3691 0247 3A       		.uleb128 0x3a
 3692 0248 0B       		.uleb128 0xb
 3693 0249 3B       		.uleb128 0x3b
 3694 024a 0B       		.uleb128 0xb
 3695 024b 49       		.uleb128 0x49
 3696 024c 13       		.uleb128 0x13
 3697 024d 3F       		.uleb128 0x3f
 3698 024e 19       		.uleb128 0x19
 3699 024f 02       		.uleb128 0x2
 3700 0250 18       		.uleb128 0x18
 3701 0251 00       		.byte	0
 3702 0252 00       		.byte	0
 3703 0253 24       		.uleb128 0x24
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 80


 3704 0254 34       		.uleb128 0x34
 3705 0255 00       		.byte	0
 3706 0256 03       		.uleb128 0x3
 3707 0257 0E       		.uleb128 0xe
 3708 0258 3A       		.uleb128 0x3a
 3709 0259 0B       		.uleb128 0xb
 3710 025a 3B       		.uleb128 0x3b
 3711 025b 0B       		.uleb128 0xb
 3712 025c 49       		.uleb128 0x49
 3713 025d 13       		.uleb128 0x13
 3714 025e 3F       		.uleb128 0x3f
 3715 025f 19       		.uleb128 0x19
 3716 0260 02       		.uleb128 0x2
 3717 0261 18       		.uleb128 0x18
 3718 0262 00       		.byte	0
 3719 0263 00       		.byte	0
 3720 0264 25       		.uleb128 0x25
 3721 0265 01       		.uleb128 0x1
 3722 0266 01       		.byte	0x1
 3723 0267 49       		.uleb128 0x49
 3724 0268 13       		.uleb128 0x13
 3725 0269 01       		.uleb128 0x1
 3726 026a 13       		.uleb128 0x13
 3727 026b 00       		.byte	0
 3728 026c 00       		.byte	0
 3729 026d 26       		.uleb128 0x26
 3730 026e 21       		.uleb128 0x21
 3731 026f 00       		.byte	0
 3732 0270 49       		.uleb128 0x49
 3733 0271 13       		.uleb128 0x13
 3734 0272 2F       		.uleb128 0x2f
 3735 0273 0B       		.uleb128 0xb
 3736 0274 00       		.byte	0
 3737 0275 00       		.byte	0
 3738 0276 27       		.uleb128 0x27
 3739 0277 34       		.uleb128 0x34
 3740 0278 00       		.byte	0
 3741 0279 03       		.uleb128 0x3
 3742 027a 08       		.uleb128 0x8
 3743 027b 3A       		.uleb128 0x3a
 3744 027c 0B       		.uleb128 0xb
 3745 027d 3B       		.uleb128 0x3b
 3746 027e 0B       		.uleb128 0xb
 3747 027f 49       		.uleb128 0x49
 3748 0280 13       		.uleb128 0x13
 3749 0281 3F       		.uleb128 0x3f
 3750 0282 19       		.uleb128 0x19
 3751 0283 3C       		.uleb128 0x3c
 3752 0284 19       		.uleb128 0x19
 3753 0285 00       		.byte	0
 3754 0286 00       		.byte	0
 3755 0287 28       		.uleb128 0x28
 3756 0288 34       		.uleb128 0x34
 3757 0289 00       		.byte	0
 3758 028a 03       		.uleb128 0x3
 3759 028b 0E       		.uleb128 0xe
 3760 028c 3A       		.uleb128 0x3a
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 81


 3761 028d 0B       		.uleb128 0xb
 3762 028e 3B       		.uleb128 0x3b
 3763 028f 0B       		.uleb128 0xb
 3764 0290 49       		.uleb128 0x49
 3765 0291 13       		.uleb128 0x13
 3766 0292 3F       		.uleb128 0x3f
 3767 0293 19       		.uleb128 0x19
 3768 0294 3C       		.uleb128 0x3c
 3769 0295 19       		.uleb128 0x19
 3770 0296 00       		.byte	0
 3771 0297 00       		.byte	0
 3772 0298 00       		.byte	0
 3773              		.section	.debug_aranges,"",%progbits
 3774 0000 8C000000 		.4byte	0x8c
 3775 0004 0200     		.2byte	0x2
 3776 0006 00000000 		.4byte	.Ldebug_info0
 3777 000a 04       		.byte	0x4
 3778 000b 00       		.byte	0
 3779 000c 0000     		.2byte	0
 3780 000e 0000     		.2byte	0
 3781 0010 00000000 		.4byte	.LFB64
 3782 0014 EC000000 		.4byte	.LFE64-.LFB64
 3783 0018 00000000 		.4byte	.LFB65
 3784 001c 18000000 		.4byte	.LFE65-.LFB65
 3785 0020 00000000 		.4byte	.LFB66
 3786 0024 18000000 		.4byte	.LFE66-.LFB66
 3787 0028 00000000 		.4byte	.LFB67
 3788 002c 18000000 		.4byte	.LFE67-.LFB67
 3789 0030 00000000 		.4byte	.LFB68
 3790 0034 18000000 		.4byte	.LFE68-.LFB68
 3791 0038 00000000 		.4byte	.LFB69
 3792 003c 38000000 		.4byte	.LFE69-.LFB69
 3793 0040 00000000 		.4byte	.LFB70
 3794 0044 C0000000 		.4byte	.LFE70-.LFB70
 3795 0048 00000000 		.4byte	.LFB71
 3796 004c 54000000 		.4byte	.LFE71-.LFB71
 3797 0050 00000000 		.4byte	.LFB72
 3798 0054 34000000 		.4byte	.LFE72-.LFB72
 3799 0058 00000000 		.4byte	.LFB73
 3800 005c 84000000 		.4byte	.LFE73-.LFB73
 3801 0060 00000000 		.4byte	.LFB74
 3802 0064 58020000 		.4byte	.LFE74-.LFB74
 3803 0068 00000000 		.4byte	.LFB75
 3804 006c 8C020000 		.4byte	.LFE75-.LFB75
 3805 0070 00000000 		.4byte	.LFB76
 3806 0074 1C000000 		.4byte	.LFE76-.LFB76
 3807 0078 00000000 		.4byte	.LFB77
 3808 007c A6000000 		.4byte	.LFE77-.LFB77
 3809 0080 00000000 		.4byte	.LFB78
 3810 0084 C4000000 		.4byte	.LFE78-.LFB78
 3811 0088 00000000 		.4byte	0
 3812 008c 00000000 		.4byte	0
 3813              		.section	.debug_ranges,"",%progbits
 3814              	.Ldebug_ranges0:
 3815 0000 38000000 		.4byte	.LBB3
 3816 0004 BC000000 		.4byte	.LBE3
 3817 0008 BE000000 		.4byte	.LBB4
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 82


 3818 000c C0000000 		.4byte	.LBE4
 3819 0010 00000000 		.4byte	0
 3820 0014 00000000 		.4byte	0
 3821 0018 C2000000 		.4byte	.LBB5
 3822 001c 46010000 		.4byte	.LBE5
 3823 0020 48010000 		.4byte	.LBB6
 3824 0024 4A010000 		.4byte	.LBE6
 3825 0028 00000000 		.4byte	0
 3826 002c 00000000 		.4byte	0
 3827 0030 4C010000 		.4byte	.LBB7
 3828 0034 D0010000 		.4byte	.LBE7
 3829 0038 D2010000 		.4byte	.LBB8
 3830 003c D4010000 		.4byte	.LBE8
 3831 0040 00000000 		.4byte	0
 3832 0044 00000000 		.4byte	0
 3833 0048 D6010000 		.4byte	.LBB9
 3834 004c 5A020000 		.4byte	.LBE9
 3835 0050 5C020000 		.4byte	.LBB10
 3836 0054 5E020000 		.4byte	.LBE10
 3837 0058 00000000 		.4byte	0
 3838 005c 00000000 		.4byte	0
 3839 0060 00000000 		.4byte	.LFB64
 3840 0064 EC000000 		.4byte	.LFE64
 3841 0068 00000000 		.4byte	.LFB65
 3842 006c 18000000 		.4byte	.LFE65
 3843 0070 00000000 		.4byte	.LFB66
 3844 0074 18000000 		.4byte	.LFE66
 3845 0078 00000000 		.4byte	.LFB67
 3846 007c 18000000 		.4byte	.LFE67
 3847 0080 00000000 		.4byte	.LFB68
 3848 0084 18000000 		.4byte	.LFE68
 3849 0088 00000000 		.4byte	.LFB69
 3850 008c 38000000 		.4byte	.LFE69
 3851 0090 00000000 		.4byte	.LFB70
 3852 0094 C0000000 		.4byte	.LFE70
 3853 0098 00000000 		.4byte	.LFB71
 3854 009c 54000000 		.4byte	.LFE71
 3855 00a0 00000000 		.4byte	.LFB72
 3856 00a4 34000000 		.4byte	.LFE72
 3857 00a8 00000000 		.4byte	.LFB73
 3858 00ac 84000000 		.4byte	.LFE73
 3859 00b0 00000000 		.4byte	.LFB74
 3860 00b4 58020000 		.4byte	.LFE74
 3861 00b8 00000000 		.4byte	.LFB75
 3862 00bc 8C020000 		.4byte	.LFE75
 3863 00c0 00000000 		.4byte	.LFB76
 3864 00c4 1C000000 		.4byte	.LFE76
 3865 00c8 00000000 		.4byte	.LFB77
 3866 00cc A6000000 		.4byte	.LFE77
 3867 00d0 00000000 		.4byte	.LFB78
 3868 00d4 C4000000 		.4byte	.LFE78
 3869 00d8 00000000 		.4byte	0
 3870 00dc 00000000 		.4byte	0
 3871              		.section	.debug_line,"",%progbits
 3872              	.Ldebug_line0:
 3873 0000 F9030000 		.section	.debug_str,"MS",%progbits,1
 3873      02007001 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 83


 3873      00000201 
 3873      FB0E0D00 
 3873      01010101 
 3874              	.LASF47:
 3875 0000 64697265 		.ascii	"direction\000"
 3875      6374696F 
 3875      6E00
 3876              	.LASF64:
 3877 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3877      61726441 
 3877      66746572 
 3877      5475726E 
 3877      00
 3878              	.LASF50:
 3879 001b 496E7374 		.ascii	"InstructionDirection\000"
 3879      72756374 
 3879      696F6E44 
 3879      69726563 
 3879      74696F6E 
 3880              	.LASF134:
 3881 0030 6D61696E 		.ascii	"main.c\000"
 3881      2E6300
 3882              	.LASF76:
 3883 0037 626C6F63 		.ascii	"blocksize\000"
 3883      6B73697A 
 3883      6500
 3884              	.LASF121:
 3885 0041 62756666 		.ascii	"buffer\000"
 3885      657200
 3886              	.LASF8:
 3887 0048 756E7369 		.ascii	"unsigned int\000"
 3887      676E6564 
 3887      20696E74 
 3887      00
 3888              	.LASF12:
 3889 0055 5F5F696E 		.ascii	"__int32_t\000"
 3889      7433325F 
 3889      7400
 3890              	.LASF18:
 3891 005f 696E7431 		.ascii	"int16\000"
 3891      3600
 3892              	.LASF112:
 3893 0065 73797374 		.ascii	"system_state\000"
 3893      656D5F73 
 3893      74617465 
 3893      00
 3894              	.LASF92:
 3895 0072 6E657874 		.ascii	"nextInstruction\000"
 3895      496E7374 
 3895      72756374 
 3895      696F6E00 
 3896              	.LASF133:
 3897 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3897      43313120 
 3897      352E342E 
 3897      31203230 
 3897      31363036 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 84


 3898 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3898      20726576 
 3898      6973696F 
 3898      6E203233 
 3898      37373135 
 3899 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3899      66756E63 
 3899      74696F6E 
 3899      2D736563 
 3899      74696F6E 
 3900              	.LASF69:
 3901 0110 53365F44 		.ascii	"S6_DETECTED\000"
 3901      45544543 
 3901      54454400 
 3902              	.LASF120:
 3903 011c 746F7461 		.ascii	"totalDistance\000"
 3903      6C446973 
 3903      74616E63 
 3903      6500
 3904              	.LASF34:
 3905 012a 67325F78 		.ascii	"g2_xpos\000"
 3905      706F7300 
 3906              	.LASF127:
 3907 0132 666F7277 		.ascii	"forwardUntilTargetStartedFlag\000"
 3907      61726455 
 3907      6E74696C 
 3907      54617267 
 3907      65745374 
 3908              	.LASF89:
 3909 0150 6E756D53 		.ascii	"numSteps\000"
 3909      74657073 
 3909      00
 3910              	.LASF83:
 3911 0159 74617267 		.ascii	"targetRow\000"
 3911      6574526F 
 3911      7700
 3912              	.LASF75:
 3913 0163 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 3913      6F76656D 
 3913      656E7441 
 3913      63636F72 
 3913      64696E67 
 3914              	.LASF107:
 3915 0185 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3915      5F72665F 
 3915      7472616E 
 3915      736D6973 
 3915      73696F6E 
 3916              	.LASF73:
 3917 01a1 466F7277 		.ascii	"ForwardCourseCorrection\000"
 3917      61726443 
 3917      6F757273 
 3917      65436F72 
 3917      72656374 
 3918              	.LASF116:
 3919 01b9 63757272 		.ascii	"currentRobotOrientation\000"
 3919      656E7452 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 85


 3919      6F626F74 
 3919      4F726965 
 3919      6E746174 
 3920              	.LASF86:
 3921 01d1 52657365 		.ascii	"ResetSensorFlags\000"
 3921      7453656E 
 3921      736F7246 
 3921      6C616773 
 3921      00
 3922              	.LASF37:
 3923 01e2 67325F64 		.ascii	"g2_direction\000"
 3923      69726563 
 3923      74696F6E 
 3923      00
 3924              	.LASF84:
 3925 01ef 74617267 		.ascii	"targetCol\000"
 3925      6574436F 
 3925      6C00
 3926              	.LASF122:
 3927 01f9 71756164 		.ascii	"quadDec2Count\000"
 3927      44656332 
 3927      436F756E 
 3927      7400
 3928              	.LASF19:
 3929 0207 666C6F61 		.ascii	"float\000"
 3929      7400
 3930              	.LASF77:
 3931 020d 63757272 		.ascii	"currentInstructionDirection\000"
 3931      656E7449 
 3931      6E737472 
 3931      75637469 
 3931      6F6E4469 
 3932              	.LASF111:
 3933 0229 75736242 		.ascii	"usbBuffer\000"
 3933      75666665 
 3933      7200
 3934              	.LASF80:
 3935 0233 636F756E 		.ascii	"count\000"
 3935      7400
 3936              	.LASF22:
 3937 0239 696E6465 		.ascii	"index\000"
 3937      7800
 3938              	.LASF7:
 3939 023f 6C6F6E67 		.ascii	"long long unsigned int\000"
 3939      206C6F6E 
 3939      6720756E 
 3939      7369676E 
 3939      65642069 
 3940              	.LASF46:
 3941 0256 496E7374 		.ascii	"Instruction\000"
 3941      72756374 
 3941      696F6E00 
 3942              	.LASF104:
 3943 0262 666C6167 		.ascii	"flag_packet\000"
 3943      5F706163 
 3943      6B657400 
 3944              	.LASF93:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 86


 3945 026e 53657452 		.ascii	"SetRobotMovement\000"
 3945      6F626F74 
 3945      4D6F7665 
 3945      6D656E74 
 3945      00
 3946              	.LASF70:
 3947 027f 54494D45 		.ascii	"TIMER_FINISH\000"
 3947      525F4649 
 3947      4E495348 
 3947      00
 3948              	.LASF124:
 3949 028c 6B656570 		.ascii	"keepLedOn\000"
 3949      4C65644F 
 3949      6E00
 3950              	.LASF42:
 3951 0296 466F7277 		.ascii	"ForwardUntilTarget\000"
 3951      61726455 
 3951      6E74696C 
 3951      54617267 
 3951      657400
 3952              	.LASF100:
 3953 02a9 666C6167 		.ascii	"flag_ts_update\000"
 3953      5F74735F 
 3953      75706461 
 3953      746500
 3954              	.LASF99:
 3955 02b8 666C6167 		.ascii	"flag_ts_enc\000"
 3955      5F74735F 
 3955      656E6300 
 3956              	.LASF78:
 3957 02c4 71756164 		.ascii	"quadCountToRPM\000"
 3957      436F756E 
 3957      74546F52 
 3957      504D00
 3958              	.LASF81:
 3959 02d3 626C6F63 		.ascii	"blockSize\000"
 3959      6B53697A 
 3959      6500
 3960              	.LASF43:
 3961 02dd 53746F70 		.ascii	"StopAtTarget\000"
 3961      41745461 
 3961      72676574 
 3961      00
 3962              	.LASF63:
 3963 02ea 77616974 		.ascii	"waitForTurn\000"
 3963      466F7254 
 3963      75726E00 
 3964              	.LASF24:
 3965 02f6 726F626F 		.ascii	"robot_ypos\000"
 3965      745F7970 
 3965      6F7300
 3966              	.LASF98:
 3967 0301 74735F64 		.ascii	"ts_display\000"
 3967      6973706C 
 3967      617900
 3968              	.LASF11:
 3969 030c 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 87


 3969      00
 3970              	.LASF135:
 3971 0311 483A5C44 		.ascii	"H:\\Documents\\GitHub\\301-Robot\\psoc student pack"
 3971      6F63756D 
 3971      656E7473 
 3971      5C476974 
 3971      4875625C 
 3972 0340 5C70736F 		.ascii	"\\psoc_code_base\\CS301_Class.cydsn\000"
 3972      635F636F 
 3972      64655F62 
 3972      6173655C 
 3972      43533330 
 3973              	.LASF28:
 3974 0362 67305F73 		.ascii	"g0_speed\000"
 3974      70656564 
 3974      00
 3975              	.LASF90:
 3976 036b 696E7374 		.ascii	"instructionList\000"
 3976      72756374 
 3976      696F6E4C 
 3976      69737400 
 3977              	.LASF91:
 3978 037b 696E7374 		.ascii	"instructionIndex\000"
 3978      72756374 
 3978      696F6E49 
 3978      6E646578 
 3978      00
 3979              	.LASF15:
 3980 038c 75696E74 		.ascii	"uint16\000"
 3980      313600
 3981              	.LASF17:
 3982 0393 696E7438 		.ascii	"int8\000"
 3982      00
 3983              	.LASF129:
 3984 0398 78426C6F 		.ascii	"xBlocksize\000"
 3984      636B7369 
 3984      7A6500
 3985              	.LASF33:
 3986 03a3 67315F64 		.ascii	"g1_direction\000"
 3986      69726563 
 3986      74696F6E 
 3986      00
 3987              	.LASF53:
 3988 03b0 4C656674 		.ascii	"Left\000"
 3988      00
 3989              	.LASF74:
 3990 03b5 73706565 		.ascii	"speedTimer\000"
 3990      6454696D 
 3990      657200
 3991              	.LASF85:
 3992 03c0 70617468 		.ascii	"pathCount\000"
 3992      436F756E 
 3992      7400
 3993              	.LASF126:
 3994 03ca 7475726E 		.ascii	"turnFinishedFlag\000"
 3994      46696E69 
 3994      73686564 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 88


 3994      466C6167 
 3994      00
 3995              	.LASF39:
 3996 03db 77616974 		.ascii	"waitForLeftTurn\000"
 3996      466F724C 
 3996      65667454 
 3996      75726E00 
 3997              	.LASF6:
 3998 03eb 6C6F6E67 		.ascii	"long long int\000"
 3998      206C6F6E 
 3998      6720696E 
 3998      7400
 3999              	.LASF30:
 4000 03f9 67315F78 		.ascii	"g1_xpos\000"
 4000      706F7300 
 4001              	.LASF128:
 4002 0401 626C6F63 		.ascii	"blockSizeTotal\000"
 4002      6B53697A 
 4002      65546F74 
 4002      616C00
 4003              	.LASF117:
 4004 0410 70726576 		.ascii	"previousOrientation\000"
 4004      696F7573 
 4004      4F726965 
 4004      6E746174 
 4004      696F6E00 
 4005              	.LASF41:
 4006 0424 75547572 		.ascii	"uTurn\000"
 4006      6E00
 4007              	.LASF72:
 4008 042a 6E657744 		.ascii	"newDistance\000"
 4008      69737461 
 4008      6E636500 
 4009              	.LASF36:
 4010 0436 67325F73 		.ascii	"g2_speed\000"
 4010      70656564 
 4010      00
 4011              	.LASF27:
 4012 043f 67305F79 		.ascii	"g0_ypos\000"
 4012      706F7300 
 4013              	.LASF113:
 4014 0447 666F6F64 		.ascii	"food_list\000"
 4014      5F6C6973 
 4014      7400
 4015              	.LASF58:
 4016 0451 5475726E 		.ascii	"TurnLeft\000"
 4016      4C656674 
 4016      00
 4017              	.LASF97:
 4018 045a 74735F73 		.ascii	"ts_speed\000"
 4018      70656564 
 4018      00
 4019              	.LASF62:
 4020 0463 556E6B6E 		.ascii	"Unknown\000"
 4020      6F776E00 
 4021              	.LASF16:
 4022 046b 75696E74 		.ascii	"uint32\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 89


 4022      333200
 4023              	.LASF40:
 4024 0472 77616974 		.ascii	"waitForRightTurn\000"
 4024      466F7252 
 4024      69676874 
 4024      5475726E 
 4024      00
 4025              	.LASF57:
 4026 0483 5475726E 		.ascii	"TurnRight\000"
 4026      52696768 
 4026      7400
 4027              	.LASF45:
 4028 048d 64617461 		.ascii	"data_main\000"
 4028      5F6D6169 
 4028      6E00
 4029              	.LASF21:
 4030 0497 72737369 		.ascii	"rssi\000"
 4030      00
 4031              	.LASF29:
 4032 049c 67305F64 		.ascii	"g0_direction\000"
 4032      69726563 
 4032      74696F6E 
 4032      00
 4033              	.LASF115:
 4034 04a9 70726576 		.ascii	"previousDirection\000"
 4034      696F7573 
 4034      44697265 
 4034      6374696F 
 4034      6E00
 4035              	.LASF9:
 4036 04bb 6C6F6E67 		.ascii	"long double\000"
 4036      20646F75 
 4036      626C6500 
 4037              	.LASF101:
 4038 04c7 666C6167 		.ascii	"flag_ts_speed\000"
 4038      5F74735F 
 4038      73706565 
 4038      6400
 4039              	.LASF106:
 4040 04d5 64617461 		.ascii	"dataready_flag\000"
 4040      72656164 
 4040      795F666C 
 4040      616700
 4041              	.LASF103:
 4042 04e4 666C6167 		.ascii	"flag_rx\000"
 4042      5F727800 
 4043              	.LASF130:
 4044 04ec 79426C6F 		.ascii	"yBlocksize\000"
 4044      636B7369 
 4044      7A6500
 4045              	.LASF2:
 4046 04f7 73686F72 		.ascii	"short int\000"
 4046      7420696E 
 4046      7400
 4047              	.LASF67:
 4048 0501 53345F44 		.ascii	"S4_DETECTED\000"
 4048      45544543 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 90


 4048      54454400 
 4049              	.LASF66:
 4050 050d 53335F44 		.ascii	"S3_DETECTED\000"
 4050      45544543 
 4050      54454400 
 4051              	.LASF4:
 4052 0519 6C6F6E67 		.ascii	"long int\000"
 4052      20696E74 
 4052      00
 4053              	.LASF94:
 4054 0522 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4054      52784275 
 4054      66666572 
 4054      00
 4055              	.LASF96:
 4056 052f 74735F75 		.ascii	"ts_update\000"
 4056      70646174 
 4056      6500
 4057              	.LASF56:
 4058 0539 466F7277 		.ascii	"Forward\000"
 4058      61726400 
 4059              	.LASF119:
 4060 0541 746F7461 		.ascii	"totalMilliseconds\000"
 4060      6C4D696C 
 4060      6C697365 
 4060      636F6E64 
 4060      7300
 4061              	.LASF35:
 4062 0553 67325F79 		.ascii	"g2_ypos\000"
 4062      706F7300 
 4063              	.LASF87:
 4064 055b 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 4064      546F4E65 
 4064      7874496E 
 4064      73747275 
 4064      6374696F 
 4065              	.LASF51:
 4066 0571 4F726965 		.ascii	"OrientationState\000"
 4066      6E746174 
 4066      696F6E53 
 4066      74617465 
 4066      00
 4067              	.LASF52:
 4068 0582 446F776E 		.ascii	"Down\000"
 4068      00
 4069              	.LASF54:
 4070 0587 52696768 		.ascii	"Right\000"
 4070      7400
 4071              	.LASF31:
 4072 058d 67315F79 		.ascii	"g1_ypos\000"
 4072      706F7300 
 4073              	.LASF114:
 4074 0595 63757272 		.ascii	"currentDirection\000"
 4074      656E7444 
 4074      69726563 
 4074      74696F6E 
 4074      00
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 91


 4075              	.LASF10:
 4076 05a6 73697A65 		.ascii	"sizetype\000"
 4076      74797065 
 4076      00
 4077              	.LASF5:
 4078 05af 6C6F6E67 		.ascii	"long unsigned int\000"
 4078      20756E73 
 4078      69676E65 
 4078      6420696E 
 4078      7400
 4079              	.LASF125:
 4080 05c1 73746F70 		.ascii	"stopBuffer\000"
 4080      42756666 
 4080      657200
 4081              	.LASF13:
 4082 05cc 696E7433 		.ascii	"int32_t\000"
 4082      325F7400 
 4083              	.LASF23:
 4084 05d4 726F626F 		.ascii	"robot_xpos\000"
 4084      745F7870 
 4084      6F7300
 4085              	.LASF110:
 4086 05df 656E7472 		.ascii	"entry\000"
 4086      7900
 4087              	.LASF55:
 4088 05e5 526F626F 		.ascii	"RobotMovement\000"
 4088      744D6F76 
 4088      656D656E 
 4088      7400
 4089              	.LASF1:
 4090 05f3 756E7369 		.ascii	"unsigned char\000"
 4090      676E6564 
 4090      20636861 
 4090      7200
 4091              	.LASF109:
 4092 0601 6C696E65 		.ascii	"line\000"
 4092      00
 4093              	.LASF79:
 4094 0606 43616C63 		.ascii	"CalculateDistanceToTravel\000"
 4094      756C6174 
 4094      65446973 
 4094      74616E63 
 4094      65546F54 
 4095              	.LASF60:
 4096 0620 41646A75 		.ascii	"AdjustToTheRight\000"
 4096      7374546F 
 4096      54686552 
 4096      69676874 
 4096      00
 4097              	.LASF61:
 4098 0631 53746F70 		.ascii	"Stop\000"
 4098      00
 4099              	.LASF88:
 4100 0636 47657449 		.ascii	"GetInstructionAtIndex\000"
 4100      6E737472 
 4100      75637469 
 4100      6F6E4174 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 92


 4100      496E6465 
 4101              	.LASF95:
 4102 064c 74735F65 		.ascii	"ts_enc\000"
 4102      6E6300
 4103              	.LASF102:
 4104 0653 666C6167 		.ascii	"flag_ts_display\000"
 4104      5F74735F 
 4104      64697370 
 4104      6C617900 
 4105              	.LASF44:
 4106 0663 536B6970 		.ascii	"Skip\000"
 4106      00
 4107              	.LASF108:
 4108 0668 64697370 		.ascii	"displaystring\000"
 4108      6C617973 
 4108      7472696E 
 4108      6700
 4109              	.LASF38:
 4110 0676 476F466F 		.ascii	"GoForward\000"
 4110      72776172 
 4110      6400
 4111              	.LASF68:
 4112 0680 53355F44 		.ascii	"S5_DETECTED\000"
 4112      45544543 
 4112      54454400 
 4113              	.LASF0:
 4114 068c 7369676E 		.ascii	"signed char\000"
 4114      65642063 
 4114      68617200 
 4115              	.LASF131:
 4116 0698 63757272 		.ascii	"currentRow\000"
 4116      656E7452 
 4116      6F7700
 4117              	.LASF3:
 4118 06a3 73686F72 		.ascii	"short unsigned int\000"
 4118      7420756E 
 4118      7369676E 
 4118      65642069 
 4118      6E7400
 4119              	.LASF25:
 4120 06b6 726F626F 		.ascii	"robot_orientation\000"
 4120      745F6F72 
 4120      69656E74 
 4120      6174696F 
 4120      6E00
 4121              	.LASF71:
 4122 06c8 6D61696E 		.ascii	"main\000"
 4122      00
 4123              	.LASF118:
 4124 06cd 63757272 		.ascii	"currentInstruction\000"
 4124      656E7449 
 4124      6E737472 
 4124      75637469 
 4124      6F6E00
 4125              	.LASF59:
 4126 06e0 41646A75 		.ascii	"AdjustToTheLeft\000"
 4126      7374546F 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccKNjNaw.s 			page 93


 4126      5468654C 
 4126      65667400 
 4127              	.LASF65:
 4128 06f0 4261636B 		.ascii	"Backward\000"
 4128      77617264 
 4128      00
 4129              	.LASF14:
 4130 06f9 75696E74 		.ascii	"uint8\000"
 4130      3800
 4131              	.LASF20:
 4132 06ff 646F7562 		.ascii	"double\000"
 4132      6C6500
 4133              	.LASF132:
 4134 0706 63757272 		.ascii	"currentCol\000"
 4134      656E7443 
 4134      6F6C00
 4135              	.LASF82:
 4136 0711 746F7461 		.ascii	"totalBlockSize\000"
 4136      6C426C6F 
 4136      636B5369 
 4136      7A6500
 4137              	.LASF26:
 4138 0720 67305F78 		.ascii	"g0_xpos\000"
 4138      706F7300 
 4139              	.LASF123:
 4140 0728 74696D65 		.ascii	"timerInt\000"
 4140      72496E74 
 4140      00
 4141              	.LASF105:
 4142 0731 666C6167 		.ascii	"flag_KB_string\000"
 4142      5F4B425F 
 4142      73747269 
 4142      6E6700
 4143              	.LASF32:
 4144 0740 67315F73 		.ascii	"g1_speed\000"
 4144      70656564 
 4144      00
 4145              	.LASF48:
 4146 0749 69676E6F 		.ascii	"ignoreL\000"
 4146      72654C00 
 4147              	.LASF49:
 4148 0751 69676E6F 		.ascii	"ignoreR\000"
 4148      72655200 
 4149              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
