ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 03       		.byte	3
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	__aeabi_i2d
 176              		.global	__aeabi_dmul
 177              		.global	__aeabi_ddiv
 178              		.global	__aeabi_d2f
 179              		.global	__aeabi_fadd
 180              		.section	.text.speedTimer,"ax",%progbits
 181              		.align	2
 182              		.global	speedTimer
 183              		.thumb
 184              		.thumb_func
 185              		.type	speedTimer, %function
 186              	speedTimer:
 187              	.LFB64:
 188              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentOrientation, previousOrientation = Right;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 5


  34:main.c        **** void MoveToNextInstruction();
  35:main.c        **** // ----------------------------------------
  36:main.c        **** uint8 s3, s4, s5, s6 = 0;
  37:main.c        **** //* ========================================
  38:main.c        **** // Calculating Distance
  39:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  40:main.c        **** 
  41:main.c        **** uint32 totalMilliseconds = 0;
  42:main.c        **** float totalDistance = 0; // in mm
  43:main.c        **** //* ========================================
  44:main.c        **** char buffer[69];
  45:main.c        **** int quadDec2Count = 0;
  46:main.c        **** int timerInt = 0;
  47:main.c        **** int keepLedOn = 0;
  48:main.c        **** uint32 stopBuffer = 0;
  49:main.c        **** 
  50:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  51:main.c        **** 
  52:main.c        **** CY_ISR (speedTimer) {
 189              		.loc 1 52 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 8
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 90B5     		push	{r4, r7, lr}
 194              		.cfi_def_cfa_offset 12
 195              		.cfi_offset 4, -12
 196              		.cfi_offset 7, -8
 197              		.cfi_offset 14, -4
 198 0002 83B0     		sub	sp, sp, #12
 199              		.cfi_def_cfa_offset 24
 200 0004 00AF     		add	r7, sp, #0
 201              		.cfi_def_cfa_register 7
  53:main.c        ****     timerInt = 1;
 202              		.loc 1 53 0
 203 0006 364B     		ldr	r3, .L4+16
 204 0008 0122     		movs	r2, #1
 205 000a 1A60     		str	r2, [r3]
  54:main.c        ****     //quadDec_M1 used for turning macros
  55:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 206              		.loc 1 55 0
 207 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 208 0010 0346     		mov	r3, r0
 209 0012 1A46     		mov	r2, r3
 210 0014 334B     		ldr	r3, .L4+20
 211 0016 1A60     		str	r2, [r3]
  56:main.c        ****     
  57:main.c        ****     if ((currentDirection == Forward || 
 212              		.loc 1 57 0
 213 0018 334B     		ldr	r3, .L4+24
 214 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 215 001c 002B     		cmp	r3, #0
 216 001e 17D0     		beq	.L2
  58:main.c        ****         currentDirection == waitForTurn || 
 217              		.loc 1 58 0 discriminator 1
 218 0020 314B     		ldr	r3, .L4+24
 219 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  57:main.c        ****         currentDirection == waitForTurn || 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 6


 220              		.loc 1 57 0 discriminator 1
 221 0024 072B     		cmp	r3, #7
 222 0026 13D0     		beq	.L2
  59:main.c        ****         currentDirection == waitForTurn ||
 223              		.loc 1 59 0
 224 0028 2F4B     		ldr	r3, .L4+24
 225 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58:main.c        ****         currentDirection == waitForTurn || 
 226              		.loc 1 58 0
 227 002c 072B     		cmp	r3, #7
 228 002e 0FD0     		beq	.L2
  60:main.c        ****         currentDirection == waitForRightTurn ||
 229              		.loc 1 60 0
 230 0030 2D4B     		ldr	r3, .L4+24
 231 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  59:main.c        ****         currentDirection == waitForTurn ||
 232              		.loc 1 59 0
 233 0034 022B     		cmp	r3, #2
 234 0036 0BD0     		beq	.L2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 235              		.loc 1 61 0
 236 0038 2B4B     		ldr	r3, .L4+24
 237 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  60:main.c        ****         currentDirection == waitForRightTurn ||
 238              		.loc 1 60 0
 239 003c 082B     		cmp	r3, #8
 240 003e 07D0     		beq	.L2
  62:main.c        ****         currentDirection == AdjustToTheLeft ||
 241              		.loc 1 62 0
 242 0040 294B     		ldr	r3, .L4+24
 243 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 244              		.loc 1 61 0
 245 0044 032B     		cmp	r3, #3
 246 0046 03D0     		beq	.L2
  63:main.c        ****         currentDirection == AdjustToTheRight) &&
 247              		.loc 1 63 0
 248 0048 274B     		ldr	r3, .L4+24
 249 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62:main.c        ****         currentDirection == AdjustToTheLeft ||
 250              		.loc 1 62 0
 251 004c 042B     		cmp	r3, #4
 252 004e 34D1     		bne	.L3
 253              	.L2:
  64:main.c        ****         quadDec2Count != 0) {
 254              		.loc 1 64 0
 255 0050 244B     		ldr	r3, .L4+20
 256 0052 1B68     		ldr	r3, [r3]
  63:main.c        ****         currentDirection == AdjustToTheRight) &&
 257              		.loc 1 63 0
 258 0054 002B     		cmp	r3, #0
 259 0056 30D0     		beq	.L3
 260              	.LBB2:
  65:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  66:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 261              		.loc 1 66 0
 262 0058 224B     		ldr	r3, .L4+20
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 7


 263 005a 1B68     		ldr	r3, [r3]
 264 005c 002B     		cmp	r3, #0
 265 005e B8BF     		it	lt
 266 0060 5B42     		rsblt	r3, r3, #0
 267 0062 1846     		mov	r0, r3
 268 0064 FFF7FEFF 		bl	__aeabi_i2d
 269 0068 19A3     		adr	r3, .L4
 270 006a D3E90023 		ldrd	r2, [r3]
 271 006e FFF7FEFF 		bl	__aeabi_dmul
 272 0072 0346     		mov	r3, r0
 273 0074 0C46     		mov	r4, r1
 274 0076 1846     		mov	r0, r3
 275 0078 2146     		mov	r1, r4
 276 007a 17A3     		adr	r3, .L4+8
 277 007c D3E90023 		ldrd	r2, [r3]
 278 0080 FFF7FEFF 		bl	__aeabi_dmul
 279 0084 0346     		mov	r3, r0
 280 0086 0C46     		mov	r4, r1
 281 0088 1846     		mov	r0, r3
 282 008a 2146     		mov	r1, r4
 283 008c 4FF00002 		mov	r2, #0
 284 0090 164B     		ldr	r3, .L4+28
 285 0092 FFF7FEFF 		bl	__aeabi_ddiv
 286 0096 0346     		mov	r3, r0
 287 0098 0C46     		mov	r4, r1
 288 009a 1846     		mov	r0, r3
 289 009c 2146     		mov	r1, r4
 290 009e FFF7FEFF 		bl	__aeabi_d2f
 291 00a2 0346     		mov	r3, r0
 292 00a4 7B60     		str	r3, [r7, #4]	@ float
  67:main.c        ****         
  68:main.c        ****         totalDistance = totalDistance + newDistance;
 293              		.loc 1 68 0
 294 00a6 124B     		ldr	r3, .L4+32
 295 00a8 1B68     		ldr	r3, [r3]	@ float
 296 00aa 7968     		ldr	r1, [r7, #4]	@ float
 297 00ac 1846     		mov	r0, r3
 298 00ae FFF7FEFF 		bl	__aeabi_fadd
 299 00b2 0346     		mov	r3, r0
 300 00b4 1A46     		mov	r2, r3
 301 00b6 0E4B     		ldr	r3, .L4+32
 302 00b8 1A60     		str	r2, [r3]	@ float
 303              	.L3:
 304              	.LBE2:
  69:main.c        ****     }
  70:main.c        ****     
  71:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 305              		.loc 1 71 0
 306 00ba 0020     		movs	r0, #0
 307 00bc FFF7FEFF 		bl	QuadDec_M2_SetCounter
  72:main.c        ****     QuadDec_M2_Start(); // restart counter
 308              		.loc 1 72 0
 309 00c0 FFF7FEFF 		bl	QuadDec_M2_Start
  73:main.c        ****     
  74:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 310              		.loc 1 74 0
 311 00c4 FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 8


  75:main.c        **** }
 312              		.loc 1 75 0
 313 00c8 00BF     		nop
 314 00ca 0C37     		adds	r7, r7, #12
 315              		.cfi_def_cfa_offset 12
 316 00cc BD46     		mov	sp, r7
 317              		.cfi_def_cfa_register 13
 318              		@ sp needed
 319 00ce 90BD     		pop	{r4, r7, pc}
 320              	.L5:
 321              		.align	3
 322              	.L4:
 323 00d0 182D4454 		.word	1413754136
 324 00d4 FB210940 		.word	1074340347
 325 00d8 00000000 		.word	0
 326 00dc 00205040 		.word	1078992896
 327 00e0 00000000 		.word	timerInt
 328 00e4 00000000 		.word	quadDec2Count
 329 00e8 00000000 		.word	currentDirection
 330 00ec 00806C40 		.word	1080852480
 331 00f0 00000000 		.word	totalDistance
 332              		.cfi_endproc
 333              	.LFE64:
 334              		.size	speedTimer, .-speedTimer
 335              		.section	.text.S3_DETECTED,"ax",%progbits
 336              		.align	2
 337              		.global	S3_DETECTED
 338              		.thumb
 339              		.thumb_func
 340              		.type	S3_DETECTED, %function
 341              	S3_DETECTED:
 342              	.LFB65:
  76:main.c        **** 
  77:main.c        **** CY_ISR(S3_DETECTED) {
 343              		.loc 1 77 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 1, uses_anonymous_args = 0
 347              		@ link register save eliminated.
 348 0000 80B4     		push	{r7}
 349              		.cfi_def_cfa_offset 4
 350              		.cfi_offset 7, -4
 351 0002 00AF     		add	r7, sp, #0
 352              		.cfi_def_cfa_register 7
  78:main.c        ****     // Sensor has detected WHITE
  79:main.c        ****     s3 = 1; // , Black = 0, White = 1
 353              		.loc 1 79 0
 354 0004 034B     		ldr	r3, .L7
 355 0006 0122     		movs	r2, #1
 356 0008 1A70     		strb	r2, [r3]
  80:main.c        ****     //LED_Write(1u);
  81:main.c        **** }
 357              		.loc 1 81 0
 358 000a 00BF     		nop
 359 000c BD46     		mov	sp, r7
 360              		.cfi_def_cfa_register 13
 361              		@ sp needed
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 9


 362 000e 80BC     		pop	{r7}
 363              		.cfi_restore 7
 364              		.cfi_def_cfa_offset 0
 365 0010 7047     		bx	lr
 366              	.L8:
 367 0012 00BF     		.align	2
 368              	.L7:
 369 0014 00000000 		.word	s3
 370              		.cfi_endproc
 371              	.LFE65:
 372              		.size	S3_DETECTED, .-S3_DETECTED
 373              		.section	.text.S4_DETECTED,"ax",%progbits
 374              		.align	2
 375              		.global	S4_DETECTED
 376              		.thumb
 377              		.thumb_func
 378              		.type	S4_DETECTED, %function
 379              	S4_DETECTED:
 380              	.LFB66:
  82:main.c        **** 
  83:main.c        **** CY_ISR(S4_DETECTED) {
 381              		.loc 1 83 0
 382              		.cfi_startproc
 383              		@ args = 0, pretend = 0, frame = 0
 384              		@ frame_needed = 1, uses_anonymous_args = 0
 385              		@ link register save eliminated.
 386 0000 80B4     		push	{r7}
 387              		.cfi_def_cfa_offset 4
 388              		.cfi_offset 7, -4
 389 0002 00AF     		add	r7, sp, #0
 390              		.cfi_def_cfa_register 7
  84:main.c        ****     // Sensor has detected WHITE
  85:main.c        ****     s4 = 1; // , Black = 0, White = 1
 391              		.loc 1 85 0
 392 0004 034B     		ldr	r3, .L10
 393 0006 0122     		movs	r2, #1
 394 0008 1A70     		strb	r2, [r3]
  86:main.c        ****     //LED_Write(1u);
  87:main.c        **** }
 395              		.loc 1 87 0
 396 000a 00BF     		nop
 397 000c BD46     		mov	sp, r7
 398              		.cfi_def_cfa_register 13
 399              		@ sp needed
 400 000e 80BC     		pop	{r7}
 401              		.cfi_restore 7
 402              		.cfi_def_cfa_offset 0
 403 0010 7047     		bx	lr
 404              	.L11:
 405 0012 00BF     		.align	2
 406              	.L10:
 407 0014 00000000 		.word	s4
 408              		.cfi_endproc
 409              	.LFE66:
 410              		.size	S4_DETECTED, .-S4_DETECTED
 411              		.section	.text.S5_DETECTED,"ax",%progbits
 412              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 10


 413              		.global	S5_DETECTED
 414              		.thumb
 415              		.thumb_func
 416              		.type	S5_DETECTED, %function
 417              	S5_DETECTED:
 418              	.LFB67:
  88:main.c        **** 
  89:main.c        **** CY_ISR(S5_DETECTED) {
 419              		.loc 1 89 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 0
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0000 80B4     		push	{r7}
 425              		.cfi_def_cfa_offset 4
 426              		.cfi_offset 7, -4
 427 0002 00AF     		add	r7, sp, #0
 428              		.cfi_def_cfa_register 7
  90:main.c        ****     // Sensor has detected WHITE
  91:main.c        ****     s5 = 1; // , Black = 0, White = 1
 429              		.loc 1 91 0
 430 0004 034B     		ldr	r3, .L13
 431 0006 0122     		movs	r2, #1
 432 0008 1A70     		strb	r2, [r3]
  92:main.c        ****     //LED_Write(1u);
  93:main.c        **** }
 433              		.loc 1 93 0
 434 000a 00BF     		nop
 435 000c BD46     		mov	sp, r7
 436              		.cfi_def_cfa_register 13
 437              		@ sp needed
 438 000e 80BC     		pop	{r7}
 439              		.cfi_restore 7
 440              		.cfi_def_cfa_offset 0
 441 0010 7047     		bx	lr
 442              	.L14:
 443 0012 00BF     		.align	2
 444              	.L13:
 445 0014 00000000 		.word	s5
 446              		.cfi_endproc
 447              	.LFE67:
 448              		.size	S5_DETECTED, .-S5_DETECTED
 449              		.section	.text.S6_DETECTED,"ax",%progbits
 450              		.align	2
 451              		.global	S6_DETECTED
 452              		.thumb
 453              		.thumb_func
 454              		.type	S6_DETECTED, %function
 455              	S6_DETECTED:
 456              	.LFB68:
  94:main.c        **** 
  95:main.c        **** CY_ISR(S6_DETECTED) {
 457              		.loc 1 95 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461              		@ link register save eliminated.
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 11


 462 0000 80B4     		push	{r7}
 463              		.cfi_def_cfa_offset 4
 464              		.cfi_offset 7, -4
 465 0002 00AF     		add	r7, sp, #0
 466              		.cfi_def_cfa_register 7
  96:main.c        ****     // Sensor has detected WHITE
  97:main.c        ****     s6 = 1; // , Black = 0, White = 1
 467              		.loc 1 97 0
 468 0004 034B     		ldr	r3, .L16
 469 0006 0122     		movs	r2, #1
 470 0008 1A70     		strb	r2, [r3]
  98:main.c        ****     //LED_Write(1u);
  99:main.c        **** }
 471              		.loc 1 99 0
 472 000a 00BF     		nop
 473 000c BD46     		mov	sp, r7
 474              		.cfi_def_cfa_register 13
 475              		@ sp needed
 476 000e 80BC     		pop	{r7}
 477              		.cfi_restore 7
 478              		.cfi_def_cfa_offset 0
 479 0010 7047     		bx	lr
 480              	.L17:
 481 0012 00BF     		.align	2
 482              	.L16:
 483 0014 00000000 		.word	s6
 484              		.cfi_endproc
 485              	.LFE68:
 486              		.size	S6_DETECTED, .-S6_DETECTED
 487              		.section	.text.TIMER_FINISH,"ax",%progbits
 488              		.align	2
 489              		.global	TIMER_FINISH
 490              		.thumb
 491              		.thumb_func
 492              		.type	TIMER_FINISH, %function
 493              	TIMER_FINISH:
 494              	.LFB69:
 100:main.c        **** 
 101:main.c        **** CY_ISR(TIMER_FINISH) {
 495              		.loc 1 101 0
 496              		.cfi_startproc
 497              		@ args = 0, pretend = 0, frame = 0
 498              		@ frame_needed = 1, uses_anonymous_args = 0
 499 0000 80B5     		push	{r7, lr}
 500              		.cfi_def_cfa_offset 8
 501              		.cfi_offset 7, -8
 502              		.cfi_offset 14, -4
 503 0002 00AF     		add	r7, sp, #0
 504              		.cfi_def_cfa_register 7
 102:main.c        ****     if (currentDirection == Stop) {
 505              		.loc 1 102 0
 506 0004 0A4B     		ldr	r3, .L21
 507 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 508 0008 052B     		cmp	r3, #5
 509 000a 05D1     		bne	.L19
 103:main.c        ****         stopBuffer = stopBuffer + 1;
 510              		.loc 1 103 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 12


 511 000c 094B     		ldr	r3, .L21+4
 512 000e 1B68     		ldr	r3, [r3]
 513 0010 0133     		adds	r3, r3, #1
 514 0012 084A     		ldr	r2, .L21+4
 515 0014 1360     		str	r3, [r2]
 516 0016 02E0     		b	.L20
 517              	.L19:
 104:main.c        ****     } else {
 105:main.c        ****         stopBuffer = 0;
 518              		.loc 1 105 0
 519 0018 064B     		ldr	r3, .L21+4
 520 001a 0022     		movs	r2, #0
 521 001c 1A60     		str	r2, [r3]
 522              	.L20:
 106:main.c        ****     }
 107:main.c        ****     SetRobotMovement(); 
 523              		.loc 1 107 0
 524 001e FFF7FEFF 		bl	SetRobotMovement
 108:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 525              		.loc 1 108 0
 526 0022 FFF7FEFF 		bl	ResetSensorFlags
 109:main.c        ****     Timer_LED_ReadStatusRegister();
 527              		.loc 1 109 0
 528 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 110:main.c        **** }
 529              		.loc 1 110 0
 530 002a 00BF     		nop
 531 002c 80BD     		pop	{r7, pc}
 532              	.L22:
 533 002e 00BF     		.align	2
 534              	.L21:
 535 0030 00000000 		.word	currentDirection
 536 0034 00000000 		.word	stopBuffer
 537              		.cfi_endproc
 538              	.LFE69:
 539              		.size	TIMER_FINISH, .-TIMER_FINISH
 540              		.section	.text.main,"ax",%progbits
 541              		.align	2
 542              		.global	main
 543              		.thumb
 544              		.thumb_func
 545              		.type	main, %function
 546              	main:
 547              	.LFB70:
 111:main.c        **** 
 112:main.c        **** 
 113:main.c        **** int main()
 114:main.c        **** {
 548              		.loc 1 114 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 1, uses_anonymous_args = 0
 552 0000 80B5     		push	{r7, lr}
 553              		.cfi_def_cfa_offset 8
 554              		.cfi_offset 7, -8
 555              		.cfi_offset 14, -4
 556 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 13


 557              		.cfi_def_cfa_register 7
 115:main.c        **** // ----- INITIALIZATIONS ----------
 116:main.c        ****     CYGlobalIntEnable;
 558              		.loc 1 116 0
 559              		.syntax unified
 560              	@ 116 "main.c" 1
 561 0004 62B6     		CPSIE   i
 562              	@ 0 "" 2
 117:main.c        ****     ResetSensorFlags();
 563              		.loc 1 117 0
 564              		.thumb
 565              		.syntax unified
 566 0006 FFF7FEFF 		bl	ResetSensorFlags
 118:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 567              		.loc 1 118 0
 568 000a FFF7FEFF 		bl	init
 119:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 569              		.loc 1 119 0
 570 000e 1F48     		ldr	r0, .L27
 571 0010 FFF7FEFF 		bl	isr_speed_StartEx
 120:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 572              		.loc 1 120 0
 573 0014 1E48     		ldr	r0, .L27+4
 574 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 121:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 575              		.loc 1 121 0
 576 001a 1E48     		ldr	r0, .L27+8
 577 001c FFF7FEFF 		bl	S3_detected_StartEx
 122:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 578              		.loc 1 122 0
 579 0020 1D48     		ldr	r0, .L27+12
 580 0022 FFF7FEFF 		bl	S4_detected_StartEx
 123:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 581              		.loc 1 123 0
 582 0026 1D48     		ldr	r0, .L27+16
 583 0028 FFF7FEFF 		bl	S5_detected_StartEx
 124:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 584              		.loc 1 124 0
 585 002c 1C48     		ldr	r0, .L27+20
 586 002e FFF7FEFF 		bl	S6_detected_StartEx
 125:main.c        ****     Timer_LED_Start();
 587              		.loc 1 125 0
 588 0032 FFF7FEFF 		bl	Timer_LED_Start
 126:main.c        ****     instructionList = findPath(map, food_list, 0);
 589              		.loc 1 126 0
 590 0036 0022     		movs	r2, #0
 591 0038 1A49     		ldr	r1, .L27+24
 592 003a 1B48     		ldr	r0, .L27+28
 593 003c FFF7FEFF 		bl	findPath
 594 0040 0246     		mov	r2, r0
 595 0042 1A4B     		ldr	r3, .L27+32
 596 0044 1A60     		str	r2, [r3]
 127:main.c        ****     numSteps = instructionsListLength();
 597              		.loc 1 127 0
 598 0046 FFF7FEFF 		bl	instructionsListLength
 599 004a 0346     		mov	r3, r0
 600 004c 1A46     		mov	r2, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 14


 601 004e 184B     		ldr	r3, .L27+36
 602 0050 1A60     		str	r2, [r3]
 128:main.c        **** // ------USB SETUP ----------------    
 129:main.c        **** #ifdef USE_USB    
 130:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 603              		.loc 1 130 0
 604 0052 0121     		movs	r1, #1
 605 0054 0020     		movs	r0, #0
 606 0056 FFF7FEFF 		bl	USBUART_Start
 131:main.c        **** #endif        
 132:main.c        ****     RF_BT_SELECT_Write(0);
 607              		.loc 1 132 0
 608 005a 0020     		movs	r0, #0
 609 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 610              	.L26:
 133:main.c        ****     
 134:main.c        ****     //usbPutString("Initialised UART");
 135:main.c        ****     for(;;)
 136:main.c        ****     {
 137:main.c        ****         if(timerInt == 1) {
 611              		.loc 1 137 0
 612 0060 144B     		ldr	r3, .L27+40
 613 0062 1B68     		ldr	r3, [r3]
 614 0064 012B     		cmp	r3, #1
 615 0066 08D1     		bne	.L24
 138:main.c        ****             timerInt = 0;
 616              		.loc 1 138 0
 617 0068 124B     		ldr	r3, .L27+40
 618 006a 0022     		movs	r2, #0
 619 006c 1A60     		str	r2, [r3]
 139:main.c        ****             // calculate RPM of M2
 140:main.c        ****             quadCountToRPM(quadDec2Count);
 620              		.loc 1 140 0
 621 006e 124B     		ldr	r3, .L27+44
 622 0070 1B68     		ldr	r3, [r3]
 623 0072 9BB2     		uxth	r3, r3
 624 0074 1846     		mov	r0, r3
 625 0076 FFF7FEFF 		bl	quadCountToRPM
 626              	.L24:
 141:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 142:main.c        ****             //usbPutString(buffer);
 143:main.c        ****             //usbPutString(" ");
 144:main.c        ****         }
 145:main.c        ****         //handle_usb();
 146:main.c        ****         if (flag_KB_string == 1)
 627              		.loc 1 146 0
 628 007a 104B     		ldr	r3, .L27+48
 629 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 630 007e 012B     		cmp	r3, #1
 631 0080 EED1     		bne	.L26
 147:main.c        ****         {
 148:main.c        ****             //usbPutString("Total Distance: ");
 149:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 150:main.c        ****             //usbPutString(buffer);
 151:main.c        ****             flag_KB_string = 0;
 632              		.loc 1 151 0
 633 0082 0E4B     		ldr	r3, .L27+48
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 15


 634 0084 0022     		movs	r2, #0
 635 0086 1A70     		strb	r2, [r3]
 152:main.c        ****         }           
 153:main.c        ****     }
 636              		.loc 1 153 0
 637 0088 EAE7     		b	.L26
 638              	.L28:
 639 008a 00BF     		.align	2
 640              	.L27:
 641 008c 00000000 		.word	speedTimer
 642 0090 00000000 		.word	TIMER_FINISH
 643 0094 00000000 		.word	S3_DETECTED
 644 0098 00000000 		.word	S4_DETECTED
 645 009c 00000000 		.word	S5_DETECTED
 646 00a0 00000000 		.word	S6_DETECTED
 647 00a4 00000000 		.word	food_list
 648 00a8 00000000 		.word	map
 649 00ac 00000000 		.word	instructionList
 650 00b0 00000000 		.word	numSteps
 651 00b4 00000000 		.word	timerInt
 652 00b8 00000000 		.word	quadDec2Count
 653 00bc 00000000 		.word	flag_KB_string
 654              		.cfi_endproc
 655              	.LFE70:
 656              		.size	main, .-main
 657              		.global	__aeabi_fmul
 658              		.global	__aeabi_f2iz
 659              		.section	.text.quadCountToRPM,"ax",%progbits
 660              		.align	2
 661              		.global	quadCountToRPM
 662              		.thumb
 663              		.thumb_func
 664              		.type	quadCountToRPM, %function
 665              	quadCountToRPM:
 666              	.LFB71:
 154:main.c        ****     return 0;
 155:main.c        **** }
 156:main.c        **** 
 157:main.c        **** // Calculations
 158:main.c        **** //* ========================================
 159:main.c        **** int16 quadCountToRPM(uint16 count)
 160:main.c        **** {
 667              		.loc 1 160 0
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 16
 670              		@ frame_needed = 1, uses_anonymous_args = 0
 671 0000 90B5     		push	{r4, r7, lr}
 672              		.cfi_def_cfa_offset 12
 673              		.cfi_offset 4, -12
 674              		.cfi_offset 7, -8
 675              		.cfi_offset 14, -4
 676 0002 85B0     		sub	sp, sp, #20
 677              		.cfi_def_cfa_offset 32
 678 0004 00AF     		add	r7, sp, #0
 679              		.cfi_def_cfa_register 7
 680 0006 0346     		mov	r3, r0
 681 0008 FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 16


 161:main.c        ****     float cps = count/57.00;
 682              		.loc 1 161 0
 683 000a FB88     		ldrh	r3, [r7, #6]
 684 000c 1846     		mov	r0, r3
 685 000e FFF7FEFF 		bl	__aeabi_i2d
 686 0012 4FF00002 		mov	r2, #0
 687 0016 0D4B     		ldr	r3, .L31
 688 0018 FFF7FEFF 		bl	__aeabi_ddiv
 689 001c 0346     		mov	r3, r0
 690 001e 0C46     		mov	r4, r1
 691 0020 1846     		mov	r0, r3
 692 0022 2146     		mov	r1, r4
 693 0024 FFF7FEFF 		bl	__aeabi_d2f
 694 0028 0346     		mov	r3, r0
 695 002a FB60     		str	r3, [r7, #12]	@ float
 162:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 696              		.loc 1 162 0
 697 002c 0849     		ldr	r1, .L31+4
 698 002e F868     		ldr	r0, [r7, #12]	@ float
 699 0030 FFF7FEFF 		bl	__aeabi_fmul
 700 0034 0346     		mov	r3, r0
 701 0036 1846     		mov	r0, r3
 702 0038 FFF7FEFF 		bl	__aeabi_f2iz
 703 003c 0346     		mov	r3, r0
 704 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 163:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 164:main.c        ****     return rpm;
 705              		.loc 1 164 0
 706 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 165:main.c        ****     //usbPutString(buffer);
 166:main.c        ****     //usbPutString("rpm ");
 167:main.c        **** }
 707              		.loc 1 167 0
 708 0044 1846     		mov	r0, r3
 709 0046 1437     		adds	r7, r7, #20
 710              		.cfi_def_cfa_offset 12
 711 0048 BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 004a 90BD     		pop	{r4, r7, pc}
 715              	.L32:
 716              		.align	2
 717              	.L31:
 718 004c 00804C40 		.word	1078755328
 719 0050 00007041 		.word	1097859072
 720              		.cfi_endproc
 721              	.LFE71:
 722              		.size	quadCountToRPM, .-quadCountToRPM
 723              		.section	.text.ResetSensorFlags,"ax",%progbits
 724              		.align	2
 725              		.global	ResetSensorFlags
 726              		.thumb
 727              		.thumb_func
 728              		.type	ResetSensorFlags, %function
 729              	ResetSensorFlags:
 730              	.LFB72:
 168:main.c        **** 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 17


 169:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 170:main.c        **** void ResetSensorFlags() {
 731              		.loc 1 170 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735              		@ link register save eliminated.
 736 0000 80B4     		push	{r7}
 737              		.cfi_def_cfa_offset 4
 738              		.cfi_offset 7, -4
 739 0002 00AF     		add	r7, sp, #0
 740              		.cfi_def_cfa_register 7
 171:main.c        ****     s3 = 0;
 741              		.loc 1 171 0
 742 0004 074B     		ldr	r3, .L34
 743 0006 0022     		movs	r2, #0
 744 0008 1A70     		strb	r2, [r3]
 172:main.c        ****     s4 = 0;
 745              		.loc 1 172 0
 746 000a 074B     		ldr	r3, .L34+4
 747 000c 0022     		movs	r2, #0
 748 000e 1A70     		strb	r2, [r3]
 173:main.c        ****     s5 = 0;
 749              		.loc 1 173 0
 750 0010 064B     		ldr	r3, .L34+8
 751 0012 0022     		movs	r2, #0
 752 0014 1A70     		strb	r2, [r3]
 174:main.c        ****     s6 = 0;
 753              		.loc 1 174 0
 754 0016 064B     		ldr	r3, .L34+12
 755 0018 0022     		movs	r2, #0
 756 001a 1A70     		strb	r2, [r3]
 175:main.c        **** }
 757              		.loc 1 175 0
 758 001c 00BF     		nop
 759 001e BD46     		mov	sp, r7
 760              		.cfi_def_cfa_register 13
 761              		@ sp needed
 762 0020 80BC     		pop	{r7}
 763              		.cfi_restore 7
 764              		.cfi_def_cfa_offset 0
 765 0022 7047     		bx	lr
 766              	.L35:
 767              		.align	2
 768              	.L34:
 769 0024 00000000 		.word	s3
 770 0028 00000000 		.word	s4
 771 002c 00000000 		.word	s5
 772 0030 00000000 		.word	s6
 773              		.cfi_endproc
 774              	.LFE72:
 775              		.size	ResetSensorFlags, .-ResetSensorFlags
 776              		.global	xBlocksize
 777              		.data
 778 0045 000000   		.align	2
 779              		.type	xBlocksize, %object
 780              		.size	xBlocksize, 4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 18


 781              	xBlocksize:
 782 0048 0000FF42 		.word	1124007936
 783              		.global	yBlocksize
 784              		.align	2
 785              		.type	yBlocksize, %object
 786              		.size	yBlocksize, 4
 787              	yBlocksize:
 788 004c 0000A042 		.word	1117782016
 789              		.global	currentRow
 790              		.type	currentRow, %object
 791              		.size	currentRow, 1
 792              	currentRow:
 793 0050 01       		.byte	1
 794              		.global	currentCol
 795              		.type	currentCol, %object
 796              		.size	currentCol, 1
 797              	currentCol:
 798 0051 01       		.byte	1
 799              		.global	stoppedAfterTurn
 800              		.bss
 801              		.type	stoppedAfterTurn, %object
 802              		.size	stoppedAfterTurn, 1
 803              	stoppedAfterTurn:
 804 0034 00       		.space	1
 805              		.global	ignoreSensor
 806              		.type	ignoreSensor, %object
 807              		.size	ignoreSensor, 1
 808              	ignoreSensor:
 809 0035 00       		.space	1
 810              		.global	__aeabi_fcmpge
 811              		.section	.text.CheckSensorDirection,"ax",%progbits
 812              		.align	2
 813              		.global	CheckSensorDirection
 814              		.thumb
 815              		.thumb_func
 816              		.type	CheckSensorDirection, %function
 817              	CheckSensorDirection:
 818              	.LFB73:
 176:main.c        **** 
 177:main.c        **** float xBlocksize = 127.5; // 127.5
 178:main.c        **** float yBlocksize = 80; // 80
 179:main.c        **** uint8 currentRow = 1;
 180:main.c        **** uint8 currentCol = 1;
 181:main.c        **** 
 182:main.c        **** /*enum DirectionState GetNextStep() {
 183:main.c        ****     enum DirectionState directionState;
 184:main.c        ****     // Determines robot movement and orientation to follow optimal path
 185:main.c        ****     // enum DirectionState directionState = Stop;
 186:main.c        ****     previousOrientation = currentOrientation;
 187:main.c        ****     
 188:main.c        ****     if(map[currentRow][currentCol] == 9) {
 189:main.c        ****         directionState = Stop; // reached target
 190:main.c        ****         return directionState;
 191:main.c        ****     }
 192:main.c        ****         
 193:main.c        ****     switch (previousOrientation) {
 194:main.c        ****             case Up:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 19


 195:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 196:main.c        ****                     currentOrientation = Up; 
 197:main.c        ****                     directionState = Forward;
 198:main.c        ****                     currentRow--;// update position
 199:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 200:main.c        ****                     currentOrientation = Left;
 201:main.c        ****                     directionState = waitForLeftTurn;
 202:main.c        ****                     //currentRow--;
 203:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 204:main.c        ****                     currentOrientation = Right;
 205:main.c        ****                     directionState = waitForRightTurn;
 206:main.c        ****                     //currentRow++; // update position
 207:main.c        ****                 }
 208:main.c        ****                 break;
 209:main.c        ****             case Down:
 210:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 211:main.c        ****                     currentOrientation = Down;
 212:main.c        ****                     directionState = Forward;
 213:main.c        ****                     currentRow++;
 214:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 215:main.c        ****                     currentOrientation = Left;
 216:main.c        ****                     directionState = waitForRightTurn;
 217:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 218:main.c        ****                     currentOrientation = Right;
 219:main.c        ****                     directionState = waitForLeftTurn;
 220:main.c        ****                 }
 221:main.c        ****                 break;
 222:main.c        ****             case Left:
 223:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 224:main.c        ****                     currentOrientation = Left;
 225:main.c        ****                     directionState = Forward;
 226:main.c        ****                     currentCol--; // update position
 227:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 228:main.c        ****                     currentOrientation = Up;
 229:main.c        ****                     directionState = waitForRightTurn;
 230:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 231:main.c        ****                     currentOrientation = Down;
 232:main.c        ****                     directionState = waitForLeftTurn;
 233:main.c        ****                 }
 234:main.c        ****                 break;
 235:main.c        ****             case Right:
 236:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 237:main.c        ****                     currentOrientation = Right;
 238:main.c        ****                     directionState = Forward;
 239:main.c        ****                     currentCol++; // update position
 240:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 241:main.c        ****                     currentOrientation = Up;
 242:main.c        ****                     directionState = waitForLeftTurn;
 243:main.c        ****                     //currentCol++; // update position
 244:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 245:main.c        ****                     currentOrientation = Down;
 246:main.c        ****                     directionState = waitForRightTurn;
 247:main.c        ****                     //currentCol--; // update position
 248:main.c        ****                 }
 249:main.c        ****                 break;
 250:main.c        ****             default:
 251:main.c        ****                 break;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 20


 252:main.c        ****         }
 253:main.c        ****     
 254:main.c        ****     return directionState;
 255:main.c        **** }
 256:main.c        **** */
 257:main.c        **** uint8 stoppedAfterTurn = 0;
 258:main.c        **** uint8 ignoreSensor = 0;
 259:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 260:main.c        **** enum RobotMovement CheckSensorDirection() {
 819              		.loc 1 260 0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 8
 822              		@ frame_needed = 1, uses_anonymous_args = 0
 823 0000 80B5     		push	{r7, lr}
 824              		.cfi_def_cfa_offset 8
 825              		.cfi_offset 7, -8
 826              		.cfi_offset 14, -4
 827 0002 82B0     		sub	sp, sp, #8
 828              		.cfi_def_cfa_offset 16
 829 0004 00AF     		add	r7, sp, #0
 830              		.cfi_def_cfa_register 7
 261:main.c        ****     float blocksize;
 262:main.c        ****     if(currentOrientation == Up || currentOrientation == Down) {
 831              		.loc 1 262 0
 832 0006 964B     		ldr	r3, .L66
 833 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 834 000a 002B     		cmp	r3, #0
 835 000c 03D0     		beq	.L37
 836              		.loc 1 262 0 is_stmt 0 discriminator 1
 837 000e 944B     		ldr	r3, .L66
 838 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 839 0012 012B     		cmp	r3, #1
 840 0014 03D1     		bne	.L38
 841              	.L37:
 263:main.c        ****         blocksize = yBlocksize;
 842              		.loc 1 263 0 is_stmt 1
 843 0016 934B     		ldr	r3, .L66+4
 844 0018 1B68     		ldr	r3, [r3]	@ float
 845 001a 7B60     		str	r3, [r7, #4]	@ float
 846 001c 02E0     		b	.L39
 847              	.L38:
 264:main.c        ****     } else {
 265:main.c        ****         blocksize = xBlocksize;
 848              		.loc 1 265 0
 849 001e 924B     		ldr	r3, .L66+8
 850 0020 1B68     		ldr	r3, [r3]	@ float
 851 0022 7B60     		str	r3, [r7, #4]	@ float
 852              	.L39:
 266:main.c        ****     }
 267:main.c        ****     //if(currentInstruction)
 268:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 853              		.loc 1 268 0
 854 0024 0523     		movs	r3, #5
 855 0026 FB70     		strb	r3, [r7, #3]
 269:main.c        ****     
 270:main.c        ****     if (stoppedAfterTurn == 1) {
 856              		.loc 1 270 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 21


 857 0028 904B     		ldr	r3, .L66+12
 858 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 859 002c 012B     		cmp	r3, #1
 860 002e 16D1     		bne	.L40
 271:main.c        ****         if (stopBuffer <= 50) {
 861              		.loc 1 271 0
 862 0030 8F4B     		ldr	r3, .L66+16
 863 0032 1B68     		ldr	r3, [r3]
 864 0034 322B     		cmp	r3, #50
 865 0036 06D8     		bhi	.L41
 272:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 866              		.loc 1 272 0
 867 0038 0523     		movs	r3, #5
 868 003a FB70     		strb	r3, [r7, #3]
 273:main.c        ****             previousDirection = directionState;
 869              		.loc 1 273 0
 870 003c 8D4A     		ldr	r2, .L66+20
 871 003e FB78     		ldrb	r3, [r7, #3]
 872 0040 1370     		strb	r3, [r2]
 274:main.c        ****             return directionState;
 873              		.loc 1 274 0
 874 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 875 0044 07E1     		b	.L42
 876              	.L41:
 275:main.c        ****         }
 276:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 277:main.c        ****         totalDistance = 0; // reset distance
 877              		.loc 1 277 0
 878 0046 8C4B     		ldr	r3, .L66+24
 879 0048 4FF00002 		mov	r2, #0
 880 004c 1A60     		str	r2, [r3]	@ float
 278:main.c        ****         previousDirection = directionState;
 881              		.loc 1 278 0
 882 004e 894A     		ldr	r2, .L66+20
 883 0050 FB78     		ldrb	r3, [r7, #3]
 884 0052 1370     		strb	r3, [r2]
 279:main.c        ****         stoppedAfterTurn = 0;
 885              		.loc 1 279 0
 886 0054 854B     		ldr	r3, .L66+12
 887 0056 0022     		movs	r2, #0
 888 0058 1A70     		strb	r2, [r3]
 280:main.c        ****         return directionState;
 889              		.loc 1 280 0
 890 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 891 005c FBE0     		b	.L42
 892              	.L40:
 281:main.c        ****     }
 282:main.c        ****     if (totalDistance >= blocksize) {
 893              		.loc 1 282 0
 894 005e 864B     		ldr	r3, .L66+24
 895 0060 1B68     		ldr	r3, [r3]	@ float
 896 0062 7968     		ldr	r1, [r7, #4]	@ float
 897 0064 1846     		mov	r0, r3
 898 0066 FFF7FEFF 		bl	__aeabi_fcmpge
 899 006a 0346     		mov	r3, r0
 900 006c 002B     		cmp	r3, #0
 901 006e 08D0     		beq	.L65
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 22


 283:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 284:main.c        ****         totalDistance = 0; // reset distance
 902              		.loc 1 284 0
 903 0070 814B     		ldr	r3, .L66+24
 904 0072 4FF00002 		mov	r2, #0
 905 0076 1A60     		str	r2, [r3]	@ float
 285:main.c        ****         previousDirection = directionState;
 906              		.loc 1 285 0
 907 0078 7E4A     		ldr	r2, .L66+20
 908 007a FB78     		ldrb	r3, [r7, #3]
 909 007c 1370     		strb	r3, [r2]
 286:main.c        ****         return directionState;
 910              		.loc 1 286 0
 911 007e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 912 0080 E9E0     		b	.L42
 913              	.L65:
 287:main.c        ****     }
 288:main.c        ****     
 289:main.c        ****     // STOP BUFFER * ========================================
 290:main.c        ****     if (previousDirection == Stop) {
 914              		.loc 1 290 0
 915 0082 7C4B     		ldr	r3, .L66+20
 916 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 917 0086 052B     		cmp	r3, #5
 918 0088 0AD1     		bne	.L45
 291:main.c        ****         if (stopBuffer <= 50) {
 919              		.loc 1 291 0
 920 008a 794B     		ldr	r3, .L66+16
 921 008c 1B68     		ldr	r3, [r3]
 922 008e 322B     		cmp	r3, #50
 923 0090 04D8     		bhi	.L46
 292:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 924              		.loc 1 292 0
 925 0092 0523     		movs	r3, #5
 926 0094 FB70     		strb	r3, [r7, #3]
 293:main.c        ****             previousDirection = directionState;
 927              		.loc 1 293 0
 928 0096 774A     		ldr	r2, .L66+20
 929 0098 FB78     		ldrb	r3, [r7, #3]
 930 009a 1370     		strb	r3, [r2]
 931              	.L46:
 294:main.c        ****         } else {
 295:main.c        ****             //directionState = ForwardAfterTurn;
 296:main.c        ****         }
 297:main.c        ****         return directionState;
 932              		.loc 1 297 0
 933 009c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 934 009e DAE0     		b	.L42
 935              	.L45:
 298:main.c        ****     }
 299:main.c        **** 
 300:main.c        ****     // TURNING * ========================================    
 301:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 936              		.loc 1 301 0
 937 00a0 744B     		ldr	r3, .L66+20
 938 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 939 00a4 082B     		cmp	r3, #8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 23


 940 00a6 0ED1     		bne	.L47
 302:main.c        ****         if (s3 || s4) {
 941              		.loc 1 302 0
 942 00a8 744B     		ldr	r3, .L66+28
 943 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 944 00ac 002B     		cmp	r3, #0
 945 00ae 03D1     		bne	.L48
 946              		.loc 1 302 0 is_stmt 0 discriminator 1
 947 00b0 734B     		ldr	r3, .L66+32
 948 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 00b4 002B     		cmp	r3, #0
 950 00b6 06D0     		beq	.L47
 951              	.L48:
 303:main.c        ****             //ignoreSensor = 0;
 304:main.c        ****             //usbPutString("Forward\n");
 305:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 952              		.loc 1 305 0 is_stmt 1
 953 00b8 0023     		movs	r3, #0
 954 00ba FB70     		strb	r3, [r7, #3]
 306:main.c        ****             previousDirection = directionState;
 955              		.loc 1 306 0
 956 00bc 6D4A     		ldr	r2, .L66+20
 957 00be FB78     		ldrb	r3, [r7, #3]
 958 00c0 1370     		strb	r3, [r2]
 307:main.c        ****             return directionState;
 959              		.loc 1 307 0
 960 00c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 961 00c4 C7E0     		b	.L42
 962              	.L47:
 308:main.c        ****         }
 309:main.c        ****     }
 310:main.c        **** 
 311:main.c        ****     if(previousDirection == waitForRightTurn) {
 963              		.loc 1 311 0
 964 00c6 6B4B     		ldr	r3, .L66+20
 965 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 966 00ca 022B     		cmp	r3, #2
 967 00cc 11D1     		bne	.L49
 312:main.c        ****         //ignoreSensor = 0;
 313:main.c        ****         if(!s4) {
 968              		.loc 1 313 0
 969 00ce 6C4B     		ldr	r3, .L66+32
 970 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 00d2 002B     		cmp	r3, #0
 972 00d4 06D1     		bne	.L50
 314:main.c        ****             //usbPutString("Turn Right\n");
 315:main.c        ****             directionState = TurnRight;
 973              		.loc 1 315 0
 974 00d6 0123     		movs	r3, #1
 975 00d8 FB70     		strb	r3, [r7, #3]
 316:main.c        ****             previousDirection = directionState;
 976              		.loc 1 316 0
 977 00da 664A     		ldr	r2, .L66+20
 978 00dc FB78     		ldrb	r3, [r7, #3]
 979 00de 1370     		strb	r3, [r2]
 317:main.c        ****             return directionState;
 980              		.loc 1 317 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 24


 981 00e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 982 00e2 B8E0     		b	.L42
 983              	.L50:
 318:main.c        ****         } else {
 319:main.c        ****             //usbPutString("Wait for Right Turn\n");
 320:main.c        ****             directionState = waitForRightTurn;
 984              		.loc 1 320 0
 985 00e4 0223     		movs	r3, #2
 986 00e6 FB70     		strb	r3, [r7, #3]
 321:main.c        ****             previousDirection = directionState;
 987              		.loc 1 321 0
 988 00e8 624A     		ldr	r2, .L66+20
 989 00ea FB78     		ldrb	r3, [r7, #3]
 990 00ec 1370     		strb	r3, [r2]
 322:main.c        ****             return directionState;
 991              		.loc 1 322 0
 992 00ee FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 993 00f0 B1E0     		b	.L42
 994              	.L49:
 323:main.c        ****         }
 324:main.c        ****     }
 325:main.c        **** 
 326:main.c        ****     if(previousDirection == waitForLeftTurn) {
 995              		.loc 1 326 0
 996 00f2 604B     		ldr	r3, .L66+20
 997 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 998 00f6 012B     		cmp	r3, #1
 999 00f8 11D1     		bne	.L51
 327:main.c        ****         //ignoreSensor = 0;
 328:main.c        ****         if(!s3) {
 1000              		.loc 1 328 0
 1001 00fa 604B     		ldr	r3, .L66+28
 1002 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1003 00fe 002B     		cmp	r3, #0
 1004 0100 06D1     		bne	.L52
 329:main.c        ****             //usbPutString("Turn Left\n");
 330:main.c        ****             directionState = TurnLeft;
 1005              		.loc 1 330 0
 1006 0102 0223     		movs	r3, #2
 1007 0104 FB70     		strb	r3, [r7, #3]
 331:main.c        ****             previousDirection = directionState;
 1008              		.loc 1 331 0
 1009 0106 5B4A     		ldr	r2, .L66+20
 1010 0108 FB78     		ldrb	r3, [r7, #3]
 1011 010a 1370     		strb	r3, [r2]
 332:main.c        ****             return directionState;
 1012              		.loc 1 332 0
 1013 010c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1014 010e A2E0     		b	.L42
 1015              	.L52:
 333:main.c        ****         } else {
 334:main.c        ****             //usbPutString("Wait for Left Turn\n");
 335:main.c        ****             directionState = waitForLeftTurn;
 1016              		.loc 1 335 0
 1017 0110 0123     		movs	r3, #1
 1018 0112 FB70     		strb	r3, [r7, #3]
 336:main.c        ****             previousDirection = directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 25


 1019              		.loc 1 336 0
 1020 0114 574A     		ldr	r2, .L66+20
 1021 0116 FB78     		ldrb	r3, [r7, #3]
 1022 0118 1370     		strb	r3, [r2]
 337:main.c        ****             return directionState;
 1023              		.loc 1 337 0
 1024 011a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1025 011c 9BE0     		b	.L42
 1026              	.L51:
 338:main.c        ****         }
 339:main.c        ****     }
 340:main.c        **** 
 341:main.c        ****     if(previousDirection == TurnRight) {
 1027              		.loc 1 341 0
 1028 011e 554B     		ldr	r3, .L66+20
 1029 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1030 0122 012B     		cmp	r3, #1
 1031 0124 24D1     		bne	.L53
 342:main.c        ****         if(s5 && s6) {
 1032              		.loc 1 342 0
 1033 0126 574B     		ldr	r3, .L66+36
 1034 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1035 012a 002B     		cmp	r3, #0
 1036 012c 0AD0     		beq	.L54
 1037              		.loc 1 342 0 is_stmt 0 discriminator 1
 1038 012e 564B     		ldr	r3, .L66+40
 1039 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1040 0132 002B     		cmp	r3, #0
 1041 0134 06D0     		beq	.L54
 343:main.c        ****             //usbPutString("Turn Right\n");
 344:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 1042              		.loc 1 344 0 is_stmt 1
 1043 0136 0123     		movs	r3, #1
 1044 0138 FB70     		strb	r3, [r7, #3]
 345:main.c        ****             previousDirection = directionState;
 1045              		.loc 1 345 0
 1046 013a 4E4A     		ldr	r2, .L66+20
 1047 013c FB78     		ldrb	r3, [r7, #3]
 1048 013e 1370     		strb	r3, [r2]
 346:main.c        ****             return directionState;
 1049              		.loc 1 346 0
 1050 0140 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1051 0142 88E0     		b	.L42
 1052              	.L54:
 347:main.c        ****         } 
 348:main.c        ****         else if (!s5 || !s6) {
 1053              		.loc 1 348 0
 1054 0144 4F4B     		ldr	r3, .L66+36
 1055 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1056 0148 002B     		cmp	r3, #0
 1057 014a 03D0     		beq	.L55
 1058              		.loc 1 348 0 is_stmt 0 discriminator 1
 1059 014c 4E4B     		ldr	r3, .L66+40
 1060 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1061 0150 002B     		cmp	r3, #0
 1062 0152 0DD1     		bne	.L53
 1063              	.L55:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 26


 349:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 350:main.c        ****             //usbPutString("Stop after Right Turn");
 351:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 1064              		.loc 1 351 0 is_stmt 1
 1065 0154 0523     		movs	r3, #5
 1066 0156 FB70     		strb	r3, [r7, #3]
 352:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 1067              		.loc 1 352 0
 1068 0158 474B     		ldr	r3, .L66+24
 1069 015a 4FF00002 		mov	r2, #0
 1070 015e 1A60     		str	r2, [r3]	@ float
 353:main.c        ****             previousDirection = directionState;
 1071              		.loc 1 353 0
 1072 0160 444A     		ldr	r2, .L66+20
 1073 0162 FB78     		ldrb	r3, [r7, #3]
 1074 0164 1370     		strb	r3, [r2]
 354:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 1075              		.loc 1 354 0
 1076 0166 414B     		ldr	r3, .L66+12
 1077 0168 0122     		movs	r2, #1
 1078 016a 1A70     		strb	r2, [r3]
 355:main.c        ****             return directionState;
 1079              		.loc 1 355 0
 1080 016c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1081 016e 72E0     		b	.L42
 1082              	.L53:
 356:main.c        ****         }
 357:main.c        ****     }    
 358:main.c        **** 
 359:main.c        ****     if(previousDirection == TurnLeft) {
 1083              		.loc 1 359 0
 1084 0170 404B     		ldr	r3, .L66+20
 1085 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1086 0174 022B     		cmp	r3, #2
 1087 0176 24D1     		bne	.L56
 360:main.c        ****         if(s5 && s6) {
 1088              		.loc 1 360 0
 1089 0178 424B     		ldr	r3, .L66+36
 1090 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1091 017c 002B     		cmp	r3, #0
 1092 017e 0AD0     		beq	.L57
 1093              		.loc 1 360 0 is_stmt 0 discriminator 1
 1094 0180 414B     		ldr	r3, .L66+40
 1095 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1096 0184 002B     		cmp	r3, #0
 1097 0186 06D0     		beq	.L57
 361:main.c        ****             //usbPutString("Turn Left\n");
 362:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 1098              		.loc 1 362 0 is_stmt 1
 1099 0188 0223     		movs	r3, #2
 1100 018a FB70     		strb	r3, [r7, #3]
 363:main.c        ****             previousDirection = directionState;
 1101              		.loc 1 363 0
 1102 018c 394A     		ldr	r2, .L66+20
 1103 018e FB78     		ldrb	r3, [r7, #3]
 1104 0190 1370     		strb	r3, [r2]
 364:main.c        ****             return directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 27


 1105              		.loc 1 364 0
 1106 0192 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1107 0194 5FE0     		b	.L42
 1108              	.L57:
 365:main.c        ****         } 
 366:main.c        ****         else if (!s5 || !s6) {
 1109              		.loc 1 366 0
 1110 0196 3B4B     		ldr	r3, .L66+36
 1111 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 019a 002B     		cmp	r3, #0
 1113 019c 03D0     		beq	.L58
 1114              		.loc 1 366 0 is_stmt 0 discriminator 1
 1115 019e 3A4B     		ldr	r3, .L66+40
 1116 01a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1117 01a2 002B     		cmp	r3, #0
 1118 01a4 0DD1     		bne	.L56
 1119              	.L58:
 367:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 368:main.c        ****            // usbPutString("Stop after Left Turn\n");
 369:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 1120              		.loc 1 369 0 is_stmt 1
 1121 01a6 0523     		movs	r3, #5
 1122 01a8 FB70     		strb	r3, [r7, #3]
 370:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 1123              		.loc 1 370 0
 1124 01aa 334B     		ldr	r3, .L66+24
 1125 01ac 4FF00002 		mov	r2, #0
 1126 01b0 1A60     		str	r2, [r3]	@ float
 371:main.c        ****             previousDirection = directionState;
 1127              		.loc 1 371 0
 1128 01b2 304A     		ldr	r2, .L66+20
 1129 01b4 FB78     		ldrb	r3, [r7, #3]
 1130 01b6 1370     		strb	r3, [r2]
 372:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 1131              		.loc 1 372 0
 1132 01b8 2C4B     		ldr	r3, .L66+12
 1133 01ba 0122     		movs	r2, #1
 1134 01bc 1A70     		strb	r2, [r3]
 373:main.c        ****             return directionState;
 1135              		.loc 1 373 0
 1136 01be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1137 01c0 49E0     		b	.L42
 1138              	.L56:
 374:main.c        ****         }
 375:main.c        ****     }
 376:main.c        ****     
 377:main.c        ****     // COURSE CORRECTION * ========================================
 378:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 1139              		.loc 1 378 0
 1140 01c2 2C4B     		ldr	r3, .L66+20
 1141 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 01c6 002B     		cmp	r3, #0
 1143 01c8 07D0     		beq	.L59
 1144              		.loc 1 378 0 is_stmt 0 discriminator 1
 1145 01ca 2A4B     		ldr	r3, .L66+20
 1146 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1147 01ce 032B     		cmp	r3, #3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 28


 1148 01d0 03D0     		beq	.L59
 1149              		.loc 1 378 0 discriminator 2
 1150 01d2 284B     		ldr	r3, .L66+20
 1151 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1152 01d6 042B     		cmp	r3, #4
 1153 01d8 15D1     		bne	.L60
 1154              	.L59:
 379:main.c        ****         //ignoreSensor = 0;
 380:main.c        ****         if(s6) {
 1155              		.loc 1 380 0 is_stmt 1
 1156 01da 2B4B     		ldr	r3, .L66+40
 1157 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1158 01de 002B     		cmp	r3, #0
 1159 01e0 06D0     		beq	.L61
 381:main.c        ****             //usbPutString("Adjust to the left\n");
 382:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 1160              		.loc 1 382 0
 1161 01e2 0323     		movs	r3, #3
 1162 01e4 FB70     		strb	r3, [r7, #3]
 383:main.c        ****             previousDirection = directionState;
 1163              		.loc 1 383 0
 1164 01e6 234A     		ldr	r2, .L66+20
 1165 01e8 FB78     		ldrb	r3, [r7, #3]
 1166 01ea 1370     		strb	r3, [r2]
 384:main.c        ****             return directionState;
 1167              		.loc 1 384 0
 1168 01ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1169 01ee 32E0     		b	.L42
 1170              	.L61:
 385:main.c        ****         }
 386:main.c        ****         if(s5) {
 1171              		.loc 1 386 0
 1172 01f0 244B     		ldr	r3, .L66+36
 1173 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1174 01f4 002B     		cmp	r3, #0
 1175 01f6 06D0     		beq	.L60
 387:main.c        ****             //usbPutString("Adjust to the right\n");
 388:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 1176              		.loc 1 388 0
 1177 01f8 0423     		movs	r3, #4
 1178 01fa FB70     		strb	r3, [r7, #3]
 389:main.c        ****             previousDirection = directionState;
 1179              		.loc 1 389 0
 1180 01fc 1D4A     		ldr	r2, .L66+20
 1181 01fe FB78     		ldrb	r3, [r7, #3]
 1182 0200 1370     		strb	r3, [r2]
 390:main.c        ****             return directionState;
 1183              		.loc 1 390 0
 1184 0202 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1185 0204 27E0     		b	.L42
 1186              	.L60:
 391:main.c        ****         }
 392:main.c        ****     }
 393:main.c        ****     
 394:main.c        ****     // FORWARD * ========================================
 395:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 1187              		.loc 1 395 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 29


 1188 0206 1D4B     		ldr	r3, .L66+28
 1189 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1190 020a 002B     		cmp	r3, #0
 1191 020c 12D0     		beq	.L62
 1192              		.loc 1 395 0 is_stmt 0 discriminator 1
 1193 020e 1C4B     		ldr	r3, .L66+32
 1194 0210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1195 0212 002B     		cmp	r3, #0
 1196 0214 0ED0     		beq	.L62
 1197              		.loc 1 395 0 discriminator 2
 1198 0216 1B4B     		ldr	r3, .L66+36
 1199 0218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1200 021a 002B     		cmp	r3, #0
 1201 021c 0AD1     		bne	.L62
 1202              		.loc 1 395 0 discriminator 3
 1203 021e 1A4B     		ldr	r3, .L66+40
 1204 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1205 0222 002B     		cmp	r3, #0
 1206 0224 06D1     		bne	.L62
 396:main.c        ****         //usbPutString("Forward\n");
 397:main.c        ****         directionState = Forward;
 1207              		.loc 1 397 0 is_stmt 1
 1208 0226 0023     		movs	r3, #0
 1209 0228 FB70     		strb	r3, [r7, #3]
 398:main.c        ****         previousDirection = directionState;
 1210              		.loc 1 398 0
 1211 022a 124A     		ldr	r2, .L66+20
 1212 022c FB78     		ldrb	r3, [r7, #3]
 1213 022e 1370     		strb	r3, [r2]
 399:main.c        ****         return directionState;   
 1214              		.loc 1 399 0
 1215 0230 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1216 0232 10E0     		b	.L42
 1217              	.L62:
 400:main.c        ****     }
 401:main.c        **** 
 402:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 403:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 404:main.c        ****     if (previousDirection == Unknown) {
 1218              		.loc 1 404 0
 1219 0234 0F4B     		ldr	r3, .L66+20
 1220 0236 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1221 0238 062B     		cmp	r3, #6
 1222 023a 06D1     		bne	.L63
 405:main.c        ****         directionState = Forward;
 1223              		.loc 1 405 0
 1224 023c 0023     		movs	r3, #0
 1225 023e FB70     		strb	r3, [r7, #3]
 406:main.c        ****         previousDirection = directionState;
 1226              		.loc 1 406 0
 1227 0240 0C4A     		ldr	r2, .L66+20
 1228 0242 FB78     		ldrb	r3, [r7, #3]
 1229 0244 1370     		strb	r3, [r2]
 407:main.c        ****         return directionState;
 1230              		.loc 1 407 0
 1231 0246 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1232 0248 05E0     		b	.L42
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 30


 1233              	.L63:
 408:main.c        ****     }
 409:main.c        **** 
 410:main.c        ****     // Possible reason
 411:main.c        ****     previousDirection = currentDirection;
 1234              		.loc 1 411 0
 1235 024a 104B     		ldr	r3, .L66+44
 1236 024c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1237 024e 094B     		ldr	r3, .L66+20
 1238 0250 1A70     		strb	r2, [r3]
 412:main.c        ****     return previousDirection;
 1239              		.loc 1 412 0
 1240 0252 084B     		ldr	r3, .L66+20
 1241 0254 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1242              	.L42:
 413:main.c        **** }
 1243              		.loc 1 413 0
 1244 0256 1846     		mov	r0, r3
 1245 0258 0837     		adds	r7, r7, #8
 1246              		.cfi_def_cfa_offset 8
 1247 025a BD46     		mov	sp, r7
 1248              		.cfi_def_cfa_register 13
 1249              		@ sp needed
 1250 025c 80BD     		pop	{r7, pc}
 1251              	.L67:
 1252 025e 00BF     		.align	2
 1253              	.L66:
 1254 0260 00000000 		.word	currentOrientation
 1255 0264 00000000 		.word	yBlocksize
 1256 0268 00000000 		.word	xBlocksize
 1257 026c 00000000 		.word	stoppedAfterTurn
 1258 0270 00000000 		.word	stopBuffer
 1259 0274 00000000 		.word	previousDirection
 1260 0278 00000000 		.word	totalDistance
 1261 027c 00000000 		.word	s3
 1262 0280 00000000 		.word	s4
 1263 0284 00000000 		.word	s5
 1264 0288 00000000 		.word	s6
 1265 028c 00000000 		.word	currentDirection
 1266              		.cfi_endproc
 1267              	.LFE73:
 1268              		.size	CheckSensorDirection, .-CheckSensorDirection
 1269              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 1270              		.align	2
 1271              		.global	GetMovementAccordingToInstruction
 1272              		.thumb
 1273              		.thumb_func
 1274              		.type	GetMovementAccordingToInstruction, %function
 1275              	GetMovementAccordingToInstruction:
 1276              	.LFB74:
 414:main.c        **** 
 415:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 1277              		.loc 1 415 0
 1278              		.cfi_startproc
 1279              		@ args = 0, pretend = 0, frame = 8
 1280              		@ frame_needed = 1, uses_anonymous_args = 0
 1281 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 31


 1282              		.cfi_def_cfa_offset 8
 1283              		.cfi_offset 7, -8
 1284              		.cfi_offset 14, -4
 1285 0002 82B0     		sub	sp, sp, #8
 1286              		.cfi_def_cfa_offset 16
 1287 0004 00AF     		add	r7, sp, #0
 1288              		.cfi_def_cfa_register 7
 416:main.c        ****     float blocksize;
 417:main.c        ****     if(currentOrientation == Up || currentOrientation == Down) {
 1289              		.loc 1 417 0
 1290 0006 294B     		ldr	r3, .L85
 1291 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1292 000a 002B     		cmp	r3, #0
 1293 000c 03D0     		beq	.L69
 1294              		.loc 1 417 0 is_stmt 0 discriminator 1
 1295 000e 274B     		ldr	r3, .L85
 1296 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1297 0012 012B     		cmp	r3, #1
 1298 0014 03D1     		bne	.L70
 1299              	.L69:
 418:main.c        ****         blocksize = yBlocksize;
 1300              		.loc 1 418 0 is_stmt 1
 1301 0016 264B     		ldr	r3, .L85+4
 1302 0018 1B68     		ldr	r3, [r3]	@ float
 1303 001a 7B60     		str	r3, [r7, #4]	@ float
 1304 001c 02E0     		b	.L71
 1305              	.L70:
 419:main.c        ****     } else {
 420:main.c        ****         blocksize = xBlocksize;
 1306              		.loc 1 420 0
 1307 001e 254B     		ldr	r3, .L85+8
 1308 0020 1B68     		ldr	r3, [r3]	@ float
 1309 0022 7B60     		str	r3, [r7, #4]	@ float
 1310              	.L71:
 421:main.c        ****     }
 422:main.c        ****     
 423:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 424:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 425:main.c        ****         // OR an EVENT happens in the current instruction
 426:main.c        ****         // e.g. CurrentInstruction: GoForward 
 427:main.c        ****         //      S3 on BLACK
 428:main.c        ****         //      Check Ignore Count
 429:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 430:main.c        ****     
 431:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 1311              		.loc 1 431 0
 1312 0024 244B     		ldr	r3, .L85+12
 1313 0026 1B78     		ldrb	r3, [r3]
 1314 0028 FB70     		strb	r3, [r7, #3]
 432:main.c        ****     
 433:main.c        ****     switch (currentInstructionDirection) {
 1315              		.loc 1 433 0
 1316 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1317 002c 012B     		cmp	r3, #1
 1318 002e 31D0     		beq	.L73
 1319 0030 022B     		cmp	r3, #2
 1320 0032 31D0     		beq	.L74
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 32


 1321 0034 002B     		cmp	r3, #0
 1322 0036 31D1     		bne	.L83
 434:main.c        ****         case GoForward:
 435:main.c        ****             // if s3 or s4 go off, check ignoreCount
 436:main.c        ****             //      if ignoreCount == 0, go to next direction
 437:main.c        ****             //      return stop
 438:main.c        ****             if (!s3) {
 1323              		.loc 1 438 0
 1324 0038 204B     		ldr	r3, .L85+16
 1325 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1326 003c 002B     		cmp	r3, #0
 1327 003e 07D1     		bne	.L76
 439:main.c        ****                 if (currentInstruction.ignoreL == 0) {
 1328              		.loc 1 439 0
 1329 0040 1D4B     		ldr	r3, .L85+12
 1330 0042 5B68     		ldr	r3, [r3, #4]
 1331 0044 002B     		cmp	r3, #0
 1332 0046 03D1     		bne	.L76
 440:main.c        ****                     MoveToNextInstruction();
 1333              		.loc 1 440 0
 1334 0048 FFF7FEFF 		bl	MoveToNextInstruction
 441:main.c        ****                     return Stop;
 1335              		.loc 1 441 0
 1336 004c 0523     		movs	r3, #5
 1337 004e 29E0     		b	.L77
 1338              	.L76:
 442:main.c        ****                 }
 443:main.c        ****             }
 444:main.c        ****             
 445:main.c        ****             if (!s4) {
 1339              		.loc 1 445 0
 1340 0050 1B4B     		ldr	r3, .L85+20
 1341 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1342 0054 002B     		cmp	r3, #0
 1343 0056 07D1     		bne	.L78
 446:main.c        ****                 if (currentInstruction.ignoreR == 0) {
 1344              		.loc 1 446 0
 1345 0058 174B     		ldr	r3, .L85+12
 1346 005a 9B68     		ldr	r3, [r3, #8]
 1347 005c 002B     		cmp	r3, #0
 1348 005e 03D1     		bne	.L78
 447:main.c        ****                     MoveToNextInstruction();
 1349              		.loc 1 447 0
 1350 0060 FFF7FEFF 		bl	MoveToNextInstruction
 448:main.c        ****                     return Stop;
 1351              		.loc 1 448 0
 1352 0064 0523     		movs	r3, #5
 1353 0066 1DE0     		b	.L77
 1354              	.L78:
 449:main.c        ****                 }
 450:main.c        ****             }
 451:main.c        ****         
 452:main.c        ****             // if S5 and S6 are on black, move forward
 453:main.c        ****             if (!s5 && !s6) {
 1355              		.loc 1 453 0
 1356 0068 164B     		ldr	r3, .L85+24
 1357 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 33


 1358 006c 002B     		cmp	r3, #0
 1359 006e 05D1     		bne	.L79
 1360              		.loc 1 453 0 is_stmt 0 discriminator 1
 1361 0070 154B     		ldr	r3, .L85+28
 1362 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1363 0074 002B     		cmp	r3, #0
 1364 0076 01D1     		bne	.L79
 454:main.c        ****                 return Forward;   
 1365              		.loc 1 454 0 is_stmt 1
 1366 0078 0023     		movs	r3, #0
 1367 007a 13E0     		b	.L77
 1368              	.L79:
 455:main.c        ****             }
 456:main.c        ****             // if S5 or S6 are on white, adjust accordingly
 457:main.c        ****             if (s5) {
 1369              		.loc 1 457 0
 1370 007c 114B     		ldr	r3, .L85+24
 1371 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 0080 002B     		cmp	r3, #0
 1373 0082 01D0     		beq	.L80
 458:main.c        ****                 return AdjustToTheRight;    
 1374              		.loc 1 458 0
 1375 0084 0423     		movs	r3, #4
 1376 0086 0DE0     		b	.L77
 1377              	.L80:
 459:main.c        ****             }
 460:main.c        ****             if (s6) {
 1378              		.loc 1 460 0
 1379 0088 0F4B     		ldr	r3, .L85+28
 1380 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1381 008c 002B     		cmp	r3, #0
 1382 008e 07D0     		beq	.L84
 461:main.c        ****                 return AdjustToTheLeft;    
 1383              		.loc 1 461 0
 1384 0090 0323     		movs	r3, #3
 1385 0092 07E0     		b	.L77
 1386              	.L73:
 462:main.c        ****             }
 463:main.c        ****             break;
 464:main.c        ****         case waitForLeftTurn:
 465:main.c        ****             return TurnLeft; 
 1387              		.loc 1 465 0
 1388 0094 0223     		movs	r3, #2
 1389 0096 05E0     		b	.L77
 1390              	.L74:
 466:main.c        ****             break;
 467:main.c        ****         case waitForRightTurn:
 468:main.c        ****             return TurnRight;
 1391              		.loc 1 468 0
 1392 0098 0123     		movs	r3, #1
 1393 009a 03E0     		b	.L77
 1394              	.L83:
 469:main.c        ****             break;
 470:main.c        ****         default:
 471:main.c        ****             return Stop;
 1395              		.loc 1 471 0
 1396 009c 0523     		movs	r3, #5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 34


 1397 009e 01E0     		b	.L77
 1398              	.L84:
 463:main.c        ****         case waitForLeftTurn:
 1399              		.loc 1 463 0
 1400 00a0 00BF     		nop
 472:main.c        ****             break;
 473:main.c        ****     }
 474:main.c        ****     return Stop;
 1401              		.loc 1 474 0
 1402 00a2 0523     		movs	r3, #5
 1403              	.L77:
 475:main.c        **** }
 1404              		.loc 1 475 0
 1405 00a4 1846     		mov	r0, r3
 1406 00a6 0837     		adds	r7, r7, #8
 1407              		.cfi_def_cfa_offset 8
 1408 00a8 BD46     		mov	sp, r7
 1409              		.cfi_def_cfa_register 13
 1410              		@ sp needed
 1411 00aa 80BD     		pop	{r7, pc}
 1412              	.L86:
 1413              		.align	2
 1414              	.L85:
 1415 00ac 00000000 		.word	currentOrientation
 1416 00b0 00000000 		.word	yBlocksize
 1417 00b4 00000000 		.word	xBlocksize
 1418 00b8 00000000 		.word	currentInstruction
 1419 00bc 00000000 		.word	s3
 1420 00c0 00000000 		.word	s4
 1421 00c4 00000000 		.word	s5
 1422 00c8 00000000 		.word	s6
 1423              		.cfi_endproc
 1424              	.LFE74:
 1425              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1426              		.section	.text.MoveToNextInstruction,"ax",%progbits
 1427              		.align	2
 1428              		.global	MoveToNextInstruction
 1429              		.thumb
 1430              		.thumb_func
 1431              		.type	MoveToNextInstruction, %function
 1432              	MoveToNextInstruction:
 1433              	.LFB75:
 476:main.c        **** // get next instruction
 477:main.c        **** 
 478:main.c        **** void MoveToNextInstruction() {
 1434              		.loc 1 478 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 1, uses_anonymous_args = 0
 1438              		@ link register save eliminated.
 1439 0000 80B4     		push	{r7}
 1440              		.cfi_def_cfa_offset 4
 1441              		.cfi_offset 7, -4
 1442 0002 00AF     		add	r7, sp, #0
 1443              		.cfi_def_cfa_register 7
 479:main.c        ****     instructionIndex++;
 1444              		.loc 1 479 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 35


 1445 0004 044B     		ldr	r3, .L88
 1446 0006 1B68     		ldr	r3, [r3]
 1447 0008 0133     		adds	r3, r3, #1
 1448 000a 034A     		ldr	r2, .L88
 1449 000c 1360     		str	r3, [r2]
 480:main.c        **** }
 1450              		.loc 1 480 0
 1451 000e 00BF     		nop
 1452 0010 BD46     		mov	sp, r7
 1453              		.cfi_def_cfa_register 13
 1454              		@ sp needed
 1455 0012 80BC     		pop	{r7}
 1456              		.cfi_restore 7
 1457              		.cfi_def_cfa_offset 0
 1458 0014 7047     		bx	lr
 1459              	.L89:
 1460 0016 00BF     		.align	2
 1461              	.L88:
 1462 0018 00000000 		.word	instructionIndex
 1463              		.cfi_endproc
 1464              	.LFE75:
 1465              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 1466              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 1467              		.align	2
 1468              		.global	GetInstructionAtIndex
 1469              		.thumb
 1470              		.thumb_func
 1471              		.type	GetInstructionAtIndex, %function
 1472              	GetInstructionAtIndex:
 1473              	.LFB76:
 481:main.c        **** 
 482:main.c        **** 
 483:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 1474              		.loc 1 483 0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 32
 1477              		@ frame_needed = 1, uses_anonymous_args = 0
 1478              		@ link register save eliminated.
 1479 0000 90B4     		push	{r4, r7}
 1480              		.cfi_def_cfa_offset 8
 1481              		.cfi_offset 4, -8
 1482              		.cfi_offset 7, -4
 1483 0002 88B0     		sub	sp, sp, #32
 1484              		.cfi_def_cfa_offset 40
 1485 0004 00AF     		add	r7, sp, #0
 1486              		.cfi_def_cfa_register 7
 1487 0006 F860     		str	r0, [r7, #12]
 1488 0008 B960     		str	r1, [r7, #8]
 1489 000a 7A60     		str	r2, [r7, #4]
 1490 000c 3B60     		str	r3, [r7]
 1491              	.LBB3:
 484:main.c        ****     Instruction nextInstruction;
 485:main.c        ****     // input is list of instructions and robot will react accordingly
 486:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 1492              		.loc 1 486 0
 1493 000e 3B68     		ldr	r3, [r7]
 1494 0010 FB61     		str	r3, [r7, #28]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 36


 1495 0012 36E0     		b	.L91
 1496              	.L94:
 487:main.c        ****         if(instructionList[i].direction != Skip) {
 1497              		.loc 1 487 0
 1498 0014 FA69     		ldr	r2, [r7, #28]
 1499 0016 1346     		mov	r3, r2
 1500 0018 5B00     		lsls	r3, r3, #1
 1501 001a 1344     		add	r3, r3, r2
 1502 001c 9B00     		lsls	r3, r3, #2
 1503 001e 1A46     		mov	r2, r3
 1504 0020 7B68     		ldr	r3, [r7, #4]
 1505 0022 1344     		add	r3, r3, r2
 1506 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1507 0026 062B     		cmp	r3, #6
 1508 0028 26D0     		beq	.L92
 488:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 1509              		.loc 1 488 0
 1510 002a FA69     		ldr	r2, [r7, #28]
 1511 002c 1346     		mov	r3, r2
 1512 002e 5B00     		lsls	r3, r3, #1
 1513 0030 1344     		add	r3, r3, r2
 1514 0032 9B00     		lsls	r3, r3, #2
 1515 0034 1A46     		mov	r2, r3
 1516 0036 7B68     		ldr	r3, [r7, #4]
 1517 0038 1344     		add	r3, r3, r2
 1518 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1519 003c 3B74     		strb	r3, [r7, #16]
 489:main.c        ****             nextInstruction.ignoreL = instructionList[i].ignoreL;
 1520              		.loc 1 489 0
 1521 003e FA69     		ldr	r2, [r7, #28]
 1522 0040 1346     		mov	r3, r2
 1523 0042 5B00     		lsls	r3, r3, #1
 1524 0044 1344     		add	r3, r3, r2
 1525 0046 9B00     		lsls	r3, r3, #2
 1526 0048 1A46     		mov	r2, r3
 1527 004a 7B68     		ldr	r3, [r7, #4]
 1528 004c 1344     		add	r3, r3, r2
 1529 004e 5B68     		ldr	r3, [r3, #4]
 1530 0050 7B61     		str	r3, [r7, #20]
 490:main.c        ****             nextInstruction.ignoreR = instructionList[i].ignoreR;
 1531              		.loc 1 490 0
 1532 0052 FA69     		ldr	r2, [r7, #28]
 1533 0054 1346     		mov	r3, r2
 1534 0056 5B00     		lsls	r3, r3, #1
 1535 0058 1344     		add	r3, r3, r2
 1536 005a 9B00     		lsls	r3, r3, #2
 1537 005c 1A46     		mov	r2, r3
 1538 005e 7B68     		ldr	r3, [r7, #4]
 1539 0060 1344     		add	r3, r3, r2
 1540 0062 9B68     		ldr	r3, [r3, #8]
 1541 0064 BB61     		str	r3, [r7, #24]
 491:main.c        ****             return nextInstruction; // return next instruction
 1542              		.loc 1 491 0
 1543 0066 FB68     		ldr	r3, [r7, #12]
 1544 0068 1C46     		mov	r4, r3
 1545 006a 07F11003 		add	r3, r7, #16
 1546 006e 93E80700 		ldmia	r3, {r0, r1, r2}
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 37


 1547 0072 84E80700 		stmia	r4, {r0, r1, r2}
 1548 0076 10E0     		b	.L90
 1549              	.L92:
 492:main.c        ****         }
 493:main.c        ****         instructionIndex = i;
 1550              		.loc 1 493 0 discriminator 2
 1551 0078 FB69     		ldr	r3, [r7, #28]
 1552 007a 3B60     		str	r3, [r7]
 486:main.c        ****         if(instructionList[i].direction != Skip) {
 1553              		.loc 1 486 0 discriminator 2
 1554 007c FB69     		ldr	r3, [r7, #28]
 1555 007e 0133     		adds	r3, r3, #1
 1556 0080 FB61     		str	r3, [r7, #28]
 1557              	.L91:
 486:main.c        ****         if(instructionList[i].direction != Skip) {
 1558              		.loc 1 486 0 is_stmt 0 discriminator 1
 1559 0082 FA69     		ldr	r2, [r7, #28]
 1560 0084 BB68     		ldr	r3, [r7, #8]
 1561 0086 9A42     		cmp	r2, r3
 1562 0088 C4DB     		blt	.L94
 1563              	.LBE3:
 494:main.c        ****     }
 495:main.c        ****     return nextInstruction;
 1564              		.loc 1 495 0 is_stmt 1
 1565 008a FB68     		ldr	r3, [r7, #12]
 1566 008c 1C46     		mov	r4, r3
 1567 008e 07F11003 		add	r3, r7, #16
 1568 0092 93E80700 		ldmia	r3, {r0, r1, r2}
 1569 0096 84E80700 		stmia	r4, {r0, r1, r2}
 1570              	.L90:
 496:main.c        **** }
 1571              		.loc 1 496 0
 1572 009a F868     		ldr	r0, [r7, #12]
 1573 009c 2037     		adds	r7, r7, #32
 1574              		.cfi_def_cfa_offset 8
 1575 009e BD46     		mov	sp, r7
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 00a0 90BC     		pop	{r4, r7}
 1579              		.cfi_restore 7
 1580              		.cfi_restore 4
 1581              		.cfi_def_cfa_offset 0
 1582 00a2 7047     		bx	lr
 1583              		.cfi_endproc
 1584              	.LFE76:
 1585              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 1586              		.section	.text.SetRobotMovement,"ax",%progbits
 1587              		.align	2
 1588              		.global	SetRobotMovement
 1589              		.thumb
 1590              		.thumb_func
 1591              		.type	SetRobotMovement, %function
 1592              	SetRobotMovement:
 1593              	.LFB77:
 497:main.c        **** 
 498:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 499:main.c        **** void SetRobotMovement() {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 38


 1594              		.loc 1 499 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 16
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 90B5     		push	{r4, r7, lr}
 1599              		.cfi_def_cfa_offset 12
 1600              		.cfi_offset 4, -12
 1601              		.cfi_offset 7, -8
 1602              		.cfi_offset 14, -4
 1603 0002 85B0     		sub	sp, sp, #20
 1604              		.cfi_def_cfa_offset 32
 1605 0004 00AF     		add	r7, sp, #0
 1606              		.cfi_def_cfa_register 7
 500:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 1607              		.loc 1 500 0
 1608 0006 274B     		ldr	r3, .L111
 1609 0008 1968     		ldr	r1, [r3]
 1610 000a 274B     		ldr	r3, .L111+4
 1611 000c 1A68     		ldr	r2, [r3]
 1612 000e 274B     		ldr	r3, .L111+8
 1613 0010 1B68     		ldr	r3, [r3]
 1614 0012 274C     		ldr	r4, .L111+12
 1615 0014 3846     		mov	r0, r7
 1616 0016 FFF7FEFF 		bl	GetInstructionAtIndex
 1617 001a 3B46     		mov	r3, r7
 1618 001c 93E80700 		ldmia	r3, {r0, r1, r2}
 1619 0020 84E80700 		stmia	r4, {r0, r1, r2}
 501:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 1620              		.loc 1 501 0
 1621 0024 FFF7FEFF 		bl	GetMovementAccordingToInstruction
 1622 0028 0346     		mov	r3, r0
 1623 002a 1A46     		mov	r2, r3
 1624 002c 214B     		ldr	r3, .L111+16
 1625 002e 1A70     		strb	r2, [r3]
 502:main.c        ****     // move robot depending on sensors
 503:main.c        ****     switch (currentDirection) {
 1626              		.loc 1 503 0
 1627 0030 204B     		ldr	r3, .L111+16
 1628 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1629 0034 092B     		cmp	r3, #9
 1630 0036 30D8     		bhi	.L109
 1631 0038 01A2     		adr	r2, .L99
 1632 003a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1633 003e 00BF     		.p2align 2
 1634              	.L99:
 1635 0040 69000000 		.word	.L98+1
 1636 0044 6F000000 		.word	.L100+1
 1637 0048 75000000 		.word	.L101+1
 1638 004c 81000000 		.word	.L102+1
 1639 0050 7B000000 		.word	.L103+1
 1640 0054 87000000 		.word	.L104+1
 1641 0058 99000000 		.word	.L110+1
 1642 005c 99000000 		.word	.L110+1
 1643 0060 8D000000 		.word	.L107+1
 1644 0064 93000000 		.word	.L108+1
 1645              		.p2align 1
 1646              	.L98:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 39


 504:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 505:main.c        ****         case Forward:
 506:main.c        ****             moveForward();
 1647              		.loc 1 506 0
 1648 0068 FFF7FEFF 		bl	moveForward
 507:main.c        ****             break;
 1649              		.loc 1 507 0
 1650 006c 15E0     		b	.L97
 1651              	.L100:
 508:main.c        ****         case TurnRight:
 509:main.c        ****             turnRight();
 1652              		.loc 1 509 0
 1653 006e FFF7FEFF 		bl	turnRight
 510:main.c        ****             break;
 1654              		.loc 1 510 0
 1655 0072 12E0     		b	.L97
 1656              	.L101:
 511:main.c        ****         case TurnLeft:
 512:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1657              		.loc 1 512 0
 1658 0074 FFF7FEFF 		bl	turnLeft
 513:main.c        ****             break;
 1659              		.loc 1 513 0
 1660 0078 0FE0     		b	.L97
 1661              	.L103:
 514:main.c        ****         case AdjustToTheRight:
 515:main.c        ****             adjustRight();
 1662              		.loc 1 515 0
 1663 007a FFF7FEFF 		bl	adjustRight
 516:main.c        ****             break;
 1664              		.loc 1 516 0
 1665 007e 0CE0     		b	.L97
 1666              	.L102:
 517:main.c        ****         case AdjustToTheLeft:
 518:main.c        ****             adjustLeft();
 1667              		.loc 1 518 0
 1668 0080 FFF7FEFF 		bl	adjustLeft
 519:main.c        ****             break;
 1669              		.loc 1 519 0
 1670 0084 09E0     		b	.L97
 1671              	.L104:
 520:main.c        ****         case Stop:
 521:main.c        ****             stopMoving();
 1672              		.loc 1 521 0
 1673 0086 FFF7FEFF 		bl	stopMoving
 522:main.c        ****             break;
 1674              		.loc 1 522 0
 1675 008a 06E0     		b	.L97
 1676              	.L107:
 523:main.c        ****         case ForwardAfterTurn:
 524:main.c        ****             moveForward();
 1677              		.loc 1 524 0
 1678 008c FFF7FEFF 		bl	moveForward
 525:main.c        ****             break;
 1679              		.loc 1 525 0
 1680 0090 03E0     		b	.L97
 1681              	.L108:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 40


 526:main.c        ****         case Backward:
 527:main.c        ****             moveBackward();
 1682              		.loc 1 527 0
 1683 0092 FFF7FEFF 		bl	moveBackward
 528:main.c        ****             break;
 1684              		.loc 1 528 0
 1685 0096 00E0     		b	.L97
 1686              	.L110:
 529:main.c        ****         case waitForTurn:
 530:main.c        ****             break;
 531:main.c        ****         /*case waitForLeftTurn:
 532:main.c        ****             moveForward();
 533:main.c        ****             break;
 534:main.c        ****         case waitForRightTurn:
 535:main.c        ****             moveForward();
 536:main.c        ****             break;*/
 537:main.c        ****         case Unknown:
 538:main.c        ****             // UNKNOWN CONFIGURATION
 539:main.c        ****             break;  
 1687              		.loc 1 539 0
 1688 0098 00BF     		nop
 1689              	.L97:
 1690              	.L109:
 540:main.c        ****     }
 541:main.c        **** }...
 1691              		.loc 1 541 0
 1692 009a 00BF     		nop
 1693 009c 1437     		adds	r7, r7, #20
 1694              		.cfi_def_cfa_offset 12
 1695 009e BD46     		mov	sp, r7
 1696              		.cfi_def_cfa_register 13
 1697              		@ sp needed
 1698 00a0 90BD     		pop	{r4, r7, pc}
 1699              	.L112:
 1700 00a2 00BF     		.align	2
 1701              	.L111:
 1702 00a4 00000000 		.word	numSteps
 1703 00a8 00000000 		.word	instructionList
 1704 00ac 00000000 		.word	instructionIndex
 1705 00b0 00000000 		.word	currentInstruction
 1706 00b4 00000000 		.word	currentDirection
 1707              		.cfi_endproc
 1708              	.LFE77:
 1709              		.size	SetRobotMovement, .-SetRobotMovement
 1710              		.text
 1711              	.Letext0:
 1712              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1713              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1714              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1715              		.file 5 "vars.h"
 1716              		.file 6 "pathfinding.h"
 1717              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 1718              		.file 8 "map.h"
 1719              		.section	.debug_info,"",%progbits
 1720              	.Ldebug_info0:
 1721 0000 05080000 		.4byte	0x805
 1722 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 41


 1723 0006 00000000 		.4byte	.Ldebug_abbrev0
 1724 000a 04       		.byte	0x4
 1725 000b 01       		.uleb128 0x1
 1726 000c 82000000 		.4byte	.LASF127
 1727 0010 0C       		.byte	0xc
 1728 0011 30000000 		.4byte	.LASF128
 1729 0015 EE040000 		.4byte	.LASF129
 1730 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1731 001d 00000000 		.4byte	0
 1732 0021 00000000 		.4byte	.Ldebug_line0
 1733 0025 02       		.uleb128 0x2
 1734 0026 01       		.byte	0x1
 1735 0027 06       		.byte	0x6
 1736 0028 0B060000 		.4byte	.LASF0
 1737 002c 02       		.uleb128 0x2
 1738 002d 01       		.byte	0x1
 1739 002e 08       		.byte	0x8
 1740 002f 7B050000 		.4byte	.LASF1
 1741 0033 02       		.uleb128 0x2
 1742 0034 02       		.byte	0x2
 1743 0035 05       		.byte	0x5
 1744 0036 3F040000 		.4byte	.LASF2
 1745 003a 02       		.uleb128 0x2
 1746 003b 02       		.byte	0x2
 1747 003c 07       		.byte	0x7
 1748 003d 22060000 		.4byte	.LASF3
 1749 0041 03       		.uleb128 0x3
 1750 0042 55000000 		.4byte	.LASF12
 1751 0046 02       		.byte	0x2
 1752 0047 3F       		.byte	0x3f
 1753 0048 4C000000 		.4byte	0x4c
 1754 004c 02       		.uleb128 0x2
 1755 004d 04       		.byte	0x4
 1756 004e 05       		.byte	0x5
 1757 004f 61040000 		.4byte	.LASF4
 1758 0053 02       		.uleb128 0x2
 1759 0054 04       		.byte	0x4
 1760 0055 07       		.byte	0x7
 1761 0056 37050000 		.4byte	.LASF5
 1762 005a 02       		.uleb128 0x2
 1763 005b 08       		.byte	0x8
 1764 005c 05       		.byte	0x5
 1765 005d 33030000 		.4byte	.LASF6
 1766 0061 02       		.uleb128 0x2
 1767 0062 08       		.byte	0x8
 1768 0063 07       		.byte	0x7
 1769 0064 DD010000 		.4byte	.LASF7
 1770 0068 04       		.uleb128 0x4
 1771 0069 04       		.byte	0x4
 1772 006a 05       		.byte	0x5
 1773 006b 696E7400 		.ascii	"int\000"
 1774 006f 02       		.uleb128 0x2
 1775 0070 04       		.byte	0x4
 1776 0071 07       		.byte	0x7
 1777 0072 48000000 		.4byte	.LASF8
 1778 0076 02       		.uleb128 0x2
 1779 0077 08       		.byte	0x8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 42


 1780 0078 04       		.byte	0x4
 1781 0079 03040000 		.4byte	.LASF9
 1782 007d 02       		.uleb128 0x2
 1783 007e 04       		.byte	0x4
 1784 007f 07       		.byte	0x7
 1785 0080 2E050000 		.4byte	.LASF10
 1786 0084 02       		.uleb128 0x2
 1787 0085 01       		.byte	0x1
 1788 0086 08       		.byte	0x8
 1789 0087 C0020000 		.4byte	.LASF11
 1790 008b 03       		.uleb128 0x3
 1791 008c 54050000 		.4byte	.LASF13
 1792 0090 03       		.byte	0x3
 1793 0091 2C       		.byte	0x2c
 1794 0092 41000000 		.4byte	0x41
 1795 0096 05       		.uleb128 0x5
 1796 0097 78060000 		.4byte	.LASF14
 1797 009b 04       		.byte	0x4
 1798 009c E701     		.2byte	0x1e7
 1799 009e 2C000000 		.4byte	0x2c
 1800 00a2 05       		.uleb128 0x5
 1801 00a3 EF020000 		.4byte	.LASF15
 1802 00a7 04       		.byte	0x4
 1803 00a8 E801     		.2byte	0x1e8
 1804 00aa 3A000000 		.4byte	0x3a
 1805 00ae 05       		.uleb128 0x5
 1806 00af B3030000 		.4byte	.LASF16
 1807 00b3 04       		.byte	0x4
 1808 00b4 E901     		.2byte	0x1e9
 1809 00b6 53000000 		.4byte	0x53
 1810 00ba 05       		.uleb128 0x5
 1811 00bb F6020000 		.4byte	.LASF17
 1812 00bf 04       		.byte	0x4
 1813 00c0 EA01     		.2byte	0x1ea
 1814 00c2 25000000 		.4byte	0x25
 1815 00c6 05       		.uleb128 0x5
 1816 00c7 5F000000 		.4byte	.LASF18
 1817 00cb 04       		.byte	0x4
 1818 00cc EB01     		.2byte	0x1eb
 1819 00ce 33000000 		.4byte	0x33
 1820 00d2 02       		.uleb128 0x2
 1821 00d3 04       		.byte	0x4
 1822 00d4 04       		.byte	0x4
 1823 00d5 A5010000 		.4byte	.LASF19
 1824 00d9 02       		.uleb128 0x2
 1825 00da 08       		.byte	0x8
 1826 00db 04       		.byte	0x4
 1827 00dc 7E060000 		.4byte	.LASF20
 1828 00e0 06       		.uleb128 0x6
 1829 00e1 D5030000 		.4byte	.LASF45
 1830 00e5 20       		.byte	0x20
 1831 00e6 05       		.byte	0x5
 1832 00e7 28       		.byte	0x28
 1833 00e8 B9010000 		.4byte	0x1b9
 1834 00ec 07       		.uleb128 0x7
 1835 00ed DF030000 		.4byte	.LASF21
 1836 00f1 05       		.byte	0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 43


 1837 00f2 2A       		.byte	0x2a
 1838 00f3 BA000000 		.4byte	0xba
 1839 00f7 00       		.byte	0
 1840 00f8 07       		.uleb128 0x7
 1841 00f9 D7010000 		.4byte	.LASF22
 1842 00fd 05       		.byte	0x5
 1843 00fe 2B       		.byte	0x2b
 1844 00ff 96000000 		.4byte	0x96
 1845 0103 01       		.byte	0x1
 1846 0104 07       		.uleb128 0x7
 1847 0105 5C050000 		.4byte	.LASF23
 1848 0109 05       		.byte	0x5
 1849 010a 2C       		.byte	0x2c
 1850 010b C6000000 		.4byte	0xc6
 1851 010f 02       		.byte	0x2
 1852 0110 07       		.uleb128 0x7
 1853 0111 97020000 		.4byte	.LASF24
 1854 0115 05       		.byte	0x5
 1855 0116 2D       		.byte	0x2d
 1856 0117 C6000000 		.4byte	0xc6
 1857 011b 04       		.byte	0x4
 1858 011c 07       		.uleb128 0x7
 1859 011d 35060000 		.4byte	.LASF25
 1860 0121 05       		.byte	0x5
 1861 0122 2E       		.byte	0x2e
 1862 0123 C6000000 		.4byte	0xc6
 1863 0127 06       		.byte	0x6
 1864 0128 07       		.uleb128 0x7
 1865 0129 A5060000 		.4byte	.LASF26
 1866 012d 05       		.byte	0x5
 1867 012e 2F       		.byte	0x2f
 1868 012f C6000000 		.4byte	0xc6
 1869 0133 08       		.byte	0x8
 1870 0134 07       		.uleb128 0x7
 1871 0135 78030000 		.4byte	.LASF27
 1872 0139 05       		.byte	0x5
 1873 013a 30       		.byte	0x30
 1874 013b C6000000 		.4byte	0xc6
 1875 013f 0A       		.byte	0xa
 1876 0140 07       		.uleb128 0x7
 1877 0141 C5020000 		.4byte	.LASF28
 1878 0145 05       		.byte	0x5
 1879 0146 31       		.byte	0x31
 1880 0147 C6000000 		.4byte	0xc6
 1881 014b 0C       		.byte	0xc
 1882 014c 07       		.uleb128 0x7
 1883 014d E4030000 		.4byte	.LASF29
 1884 0151 05       		.byte	0x5
 1885 0152 32       		.byte	0x32
 1886 0153 C6000000 		.4byte	0xc6
 1887 0157 0E       		.byte	0xe
 1888 0158 07       		.uleb128 0x7
 1889 0159 41030000 		.4byte	.LASF30
 1890 015d 05       		.byte	0x5
 1891 015e 33       		.byte	0x33
 1892 015f C6000000 		.4byte	0xc6
 1893 0163 10       		.byte	0x10
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 44


 1894 0164 07       		.uleb128 0x7
 1895 0165 D5040000 		.4byte	.LASF31
 1896 0169 05       		.byte	0x5
 1897 016a 34       		.byte	0x34
 1898 016b C6000000 		.4byte	0xc6
 1899 016f 12       		.byte	0x12
 1900 0170 07       		.uleb128 0x7
 1901 0171 C5060000 		.4byte	.LASF32
 1902 0175 05       		.byte	0x5
 1903 0176 35       		.byte	0x35
 1904 0177 C6000000 		.4byte	0xc6
 1905 017b 14       		.byte	0x14
 1906 017c 07       		.uleb128 0x7
 1907 017d 06030000 		.4byte	.LASF33
 1908 0181 05       		.byte	0x5
 1909 0182 36       		.byte	0x36
 1910 0183 C6000000 		.4byte	0xc6
 1911 0187 16       		.byte	0x16
 1912 0188 07       		.uleb128 0x7
 1913 0189 2A010000 		.4byte	.LASF34
 1914 018d 05       		.byte	0x5
 1915 018e 37       		.byte	0x37
 1916 018f C6000000 		.4byte	0xc6
 1917 0193 18       		.byte	0x18
 1918 0194 07       		.uleb128 0x7
 1919 0195 9B040000 		.4byte	.LASF35
 1920 0199 05       		.byte	0x5
 1921 019a 38       		.byte	0x38
 1922 019b C6000000 		.4byte	0xc6
 1923 019f 1A       		.byte	0x1a
 1924 01a0 07       		.uleb128 0x7
 1925 01a1 6F030000 		.4byte	.LASF36
 1926 01a5 05       		.byte	0x5
 1927 01a6 39       		.byte	0x39
 1928 01a7 C6000000 		.4byte	0xc6
 1929 01ab 1C       		.byte	0x1c
 1930 01ac 07       		.uleb128 0x7
 1931 01ad 8A010000 		.4byte	.LASF37
 1932 01b1 05       		.byte	0x5
 1933 01b2 3A       		.byte	0x3a
 1934 01b3 C6000000 		.4byte	0xc6
 1935 01b7 1E       		.byte	0x1e
 1936 01b8 00       		.byte	0
 1937 01b9 08       		.uleb128 0x8
 1938 01ba 1B000000 		.4byte	.LASF50
 1939 01be 01       		.byte	0x1
 1940 01bf 2C000000 		.4byte	0x2c
 1941 01c3 06       		.byte	0x6
 1942 01c4 0D       		.byte	0xd
 1943 01c5 F4010000 		.4byte	0x1f4
 1944 01c9 09       		.uleb128 0x9
 1945 01ca F5050000 		.4byte	.LASF38
 1946 01ce 00       		.byte	0
 1947 01cf 09       		.uleb128 0x9
 1948 01d0 23030000 		.4byte	.LASF39
 1949 01d4 01       		.byte	0x1
 1950 01d5 09       		.uleb128 0x9
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 45


 1951 01d6 BA030000 		.4byte	.LASF40
 1952 01da 02       		.byte	0x2
 1953 01db 09       		.uleb128 0x9
 1954 01dc 5D030000 		.4byte	.LASF41
 1955 01e0 03       		.byte	0x3
 1956 01e1 09       		.uleb128 0x9
 1957 01e2 34020000 		.4byte	.LASF42
 1958 01e6 04       		.byte	0x4
 1959 01e7 09       		.uleb128 0x9
 1960 01e8 7E020000 		.4byte	.LASF43
 1961 01ec 05       		.byte	0x5
 1962 01ed 09       		.uleb128 0x9
 1963 01ee E2050000 		.4byte	.LASF44
 1964 01f2 06       		.byte	0x6
 1965 01f3 00       		.byte	0
 1966 01f4 06       		.uleb128 0x6
 1967 01f5 F4010000 		.4byte	.LASF46
 1968 01f9 0C       		.byte	0xc
 1969 01fa 06       		.byte	0x6
 1970 01fb 0E       		.byte	0xe
 1971 01fc 25020000 		.4byte	0x225
 1972 0200 07       		.uleb128 0x7
 1973 0201 00000000 		.4byte	.LASF47
 1974 0205 06       		.byte	0x6
 1975 0206 0F       		.byte	0xf
 1976 0207 B9010000 		.4byte	0x1b9
 1977 020b 00       		.byte	0
 1978 020c 07       		.uleb128 0x7
 1979 020d CE060000 		.4byte	.LASF48
 1980 0211 06       		.byte	0x6
 1981 0212 10       		.byte	0x10
 1982 0213 68000000 		.4byte	0x68
 1983 0217 04       		.byte	0x4
 1984 0218 07       		.uleb128 0x7
 1985 0219 D6060000 		.4byte	.LASF49
 1986 021d 06       		.byte	0x6
 1987 021e 11       		.byte	0x11
 1988 021f 68000000 		.4byte	0x68
 1989 0223 08       		.byte	0x8
 1990 0224 00       		.byte	0
 1991 0225 03       		.uleb128 0x3
 1992 0226 F4010000 		.4byte	.LASF46
 1993 022a 06       		.byte	0x6
 1994 022b 12       		.byte	0x12
 1995 022c F4010000 		.4byte	0x1f4
 1996 0230 08       		.uleb128 0x8
 1997 0231 B9040000 		.4byte	.LASF51
 1998 0235 01       		.byte	0x1
 1999 0236 2C000000 		.4byte	0x2c
 2000 023a 06       		.byte	0x6
 2001 023b 14       		.byte	0x14
 2002 023c 58020000 		.4byte	0x258
 2003 0240 0A       		.uleb128 0xa
 2004 0241 557000   		.ascii	"Up\000"
 2005 0244 00       		.byte	0
 2006 0245 09       		.uleb128 0x9
 2007 0246 CA040000 		.4byte	.LASF52
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 46


 2008 024a 01       		.byte	0x1
 2009 024b 09       		.uleb128 0x9
 2010 024c 13030000 		.4byte	.LASF53
 2011 0250 02       		.byte	0x2
 2012 0251 09       		.uleb128 0x9
 2013 0252 CF040000 		.4byte	.LASF54
 2014 0256 03       		.byte	0x3
 2015 0257 00       		.byte	0
 2016 0258 08       		.uleb128 0x8
 2017 0259 6D050000 		.4byte	.LASF55
 2018 025d 01       		.byte	0x1
 2019 025e 2C000000 		.4byte	0x2c
 2020 0262 01       		.byte	0x1
 2021 0263 18       		.byte	0x18
 2022 0264 A5020000 		.4byte	0x2a5
 2023 0268 09       		.uleb128 0x9
 2024 0269 81040000 		.4byte	.LASF56
 2025 026d 00       		.byte	0
 2026 026e 09       		.uleb128 0x9
 2027 026f CB030000 		.4byte	.LASF57
 2028 0273 01       		.byte	0x1
 2029 0274 09       		.uleb128 0x9
 2030 0275 8A030000 		.4byte	.LASF58
 2031 0279 02       		.byte	0x2
 2032 027a 09       		.uleb128 0x9
 2033 027b 5F060000 		.4byte	.LASF59
 2034 027f 03       		.byte	0x3
 2035 0280 09       		.uleb128 0x9
 2036 0281 9F050000 		.4byte	.LASF60
 2037 0285 04       		.byte	0x4
 2038 0286 09       		.uleb128 0x9
 2039 0287 B0050000 		.4byte	.LASF61
 2040 028b 05       		.byte	0x5
 2041 028c 09       		.uleb128 0x9
 2042 028d 9C030000 		.4byte	.LASF62
 2043 0291 06       		.byte	0x6
 2044 0292 09       		.uleb128 0x9
 2045 0293 8B020000 		.4byte	.LASF63
 2046 0297 07       		.byte	0x7
 2047 0298 09       		.uleb128 0x9
 2048 0299 0A000000 		.4byte	.LASF64
 2049 029d 08       		.byte	0x8
 2050 029e 09       		.uleb128 0x9
 2051 029f 6F060000 		.4byte	.LASF65
 2052 02a3 09       		.byte	0x9
 2053 02a4 00       		.byte	0
 2054 02a5 0B       		.uleb128 0xb
 2055 02a6 18030000 		.4byte	.LASF73
 2056 02aa 01       		.byte	0x1
 2057 02ab 34       		.byte	0x34
 2058 02ac 00000000 		.4byte	.LFB64
 2059 02b0 F4000000 		.4byte	.LFE64-.LFB64
 2060 02b4 01       		.uleb128 0x1
 2061 02b5 9C       		.byte	0x9c
 2062 02b6 D3020000 		.4byte	0x2d3
 2063 02ba 0C       		.uleb128 0xc
 2064 02bb 58000000 		.4byte	.LBB2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 47


 2065 02bf 62000000 		.4byte	.LBE2-.LBB2
 2066 02c3 0D       		.uleb128 0xd
 2067 02c4 63030000 		.4byte	.LASF72
 2068 02c8 01       		.byte	0x1
 2069 02c9 42       		.byte	0x42
 2070 02ca D2000000 		.4byte	0xd2
 2071 02ce 02       		.uleb128 0x2
 2072 02cf 91       		.byte	0x91
 2073 02d0 6C       		.sleb128 -20
 2074 02d1 00       		.byte	0
 2075 02d2 00       		.byte	0
 2076 02d3 0E       		.uleb128 0xe
 2077 02d4 55040000 		.4byte	.LASF66
 2078 02d8 01       		.byte	0x1
 2079 02d9 4D       		.byte	0x4d
 2080 02da 00000000 		.4byte	.LFB65
 2081 02de 18000000 		.4byte	.LFE65-.LFB65
 2082 02e2 01       		.uleb128 0x1
 2083 02e3 9C       		.byte	0x9c
 2084 02e4 0E       		.uleb128 0xe
 2085 02e5 49040000 		.4byte	.LASF67
 2086 02e9 01       		.byte	0x1
 2087 02ea 53       		.byte	0x53
 2088 02eb 00000000 		.4byte	.LFB66
 2089 02ef 18000000 		.4byte	.LFE66-.LFB66
 2090 02f3 01       		.uleb128 0x1
 2091 02f4 9C       		.byte	0x9c
 2092 02f5 0E       		.uleb128 0xe
 2093 02f6 FF050000 		.4byte	.LASF68
 2094 02fa 01       		.byte	0x1
 2095 02fb 59       		.byte	0x59
 2096 02fc 00000000 		.4byte	.LFB67
 2097 0300 18000000 		.4byte	.LFE67-.LFB67
 2098 0304 01       		.uleb128 0x1
 2099 0305 9C       		.byte	0x9c
 2100 0306 0E       		.uleb128 0xe
 2101 0307 10010000 		.4byte	.LASF69
 2102 030b 01       		.byte	0x1
 2103 030c 5F       		.byte	0x5f
 2104 030d 00000000 		.4byte	.LFB68
 2105 0311 18000000 		.4byte	.LFE68-.LFB68
 2106 0315 01       		.uleb128 0x1
 2107 0316 9C       		.byte	0x9c
 2108 0317 0F       		.uleb128 0xf
 2109 0318 1D020000 		.4byte	.LASF70
 2110 031c 01       		.byte	0x1
 2111 031d 65       		.byte	0x65
 2112 031e 00000000 		.4byte	.LFB69
 2113 0322 38000000 		.4byte	.LFE69-.LFB69
 2114 0326 01       		.uleb128 0x1
 2115 0327 9C       		.byte	0x9c
 2116 0328 10       		.uleb128 0x10
 2117 0329 47060000 		.4byte	.LASF71
 2118 032d 01       		.byte	0x1
 2119 032e 71       		.byte	0x71
 2120 032f 68000000 		.4byte	0x68
 2121 0333 00000000 		.4byte	.LFB70
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 48


 2122 0337 C0000000 		.4byte	.LFE70-.LFB70
 2123 033b 01       		.uleb128 0x1
 2124 033c 9C       		.byte	0x9c
 2125 033d 11       		.uleb128 0x11
 2126 033e 62020000 		.4byte	.LASF81
 2127 0342 01       		.byte	0x1
 2128 0343 9F       		.byte	0x9f
 2129 0344 C6000000 		.4byte	0xc6
 2130 0348 00000000 		.4byte	.LFB71
 2131 034c 54000000 		.4byte	.LFE71-.LFB71
 2132 0350 01       		.uleb128 0x1
 2133 0351 9C       		.byte	0x9c
 2134 0352 81030000 		.4byte	0x381
 2135 0356 12       		.uleb128 0x12
 2136 0357 D1010000 		.4byte	.LASF83
 2137 035b 01       		.byte	0x1
 2138 035c 9F       		.byte	0x9f
 2139 035d A2000000 		.4byte	0xa2
 2140 0361 02       		.uleb128 0x2
 2141 0362 91       		.byte	0x91
 2142 0363 66       		.sleb128 -26
 2143 0364 13       		.uleb128 0x13
 2144 0365 63707300 		.ascii	"cps\000"
 2145 0369 01       		.byte	0x1
 2146 036a A1       		.byte	0xa1
 2147 036b D2000000 		.4byte	0xd2
 2148 036f 02       		.uleb128 0x2
 2149 0370 91       		.byte	0x91
 2150 0371 6C       		.sleb128 -20
 2151 0372 13       		.uleb128 0x13
 2152 0373 72706D00 		.ascii	"rpm\000"
 2153 0377 01       		.byte	0x1
 2154 0378 A2       		.byte	0xa2
 2155 0379 C6000000 		.4byte	0xc6
 2156 037d 02       		.uleb128 0x2
 2157 037e 91       		.byte	0x91
 2158 037f 6A       		.sleb128 -22
 2159 0380 00       		.byte	0
 2160 0381 14       		.uleb128 0x14
 2161 0382 79010000 		.4byte	.LASF79
 2162 0386 01       		.byte	0x1
 2163 0387 AA       		.byte	0xaa
 2164 0388 00000000 		.4byte	.LFB72
 2165 038c 34000000 		.4byte	.LFE72-.LFB72
 2166 0390 01       		.uleb128 0x1
 2167 0391 9C       		.byte	0x9c
 2168 0392 15       		.uleb128 0x15
 2169 0393 85060000 		.4byte	.LASF74
 2170 0397 01       		.byte	0x1
 2171 0398 0401     		.2byte	0x104
 2172 039a 58020000 		.4byte	0x258
 2173 039e 00000000 		.4byte	.LFB73
 2174 03a2 90020000 		.4byte	.LFE73-.LFB73
 2175 03a6 01       		.uleb128 0x1
 2176 03a7 9C       		.byte	0x9c
 2177 03a8 CB030000 		.4byte	0x3cb
 2178 03ac 16       		.uleb128 0x16
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 49


 2179 03ad 37000000 		.4byte	.LASF75
 2180 03b1 01       		.byte	0x1
 2181 03b2 0501     		.2byte	0x105
 2182 03b4 D2000000 		.4byte	0xd2
 2183 03b8 02       		.uleb128 0x2
 2184 03b9 91       		.byte	0x91
 2185 03ba 74       		.sleb128 -12
 2186 03bb 16       		.uleb128 0x16
 2187 03bc A4030000 		.4byte	.LASF76
 2188 03c0 01       		.byte	0x1
 2189 03c1 0C01     		.2byte	0x10c
 2190 03c3 58020000 		.4byte	0x258
 2191 03c7 02       		.uleb128 0x2
 2192 03c8 91       		.byte	0x91
 2193 03c9 73       		.sleb128 -13
 2194 03ca 00       		.byte	0
 2195 03cb 15       		.uleb128 0x15
 2196 03cc 3B010000 		.4byte	.LASF77
 2197 03d0 01       		.byte	0x1
 2198 03d1 9F01     		.2byte	0x19f
 2199 03d3 58020000 		.4byte	0x258
 2200 03d7 00000000 		.4byte	.LFB74
 2201 03db CC000000 		.4byte	.LFE74-.LFB74
 2202 03df 01       		.uleb128 0x1
 2203 03e0 9C       		.byte	0x9c
 2204 03e1 04040000 		.4byte	0x404
 2205 03e5 16       		.uleb128 0x16
 2206 03e6 37000000 		.4byte	.LASF75
 2207 03ea 01       		.byte	0x1
 2208 03eb A001     		.2byte	0x1a0
 2209 03ed D2000000 		.4byte	0xd2
 2210 03f1 02       		.uleb128 0x2
 2211 03f2 91       		.byte	0x91
 2212 03f3 74       		.sleb128 -12
 2213 03f4 16       		.uleb128 0x16
 2214 03f5 AB010000 		.4byte	.LASF78
 2215 03f9 01       		.byte	0x1
 2216 03fa AF01     		.2byte	0x1af
 2217 03fc B9010000 		.4byte	0x1b9
 2218 0400 02       		.uleb128 0x2
 2219 0401 91       		.byte	0x91
 2220 0402 73       		.sleb128 -13
 2221 0403 00       		.byte	0
 2222 0404 17       		.uleb128 0x17
 2223 0405 A3040000 		.4byte	.LASF80
 2224 0409 01       		.byte	0x1
 2225 040a DE01     		.2byte	0x1de
 2226 040c 00000000 		.4byte	.LFB75
 2227 0410 1C000000 		.4byte	.LFE75-.LFB75
 2228 0414 01       		.uleb128 0x1
 2229 0415 9C       		.byte	0x9c
 2230 0416 18       		.uleb128 0x18
 2231 0417 B5050000 		.4byte	.LASF82
 2232 041b 01       		.byte	0x1
 2233 041c E301     		.2byte	0x1e3
 2234 041e 25020000 		.4byte	0x225
 2235 0422 00000000 		.4byte	.LFB76
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 50


 2236 0426 A4000000 		.4byte	.LFE76-.LFB76
 2237 042a 01       		.uleb128 0x1
 2238 042b 9C       		.byte	0x9c
 2239 042c 84040000 		.4byte	0x484
 2240 0430 19       		.uleb128 0x19
 2241 0431 32010000 		.4byte	.LASF84
 2242 0435 01       		.byte	0x1
 2243 0436 E301     		.2byte	0x1e3
 2244 0438 68000000 		.4byte	0x68
 2245 043c 02       		.uleb128 0x2
 2246 043d 91       		.byte	0x91
 2247 043e 60       		.sleb128 -32
 2248 043f 19       		.uleb128 0x19
 2249 0440 CE020000 		.4byte	.LASF85
 2250 0444 01       		.byte	0x1
 2251 0445 E301     		.2byte	0x1e3
 2252 0447 84040000 		.4byte	0x484
 2253 044b 02       		.uleb128 0x2
 2254 044c 91       		.byte	0x91
 2255 044d 5C       		.sleb128 -36
 2256 044e 19       		.uleb128 0x19
 2257 044f DE020000 		.4byte	.LASF86
 2258 0453 01       		.byte	0x1
 2259 0454 E301     		.2byte	0x1e3
 2260 0456 68000000 		.4byte	0x68
 2261 045a 02       		.uleb128 0x2
 2262 045b 91       		.byte	0x91
 2263 045c 58       		.sleb128 -40
 2264 045d 16       		.uleb128 0x16
 2265 045e 72000000 		.4byte	.LASF87
 2266 0462 01       		.byte	0x1
 2267 0463 E401     		.2byte	0x1e4
 2268 0465 25020000 		.4byte	0x225
 2269 0469 02       		.uleb128 0x2
 2270 046a 91       		.byte	0x91
 2271 046b 68       		.sleb128 -24
 2272 046c 0C       		.uleb128 0xc
 2273 046d 0E000000 		.4byte	.LBB3
 2274 0471 7C000000 		.4byte	.LBE3-.LBB3
 2275 0475 1A       		.uleb128 0x1a
 2276 0476 6900     		.ascii	"i\000"
 2277 0478 01       		.byte	0x1
 2278 0479 E601     		.2byte	0x1e6
 2279 047b 68000000 		.4byte	0x68
 2280 047f 02       		.uleb128 0x2
 2281 0480 91       		.byte	0x91
 2282 0481 74       		.sleb128 -12
 2283 0482 00       		.byte	0
 2284 0483 00       		.byte	0
 2285 0484 1B       		.uleb128 0x1b
 2286 0485 04       		.byte	0x4
 2287 0486 25020000 		.4byte	0x225
 2288 048a 1C       		.uleb128 0x1c
 2289 048b 0C020000 		.4byte	.LASF88
 2290 048f 01       		.byte	0x1
 2291 0490 F301     		.2byte	0x1f3
 2292 0492 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 51


 2293 0496 B8000000 		.4byte	.LFE77-.LFB77
 2294 049a 01       		.uleb128 0x1
 2295 049b 9C       		.byte	0x9c
 2296 049c 1D       		.uleb128 0x1d
 2297 049d 6A040000 		.4byte	.LASF89
 2298 04a1 07       		.byte	0x7
 2299 04a2 1207     		.2byte	0x712
 2300 04a4 A8040000 		.4byte	0x4a8
 2301 04a8 1E       		.uleb128 0x1e
 2302 04a9 8B000000 		.4byte	0x8b
 2303 04ad 1F       		.uleb128 0x1f
 2304 04ae 747300   		.ascii	"ts\000"
 2305 04b1 05       		.byte	0x5
 2306 04b2 10       		.byte	0x10
 2307 04b3 96000000 		.4byte	0x96
 2308 04b7 05       		.uleb128 0x5
 2309 04b8 03       		.byte	0x3
 2310 04b9 00000000 		.4byte	ts
 2311 04bd 20       		.uleb128 0x20
 2312 04be CB050000 		.4byte	.LASF90
 2313 04c2 05       		.byte	0x5
 2314 04c3 11       		.byte	0x11
 2315 04c4 A2000000 		.4byte	0xa2
 2316 04c8 05       		.uleb128 0x5
 2317 04c9 03       		.byte	0x3
 2318 04ca 00000000 		.4byte	ts_enc
 2319 04ce 20       		.uleb128 0x20
 2320 04cf 77040000 		.4byte	.LASF91
 2321 04d3 05       		.byte	0x5
 2322 04d4 12       		.byte	0x12
 2323 04d5 A2000000 		.4byte	0xa2
 2324 04d9 05       		.uleb128 0x5
 2325 04da 03       		.byte	0x3
 2326 04db 00000000 		.4byte	ts_update
 2327 04df 20       		.uleb128 0x20
 2328 04e0 93030000 		.4byte	.LASF92
 2329 04e4 05       		.byte	0x5
 2330 04e5 13       		.byte	0x13
 2331 04e6 A2000000 		.4byte	0xa2
 2332 04ea 05       		.uleb128 0x5
 2333 04eb 03       		.byte	0x3
 2334 04ec 00000000 		.4byte	ts_speed
 2335 04f0 20       		.uleb128 0x20
 2336 04f1 A2020000 		.4byte	.LASF93
 2337 04f5 05       		.byte	0x5
 2338 04f6 14       		.byte	0x14
 2339 04f7 A2000000 		.4byte	0xa2
 2340 04fb 05       		.uleb128 0x5
 2341 04fc 03       		.byte	0x3
 2342 04fd 00000000 		.4byte	ts_display
 2343 0501 20       		.uleb128 0x20
 2344 0502 56020000 		.4byte	.LASF94
 2345 0506 05       		.byte	0x5
 2346 0507 16       		.byte	0x16
 2347 0508 96000000 		.4byte	0x96
 2348 050c 05       		.uleb128 0x5
 2349 050d 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 52


 2350 050e 00000000 		.4byte	flag_ts_enc
 2351 0512 20       		.uleb128 0x20
 2352 0513 47020000 		.4byte	.LASF95
 2353 0517 05       		.byte	0x5
 2354 0518 17       		.byte	0x17
 2355 0519 96000000 		.4byte	0x96
 2356 051d 05       		.uleb128 0x5
 2357 051e 03       		.byte	0x3
 2358 051f 00000000 		.4byte	flag_ts_update
 2359 0523 20       		.uleb128 0x20
 2360 0524 0F040000 		.4byte	.LASF96
 2361 0528 05       		.byte	0x5
 2362 0529 18       		.byte	0x18
 2363 052a 96000000 		.4byte	0x96
 2364 052e 05       		.uleb128 0x5
 2365 052f 03       		.byte	0x3
 2366 0530 00000000 		.4byte	flag_ts_speed
 2367 0534 20       		.uleb128 0x20
 2368 0535 D2050000 		.4byte	.LASF97
 2369 0539 05       		.byte	0x5
 2370 053a 19       		.byte	0x19
 2371 053b 96000000 		.4byte	0x96
 2372 053f 05       		.uleb128 0x5
 2373 0540 03       		.byte	0x3
 2374 0541 00000000 		.4byte	flag_ts_display
 2375 0545 20       		.uleb128 0x20
 2376 0546 2C040000 		.4byte	.LASF98
 2377 054a 05       		.byte	0x5
 2378 054b 1B       		.byte	0x1b
 2379 054c 96000000 		.4byte	0x96
 2380 0550 05       		.uleb128 0x5
 2381 0551 03       		.byte	0x3
 2382 0552 00000000 		.4byte	flag_rx
 2383 0556 20       		.uleb128 0x20
 2384 0557 00020000 		.4byte	.LASF99
 2385 055b 05       		.byte	0x5
 2386 055c 1C       		.byte	0x1c
 2387 055d 96000000 		.4byte	0x96
 2388 0561 05       		.uleb128 0x5
 2389 0562 03       		.byte	0x3
 2390 0563 00000000 		.4byte	flag_packet
 2391 0567 20       		.uleb128 0x20
 2392 0568 B6060000 		.4byte	.LASF100
 2393 056c 05       		.byte	0x5
 2394 056d 1D       		.byte	0x1d
 2395 056e 96000000 		.4byte	0x96
 2396 0572 05       		.uleb128 0x5
 2397 0573 03       		.byte	0x3
 2398 0574 00000000 		.4byte	flag_KB_string
 2399 0578 20       		.uleb128 0x20
 2400 0579 1D040000 		.4byte	.LASF101
 2401 057d 05       		.byte	0x5
 2402 057e 1F       		.byte	0x1f
 2403 057f 96000000 		.4byte	0x96
 2404 0583 05       		.uleb128 0x5
 2405 0584 03       		.byte	0x3
 2406 0585 00000000 		.4byte	dataready_flag
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 53


 2407 0589 20       		.uleb128 0x20
 2408 058a 5D010000 		.4byte	.LASF102
 2409 058e 05       		.byte	0x5
 2410 058f 21       		.byte	0x21
 2411 0590 96000000 		.4byte	0x96
 2412 0594 05       		.uleb128 0x5
 2413 0595 03       		.byte	0x3
 2414 0596 00000000 		.4byte	flag_rf_transmission_active
 2415 059a 21       		.uleb128 0x21
 2416 059b 84000000 		.4byte	0x84
 2417 059f AA050000 		.4byte	0x5aa
 2418 05a3 22       		.uleb128 0x22
 2419 05a4 7D000000 		.4byte	0x7d
 2420 05a8 3F       		.byte	0x3f
 2421 05a9 00       		.byte	0
 2422 05aa 20       		.uleb128 0x20
 2423 05ab E7050000 		.4byte	.LASF103
 2424 05af 05       		.byte	0x5
 2425 05b0 24       		.byte	0x24
 2426 05b1 9A050000 		.4byte	0x59a
 2427 05b5 05       		.uleb128 0x5
 2428 05b6 03       		.byte	0x3
 2429 05b7 00000000 		.4byte	displaystring
 2430 05bb 20       		.uleb128 0x20
 2431 05bc 9A050000 		.4byte	.LASF104
 2432 05c0 05       		.byte	0x5
 2433 05c1 25       		.byte	0x25
 2434 05c2 9A050000 		.4byte	0x59a
 2435 05c6 05       		.uleb128 0x5
 2436 05c7 03       		.byte	0x3
 2437 05c8 00000000 		.4byte	line
 2438 05cc 20       		.uleb128 0x20
 2439 05cd 67050000 		.4byte	.LASF105
 2440 05d1 05       		.byte	0x5
 2441 05d2 25       		.byte	0x25
 2442 05d3 9A050000 		.4byte	0x59a
 2443 05d7 05       		.uleb128 0x5
 2444 05d8 03       		.byte	0x3
 2445 05d9 00000000 		.4byte	entry
 2446 05dd 21       		.uleb128 0x21
 2447 05de 96000000 		.4byte	0x96
 2448 05e2 ED050000 		.4byte	0x5ed
 2449 05e6 22       		.uleb128 0x22
 2450 05e7 7D000000 		.4byte	0x7d
 2451 05eb 3F       		.byte	0x3f
 2452 05ec 00       		.byte	0
 2453 05ed 20       		.uleb128 0x20
 2454 05ee C7010000 		.4byte	.LASF106
 2455 05f2 05       		.byte	0x5
 2456 05f3 26       		.byte	0x26
 2457 05f4 DD050000 		.4byte	0x5dd
 2458 05f8 05       		.uleb128 0x5
 2459 05f9 03       		.byte	0x3
 2460 05fa 00000000 		.4byte	usbBuffer
 2461 05fe 20       		.uleb128 0x20
 2462 05ff 65000000 		.4byte	.LASF107
 2463 0603 05       		.byte	0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 54


 2464 0604 3C       		.byte	0x3c
 2465 0605 E0000000 		.4byte	0xe0
 2466 0609 05       		.uleb128 0x5
 2467 060a 03       		.byte	0x3
 2468 060b 00000000 		.4byte	system_state
 2469 060f 21       		.uleb128 0x21
 2470 0610 68000000 		.4byte	0x68
 2471 0614 25060000 		.4byte	0x625
 2472 0618 22       		.uleb128 0x22
 2473 0619 7D000000 		.4byte	0x7d
 2474 061d 0E       		.byte	0xe
 2475 061e 22       		.uleb128 0x22
 2476 061f 7D000000 		.4byte	0x7d
 2477 0623 12       		.byte	0x12
 2478 0624 00       		.byte	0
 2479 0625 23       		.uleb128 0x23
 2480 0626 6D617000 		.ascii	"map\000"
 2481 062a 08       		.byte	0x8
 2482 062b 04       		.byte	0x4
 2483 062c 0F060000 		.4byte	0x60f
 2484 0630 21       		.uleb128 0x21
 2485 0631 68000000 		.4byte	0x68
 2486 0635 46060000 		.4byte	0x646
 2487 0639 22       		.uleb128 0x22
 2488 063a 7D000000 		.4byte	0x7d
 2489 063e 04       		.byte	0x4
 2490 063f 22       		.uleb128 0x22
 2491 0640 7D000000 		.4byte	0x7d
 2492 0644 01       		.byte	0x1
 2493 0645 00       		.byte	0
 2494 0646 24       		.uleb128 0x24
 2495 0647 80030000 		.4byte	.LASF108
 2496 064b 08       		.byte	0x8
 2497 064c 05       		.byte	0x5
 2498 064d 30060000 		.4byte	0x630
 2499 0651 20       		.uleb128 0x20
 2500 0652 DD040000 		.4byte	.LASF109
 2501 0656 01       		.byte	0x1
 2502 0657 19       		.byte	0x19
 2503 0658 58020000 		.4byte	0x258
 2504 065c 05       		.uleb128 0x5
 2505 065d 03       		.byte	0x3
 2506 065e 00000000 		.4byte	currentDirection
 2507 0662 20       		.uleb128 0x20
 2508 0663 F1030000 		.4byte	.LASF110
 2509 0667 01       		.byte	0x1
 2510 0668 19       		.byte	0x19
 2511 0669 58020000 		.4byte	0x258
 2512 066d 05       		.uleb128 0x5
 2513 066e 03       		.byte	0x3
 2514 066f 00000000 		.4byte	previousDirection
 2515 0673 20       		.uleb128 0x20
 2516 0674 AD020000 		.4byte	.LASF111
 2517 0678 01       		.byte	0x1
 2518 0679 1B       		.byte	0x1b
 2519 067a 30020000 		.4byte	0x230
 2520 067e 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 55


 2521 067f 03       		.byte	0x3
 2522 0680 00000000 		.4byte	currentOrientation
 2523 0684 20       		.uleb128 0x20
 2524 0685 49030000 		.4byte	.LASF112
 2525 0689 01       		.byte	0x1
 2526 068a 1B       		.byte	0x1b
 2527 068b 30020000 		.4byte	0x230
 2528 068f 05       		.uleb128 0x5
 2529 0690 03       		.byte	0x3
 2530 0691 00000000 		.4byte	previousOrientation
 2531 0695 20       		.uleb128 0x20
 2532 0696 4C060000 		.4byte	.LASF113
 2533 069a 01       		.byte	0x1
 2534 069b 1C       		.byte	0x1c
 2535 069c 25020000 		.4byte	0x225
 2536 06a0 05       		.uleb128 0x5
 2537 06a1 03       		.byte	0x3
 2538 06a2 00000000 		.4byte	currentInstruction
 2539 06a6 20       		.uleb128 0x20
 2540 06a7 32010000 		.4byte	.LASF84
 2541 06ab 01       		.byte	0x1
 2542 06ac 1D       		.byte	0x1d
 2543 06ad 68000000 		.4byte	0x68
 2544 06b1 05       		.uleb128 0x5
 2545 06b2 03       		.byte	0x3
 2546 06b3 00000000 		.4byte	numSteps
 2547 06b7 20       		.uleb128 0x20
 2548 06b8 CE020000 		.4byte	.LASF85
 2549 06bc 01       		.byte	0x1
 2550 06bd 1F       		.byte	0x1f
 2551 06be 84040000 		.4byte	0x484
 2552 06c2 05       		.uleb128 0x5
 2553 06c3 03       		.byte	0x3
 2554 06c4 00000000 		.4byte	instructionList
 2555 06c8 20       		.uleb128 0x20
 2556 06c9 DE020000 		.4byte	.LASF86
 2557 06cd 01       		.byte	0x1
 2558 06ce 20       		.byte	0x20
 2559 06cf AE000000 		.4byte	0xae
 2560 06d3 05       		.uleb128 0x5
 2561 06d4 03       		.byte	0x3
 2562 06d5 00000000 		.4byte	instructionIndex
 2563 06d9 1F       		.uleb128 0x1f
 2564 06da 733300   		.ascii	"s3\000"
 2565 06dd 01       		.byte	0x1
 2566 06de 24       		.byte	0x24
 2567 06df 96000000 		.4byte	0x96
 2568 06e3 05       		.uleb128 0x5
 2569 06e4 03       		.byte	0x3
 2570 06e5 00000000 		.4byte	s3
 2571 06e9 1F       		.uleb128 0x1f
 2572 06ea 733400   		.ascii	"s4\000"
 2573 06ed 01       		.byte	0x1
 2574 06ee 24       		.byte	0x24
 2575 06ef 96000000 		.4byte	0x96
 2576 06f3 05       		.uleb128 0x5
 2577 06f4 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 56


 2578 06f5 00000000 		.4byte	s4
 2579 06f9 1F       		.uleb128 0x1f
 2580 06fa 733500   		.ascii	"s5\000"
 2581 06fd 01       		.byte	0x1
 2582 06fe 24       		.byte	0x24
 2583 06ff 96000000 		.4byte	0x96
 2584 0703 05       		.uleb128 0x5
 2585 0704 03       		.byte	0x3
 2586 0705 00000000 		.4byte	s5
 2587 0709 1F       		.uleb128 0x1f
 2588 070a 733600   		.ascii	"s6\000"
 2589 070d 01       		.byte	0x1
 2590 070e 24       		.byte	0x24
 2591 070f 96000000 		.4byte	0x96
 2592 0713 05       		.uleb128 0x5
 2593 0714 03       		.byte	0x3
 2594 0715 00000000 		.4byte	s6
 2595 0719 20       		.uleb128 0x20
 2596 071a 89040000 		.4byte	.LASF114
 2597 071e 01       		.byte	0x1
 2598 071f 29       		.byte	0x29
 2599 0720 AE000000 		.4byte	0xae
 2600 0724 05       		.uleb128 0x5
 2601 0725 03       		.byte	0x3
 2602 0726 00000000 		.4byte	totalMilliseconds
 2603 072a 20       		.uleb128 0x20
 2604 072b 1C010000 		.4byte	.LASF115
 2605 072f 01       		.byte	0x1
 2606 0730 2A       		.byte	0x2a
 2607 0731 D2000000 		.4byte	0xd2
 2608 0735 05       		.uleb128 0x5
 2609 0736 03       		.byte	0x3
 2610 0737 00000000 		.4byte	totalDistance
 2611 073b 21       		.uleb128 0x21
 2612 073c 84000000 		.4byte	0x84
 2613 0740 4B070000 		.4byte	0x74b
 2614 0744 22       		.uleb128 0x22
 2615 0745 7D000000 		.4byte	0x7d
 2616 0749 44       		.byte	0x44
 2617 074a 00       		.byte	0
 2618 074b 20       		.uleb128 0x20
 2619 074c 41000000 		.4byte	.LASF116
 2620 0750 01       		.byte	0x1
 2621 0751 2C       		.byte	0x2c
 2622 0752 3B070000 		.4byte	0x73b
 2623 0756 05       		.uleb128 0x5
 2624 0757 03       		.byte	0x3
 2625 0758 00000000 		.4byte	buffer
 2626 075c 20       		.uleb128 0x20
 2627 075d 97010000 		.4byte	.LASF117
 2628 0761 01       		.byte	0x1
 2629 0762 2D       		.byte	0x2d
 2630 0763 68000000 		.4byte	0x68
 2631 0767 05       		.uleb128 0x5
 2632 0768 03       		.byte	0x3
 2633 0769 00000000 		.4byte	quadDec2Count
 2634 076d 20       		.uleb128 0x20
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 57


 2635 076e AD060000 		.4byte	.LASF118
 2636 0772 01       		.byte	0x1
 2637 0773 2E       		.byte	0x2e
 2638 0774 68000000 		.4byte	0x68
 2639 0778 05       		.uleb128 0x5
 2640 0779 03       		.byte	0x3
 2641 077a 00000000 		.4byte	timerInt
 2642 077e 20       		.uleb128 0x20
 2643 077f 2A020000 		.4byte	.LASF119
 2644 0783 01       		.byte	0x1
 2645 0784 2F       		.byte	0x2f
 2646 0785 68000000 		.4byte	0x68
 2647 0789 05       		.uleb128 0x5
 2648 078a 03       		.byte	0x3
 2649 078b 00000000 		.4byte	keepLedOn
 2650 078f 20       		.uleb128 0x20
 2651 0790 49050000 		.4byte	.LASF120
 2652 0794 01       		.byte	0x1
 2653 0795 30       		.byte	0x30
 2654 0796 AE000000 		.4byte	0xae
 2655 079a 05       		.uleb128 0x5
 2656 079b 03       		.byte	0x3
 2657 079c 00000000 		.4byte	stopBuffer
 2658 07a0 20       		.uleb128 0x20
 2659 07a1 FB020000 		.4byte	.LASF121
 2660 07a5 01       		.byte	0x1
 2661 07a6 B1       		.byte	0xb1
 2662 07a7 D2000000 		.4byte	0xd2
 2663 07ab 05       		.uleb128 0x5
 2664 07ac 03       		.byte	0x3
 2665 07ad 00000000 		.4byte	xBlocksize
 2666 07b1 20       		.uleb128 0x20
 2667 07b2 34040000 		.4byte	.LASF122
 2668 07b6 01       		.byte	0x1
 2669 07b7 B2       		.byte	0xb2
 2670 07b8 D2000000 		.4byte	0xd2
 2671 07bc 05       		.uleb128 0x5
 2672 07bd 03       		.byte	0x3
 2673 07be 00000000 		.4byte	yBlocksize
 2674 07c2 20       		.uleb128 0x20
 2675 07c3 17060000 		.4byte	.LASF123
 2676 07c7 01       		.byte	0x1
 2677 07c8 B3       		.byte	0xb3
 2678 07c9 96000000 		.4byte	0x96
 2679 07cd 05       		.uleb128 0x5
 2680 07ce 03       		.byte	0x3
 2681 07cf 00000000 		.4byte	currentRow
 2682 07d3 20       		.uleb128 0x20
 2683 07d4 9A060000 		.4byte	.LASF124
 2684 07d8 01       		.byte	0x1
 2685 07d9 B4       		.byte	0xb4
 2686 07da 96000000 		.4byte	0x96
 2687 07de 05       		.uleb128 0x5
 2688 07df 03       		.byte	0x3
 2689 07e0 00000000 		.4byte	currentCol
 2690 07e4 25       		.uleb128 0x25
 2691 07e5 89050000 		.4byte	.LASF125
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 58


 2692 07e9 01       		.byte	0x1
 2693 07ea 0101     		.2byte	0x101
 2694 07ec 96000000 		.4byte	0x96
 2695 07f0 05       		.uleb128 0x5
 2696 07f1 03       		.byte	0x3
 2697 07f2 00000000 		.4byte	stoppedAfterTurn
 2698 07f6 25       		.uleb128 0x25
 2699 07f7 71020000 		.4byte	.LASF126
 2700 07fb 01       		.byte	0x1
 2701 07fc 0201     		.2byte	0x102
 2702 07fe 96000000 		.4byte	0x96
 2703 0802 05       		.uleb128 0x5
 2704 0803 03       		.byte	0x3
 2705 0804 00000000 		.4byte	ignoreSensor
 2706 0808 00       		.byte	0
 2707              		.section	.debug_abbrev,"",%progbits
 2708              	.Ldebug_abbrev0:
 2709 0000 01       		.uleb128 0x1
 2710 0001 11       		.uleb128 0x11
 2711 0002 01       		.byte	0x1
 2712 0003 25       		.uleb128 0x25
 2713 0004 0E       		.uleb128 0xe
 2714 0005 13       		.uleb128 0x13
 2715 0006 0B       		.uleb128 0xb
 2716 0007 03       		.uleb128 0x3
 2717 0008 0E       		.uleb128 0xe
 2718 0009 1B       		.uleb128 0x1b
 2719 000a 0E       		.uleb128 0xe
 2720 000b 55       		.uleb128 0x55
 2721 000c 17       		.uleb128 0x17
 2722 000d 11       		.uleb128 0x11
 2723 000e 01       		.uleb128 0x1
 2724 000f 10       		.uleb128 0x10
 2725 0010 17       		.uleb128 0x17
 2726 0011 00       		.byte	0
 2727 0012 00       		.byte	0
 2728 0013 02       		.uleb128 0x2
 2729 0014 24       		.uleb128 0x24
 2730 0015 00       		.byte	0
 2731 0016 0B       		.uleb128 0xb
 2732 0017 0B       		.uleb128 0xb
 2733 0018 3E       		.uleb128 0x3e
 2734 0019 0B       		.uleb128 0xb
 2735 001a 03       		.uleb128 0x3
 2736 001b 0E       		.uleb128 0xe
 2737 001c 00       		.byte	0
 2738 001d 00       		.byte	0
 2739 001e 03       		.uleb128 0x3
 2740 001f 16       		.uleb128 0x16
 2741 0020 00       		.byte	0
 2742 0021 03       		.uleb128 0x3
 2743 0022 0E       		.uleb128 0xe
 2744 0023 3A       		.uleb128 0x3a
 2745 0024 0B       		.uleb128 0xb
 2746 0025 3B       		.uleb128 0x3b
 2747 0026 0B       		.uleb128 0xb
 2748 0027 49       		.uleb128 0x49
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 59


 2749 0028 13       		.uleb128 0x13
 2750 0029 00       		.byte	0
 2751 002a 00       		.byte	0
 2752 002b 04       		.uleb128 0x4
 2753 002c 24       		.uleb128 0x24
 2754 002d 00       		.byte	0
 2755 002e 0B       		.uleb128 0xb
 2756 002f 0B       		.uleb128 0xb
 2757 0030 3E       		.uleb128 0x3e
 2758 0031 0B       		.uleb128 0xb
 2759 0032 03       		.uleb128 0x3
 2760 0033 08       		.uleb128 0x8
 2761 0034 00       		.byte	0
 2762 0035 00       		.byte	0
 2763 0036 05       		.uleb128 0x5
 2764 0037 16       		.uleb128 0x16
 2765 0038 00       		.byte	0
 2766 0039 03       		.uleb128 0x3
 2767 003a 0E       		.uleb128 0xe
 2768 003b 3A       		.uleb128 0x3a
 2769 003c 0B       		.uleb128 0xb
 2770 003d 3B       		.uleb128 0x3b
 2771 003e 05       		.uleb128 0x5
 2772 003f 49       		.uleb128 0x49
 2773 0040 13       		.uleb128 0x13
 2774 0041 00       		.byte	0
 2775 0042 00       		.byte	0
 2776 0043 06       		.uleb128 0x6
 2777 0044 13       		.uleb128 0x13
 2778 0045 01       		.byte	0x1
 2779 0046 03       		.uleb128 0x3
 2780 0047 0E       		.uleb128 0xe
 2781 0048 0B       		.uleb128 0xb
 2782 0049 0B       		.uleb128 0xb
 2783 004a 3A       		.uleb128 0x3a
 2784 004b 0B       		.uleb128 0xb
 2785 004c 3B       		.uleb128 0x3b
 2786 004d 0B       		.uleb128 0xb
 2787 004e 01       		.uleb128 0x1
 2788 004f 13       		.uleb128 0x13
 2789 0050 00       		.byte	0
 2790 0051 00       		.byte	0
 2791 0052 07       		.uleb128 0x7
 2792 0053 0D       		.uleb128 0xd
 2793 0054 00       		.byte	0
 2794 0055 03       		.uleb128 0x3
 2795 0056 0E       		.uleb128 0xe
 2796 0057 3A       		.uleb128 0x3a
 2797 0058 0B       		.uleb128 0xb
 2798 0059 3B       		.uleb128 0x3b
 2799 005a 0B       		.uleb128 0xb
 2800 005b 49       		.uleb128 0x49
 2801 005c 13       		.uleb128 0x13
 2802 005d 38       		.uleb128 0x38
 2803 005e 0B       		.uleb128 0xb
 2804 005f 00       		.byte	0
 2805 0060 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 60


 2806 0061 08       		.uleb128 0x8
 2807 0062 04       		.uleb128 0x4
 2808 0063 01       		.byte	0x1
 2809 0064 03       		.uleb128 0x3
 2810 0065 0E       		.uleb128 0xe
 2811 0066 0B       		.uleb128 0xb
 2812 0067 0B       		.uleb128 0xb
 2813 0068 49       		.uleb128 0x49
 2814 0069 13       		.uleb128 0x13
 2815 006a 3A       		.uleb128 0x3a
 2816 006b 0B       		.uleb128 0xb
 2817 006c 3B       		.uleb128 0x3b
 2818 006d 0B       		.uleb128 0xb
 2819 006e 01       		.uleb128 0x1
 2820 006f 13       		.uleb128 0x13
 2821 0070 00       		.byte	0
 2822 0071 00       		.byte	0
 2823 0072 09       		.uleb128 0x9
 2824 0073 28       		.uleb128 0x28
 2825 0074 00       		.byte	0
 2826 0075 03       		.uleb128 0x3
 2827 0076 0E       		.uleb128 0xe
 2828 0077 1C       		.uleb128 0x1c
 2829 0078 0B       		.uleb128 0xb
 2830 0079 00       		.byte	0
 2831 007a 00       		.byte	0
 2832 007b 0A       		.uleb128 0xa
 2833 007c 28       		.uleb128 0x28
 2834 007d 00       		.byte	0
 2835 007e 03       		.uleb128 0x3
 2836 007f 08       		.uleb128 0x8
 2837 0080 1C       		.uleb128 0x1c
 2838 0081 0B       		.uleb128 0xb
 2839 0082 00       		.byte	0
 2840 0083 00       		.byte	0
 2841 0084 0B       		.uleb128 0xb
 2842 0085 2E       		.uleb128 0x2e
 2843 0086 01       		.byte	0x1
 2844 0087 3F       		.uleb128 0x3f
 2845 0088 19       		.uleb128 0x19
 2846 0089 03       		.uleb128 0x3
 2847 008a 0E       		.uleb128 0xe
 2848 008b 3A       		.uleb128 0x3a
 2849 008c 0B       		.uleb128 0xb
 2850 008d 3B       		.uleb128 0x3b
 2851 008e 0B       		.uleb128 0xb
 2852 008f 27       		.uleb128 0x27
 2853 0090 19       		.uleb128 0x19
 2854 0091 11       		.uleb128 0x11
 2855 0092 01       		.uleb128 0x1
 2856 0093 12       		.uleb128 0x12
 2857 0094 06       		.uleb128 0x6
 2858 0095 40       		.uleb128 0x40
 2859 0096 18       		.uleb128 0x18
 2860 0097 9642     		.uleb128 0x2116
 2861 0099 19       		.uleb128 0x19
 2862 009a 01       		.uleb128 0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 61


 2863 009b 13       		.uleb128 0x13
 2864 009c 00       		.byte	0
 2865 009d 00       		.byte	0
 2866 009e 0C       		.uleb128 0xc
 2867 009f 0B       		.uleb128 0xb
 2868 00a0 01       		.byte	0x1
 2869 00a1 11       		.uleb128 0x11
 2870 00a2 01       		.uleb128 0x1
 2871 00a3 12       		.uleb128 0x12
 2872 00a4 06       		.uleb128 0x6
 2873 00a5 00       		.byte	0
 2874 00a6 00       		.byte	0
 2875 00a7 0D       		.uleb128 0xd
 2876 00a8 34       		.uleb128 0x34
 2877 00a9 00       		.byte	0
 2878 00aa 03       		.uleb128 0x3
 2879 00ab 0E       		.uleb128 0xe
 2880 00ac 3A       		.uleb128 0x3a
 2881 00ad 0B       		.uleb128 0xb
 2882 00ae 3B       		.uleb128 0x3b
 2883 00af 0B       		.uleb128 0xb
 2884 00b0 49       		.uleb128 0x49
 2885 00b1 13       		.uleb128 0x13
 2886 00b2 02       		.uleb128 0x2
 2887 00b3 18       		.uleb128 0x18
 2888 00b4 00       		.byte	0
 2889 00b5 00       		.byte	0
 2890 00b6 0E       		.uleb128 0xe
 2891 00b7 2E       		.uleb128 0x2e
 2892 00b8 00       		.byte	0
 2893 00b9 3F       		.uleb128 0x3f
 2894 00ba 19       		.uleb128 0x19
 2895 00bb 03       		.uleb128 0x3
 2896 00bc 0E       		.uleb128 0xe
 2897 00bd 3A       		.uleb128 0x3a
 2898 00be 0B       		.uleb128 0xb
 2899 00bf 3B       		.uleb128 0x3b
 2900 00c0 0B       		.uleb128 0xb
 2901 00c1 27       		.uleb128 0x27
 2902 00c2 19       		.uleb128 0x19
 2903 00c3 11       		.uleb128 0x11
 2904 00c4 01       		.uleb128 0x1
 2905 00c5 12       		.uleb128 0x12
 2906 00c6 06       		.uleb128 0x6
 2907 00c7 40       		.uleb128 0x40
 2908 00c8 18       		.uleb128 0x18
 2909 00c9 9742     		.uleb128 0x2117
 2910 00cb 19       		.uleb128 0x19
 2911 00cc 00       		.byte	0
 2912 00cd 00       		.byte	0
 2913 00ce 0F       		.uleb128 0xf
 2914 00cf 2E       		.uleb128 0x2e
 2915 00d0 00       		.byte	0
 2916 00d1 3F       		.uleb128 0x3f
 2917 00d2 19       		.uleb128 0x19
 2918 00d3 03       		.uleb128 0x3
 2919 00d4 0E       		.uleb128 0xe
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 62


 2920 00d5 3A       		.uleb128 0x3a
 2921 00d6 0B       		.uleb128 0xb
 2922 00d7 3B       		.uleb128 0x3b
 2923 00d8 0B       		.uleb128 0xb
 2924 00d9 27       		.uleb128 0x27
 2925 00da 19       		.uleb128 0x19
 2926 00db 11       		.uleb128 0x11
 2927 00dc 01       		.uleb128 0x1
 2928 00dd 12       		.uleb128 0x12
 2929 00de 06       		.uleb128 0x6
 2930 00df 40       		.uleb128 0x40
 2931 00e0 18       		.uleb128 0x18
 2932 00e1 9642     		.uleb128 0x2116
 2933 00e3 19       		.uleb128 0x19
 2934 00e4 00       		.byte	0
 2935 00e5 00       		.byte	0
 2936 00e6 10       		.uleb128 0x10
 2937 00e7 2E       		.uleb128 0x2e
 2938 00e8 00       		.byte	0
 2939 00e9 3F       		.uleb128 0x3f
 2940 00ea 19       		.uleb128 0x19
 2941 00eb 03       		.uleb128 0x3
 2942 00ec 0E       		.uleb128 0xe
 2943 00ed 3A       		.uleb128 0x3a
 2944 00ee 0B       		.uleb128 0xb
 2945 00ef 3B       		.uleb128 0x3b
 2946 00f0 0B       		.uleb128 0xb
 2947 00f1 49       		.uleb128 0x49
 2948 00f2 13       		.uleb128 0x13
 2949 00f3 11       		.uleb128 0x11
 2950 00f4 01       		.uleb128 0x1
 2951 00f5 12       		.uleb128 0x12
 2952 00f6 06       		.uleb128 0x6
 2953 00f7 40       		.uleb128 0x40
 2954 00f8 18       		.uleb128 0x18
 2955 00f9 9642     		.uleb128 0x2116
 2956 00fb 19       		.uleb128 0x19
 2957 00fc 00       		.byte	0
 2958 00fd 00       		.byte	0
 2959 00fe 11       		.uleb128 0x11
 2960 00ff 2E       		.uleb128 0x2e
 2961 0100 01       		.byte	0x1
 2962 0101 3F       		.uleb128 0x3f
 2963 0102 19       		.uleb128 0x19
 2964 0103 03       		.uleb128 0x3
 2965 0104 0E       		.uleb128 0xe
 2966 0105 3A       		.uleb128 0x3a
 2967 0106 0B       		.uleb128 0xb
 2968 0107 3B       		.uleb128 0x3b
 2969 0108 0B       		.uleb128 0xb
 2970 0109 27       		.uleb128 0x27
 2971 010a 19       		.uleb128 0x19
 2972 010b 49       		.uleb128 0x49
 2973 010c 13       		.uleb128 0x13
 2974 010d 11       		.uleb128 0x11
 2975 010e 01       		.uleb128 0x1
 2976 010f 12       		.uleb128 0x12
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 63


 2977 0110 06       		.uleb128 0x6
 2978 0111 40       		.uleb128 0x40
 2979 0112 18       		.uleb128 0x18
 2980 0113 9642     		.uleb128 0x2116
 2981 0115 19       		.uleb128 0x19
 2982 0116 01       		.uleb128 0x1
 2983 0117 13       		.uleb128 0x13
 2984 0118 00       		.byte	0
 2985 0119 00       		.byte	0
 2986 011a 12       		.uleb128 0x12
 2987 011b 05       		.uleb128 0x5
 2988 011c 00       		.byte	0
 2989 011d 03       		.uleb128 0x3
 2990 011e 0E       		.uleb128 0xe
 2991 011f 3A       		.uleb128 0x3a
 2992 0120 0B       		.uleb128 0xb
 2993 0121 3B       		.uleb128 0x3b
 2994 0122 0B       		.uleb128 0xb
 2995 0123 49       		.uleb128 0x49
 2996 0124 13       		.uleb128 0x13
 2997 0125 02       		.uleb128 0x2
 2998 0126 18       		.uleb128 0x18
 2999 0127 00       		.byte	0
 3000 0128 00       		.byte	0
 3001 0129 13       		.uleb128 0x13
 3002 012a 34       		.uleb128 0x34
 3003 012b 00       		.byte	0
 3004 012c 03       		.uleb128 0x3
 3005 012d 08       		.uleb128 0x8
 3006 012e 3A       		.uleb128 0x3a
 3007 012f 0B       		.uleb128 0xb
 3008 0130 3B       		.uleb128 0x3b
 3009 0131 0B       		.uleb128 0xb
 3010 0132 49       		.uleb128 0x49
 3011 0133 13       		.uleb128 0x13
 3012 0134 02       		.uleb128 0x2
 3013 0135 18       		.uleb128 0x18
 3014 0136 00       		.byte	0
 3015 0137 00       		.byte	0
 3016 0138 14       		.uleb128 0x14
 3017 0139 2E       		.uleb128 0x2e
 3018 013a 00       		.byte	0
 3019 013b 3F       		.uleb128 0x3f
 3020 013c 19       		.uleb128 0x19
 3021 013d 03       		.uleb128 0x3
 3022 013e 0E       		.uleb128 0xe
 3023 013f 3A       		.uleb128 0x3a
 3024 0140 0B       		.uleb128 0xb
 3025 0141 3B       		.uleb128 0x3b
 3026 0142 0B       		.uleb128 0xb
 3027 0143 11       		.uleb128 0x11
 3028 0144 01       		.uleb128 0x1
 3029 0145 12       		.uleb128 0x12
 3030 0146 06       		.uleb128 0x6
 3031 0147 40       		.uleb128 0x40
 3032 0148 18       		.uleb128 0x18
 3033 0149 9742     		.uleb128 0x2117
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 64


 3034 014b 19       		.uleb128 0x19
 3035 014c 00       		.byte	0
 3036 014d 00       		.byte	0
 3037 014e 15       		.uleb128 0x15
 3038 014f 2E       		.uleb128 0x2e
 3039 0150 01       		.byte	0x1
 3040 0151 3F       		.uleb128 0x3f
 3041 0152 19       		.uleb128 0x19
 3042 0153 03       		.uleb128 0x3
 3043 0154 0E       		.uleb128 0xe
 3044 0155 3A       		.uleb128 0x3a
 3045 0156 0B       		.uleb128 0xb
 3046 0157 3B       		.uleb128 0x3b
 3047 0158 05       		.uleb128 0x5
 3048 0159 49       		.uleb128 0x49
 3049 015a 13       		.uleb128 0x13
 3050 015b 11       		.uleb128 0x11
 3051 015c 01       		.uleb128 0x1
 3052 015d 12       		.uleb128 0x12
 3053 015e 06       		.uleb128 0x6
 3054 015f 40       		.uleb128 0x40
 3055 0160 18       		.uleb128 0x18
 3056 0161 9642     		.uleb128 0x2116
 3057 0163 19       		.uleb128 0x19
 3058 0164 01       		.uleb128 0x1
 3059 0165 13       		.uleb128 0x13
 3060 0166 00       		.byte	0
 3061 0167 00       		.byte	0
 3062 0168 16       		.uleb128 0x16
 3063 0169 34       		.uleb128 0x34
 3064 016a 00       		.byte	0
 3065 016b 03       		.uleb128 0x3
 3066 016c 0E       		.uleb128 0xe
 3067 016d 3A       		.uleb128 0x3a
 3068 016e 0B       		.uleb128 0xb
 3069 016f 3B       		.uleb128 0x3b
 3070 0170 05       		.uleb128 0x5
 3071 0171 49       		.uleb128 0x49
 3072 0172 13       		.uleb128 0x13
 3073 0173 02       		.uleb128 0x2
 3074 0174 18       		.uleb128 0x18
 3075 0175 00       		.byte	0
 3076 0176 00       		.byte	0
 3077 0177 17       		.uleb128 0x17
 3078 0178 2E       		.uleb128 0x2e
 3079 0179 00       		.byte	0
 3080 017a 3F       		.uleb128 0x3f
 3081 017b 19       		.uleb128 0x19
 3082 017c 03       		.uleb128 0x3
 3083 017d 0E       		.uleb128 0xe
 3084 017e 3A       		.uleb128 0x3a
 3085 017f 0B       		.uleb128 0xb
 3086 0180 3B       		.uleb128 0x3b
 3087 0181 05       		.uleb128 0x5
 3088 0182 11       		.uleb128 0x11
 3089 0183 01       		.uleb128 0x1
 3090 0184 12       		.uleb128 0x12
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 65


 3091 0185 06       		.uleb128 0x6
 3092 0186 40       		.uleb128 0x40
 3093 0187 18       		.uleb128 0x18
 3094 0188 9742     		.uleb128 0x2117
 3095 018a 19       		.uleb128 0x19
 3096 018b 00       		.byte	0
 3097 018c 00       		.byte	0
 3098 018d 18       		.uleb128 0x18
 3099 018e 2E       		.uleb128 0x2e
 3100 018f 01       		.byte	0x1
 3101 0190 3F       		.uleb128 0x3f
 3102 0191 19       		.uleb128 0x19
 3103 0192 03       		.uleb128 0x3
 3104 0193 0E       		.uleb128 0xe
 3105 0194 3A       		.uleb128 0x3a
 3106 0195 0B       		.uleb128 0xb
 3107 0196 3B       		.uleb128 0x3b
 3108 0197 05       		.uleb128 0x5
 3109 0198 27       		.uleb128 0x27
 3110 0199 19       		.uleb128 0x19
 3111 019a 49       		.uleb128 0x49
 3112 019b 13       		.uleb128 0x13
 3113 019c 11       		.uleb128 0x11
 3114 019d 01       		.uleb128 0x1
 3115 019e 12       		.uleb128 0x12
 3116 019f 06       		.uleb128 0x6
 3117 01a0 40       		.uleb128 0x40
 3118 01a1 18       		.uleb128 0x18
 3119 01a2 9742     		.uleb128 0x2117
 3120 01a4 19       		.uleb128 0x19
 3121 01a5 01       		.uleb128 0x1
 3122 01a6 13       		.uleb128 0x13
 3123 01a7 00       		.byte	0
 3124 01a8 00       		.byte	0
 3125 01a9 19       		.uleb128 0x19
 3126 01aa 05       		.uleb128 0x5
 3127 01ab 00       		.byte	0
 3128 01ac 03       		.uleb128 0x3
 3129 01ad 0E       		.uleb128 0xe
 3130 01ae 3A       		.uleb128 0x3a
 3131 01af 0B       		.uleb128 0xb
 3132 01b0 3B       		.uleb128 0x3b
 3133 01b1 05       		.uleb128 0x5
 3134 01b2 49       		.uleb128 0x49
 3135 01b3 13       		.uleb128 0x13
 3136 01b4 02       		.uleb128 0x2
 3137 01b5 18       		.uleb128 0x18
 3138 01b6 00       		.byte	0
 3139 01b7 00       		.byte	0
 3140 01b8 1A       		.uleb128 0x1a
 3141 01b9 34       		.uleb128 0x34
 3142 01ba 00       		.byte	0
 3143 01bb 03       		.uleb128 0x3
 3144 01bc 08       		.uleb128 0x8
 3145 01bd 3A       		.uleb128 0x3a
 3146 01be 0B       		.uleb128 0xb
 3147 01bf 3B       		.uleb128 0x3b
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 66


 3148 01c0 05       		.uleb128 0x5
 3149 01c1 49       		.uleb128 0x49
 3150 01c2 13       		.uleb128 0x13
 3151 01c3 02       		.uleb128 0x2
 3152 01c4 18       		.uleb128 0x18
 3153 01c5 00       		.byte	0
 3154 01c6 00       		.byte	0
 3155 01c7 1B       		.uleb128 0x1b
 3156 01c8 0F       		.uleb128 0xf
 3157 01c9 00       		.byte	0
 3158 01ca 0B       		.uleb128 0xb
 3159 01cb 0B       		.uleb128 0xb
 3160 01cc 49       		.uleb128 0x49
 3161 01cd 13       		.uleb128 0x13
 3162 01ce 00       		.byte	0
 3163 01cf 00       		.byte	0
 3164 01d0 1C       		.uleb128 0x1c
 3165 01d1 2E       		.uleb128 0x2e
 3166 01d2 00       		.byte	0
 3167 01d3 3F       		.uleb128 0x3f
 3168 01d4 19       		.uleb128 0x19
 3169 01d5 03       		.uleb128 0x3
 3170 01d6 0E       		.uleb128 0xe
 3171 01d7 3A       		.uleb128 0x3a
 3172 01d8 0B       		.uleb128 0xb
 3173 01d9 3B       		.uleb128 0x3b
 3174 01da 05       		.uleb128 0x5
 3175 01db 11       		.uleb128 0x11
 3176 01dc 01       		.uleb128 0x1
 3177 01dd 12       		.uleb128 0x12
 3178 01de 06       		.uleb128 0x6
 3179 01df 40       		.uleb128 0x40
 3180 01e0 18       		.uleb128 0x18
 3181 01e1 9642     		.uleb128 0x2116
 3182 01e3 19       		.uleb128 0x19
 3183 01e4 00       		.byte	0
 3184 01e5 00       		.byte	0
 3185 01e6 1D       		.uleb128 0x1d
 3186 01e7 34       		.uleb128 0x34
 3187 01e8 00       		.byte	0
 3188 01e9 03       		.uleb128 0x3
 3189 01ea 0E       		.uleb128 0xe
 3190 01eb 3A       		.uleb128 0x3a
 3191 01ec 0B       		.uleb128 0xb
 3192 01ed 3B       		.uleb128 0x3b
 3193 01ee 05       		.uleb128 0x5
 3194 01ef 49       		.uleb128 0x49
 3195 01f0 13       		.uleb128 0x13
 3196 01f1 3F       		.uleb128 0x3f
 3197 01f2 19       		.uleb128 0x19
 3198 01f3 3C       		.uleb128 0x3c
 3199 01f4 19       		.uleb128 0x19
 3200 01f5 00       		.byte	0
 3201 01f6 00       		.byte	0
 3202 01f7 1E       		.uleb128 0x1e
 3203 01f8 35       		.uleb128 0x35
 3204 01f9 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 67


 3205 01fa 49       		.uleb128 0x49
 3206 01fb 13       		.uleb128 0x13
 3207 01fc 00       		.byte	0
 3208 01fd 00       		.byte	0
 3209 01fe 1F       		.uleb128 0x1f
 3210 01ff 34       		.uleb128 0x34
 3211 0200 00       		.byte	0
 3212 0201 03       		.uleb128 0x3
 3213 0202 08       		.uleb128 0x8
 3214 0203 3A       		.uleb128 0x3a
 3215 0204 0B       		.uleb128 0xb
 3216 0205 3B       		.uleb128 0x3b
 3217 0206 0B       		.uleb128 0xb
 3218 0207 49       		.uleb128 0x49
 3219 0208 13       		.uleb128 0x13
 3220 0209 3F       		.uleb128 0x3f
 3221 020a 19       		.uleb128 0x19
 3222 020b 02       		.uleb128 0x2
 3223 020c 18       		.uleb128 0x18
 3224 020d 00       		.byte	0
 3225 020e 00       		.byte	0
 3226 020f 20       		.uleb128 0x20
 3227 0210 34       		.uleb128 0x34
 3228 0211 00       		.byte	0
 3229 0212 03       		.uleb128 0x3
 3230 0213 0E       		.uleb128 0xe
 3231 0214 3A       		.uleb128 0x3a
 3232 0215 0B       		.uleb128 0xb
 3233 0216 3B       		.uleb128 0x3b
 3234 0217 0B       		.uleb128 0xb
 3235 0218 49       		.uleb128 0x49
 3236 0219 13       		.uleb128 0x13
 3237 021a 3F       		.uleb128 0x3f
 3238 021b 19       		.uleb128 0x19
 3239 021c 02       		.uleb128 0x2
 3240 021d 18       		.uleb128 0x18
 3241 021e 00       		.byte	0
 3242 021f 00       		.byte	0
 3243 0220 21       		.uleb128 0x21
 3244 0221 01       		.uleb128 0x1
 3245 0222 01       		.byte	0x1
 3246 0223 49       		.uleb128 0x49
 3247 0224 13       		.uleb128 0x13
 3248 0225 01       		.uleb128 0x1
 3249 0226 13       		.uleb128 0x13
 3250 0227 00       		.byte	0
 3251 0228 00       		.byte	0
 3252 0229 22       		.uleb128 0x22
 3253 022a 21       		.uleb128 0x21
 3254 022b 00       		.byte	0
 3255 022c 49       		.uleb128 0x49
 3256 022d 13       		.uleb128 0x13
 3257 022e 2F       		.uleb128 0x2f
 3258 022f 0B       		.uleb128 0xb
 3259 0230 00       		.byte	0
 3260 0231 00       		.byte	0
 3261 0232 23       		.uleb128 0x23
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 68


 3262 0233 34       		.uleb128 0x34
 3263 0234 00       		.byte	0
 3264 0235 03       		.uleb128 0x3
 3265 0236 08       		.uleb128 0x8
 3266 0237 3A       		.uleb128 0x3a
 3267 0238 0B       		.uleb128 0xb
 3268 0239 3B       		.uleb128 0x3b
 3269 023a 0B       		.uleb128 0xb
 3270 023b 49       		.uleb128 0x49
 3271 023c 13       		.uleb128 0x13
 3272 023d 3F       		.uleb128 0x3f
 3273 023e 19       		.uleb128 0x19
 3274 023f 3C       		.uleb128 0x3c
 3275 0240 19       		.uleb128 0x19
 3276 0241 00       		.byte	0
 3277 0242 00       		.byte	0
 3278 0243 24       		.uleb128 0x24
 3279 0244 34       		.uleb128 0x34
 3280 0245 00       		.byte	0
 3281 0246 03       		.uleb128 0x3
 3282 0247 0E       		.uleb128 0xe
 3283 0248 3A       		.uleb128 0x3a
 3284 0249 0B       		.uleb128 0xb
 3285 024a 3B       		.uleb128 0x3b
 3286 024b 0B       		.uleb128 0xb
 3287 024c 49       		.uleb128 0x49
 3288 024d 13       		.uleb128 0x13
 3289 024e 3F       		.uleb128 0x3f
 3290 024f 19       		.uleb128 0x19
 3291 0250 3C       		.uleb128 0x3c
 3292 0251 19       		.uleb128 0x19
 3293 0252 00       		.byte	0
 3294 0253 00       		.byte	0
 3295 0254 25       		.uleb128 0x25
 3296 0255 34       		.uleb128 0x34
 3297 0256 00       		.byte	0
 3298 0257 03       		.uleb128 0x3
 3299 0258 0E       		.uleb128 0xe
 3300 0259 3A       		.uleb128 0x3a
 3301 025a 0B       		.uleb128 0xb
 3302 025b 3B       		.uleb128 0x3b
 3303 025c 05       		.uleb128 0x5
 3304 025d 49       		.uleb128 0x49
 3305 025e 13       		.uleb128 0x13
 3306 025f 3F       		.uleb128 0x3f
 3307 0260 19       		.uleb128 0x19
 3308 0261 02       		.uleb128 0x2
 3309 0262 18       		.uleb128 0x18
 3310 0263 00       		.byte	0
 3311 0264 00       		.byte	0
 3312 0265 00       		.byte	0
 3313              		.section	.debug_aranges,"",%progbits
 3314 0000 84000000 		.4byte	0x84
 3315 0004 0200     		.2byte	0x2
 3316 0006 00000000 		.4byte	.Ldebug_info0
 3317 000a 04       		.byte	0x4
 3318 000b 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 69


 3319 000c 0000     		.2byte	0
 3320 000e 0000     		.2byte	0
 3321 0010 00000000 		.4byte	.LFB64
 3322 0014 F4000000 		.4byte	.LFE64-.LFB64
 3323 0018 00000000 		.4byte	.LFB65
 3324 001c 18000000 		.4byte	.LFE65-.LFB65
 3325 0020 00000000 		.4byte	.LFB66
 3326 0024 18000000 		.4byte	.LFE66-.LFB66
 3327 0028 00000000 		.4byte	.LFB67
 3328 002c 18000000 		.4byte	.LFE67-.LFB67
 3329 0030 00000000 		.4byte	.LFB68
 3330 0034 18000000 		.4byte	.LFE68-.LFB68
 3331 0038 00000000 		.4byte	.LFB69
 3332 003c 38000000 		.4byte	.LFE69-.LFB69
 3333 0040 00000000 		.4byte	.LFB70
 3334 0044 C0000000 		.4byte	.LFE70-.LFB70
 3335 0048 00000000 		.4byte	.LFB71
 3336 004c 54000000 		.4byte	.LFE71-.LFB71
 3337 0050 00000000 		.4byte	.LFB72
 3338 0054 34000000 		.4byte	.LFE72-.LFB72
 3339 0058 00000000 		.4byte	.LFB73
 3340 005c 90020000 		.4byte	.LFE73-.LFB73
 3341 0060 00000000 		.4byte	.LFB74
 3342 0064 CC000000 		.4byte	.LFE74-.LFB74
 3343 0068 00000000 		.4byte	.LFB75
 3344 006c 1C000000 		.4byte	.LFE75-.LFB75
 3345 0070 00000000 		.4byte	.LFB76
 3346 0074 A4000000 		.4byte	.LFE76-.LFB76
 3347 0078 00000000 		.4byte	.LFB77
 3348 007c B8000000 		.4byte	.LFE77-.LFB77
 3349 0080 00000000 		.4byte	0
 3350 0084 00000000 		.4byte	0
 3351              		.section	.debug_ranges,"",%progbits
 3352              	.Ldebug_ranges0:
 3353 0000 00000000 		.4byte	.LFB64
 3354 0004 F4000000 		.4byte	.LFE64
 3355 0008 00000000 		.4byte	.LFB65
 3356 000c 18000000 		.4byte	.LFE65
 3357 0010 00000000 		.4byte	.LFB66
 3358 0014 18000000 		.4byte	.LFE66
 3359 0018 00000000 		.4byte	.LFB67
 3360 001c 18000000 		.4byte	.LFE67
 3361 0020 00000000 		.4byte	.LFB68
 3362 0024 18000000 		.4byte	.LFE68
 3363 0028 00000000 		.4byte	.LFB69
 3364 002c 38000000 		.4byte	.LFE69
 3365 0030 00000000 		.4byte	.LFB70
 3366 0034 C0000000 		.4byte	.LFE70
 3367 0038 00000000 		.4byte	.LFB71
 3368 003c 54000000 		.4byte	.LFE71
 3369 0040 00000000 		.4byte	.LFB72
 3370 0044 34000000 		.4byte	.LFE72
 3371 0048 00000000 		.4byte	.LFB73
 3372 004c 90020000 		.4byte	.LFE73
 3373 0050 00000000 		.4byte	.LFB74
 3374 0054 CC000000 		.4byte	.LFE74
 3375 0058 00000000 		.4byte	.LFB75
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 70


 3376 005c 1C000000 		.4byte	.LFE75
 3377 0060 00000000 		.4byte	.LFB76
 3378 0064 A4000000 		.4byte	.LFE76
 3379 0068 00000000 		.4byte	.LFB77
 3380 006c B8000000 		.4byte	.LFE77
 3381 0070 00000000 		.4byte	0
 3382 0074 00000000 		.4byte	0
 3383              		.section	.debug_line,"",%progbits
 3384              	.Ldebug_line0:
 3385 0000 A3030000 		.section	.debug_str,"MS",%progbits,1
 3385      02007001 
 3385      00000201 
 3385      FB0E0D00 
 3385      01010101 
 3386              	.LASF47:
 3387 0000 64697265 		.ascii	"direction\000"
 3387      6374696F 
 3387      6E00
 3388              	.LASF64:
 3389 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3389      61726441 
 3389      66746572 
 3389      5475726E 
 3389      00
 3390              	.LASF50:
 3391 001b 496E7374 		.ascii	"InstructionDirection\000"
 3391      72756374 
 3391      696F6E44 
 3391      69726563 
 3391      74696F6E 
 3392              	.LASF128:
 3393 0030 6D61696E 		.ascii	"main.c\000"
 3393      2E6300
 3394              	.LASF75:
 3395 0037 626C6F63 		.ascii	"blocksize\000"
 3395      6B73697A 
 3395      6500
 3396              	.LASF116:
 3397 0041 62756666 		.ascii	"buffer\000"
 3397      657200
 3398              	.LASF8:
 3399 0048 756E7369 		.ascii	"unsigned int\000"
 3399      676E6564 
 3399      20696E74 
 3399      00
 3400              	.LASF12:
 3401 0055 5F5F696E 		.ascii	"__int32_t\000"
 3401      7433325F 
 3401      7400
 3402              	.LASF18:
 3403 005f 696E7431 		.ascii	"int16\000"
 3403      3600
 3404              	.LASF107:
 3405 0065 73797374 		.ascii	"system_state\000"
 3405      656D5F73 
 3405      74617465 
 3405      00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 71


 3406              	.LASF87:
 3407 0072 6E657874 		.ascii	"nextInstruction\000"
 3407      496E7374 
 3407      72756374 
 3407      696F6E00 
 3408              	.LASF127:
 3409 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3409      43313120 
 3409      352E342E 
 3409      31203230 
 3409      31363036 
 3410 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3410      20726576 
 3410      6973696F 
 3410      6E203233 
 3410      37373135 
 3411 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3411      66756E63 
 3411      74696F6E 
 3411      2D736563 
 3411      74696F6E 
 3412              	.LASF69:
 3413 0110 53365F44 		.ascii	"S6_DETECTED\000"
 3413      45544543 
 3413      54454400 
 3414              	.LASF115:
 3415 011c 746F7461 		.ascii	"totalDistance\000"
 3415      6C446973 
 3415      74616E63 
 3415      6500
 3416              	.LASF34:
 3417 012a 67325F78 		.ascii	"g2_xpos\000"
 3417      706F7300 
 3418              	.LASF84:
 3419 0132 6E756D53 		.ascii	"numSteps\000"
 3419      74657073 
 3419      00
 3420              	.LASF77:
 3421 013b 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 3421      6F76656D 
 3421      656E7441 
 3421      63636F72 
 3421      64696E67 
 3422              	.LASF102:
 3423 015d 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3423      5F72665F 
 3423      7472616E 
 3423      736D6973 
 3423      73696F6E 
 3424              	.LASF79:
 3425 0179 52657365 		.ascii	"ResetSensorFlags\000"
 3425      7453656E 
 3425      736F7246 
 3425      6C616773 
 3425      00
 3426              	.LASF37:
 3427 018a 67325F64 		.ascii	"g2_direction\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 72


 3427      69726563 
 3427      74696F6E 
 3427      00
 3428              	.LASF117:
 3429 0197 71756164 		.ascii	"quadDec2Count\000"
 3429      44656332 
 3429      436F756E 
 3429      7400
 3430              	.LASF19:
 3431 01a5 666C6F61 		.ascii	"float\000"
 3431      7400
 3432              	.LASF78:
 3433 01ab 63757272 		.ascii	"currentInstructionDirection\000"
 3433      656E7449 
 3433      6E737472 
 3433      75637469 
 3433      6F6E4469 
 3434              	.LASF106:
 3435 01c7 75736242 		.ascii	"usbBuffer\000"
 3435      75666665 
 3435      7200
 3436              	.LASF83:
 3437 01d1 636F756E 		.ascii	"count\000"
 3437      7400
 3438              	.LASF22:
 3439 01d7 696E6465 		.ascii	"index\000"
 3439      7800
 3440              	.LASF7:
 3441 01dd 6C6F6E67 		.ascii	"long long unsigned int\000"
 3441      206C6F6E 
 3441      6720756E 
 3441      7369676E 
 3441      65642069 
 3442              	.LASF46:
 3443 01f4 496E7374 		.ascii	"Instruction\000"
 3443      72756374 
 3443      696F6E00 
 3444              	.LASF99:
 3445 0200 666C6167 		.ascii	"flag_packet\000"
 3445      5F706163 
 3445      6B657400 
 3446              	.LASF88:
 3447 020c 53657452 		.ascii	"SetRobotMovement\000"
 3447      6F626F74 
 3447      4D6F7665 
 3447      6D656E74 
 3447      00
 3448              	.LASF70:
 3449 021d 54494D45 		.ascii	"TIMER_FINISH\000"
 3449      525F4649 
 3449      4E495348 
 3449      00
 3450              	.LASF119:
 3451 022a 6B656570 		.ascii	"keepLedOn\000"
 3451      4C65644F 
 3451      6E00
 3452              	.LASF42:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 73


 3453 0234 466F7277 		.ascii	"ForwardUntilTarget\000"
 3453      61726455 
 3453      6E74696C 
 3453      54617267 
 3453      657400
 3454              	.LASF95:
 3455 0247 666C6167 		.ascii	"flag_ts_update\000"
 3455      5F74735F 
 3455      75706461 
 3455      746500
 3456              	.LASF94:
 3457 0256 666C6167 		.ascii	"flag_ts_enc\000"
 3457      5F74735F 
 3457      656E6300 
 3458              	.LASF81:
 3459 0262 71756164 		.ascii	"quadCountToRPM\000"
 3459      436F756E 
 3459      74546F52 
 3459      504D00
 3460              	.LASF126:
 3461 0271 69676E6F 		.ascii	"ignoreSensor\000"
 3461      72655365 
 3461      6E736F72 
 3461      00
 3462              	.LASF43:
 3463 027e 53746F70 		.ascii	"StopAtTarget\000"
 3463      41745461 
 3463      72676574 
 3463      00
 3464              	.LASF63:
 3465 028b 77616974 		.ascii	"waitForTurn\000"
 3465      466F7254 
 3465      75726E00 
 3466              	.LASF24:
 3467 0297 726F626F 		.ascii	"robot_ypos\000"
 3467      745F7970 
 3467      6F7300
 3468              	.LASF93:
 3469 02a2 74735F64 		.ascii	"ts_display\000"
 3469      6973706C 
 3469      617900
 3470              	.LASF111:
 3471 02ad 63757272 		.ascii	"currentOrientation\000"
 3471      656E744F 
 3471      7269656E 
 3471      74617469 
 3471      6F6E00
 3472              	.LASF11:
 3473 02c0 63686172 		.ascii	"char\000"
 3473      00
 3474              	.LASF28:
 3475 02c5 67305F73 		.ascii	"g0_speed\000"
 3475      70656564 
 3475      00
 3476              	.LASF85:
 3477 02ce 696E7374 		.ascii	"instructionList\000"
 3477      72756374 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 74


 3477      696F6E4C 
 3477      69737400 
 3478              	.LASF86:
 3479 02de 696E7374 		.ascii	"instructionIndex\000"
 3479      72756374 
 3479      696F6E49 
 3479      6E646578 
 3479      00
 3480              	.LASF15:
 3481 02ef 75696E74 		.ascii	"uint16\000"
 3481      313600
 3482              	.LASF17:
 3483 02f6 696E7438 		.ascii	"int8\000"
 3483      00
 3484              	.LASF121:
 3485 02fb 78426C6F 		.ascii	"xBlocksize\000"
 3485      636B7369 
 3485      7A6500
 3486              	.LASF33:
 3487 0306 67315F64 		.ascii	"g1_direction\000"
 3487      69726563 
 3487      74696F6E 
 3487      00
 3488              	.LASF53:
 3489 0313 4C656674 		.ascii	"Left\000"
 3489      00
 3490              	.LASF73:
 3491 0318 73706565 		.ascii	"speedTimer\000"
 3491      6454696D 
 3491      657200
 3492              	.LASF39:
 3493 0323 77616974 		.ascii	"waitForLeftTurn\000"
 3493      466F724C 
 3493      65667454 
 3493      75726E00 
 3494              	.LASF6:
 3495 0333 6C6F6E67 		.ascii	"long long int\000"
 3495      206C6F6E 
 3495      6720696E 
 3495      7400
 3496              	.LASF30:
 3497 0341 67315F78 		.ascii	"g1_xpos\000"
 3497      706F7300 
 3498              	.LASF112:
 3499 0349 70726576 		.ascii	"previousOrientation\000"
 3499      696F7573 
 3499      4F726965 
 3499      6E746174 
 3499      696F6E00 
 3500              	.LASF41:
 3501 035d 75547572 		.ascii	"uTurn\000"
 3501      6E00
 3502              	.LASF72:
 3503 0363 6E657744 		.ascii	"newDistance\000"
 3503      69737461 
 3503      6E636500 
 3504              	.LASF36:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 75


 3505 036f 67325F73 		.ascii	"g2_speed\000"
 3505      70656564 
 3505      00
 3506              	.LASF27:
 3507 0378 67305F79 		.ascii	"g0_ypos\000"
 3507      706F7300 
 3508              	.LASF108:
 3509 0380 666F6F64 		.ascii	"food_list\000"
 3509      5F6C6973 
 3509      7400
 3510              	.LASF58:
 3511 038a 5475726E 		.ascii	"TurnLeft\000"
 3511      4C656674 
 3511      00
 3512              	.LASF92:
 3513 0393 74735F73 		.ascii	"ts_speed\000"
 3513      70656564 
 3513      00
 3514              	.LASF62:
 3515 039c 556E6B6E 		.ascii	"Unknown\000"
 3515      6F776E00 
 3516              	.LASF76:
 3517 03a4 64697265 		.ascii	"directionState\000"
 3517      6374696F 
 3517      6E537461 
 3517      746500
 3518              	.LASF16:
 3519 03b3 75696E74 		.ascii	"uint32\000"
 3519      333200
 3520              	.LASF40:
 3521 03ba 77616974 		.ascii	"waitForRightTurn\000"
 3521      466F7252 
 3521      69676874 
 3521      5475726E 
 3521      00
 3522              	.LASF57:
 3523 03cb 5475726E 		.ascii	"TurnRight\000"
 3523      52696768 
 3523      7400
 3524              	.LASF45:
 3525 03d5 64617461 		.ascii	"data_main\000"
 3525      5F6D6169 
 3525      6E00
 3526              	.LASF21:
 3527 03df 72737369 		.ascii	"rssi\000"
 3527      00
 3528              	.LASF29:
 3529 03e4 67305F64 		.ascii	"g0_direction\000"
 3529      69726563 
 3529      74696F6E 
 3529      00
 3530              	.LASF110:
 3531 03f1 70726576 		.ascii	"previousDirection\000"
 3531      696F7573 
 3531      44697265 
 3531      6374696F 
 3531      6E00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 76


 3532              	.LASF9:
 3533 0403 6C6F6E67 		.ascii	"long double\000"
 3533      20646F75 
 3533      626C6500 
 3534              	.LASF96:
 3535 040f 666C6167 		.ascii	"flag_ts_speed\000"
 3535      5F74735F 
 3535      73706565 
 3535      6400
 3536              	.LASF101:
 3537 041d 64617461 		.ascii	"dataready_flag\000"
 3537      72656164 
 3537      795F666C 
 3537      616700
 3538              	.LASF98:
 3539 042c 666C6167 		.ascii	"flag_rx\000"
 3539      5F727800 
 3540              	.LASF122:
 3541 0434 79426C6F 		.ascii	"yBlocksize\000"
 3541      636B7369 
 3541      7A6500
 3542              	.LASF2:
 3543 043f 73686F72 		.ascii	"short int\000"
 3543      7420696E 
 3543      7400
 3544              	.LASF67:
 3545 0449 53345F44 		.ascii	"S4_DETECTED\000"
 3545      45544543 
 3545      54454400 
 3546              	.LASF66:
 3547 0455 53335F44 		.ascii	"S3_DETECTED\000"
 3547      45544543 
 3547      54454400 
 3548              	.LASF4:
 3549 0461 6C6F6E67 		.ascii	"long int\000"
 3549      20696E74 
 3549      00
 3550              	.LASF89:
 3551 046a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3551      52784275 
 3551      66666572 
 3551      00
 3552              	.LASF91:
 3553 0477 74735F75 		.ascii	"ts_update\000"
 3553      70646174 
 3553      6500
 3554              	.LASF56:
 3555 0481 466F7277 		.ascii	"Forward\000"
 3555      61726400 
 3556              	.LASF114:
 3557 0489 746F7461 		.ascii	"totalMilliseconds\000"
 3557      6C4D696C 
 3557      6C697365 
 3557      636F6E64 
 3557      7300
 3558              	.LASF35:
 3559 049b 67325F79 		.ascii	"g2_ypos\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 77


 3559      706F7300 
 3560              	.LASF80:
 3561 04a3 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 3561      546F4E65 
 3561      7874496E 
 3561      73747275 
 3561      6374696F 
 3562              	.LASF51:
 3563 04b9 4F726965 		.ascii	"OrientationState\000"
 3563      6E746174 
 3563      696F6E53 
 3563      74617465 
 3563      00
 3564              	.LASF52:
 3565 04ca 446F776E 		.ascii	"Down\000"
 3565      00
 3566              	.LASF54:
 3567 04cf 52696768 		.ascii	"Right\000"
 3567      7400
 3568              	.LASF31:
 3569 04d5 67315F79 		.ascii	"g1_ypos\000"
 3569      706F7300 
 3570              	.LASF109:
 3571 04dd 63757272 		.ascii	"currentDirection\000"
 3571      656E7444 
 3571      69726563 
 3571      74696F6E 
 3571      00
 3572              	.LASF129:
 3573 04ee 483A5C33 		.ascii	"H:\\301-Robot\\psoc student pack\\psoc_code_base\\C"
 3573      30312D52 
 3573      6F626F74 
 3573      5C70736F 
 3573      63207374 
 3574 051d 53333031 		.ascii	"S301_Class.cydsn\000"
 3574      5F436C61 
 3574      73732E63 
 3574      7964736E 
 3574      00
 3575              	.LASF10:
 3576 052e 73697A65 		.ascii	"sizetype\000"
 3576      74797065 
 3576      00
 3577              	.LASF5:
 3578 0537 6C6F6E67 		.ascii	"long unsigned int\000"
 3578      20756E73 
 3578      69676E65 
 3578      6420696E 
 3578      7400
 3579              	.LASF120:
 3580 0549 73746F70 		.ascii	"stopBuffer\000"
 3580      42756666 
 3580      657200
 3581              	.LASF13:
 3582 0554 696E7433 		.ascii	"int32_t\000"
 3582      325F7400 
 3583              	.LASF23:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 78


 3584 055c 726F626F 		.ascii	"robot_xpos\000"
 3584      745F7870 
 3584      6F7300
 3585              	.LASF105:
 3586 0567 656E7472 		.ascii	"entry\000"
 3586      7900
 3587              	.LASF55:
 3588 056d 526F626F 		.ascii	"RobotMovement\000"
 3588      744D6F76 
 3588      656D656E 
 3588      7400
 3589              	.LASF1:
 3590 057b 756E7369 		.ascii	"unsigned char\000"
 3590      676E6564 
 3590      20636861 
 3590      7200
 3591              	.LASF125:
 3592 0589 73746F70 		.ascii	"stoppedAfterTurn\000"
 3592      70656441 
 3592      66746572 
 3592      5475726E 
 3592      00
 3593              	.LASF104:
 3594 059a 6C696E65 		.ascii	"line\000"
 3594      00
 3595              	.LASF60:
 3596 059f 41646A75 		.ascii	"AdjustToTheRight\000"
 3596      7374546F 
 3596      54686552 
 3596      69676874 
 3596      00
 3597              	.LASF61:
 3598 05b0 53746F70 		.ascii	"Stop\000"
 3598      00
 3599              	.LASF82:
 3600 05b5 47657449 		.ascii	"GetInstructionAtIndex\000"
 3600      6E737472 
 3600      75637469 
 3600      6F6E4174 
 3600      496E6465 
 3601              	.LASF90:
 3602 05cb 74735F65 		.ascii	"ts_enc\000"
 3602      6E6300
 3603              	.LASF97:
 3604 05d2 666C6167 		.ascii	"flag_ts_display\000"
 3604      5F74735F 
 3604      64697370 
 3604      6C617900 
 3605              	.LASF44:
 3606 05e2 536B6970 		.ascii	"Skip\000"
 3606      00
 3607              	.LASF103:
 3608 05e7 64697370 		.ascii	"displaystring\000"
 3608      6C617973 
 3608      7472696E 
 3608      6700
 3609              	.LASF38:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 79


 3610 05f5 476F466F 		.ascii	"GoForward\000"
 3610      72776172 
 3610      6400
 3611              	.LASF68:
 3612 05ff 53355F44 		.ascii	"S5_DETECTED\000"
 3612      45544543 
 3612      54454400 
 3613              	.LASF0:
 3614 060b 7369676E 		.ascii	"signed char\000"
 3614      65642063 
 3614      68617200 
 3615              	.LASF123:
 3616 0617 63757272 		.ascii	"currentRow\000"
 3616      656E7452 
 3616      6F7700
 3617              	.LASF3:
 3618 0622 73686F72 		.ascii	"short unsigned int\000"
 3618      7420756E 
 3618      7369676E 
 3618      65642069 
 3618      6E7400
 3619              	.LASF25:
 3620 0635 726F626F 		.ascii	"robot_orientation\000"
 3620      745F6F72 
 3620      69656E74 
 3620      6174696F 
 3620      6E00
 3621              	.LASF71:
 3622 0647 6D61696E 		.ascii	"main\000"
 3622      00
 3623              	.LASF113:
 3624 064c 63757272 		.ascii	"currentInstruction\000"
 3624      656E7449 
 3624      6E737472 
 3624      75637469 
 3624      6F6E00
 3625              	.LASF59:
 3626 065f 41646A75 		.ascii	"AdjustToTheLeft\000"
 3626      7374546F 
 3626      5468654C 
 3626      65667400 
 3627              	.LASF65:
 3628 066f 4261636B 		.ascii	"Backward\000"
 3628      77617264 
 3628      00
 3629              	.LASF14:
 3630 0678 75696E74 		.ascii	"uint8\000"
 3630      3800
 3631              	.LASF20:
 3632 067e 646F7562 		.ascii	"double\000"
 3632      6C6500
 3633              	.LASF74:
 3634 0685 43686563 		.ascii	"CheckSensorDirection\000"
 3634      6B53656E 
 3634      736F7244 
 3634      69726563 
 3634      74696F6E 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccdGl9hd.s 			page 80


 3635              	.LASF124:
 3636 069a 63757272 		.ascii	"currentCol\000"
 3636      656E7443 
 3636      6F6C00
 3637              	.LASF26:
 3638 06a5 67305F78 		.ascii	"g0_xpos\000"
 3638      706F7300 
 3639              	.LASF118:
 3640 06ad 74696D65 		.ascii	"timerInt\000"
 3640      72496E74 
 3640      00
 3641              	.LASF100:
 3642 06b6 666C6167 		.ascii	"flag_KB_string\000"
 3642      5F4B425F 
 3642      73747269 
 3642      6E6700
 3643              	.LASF32:
 3644 06c5 67315F73 		.ascii	"g1_speed\000"
 3644      70656564 
 3644      00
 3645              	.LASF48:
 3646 06ce 69676E6F 		.ascii	"ignoreL\000"
 3646      72654C00 
 3647              	.LASF49:
 3648 06d6 69676E6F 		.ascii	"ignoreR\000"
 3648      72655200 
 3649              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
