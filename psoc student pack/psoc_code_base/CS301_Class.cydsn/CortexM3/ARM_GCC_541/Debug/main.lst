ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 03       		.byte	3
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.comm	s3,1,1
 124              		.comm	s4,1,1
 125              		.comm	s5,1,1
 126              		.global	s6
 127              		.bss
 128              		.type	s6, %object
 129              		.size	s6, 1
 130              	s6:
 131 0013 00       		.space	1
 132              		.global	totalMilliseconds
 133              		.align	2
 134              		.type	totalMilliseconds, %object
 135              		.size	totalMilliseconds, 4
 136              	totalMilliseconds:
 137 0014 00000000 		.space	4
 138              		.global	totalDistance
 139              		.align	2
 140              		.type	totalDistance, %object
 141              		.size	totalDistance, 4
 142              	totalDistance:
 143 0018 00000000 		.space	4
 144              		.comm	buffer,69,4
 145              		.global	quadDec2Count
 146              		.align	2
 147              		.type	quadDec2Count, %object
 148              		.size	quadDec2Count, 4
 149              	quadDec2Count:
 150 001c 00000000 		.space	4
 151              		.global	timerInt
 152              		.align	2
 153              		.type	timerInt, %object
 154              		.size	timerInt, 4
 155              	timerInt:
 156 0020 00000000 		.space	4
 157              		.global	keepLedOn
 158              		.align	2
 159              		.type	keepLedOn, %object
 160              		.size	keepLedOn, 4
 161              	keepLedOn:
 162 0024 00000000 		.space	4
 163              		.global	stopBuffer
 164              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 4


 165              		.type	stopBuffer, %object
 166              		.size	stopBuffer, 4
 167              	stopBuffer:
 168 0028 00000000 		.space	4
 169              		.global	__aeabi_i2d
 170              		.global	__aeabi_dmul
 171              		.global	__aeabi_ddiv
 172              		.global	__aeabi_d2f
 173              		.global	__aeabi_fadd
 174              		.section	.text.speedTimer,"ax",%progbits
 175              		.align	2
 176              		.global	speedTimer
 177              		.thumb
 178              		.thumb_func
 179              		.type	speedTimer, %function
 180              	speedTimer:
 181              	.LFB64:
 182              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum OrientationState currentOrientation, previousOrientation = Right;
  27:main.c        **** Instruction currentInstruction;
  28:main.c        **** int numSteps;
  29:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  30:main.c        **** Instruction * instructionList; // pointer to array
  31:main.c        **** // ----------------------------------------
  32:main.c        **** uint8 s3, s4, s5, s6 = 0;
  33:main.c        **** //* ========================================
  34:main.c        **** // Calculating Distance
  35:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  36:main.c        **** 
  37:main.c        **** uint32 totalMilliseconds = 0;
  38:main.c        **** float totalDistance = 0; // in mm
  39:main.c        **** //* ========================================
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 5


  40:main.c        **** char buffer[69];
  41:main.c        **** int quadDec2Count = 0;
  42:main.c        **** int timerInt = 0;
  43:main.c        **** int keepLedOn = 0;
  44:main.c        **** uint32 stopBuffer = 0;
  45:main.c        **** 
  46:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  47:main.c        **** 
  48:main.c        **** CY_ISR (speedTimer) {
 183              		.loc 1 48 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 8
 186              		@ frame_needed = 1, uses_anonymous_args = 0
 187 0000 90B5     		push	{r4, r7, lr}
 188              		.cfi_def_cfa_offset 12
 189              		.cfi_offset 4, -12
 190              		.cfi_offset 7, -8
 191              		.cfi_offset 14, -4
 192 0002 83B0     		sub	sp, sp, #12
 193              		.cfi_def_cfa_offset 24
 194 0004 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
  49:main.c        ****     timerInt = 1;
 196              		.loc 1 49 0
 197 0006 364B     		ldr	r3, .L4+16
 198 0008 0122     		movs	r2, #1
 199 000a 1A60     		str	r2, [r3]
  50:main.c        ****     //quadDec_M1 used for turning macros
  51:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 200              		.loc 1 51 0
 201 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 202 0010 0346     		mov	r3, r0
 203 0012 1A46     		mov	r2, r3
 204 0014 334B     		ldr	r3, .L4+20
 205 0016 1A60     		str	r2, [r3]
  52:main.c        ****     
  53:main.c        ****     if ((currentDirection == Forward || 
 206              		.loc 1 53 0
 207 0018 334B     		ldr	r3, .L4+24
 208 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 209 001c 002B     		cmp	r3, #0
 210 001e 17D0     		beq	.L2
  54:main.c        ****         currentDirection == waitForTurn || 
 211              		.loc 1 54 0 discriminator 1
 212 0020 314B     		ldr	r3, .L4+24
 213 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  53:main.c        ****         currentDirection == waitForTurn || 
 214              		.loc 1 53 0 discriminator 1
 215 0024 072B     		cmp	r3, #7
 216 0026 13D0     		beq	.L2
  55:main.c        ****         currentDirection == waitForTurn ||
 217              		.loc 1 55 0
 218 0028 2F4B     		ldr	r3, .L4+24
 219 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  54:main.c        ****         currentDirection == waitForTurn || 
 220              		.loc 1 54 0
 221 002c 072B     		cmp	r3, #7
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 6


 222 002e 0FD0     		beq	.L2
  56:main.c        ****         currentDirection == waitForRightTurn ||
 223              		.loc 1 56 0
 224 0030 2D4B     		ldr	r3, .L4+24
 225 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  55:main.c        ****         currentDirection == waitForTurn ||
 226              		.loc 1 55 0
 227 0034 022B     		cmp	r3, #2
 228 0036 0BD0     		beq	.L2
  57:main.c        ****         currentDirection == ForwardAfterTurn ||
 229              		.loc 1 57 0
 230 0038 2B4B     		ldr	r3, .L4+24
 231 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  56:main.c        ****         currentDirection == waitForRightTurn ||
 232              		.loc 1 56 0
 233 003c 082B     		cmp	r3, #8
 234 003e 07D0     		beq	.L2
  58:main.c        ****         currentDirection == AdjustToTheLeft ||
 235              		.loc 1 58 0
 236 0040 294B     		ldr	r3, .L4+24
 237 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  57:main.c        ****         currentDirection == ForwardAfterTurn ||
 238              		.loc 1 57 0
 239 0044 032B     		cmp	r3, #3
 240 0046 03D0     		beq	.L2
  59:main.c        ****         currentDirection == AdjustToTheRight) &&
 241              		.loc 1 59 0
 242 0048 274B     		ldr	r3, .L4+24
 243 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  58:main.c        ****         currentDirection == AdjustToTheLeft ||
 244              		.loc 1 58 0
 245 004c 042B     		cmp	r3, #4
 246 004e 34D1     		bne	.L3
 247              	.L2:
  60:main.c        ****         quadDec2Count != 0) {
 248              		.loc 1 60 0
 249 0050 244B     		ldr	r3, .L4+20
 250 0052 1B68     		ldr	r3, [r3]
  59:main.c        ****         currentDirection == AdjustToTheRight) &&
 251              		.loc 1 59 0
 252 0054 002B     		cmp	r3, #0
 253 0056 30D0     		beq	.L3
 254              	.LBB2:
  61:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  62:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 255              		.loc 1 62 0
 256 0058 224B     		ldr	r3, .L4+20
 257 005a 1B68     		ldr	r3, [r3]
 258 005c 002B     		cmp	r3, #0
 259 005e B8BF     		it	lt
 260 0060 5B42     		rsblt	r3, r3, #0
 261 0062 1846     		mov	r0, r3
 262 0064 FFF7FEFF 		bl	__aeabi_i2d
 263 0068 19A3     		adr	r3, .L4
 264 006a D3E90023 		ldrd	r2, [r3]
 265 006e FFF7FEFF 		bl	__aeabi_dmul
 266 0072 0346     		mov	r3, r0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 7


 267 0074 0C46     		mov	r4, r1
 268 0076 1846     		mov	r0, r3
 269 0078 2146     		mov	r1, r4
 270 007a 17A3     		adr	r3, .L4+8
 271 007c D3E90023 		ldrd	r2, [r3]
 272 0080 FFF7FEFF 		bl	__aeabi_dmul
 273 0084 0346     		mov	r3, r0
 274 0086 0C46     		mov	r4, r1
 275 0088 1846     		mov	r0, r3
 276 008a 2146     		mov	r1, r4
 277 008c 4FF00002 		mov	r2, #0
 278 0090 164B     		ldr	r3, .L4+28
 279 0092 FFF7FEFF 		bl	__aeabi_ddiv
 280 0096 0346     		mov	r3, r0
 281 0098 0C46     		mov	r4, r1
 282 009a 1846     		mov	r0, r3
 283 009c 2146     		mov	r1, r4
 284 009e FFF7FEFF 		bl	__aeabi_d2f
 285 00a2 0346     		mov	r3, r0
 286 00a4 7B60     		str	r3, [r7, #4]	@ float
  63:main.c        ****         
  64:main.c        ****         totalDistance = totalDistance + newDistance;
 287              		.loc 1 64 0
 288 00a6 124B     		ldr	r3, .L4+32
 289 00a8 1B68     		ldr	r3, [r3]	@ float
 290 00aa 7968     		ldr	r1, [r7, #4]	@ float
 291 00ac 1846     		mov	r0, r3
 292 00ae FFF7FEFF 		bl	__aeabi_fadd
 293 00b2 0346     		mov	r3, r0
 294 00b4 1A46     		mov	r2, r3
 295 00b6 0E4B     		ldr	r3, .L4+32
 296 00b8 1A60     		str	r2, [r3]	@ float
 297              	.L3:
 298              	.LBE2:
  65:main.c        ****     }
  66:main.c        ****     
  67:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 299              		.loc 1 67 0
 300 00ba 0020     		movs	r0, #0
 301 00bc FFF7FEFF 		bl	QuadDec_M2_SetCounter
  68:main.c        ****     QuadDec_M2_Start(); // restart counter
 302              		.loc 1 68 0
 303 00c0 FFF7FEFF 		bl	QuadDec_M2_Start
  69:main.c        ****     
  70:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 304              		.loc 1 70 0
 305 00c4 FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  71:main.c        **** }
 306              		.loc 1 71 0
 307 00c8 00BF     		nop
 308 00ca 0C37     		adds	r7, r7, #12
 309              		.cfi_def_cfa_offset 12
 310 00cc BD46     		mov	sp, r7
 311              		.cfi_def_cfa_register 13
 312              		@ sp needed
 313 00ce 90BD     		pop	{r4, r7, pc}
 314              	.L5:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 8


 315              		.align	3
 316              	.L4:
 317 00d0 182D4454 		.word	1413754136
 318 00d4 FB210940 		.word	1074340347
 319 00d8 00000000 		.word	0
 320 00dc 00205040 		.word	1078992896
 321 00e0 00000000 		.word	timerInt
 322 00e4 00000000 		.word	quadDec2Count
 323 00e8 00000000 		.word	currentDirection
 324 00ec 00806C40 		.word	1080852480
 325 00f0 00000000 		.word	totalDistance
 326              		.cfi_endproc
 327              	.LFE64:
 328              		.size	speedTimer, .-speedTimer
 329              		.section	.text.S3_DETECTED,"ax",%progbits
 330              		.align	2
 331              		.global	S3_DETECTED
 332              		.thumb
 333              		.thumb_func
 334              		.type	S3_DETECTED, %function
 335              	S3_DETECTED:
 336              	.LFB65:
  72:main.c        **** 
  73:main.c        **** CY_ISR(S3_DETECTED) {
 337              		.loc 1 73 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 342 0000 80B4     		push	{r7}
 343              		.cfi_def_cfa_offset 4
 344              		.cfi_offset 7, -4
 345 0002 00AF     		add	r7, sp, #0
 346              		.cfi_def_cfa_register 7
  74:main.c        ****     // Sensor has detected WHITE
  75:main.c        ****     s3 = 1; // , Black = 0, White = 1
 347              		.loc 1 75 0
 348 0004 034B     		ldr	r3, .L7
 349 0006 0122     		movs	r2, #1
 350 0008 1A70     		strb	r2, [r3]
  76:main.c        ****     //LED_Write(1u);
  77:main.c        **** }
 351              		.loc 1 77 0
 352 000a 00BF     		nop
 353 000c BD46     		mov	sp, r7
 354              		.cfi_def_cfa_register 13
 355              		@ sp needed
 356 000e 80BC     		pop	{r7}
 357              		.cfi_restore 7
 358              		.cfi_def_cfa_offset 0
 359 0010 7047     		bx	lr
 360              	.L8:
 361 0012 00BF     		.align	2
 362              	.L7:
 363 0014 00000000 		.word	s3
 364              		.cfi_endproc
 365              	.LFE65:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 9


 366              		.size	S3_DETECTED, .-S3_DETECTED
 367              		.section	.text.S4_DETECTED,"ax",%progbits
 368              		.align	2
 369              		.global	S4_DETECTED
 370              		.thumb
 371              		.thumb_func
 372              		.type	S4_DETECTED, %function
 373              	S4_DETECTED:
 374              	.LFB66:
  78:main.c        **** 
  79:main.c        **** CY_ISR(S4_DETECTED) {
 375              		.loc 1 79 0
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 0
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380 0000 80B4     		push	{r7}
 381              		.cfi_def_cfa_offset 4
 382              		.cfi_offset 7, -4
 383 0002 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
  80:main.c        ****     // Sensor has detected WHITE
  81:main.c        ****     s4 = 1; // , Black = 0, White = 1
 385              		.loc 1 81 0
 386 0004 034B     		ldr	r3, .L10
 387 0006 0122     		movs	r2, #1
 388 0008 1A70     		strb	r2, [r3]
  82:main.c        ****     //LED_Write(1u);
  83:main.c        **** }
 389              		.loc 1 83 0
 390 000a 00BF     		nop
 391 000c BD46     		mov	sp, r7
 392              		.cfi_def_cfa_register 13
 393              		@ sp needed
 394 000e 80BC     		pop	{r7}
 395              		.cfi_restore 7
 396              		.cfi_def_cfa_offset 0
 397 0010 7047     		bx	lr
 398              	.L11:
 399 0012 00BF     		.align	2
 400              	.L10:
 401 0014 00000000 		.word	s4
 402              		.cfi_endproc
 403              	.LFE66:
 404              		.size	S4_DETECTED, .-S4_DETECTED
 405              		.section	.text.S5_DETECTED,"ax",%progbits
 406              		.align	2
 407              		.global	S5_DETECTED
 408              		.thumb
 409              		.thumb_func
 410              		.type	S5_DETECTED, %function
 411              	S5_DETECTED:
 412              	.LFB67:
  84:main.c        **** 
  85:main.c        **** CY_ISR(S5_DETECTED) {
 413              		.loc 1 85 0
 414              		.cfi_startproc
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 10


 415              		@ args = 0, pretend = 0, frame = 0
 416              		@ frame_needed = 1, uses_anonymous_args = 0
 417              		@ link register save eliminated.
 418 0000 80B4     		push	{r7}
 419              		.cfi_def_cfa_offset 4
 420              		.cfi_offset 7, -4
 421 0002 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
  86:main.c        ****     // Sensor has detected WHITE
  87:main.c        ****     s5 = 1; // , Black = 0, White = 1
 423              		.loc 1 87 0
 424 0004 034B     		ldr	r3, .L13
 425 0006 0122     		movs	r2, #1
 426 0008 1A70     		strb	r2, [r3]
  88:main.c        ****     //LED_Write(1u);
  89:main.c        **** }
 427              		.loc 1 89 0
 428 000a 00BF     		nop
 429 000c BD46     		mov	sp, r7
 430              		.cfi_def_cfa_register 13
 431              		@ sp needed
 432 000e 80BC     		pop	{r7}
 433              		.cfi_restore 7
 434              		.cfi_def_cfa_offset 0
 435 0010 7047     		bx	lr
 436              	.L14:
 437 0012 00BF     		.align	2
 438              	.L13:
 439 0014 00000000 		.word	s5
 440              		.cfi_endproc
 441              	.LFE67:
 442              		.size	S5_DETECTED, .-S5_DETECTED
 443              		.section	.text.S6_DETECTED,"ax",%progbits
 444              		.align	2
 445              		.global	S6_DETECTED
 446              		.thumb
 447              		.thumb_func
 448              		.type	S6_DETECTED, %function
 449              	S6_DETECTED:
 450              	.LFB68:
  90:main.c        **** 
  91:main.c        **** CY_ISR(S6_DETECTED) {
 451              		.loc 1 91 0
 452              		.cfi_startproc
 453              		@ args = 0, pretend = 0, frame = 0
 454              		@ frame_needed = 1, uses_anonymous_args = 0
 455              		@ link register save eliminated.
 456 0000 80B4     		push	{r7}
 457              		.cfi_def_cfa_offset 4
 458              		.cfi_offset 7, -4
 459 0002 00AF     		add	r7, sp, #0
 460              		.cfi_def_cfa_register 7
  92:main.c        ****     // Sensor has detected WHITE
  93:main.c        ****     s6 = 1; // , Black = 0, White = 1
 461              		.loc 1 93 0
 462 0004 034B     		ldr	r3, .L16
 463 0006 0122     		movs	r2, #1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 11


 464 0008 1A70     		strb	r2, [r3]
  94:main.c        ****     //LED_Write(1u);
  95:main.c        **** }
 465              		.loc 1 95 0
 466 000a 00BF     		nop
 467 000c BD46     		mov	sp, r7
 468              		.cfi_def_cfa_register 13
 469              		@ sp needed
 470 000e 80BC     		pop	{r7}
 471              		.cfi_restore 7
 472              		.cfi_def_cfa_offset 0
 473 0010 7047     		bx	lr
 474              	.L17:
 475 0012 00BF     		.align	2
 476              	.L16:
 477 0014 00000000 		.word	s6
 478              		.cfi_endproc
 479              	.LFE68:
 480              		.size	S6_DETECTED, .-S6_DETECTED
 481              		.section	.text.TIMER_FINISH,"ax",%progbits
 482              		.align	2
 483              		.global	TIMER_FINISH
 484              		.thumb
 485              		.thumb_func
 486              		.type	TIMER_FINISH, %function
 487              	TIMER_FINISH:
 488              	.LFB69:
  96:main.c        **** 
  97:main.c        **** CY_ISR(TIMER_FINISH) {
 489              		.loc 1 97 0
 490              		.cfi_startproc
 491              		@ args = 0, pretend = 0, frame = 0
 492              		@ frame_needed = 1, uses_anonymous_args = 0
 493 0000 80B5     		push	{r7, lr}
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 00AF     		add	r7, sp, #0
 498              		.cfi_def_cfa_register 7
  98:main.c        ****     if (currentDirection == Stop) {
 499              		.loc 1 98 0
 500 0004 0A4B     		ldr	r3, .L21
 501 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 502 0008 052B     		cmp	r3, #5
 503 000a 05D1     		bne	.L19
  99:main.c        ****         stopBuffer = stopBuffer + 1;
 504              		.loc 1 99 0
 505 000c 094B     		ldr	r3, .L21+4
 506 000e 1B68     		ldr	r3, [r3]
 507 0010 0133     		adds	r3, r3, #1
 508 0012 084A     		ldr	r2, .L21+4
 509 0014 1360     		str	r3, [r2]
 510 0016 02E0     		b	.L20
 511              	.L19:
 100:main.c        ****     } else {
 101:main.c        ****         stopBuffer = 0;
 512              		.loc 1 101 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 12


 513 0018 064B     		ldr	r3, .L21+4
 514 001a 0022     		movs	r2, #0
 515 001c 1A60     		str	r2, [r3]
 516              	.L20:
 102:main.c        ****     }
 103:main.c        ****     SetRobotMovement(); 
 517              		.loc 1 103 0
 518 001e FFF7FEFF 		bl	SetRobotMovement
 104:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 519              		.loc 1 104 0
 520 0022 FFF7FEFF 		bl	ResetSensorFlags
 105:main.c        ****     Timer_LED_ReadStatusRegister();
 521              		.loc 1 105 0
 522 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 106:main.c        **** }
 523              		.loc 1 106 0
 524 002a 00BF     		nop
 525 002c 80BD     		pop	{r7, pc}
 526              	.L22:
 527 002e 00BF     		.align	2
 528              	.L21:
 529 0030 00000000 		.word	currentDirection
 530 0034 00000000 		.word	stopBuffer
 531              		.cfi_endproc
 532              	.LFE69:
 533              		.size	TIMER_FINISH, .-TIMER_FINISH
 534              		.section	.text.main,"ax",%progbits
 535              		.align	2
 536              		.global	main
 537              		.thumb
 538              		.thumb_func
 539              		.type	main, %function
 540              	main:
 541              	.LFB70:
 107:main.c        **** 
 108:main.c        **** 
 109:main.c        **** int main()
 110:main.c        **** {
 542              		.loc 1 110 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 40
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546 0000 80B5     		push	{r7, lr}
 547              		.cfi_def_cfa_offset 8
 548              		.cfi_offset 7, -8
 549              		.cfi_offset 14, -4
 550 0002 8AB0     		sub	sp, sp, #40
 551              		.cfi_def_cfa_offset 48
 552 0004 00AF     		add	r7, sp, #0
 553              		.cfi_def_cfa_register 7
 111:main.c        **** // ----- INITIALIZATIONS ----------
 112:main.c        ****     CYGlobalIntEnable;
 554              		.loc 1 112 0
 555              		.syntax unified
 556              	@ 112 "main.c" 1
 557 0006 62B6     		CPSIE   i
 558              	@ 0 "" 2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 13


 113:main.c        ****     ResetSensorFlags();
 559              		.loc 1 113 0
 560              		.thumb
 561              		.syntax unified
 562 0008 FFF7FEFF 		bl	ResetSensorFlags
 114:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 563              		.loc 1 114 0
 564 000c FFF7FEFF 		bl	init
 115:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 565              		.loc 1 115 0
 566 0010 2948     		ldr	r0, .L27
 567 0012 FFF7FEFF 		bl	isr_speed_StartEx
 116:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 568              		.loc 1 116 0
 569 0016 2948     		ldr	r0, .L27+4
 570 0018 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 117:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 571              		.loc 1 117 0
 572 001c 2848     		ldr	r0, .L27+8
 573 001e FFF7FEFF 		bl	S3_detected_StartEx
 118:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 574              		.loc 1 118 0
 575 0022 2848     		ldr	r0, .L27+12
 576 0024 FFF7FEFF 		bl	S4_detected_StartEx
 119:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 577              		.loc 1 119 0
 578 0028 2748     		ldr	r0, .L27+16
 579 002a FFF7FEFF 		bl	S5_detected_StartEx
 120:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 580              		.loc 1 120 0
 581 002e 2748     		ldr	r0, .L27+20
 582 0030 FFF7FEFF 		bl	S6_detected_StartEx
 121:main.c        ****     Timer_LED_Start();
 583              		.loc 1 121 0
 584 0034 FFF7FEFF 		bl	Timer_LED_Start
 122:main.c        ****     instructionList = findPath(map, food_list, 0);
 585              		.loc 1 122 0
 586 0038 0022     		movs	r2, #0
 587 003a 2549     		ldr	r1, .L27+24
 588 003c 2548     		ldr	r0, .L27+28
 589 003e FFF7FEFF 		bl	findPath
 590 0042 0246     		mov	r2, r0
 591 0044 244B     		ldr	r3, .L27+32
 592 0046 1A60     		str	r2, [r3]
 123:main.c        ****     numSteps = instructionsListLength();
 593              		.loc 1 123 0
 594 0048 FFF7FEFF 		bl	instructionsListLength
 595 004c 0346     		mov	r3, r0
 596 004e 1A46     		mov	r2, r3
 597 0050 224B     		ldr	r3, .L27+36
 598 0052 1A60     		str	r2, [r3]
 124:main.c        ****     Instruction one = instructionList[0];
 599              		.loc 1 124 0
 600 0054 204B     		ldr	r3, .L27+32
 601 0056 1A68     		ldr	r2, [r3]
 602 0058 07F11C03 		add	r3, r7, #28
 603 005c 07CA     		ldmia	r2, {r0, r1, r2}
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 14


 604 005e 83E80700 		stmia	r3, {r0, r1, r2}
 125:main.c        ****     Instruction two = instructionList[1];
 605              		.loc 1 125 0
 606 0062 1D4B     		ldr	r3, .L27+32
 607 0064 1A68     		ldr	r2, [r3]
 608 0066 07F11003 		add	r3, r7, #16
 609 006a 0C32     		adds	r2, r2, #12
 610 006c 07CA     		ldmia	r2, {r0, r1, r2}
 611 006e 83E80700 		stmia	r3, {r0, r1, r2}
 126:main.c        ****     Instruction three = instructionList[2];
 612              		.loc 1 126 0
 613 0072 194B     		ldr	r3, .L27+32
 614 0074 1A68     		ldr	r2, [r3]
 615 0076 3B1D     		adds	r3, r7, #4
 616 0078 1832     		adds	r2, r2, #24
 617 007a 07CA     		ldmia	r2, {r0, r1, r2}
 618 007c 83E80700 		stmia	r3, {r0, r1, r2}
 127:main.c        **** // ------USB SETUP ----------------    
 128:main.c        **** #ifdef USE_USB    
 129:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 619              		.loc 1 129 0
 620 0080 0121     		movs	r1, #1
 621 0082 0020     		movs	r0, #0
 622 0084 FFF7FEFF 		bl	USBUART_Start
 130:main.c        **** #endif        
 131:main.c        ****     RF_BT_SELECT_Write(0);
 623              		.loc 1 131 0
 624 0088 0020     		movs	r0, #0
 625 008a FFF7FEFF 		bl	RF_BT_SELECT_Write
 626              	.L26:
 132:main.c        ****     
 133:main.c        ****     //usbPutString("Initialised UART");
 134:main.c        ****     for(;;)
 135:main.c        ****     {
 136:main.c        ****         if(timerInt == 1) {
 627              		.loc 1 136 0
 628 008e 144B     		ldr	r3, .L27+40
 629 0090 1B68     		ldr	r3, [r3]
 630 0092 012B     		cmp	r3, #1
 631 0094 08D1     		bne	.L24
 137:main.c        ****             timerInt = 0;
 632              		.loc 1 137 0
 633 0096 124B     		ldr	r3, .L27+40
 634 0098 0022     		movs	r2, #0
 635 009a 1A60     		str	r2, [r3]
 138:main.c        ****             // calculate RPM of M2
 139:main.c        ****             quadCountToRPM(quadDec2Count);
 636              		.loc 1 139 0
 637 009c 114B     		ldr	r3, .L27+44
 638 009e 1B68     		ldr	r3, [r3]
 639 00a0 9BB2     		uxth	r3, r3
 640 00a2 1846     		mov	r0, r3
 641 00a4 FFF7FEFF 		bl	quadCountToRPM
 642              	.L24:
 140:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 141:main.c        ****             //usbPutString(buffer);
 142:main.c        ****             //usbPutString(" ");
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 15


 143:main.c        ****         }
 144:main.c        ****         //handle_usb();
 145:main.c        ****         if (flag_KB_string == 1)
 643              		.loc 1 145 0
 644 00a8 0F4B     		ldr	r3, .L27+48
 645 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 646 00ac 012B     		cmp	r3, #1
 647 00ae EED1     		bne	.L26
 146:main.c        ****         {
 147:main.c        ****             //usbPutString("Total Distance: ");
 148:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 149:main.c        ****             //usbPutString(buffer);
 150:main.c        ****             flag_KB_string = 0;
 648              		.loc 1 150 0
 649 00b0 0D4B     		ldr	r3, .L27+48
 650 00b2 0022     		movs	r2, #0
 651 00b4 1A70     		strb	r2, [r3]
 151:main.c        ****         }           
 152:main.c        ****     }
 652              		.loc 1 152 0
 653 00b6 EAE7     		b	.L26
 654              	.L28:
 655              		.align	2
 656              	.L27:
 657 00b8 00000000 		.word	speedTimer
 658 00bc 00000000 		.word	TIMER_FINISH
 659 00c0 00000000 		.word	S3_DETECTED
 660 00c4 00000000 		.word	S4_DETECTED
 661 00c8 00000000 		.word	S5_DETECTED
 662 00cc 00000000 		.word	S6_DETECTED
 663 00d0 00000000 		.word	food_list
 664 00d4 00000000 		.word	map
 665 00d8 00000000 		.word	instructionList
 666 00dc 00000000 		.word	numSteps
 667 00e0 00000000 		.word	timerInt
 668 00e4 00000000 		.word	quadDec2Count
 669 00e8 00000000 		.word	flag_KB_string
 670              		.cfi_endproc
 671              	.LFE70:
 672              		.size	main, .-main
 673              		.global	__aeabi_fmul
 674              		.global	__aeabi_f2iz
 675              		.section	.text.quadCountToRPM,"ax",%progbits
 676              		.align	2
 677              		.global	quadCountToRPM
 678              		.thumb
 679              		.thumb_func
 680              		.type	quadCountToRPM, %function
 681              	quadCountToRPM:
 682              	.LFB71:
 153:main.c        ****     return 0;
 154:main.c        **** }
 155:main.c        **** 
 156:main.c        **** // Calculations
 157:main.c        **** //* ========================================
 158:main.c        **** int16 quadCountToRPM(uint16 count)
 159:main.c        **** {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 16


 683              		.loc 1 159 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 16
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687 0000 90B5     		push	{r4, r7, lr}
 688              		.cfi_def_cfa_offset 12
 689              		.cfi_offset 4, -12
 690              		.cfi_offset 7, -8
 691              		.cfi_offset 14, -4
 692 0002 85B0     		sub	sp, sp, #20
 693              		.cfi_def_cfa_offset 32
 694 0004 00AF     		add	r7, sp, #0
 695              		.cfi_def_cfa_register 7
 696 0006 0346     		mov	r3, r0
 697 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 160:main.c        ****     float cps = count/57.00;
 698              		.loc 1 160 0
 699 000a FB88     		ldrh	r3, [r7, #6]
 700 000c 1846     		mov	r0, r3
 701 000e FFF7FEFF 		bl	__aeabi_i2d
 702 0012 4FF00002 		mov	r2, #0
 703 0016 0D4B     		ldr	r3, .L31
 704 0018 FFF7FEFF 		bl	__aeabi_ddiv
 705 001c 0346     		mov	r3, r0
 706 001e 0C46     		mov	r4, r1
 707 0020 1846     		mov	r0, r3
 708 0022 2146     		mov	r1, r4
 709 0024 FFF7FEFF 		bl	__aeabi_d2f
 710 0028 0346     		mov	r3, r0
 711 002a FB60     		str	r3, [r7, #12]	@ float
 161:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 712              		.loc 1 161 0
 713 002c 0849     		ldr	r1, .L31+4
 714 002e F868     		ldr	r0, [r7, #12]	@ float
 715 0030 FFF7FEFF 		bl	__aeabi_fmul
 716 0034 0346     		mov	r3, r0
 717 0036 1846     		mov	r0, r3
 718 0038 FFF7FEFF 		bl	__aeabi_f2iz
 719 003c 0346     		mov	r3, r0
 720 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 162:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 163:main.c        ****     return rpm;
 721              		.loc 1 163 0
 722 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 164:main.c        ****     //usbPutString(buffer);
 165:main.c        ****     //usbPutString("rpm ");
 166:main.c        **** }
 723              		.loc 1 166 0
 724 0044 1846     		mov	r0, r3
 725 0046 1437     		adds	r7, r7, #20
 726              		.cfi_def_cfa_offset 12
 727 0048 BD46     		mov	sp, r7
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 004a 90BD     		pop	{r4, r7, pc}
 731              	.L32:
 732              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 17


 733              	.L31:
 734 004c 00804C40 		.word	1078755328
 735 0050 00007041 		.word	1097859072
 736              		.cfi_endproc
 737              	.LFE71:
 738              		.size	quadCountToRPM, .-quadCountToRPM
 739              		.section	.text.ResetSensorFlags,"ax",%progbits
 740              		.align	2
 741              		.global	ResetSensorFlags
 742              		.thumb
 743              		.thumb_func
 744              		.type	ResetSensorFlags, %function
 745              	ResetSensorFlags:
 746              	.LFB72:
 167:main.c        **** 
 168:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 169:main.c        **** void ResetSensorFlags() {
 747              		.loc 1 169 0
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 0
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752 0000 80B4     		push	{r7}
 753              		.cfi_def_cfa_offset 4
 754              		.cfi_offset 7, -4
 755 0002 00AF     		add	r7, sp, #0
 756              		.cfi_def_cfa_register 7
 170:main.c        ****     s3 = 0;
 757              		.loc 1 170 0
 758 0004 074B     		ldr	r3, .L34
 759 0006 0022     		movs	r2, #0
 760 0008 1A70     		strb	r2, [r3]
 171:main.c        ****     s4 = 0;
 761              		.loc 1 171 0
 762 000a 074B     		ldr	r3, .L34+4
 763 000c 0022     		movs	r2, #0
 764 000e 1A70     		strb	r2, [r3]
 172:main.c        ****     s5 = 0;
 765              		.loc 1 172 0
 766 0010 064B     		ldr	r3, .L34+8
 767 0012 0022     		movs	r2, #0
 768 0014 1A70     		strb	r2, [r3]
 173:main.c        ****     s6 = 0;
 769              		.loc 1 173 0
 770 0016 064B     		ldr	r3, .L34+12
 771 0018 0022     		movs	r2, #0
 772 001a 1A70     		strb	r2, [r3]
 174:main.c        **** }
 773              		.loc 1 174 0
 774 001c 00BF     		nop
 775 001e BD46     		mov	sp, r7
 776              		.cfi_def_cfa_register 13
 777              		@ sp needed
 778 0020 80BC     		pop	{r7}
 779              		.cfi_restore 7
 780              		.cfi_def_cfa_offset 0
 781 0022 7047     		bx	lr
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 18


 782              	.L35:
 783              		.align	2
 784              	.L34:
 785 0024 00000000 		.word	s3
 786 0028 00000000 		.word	s4
 787 002c 00000000 		.word	s5
 788 0030 00000000 		.word	s6
 789              		.cfi_endproc
 790              	.LFE72:
 791              		.size	ResetSensorFlags, .-ResetSensorFlags
 792              		.global	xBlocksize
 793              		.data
 794 0045 000000   		.align	2
 795              		.type	xBlocksize, %object
 796              		.size	xBlocksize, 4
 797              	xBlocksize:
 798 0048 0000FF42 		.word	1124007936
 799              		.global	yBlocksize
 800              		.align	2
 801              		.type	yBlocksize, %object
 802              		.size	yBlocksize, 4
 803              	yBlocksize:
 804 004c 0000A042 		.word	1117782016
 805              		.global	currentRow
 806              		.type	currentRow, %object
 807              		.size	currentRow, 1
 808              	currentRow:
 809 0050 01       		.byte	1
 810              		.global	currentCol
 811              		.type	currentCol, %object
 812              		.size	currentCol, 1
 813              	currentCol:
 814 0051 01       		.byte	1
 815              		.global	stoppedAfterTurn
 816              		.bss
 817              		.type	stoppedAfterTurn, %object
 818              		.size	stoppedAfterTurn, 1
 819              	stoppedAfterTurn:
 820 002c 00       		.space	1
 821              		.global	ignoreSensor
 822              		.type	ignoreSensor, %object
 823              		.size	ignoreSensor, 1
 824              	ignoreSensor:
 825 002d 00       		.space	1
 826              		.global	__aeabi_fcmpge
 827              		.section	.text.CheckSensorDirection,"ax",%progbits
 828              		.align	2
 829              		.global	CheckSensorDirection
 830              		.thumb
 831              		.thumb_func
 832              		.type	CheckSensorDirection, %function
 833              	CheckSensorDirection:
 834              	.LFB73:
 175:main.c        **** 
 176:main.c        **** float xBlocksize = 127.5; // 127.5
 177:main.c        **** float yBlocksize = 80; // 80
 178:main.c        **** uint8 currentRow = 1;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 19


 179:main.c        **** uint8 currentCol = 1;
 180:main.c        **** 
 181:main.c        **** /*enum DirectionState GetNextStep() {
 182:main.c        ****     enum DirectionState directionState;
 183:main.c        ****     // Determines robot movement and orientation to follow optimal path
 184:main.c        ****     // enum DirectionState directionState = Stop;
 185:main.c        ****     previousOrientation = currentOrientation;
 186:main.c        ****     
 187:main.c        ****     if(map[currentRow][currentCol] == 9) {
 188:main.c        ****         directionState = Stop; // reached target
 189:main.c        ****         return directionState;
 190:main.c        ****     }
 191:main.c        ****         
 192:main.c        ****     switch (previousOrientation) {
 193:main.c        ****             case Up:
 194:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 195:main.c        ****                     currentOrientation = Up; 
 196:main.c        ****                     directionState = Forward;
 197:main.c        ****                     currentRow--;// update position
 198:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 199:main.c        ****                     currentOrientation = Left;
 200:main.c        ****                     directionState = waitForLeftTurn;
 201:main.c        ****                     //currentRow--;
 202:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 203:main.c        ****                     currentOrientation = Right;
 204:main.c        ****                     directionState = waitForRightTurn;
 205:main.c        ****                     //currentRow++; // update position
 206:main.c        ****                 }
 207:main.c        ****                 break;
 208:main.c        ****             case Down:
 209:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 210:main.c        ****                     currentOrientation = Down;
 211:main.c        ****                     directionState = Forward;
 212:main.c        ****                     currentRow++;
 213:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 214:main.c        ****                     currentOrientation = Left;
 215:main.c        ****                     directionState = waitForRightTurn;
 216:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 217:main.c        ****                     currentOrientation = Right;
 218:main.c        ****                     directionState = waitForLeftTurn;
 219:main.c        ****                 }
 220:main.c        ****                 break;
 221:main.c        ****             case Left:
 222:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 223:main.c        ****                     currentOrientation = Left;
 224:main.c        ****                     directionState = Forward;
 225:main.c        ****                     currentCol--; // update position
 226:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 227:main.c        ****                     currentOrientation = Up;
 228:main.c        ****                     directionState = waitForRightTurn;
 229:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 230:main.c        ****                     currentOrientation = Down;
 231:main.c        ****                     directionState = waitForLeftTurn;
 232:main.c        ****                 }
 233:main.c        ****                 break;
 234:main.c        ****             case Right:
 235:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 20


 236:main.c        ****                     currentOrientation = Right;
 237:main.c        ****                     directionState = Forward;
 238:main.c        ****                     currentCol++; // update position
 239:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 240:main.c        ****                     currentOrientation = Up;
 241:main.c        ****                     directionState = waitForLeftTurn;
 242:main.c        ****                     //currentCol++; // update position
 243:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 244:main.c        ****                     currentOrientation = Down;
 245:main.c        ****                     directionState = waitForRightTurn;
 246:main.c        ****                     //currentCol--; // update position
 247:main.c        ****                 }
 248:main.c        ****                 break;
 249:main.c        ****             default:
 250:main.c        ****                 break;
 251:main.c        ****         }
 252:main.c        ****     
 253:main.c        ****     return directionState;
 254:main.c        **** }
 255:main.c        **** */
 256:main.c        **** uint8 stoppedAfterTurn = 0;
 257:main.c        **** uint8 ignoreSensor = 0;
 258:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 259:main.c        **** enum RobotMovement CheckSensorDirection() {
 835              		.loc 1 259 0
 836              		.cfi_startproc
 837              		@ args = 0, pretend = 0, frame = 8
 838              		@ frame_needed = 1, uses_anonymous_args = 0
 839 0000 80B5     		push	{r7, lr}
 840              		.cfi_def_cfa_offset 8
 841              		.cfi_offset 7, -8
 842              		.cfi_offset 14, -4
 843 0002 82B0     		sub	sp, sp, #8
 844              		.cfi_def_cfa_offset 16
 845 0004 00AF     		add	r7, sp, #0
 846              		.cfi_def_cfa_register 7
 260:main.c        ****     float blocksize;
 261:main.c        ****     if(currentOrientation == Up || currentOrientation == Down) {
 847              		.loc 1 261 0
 848 0006 964B     		ldr	r3, .L66
 849 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 850 000a 002B     		cmp	r3, #0
 851 000c 03D0     		beq	.L37
 852              		.loc 1 261 0 is_stmt 0 discriminator 1
 853 000e 944B     		ldr	r3, .L66
 854 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 855 0012 012B     		cmp	r3, #1
 856 0014 03D1     		bne	.L38
 857              	.L37:
 262:main.c        ****         blocksize = yBlocksize;
 858              		.loc 1 262 0 is_stmt 1
 859 0016 934B     		ldr	r3, .L66+4
 860 0018 1B68     		ldr	r3, [r3]	@ float
 861 001a 7B60     		str	r3, [r7, #4]	@ float
 862 001c 02E0     		b	.L39
 863              	.L38:
 263:main.c        ****     } else {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 21


 264:main.c        ****         blocksize = xBlocksize;
 864              		.loc 1 264 0
 865 001e 924B     		ldr	r3, .L66+8
 866 0020 1B68     		ldr	r3, [r3]	@ float
 867 0022 7B60     		str	r3, [r7, #4]	@ float
 868              	.L39:
 265:main.c        ****     }
 266:main.c        ****     //if(currentInstruction)
 267:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 869              		.loc 1 267 0
 870 0024 0523     		movs	r3, #5
 871 0026 FB70     		strb	r3, [r7, #3]
 268:main.c        ****     
 269:main.c        ****     if (stoppedAfterTurn == 1) {
 872              		.loc 1 269 0
 873 0028 904B     		ldr	r3, .L66+12
 874 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 875 002c 012B     		cmp	r3, #1
 876 002e 16D1     		bne	.L40
 270:main.c        ****         if (stopBuffer <= 50) {
 877              		.loc 1 270 0
 878 0030 8F4B     		ldr	r3, .L66+16
 879 0032 1B68     		ldr	r3, [r3]
 880 0034 322B     		cmp	r3, #50
 881 0036 06D8     		bhi	.L41
 271:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 882              		.loc 1 271 0
 883 0038 0523     		movs	r3, #5
 884 003a FB70     		strb	r3, [r7, #3]
 272:main.c        ****             previousDirection = directionState;
 885              		.loc 1 272 0
 886 003c 8D4A     		ldr	r2, .L66+20
 887 003e FB78     		ldrb	r3, [r7, #3]
 888 0040 1370     		strb	r3, [r2]
 273:main.c        ****             return directionState;
 889              		.loc 1 273 0
 890 0042 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 891 0044 07E1     		b	.L42
 892              	.L41:
 274:main.c        ****         }
 275:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 276:main.c        ****         totalDistance = 0; // reset distance
 893              		.loc 1 276 0
 894 0046 8C4B     		ldr	r3, .L66+24
 895 0048 4FF00002 		mov	r2, #0
 896 004c 1A60     		str	r2, [r3]	@ float
 277:main.c        ****         previousDirection = directionState;
 897              		.loc 1 277 0
 898 004e 894A     		ldr	r2, .L66+20
 899 0050 FB78     		ldrb	r3, [r7, #3]
 900 0052 1370     		strb	r3, [r2]
 278:main.c        ****         stoppedAfterTurn = 0;
 901              		.loc 1 278 0
 902 0054 854B     		ldr	r3, .L66+12
 903 0056 0022     		movs	r2, #0
 904 0058 1A70     		strb	r2, [r3]
 279:main.c        ****         return directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 22


 905              		.loc 1 279 0
 906 005a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 907 005c FBE0     		b	.L42
 908              	.L40:
 280:main.c        ****     }
 281:main.c        ****     if (totalDistance >= blocksize) {
 909              		.loc 1 281 0
 910 005e 864B     		ldr	r3, .L66+24
 911 0060 1B68     		ldr	r3, [r3]	@ float
 912 0062 7968     		ldr	r1, [r7, #4]	@ float
 913 0064 1846     		mov	r0, r3
 914 0066 FFF7FEFF 		bl	__aeabi_fcmpge
 915 006a 0346     		mov	r3, r0
 916 006c 002B     		cmp	r3, #0
 917 006e 08D0     		beq	.L65
 282:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 283:main.c        ****         totalDistance = 0; // reset distance
 918              		.loc 1 283 0
 919 0070 814B     		ldr	r3, .L66+24
 920 0072 4FF00002 		mov	r2, #0
 921 0076 1A60     		str	r2, [r3]	@ float
 284:main.c        ****         previousDirection = directionState;
 922              		.loc 1 284 0
 923 0078 7E4A     		ldr	r2, .L66+20
 924 007a FB78     		ldrb	r3, [r7, #3]
 925 007c 1370     		strb	r3, [r2]
 285:main.c        ****         return directionState;
 926              		.loc 1 285 0
 927 007e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 928 0080 E9E0     		b	.L42
 929              	.L65:
 286:main.c        ****     }
 287:main.c        ****     
 288:main.c        ****     // STOP BUFFER * ========================================
 289:main.c        ****     if (previousDirection == Stop) {
 930              		.loc 1 289 0
 931 0082 7C4B     		ldr	r3, .L66+20
 932 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 933 0086 052B     		cmp	r3, #5
 934 0088 0AD1     		bne	.L45
 290:main.c        ****         if (stopBuffer <= 50) {
 935              		.loc 1 290 0
 936 008a 794B     		ldr	r3, .L66+16
 937 008c 1B68     		ldr	r3, [r3]
 938 008e 322B     		cmp	r3, #50
 939 0090 04D8     		bhi	.L46
 291:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 940              		.loc 1 291 0
 941 0092 0523     		movs	r3, #5
 942 0094 FB70     		strb	r3, [r7, #3]
 292:main.c        ****             previousDirection = directionState;
 943              		.loc 1 292 0
 944 0096 774A     		ldr	r2, .L66+20
 945 0098 FB78     		ldrb	r3, [r7, #3]
 946 009a 1370     		strb	r3, [r2]
 947              	.L46:
 293:main.c        ****         } else {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 23


 294:main.c        ****             //directionState = ForwardAfterTurn;
 295:main.c        ****         }
 296:main.c        ****         return directionState;
 948              		.loc 1 296 0
 949 009c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 950 009e DAE0     		b	.L42
 951              	.L45:
 297:main.c        ****     }
 298:main.c        **** 
 299:main.c        ****     // TURNING * ========================================    
 300:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 952              		.loc 1 300 0
 953 00a0 744B     		ldr	r3, .L66+20
 954 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 955 00a4 082B     		cmp	r3, #8
 956 00a6 0ED1     		bne	.L47
 301:main.c        ****         if (s3 || s4) {
 957              		.loc 1 301 0
 958 00a8 744B     		ldr	r3, .L66+28
 959 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 960 00ac 002B     		cmp	r3, #0
 961 00ae 03D1     		bne	.L48
 962              		.loc 1 301 0 is_stmt 0 discriminator 1
 963 00b0 734B     		ldr	r3, .L66+32
 964 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 965 00b4 002B     		cmp	r3, #0
 966 00b6 06D0     		beq	.L47
 967              	.L48:
 302:main.c        ****             //ignoreSensor = 0;
 303:main.c        ****             //usbPutString("Forward\n");
 304:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 968              		.loc 1 304 0 is_stmt 1
 969 00b8 0023     		movs	r3, #0
 970 00ba FB70     		strb	r3, [r7, #3]
 305:main.c        ****             previousDirection = directionState;
 971              		.loc 1 305 0
 972 00bc 6D4A     		ldr	r2, .L66+20
 973 00be FB78     		ldrb	r3, [r7, #3]
 974 00c0 1370     		strb	r3, [r2]
 306:main.c        ****             return directionState;
 975              		.loc 1 306 0
 976 00c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 977 00c4 C7E0     		b	.L42
 978              	.L47:
 307:main.c        ****         }
 308:main.c        ****     }
 309:main.c        **** 
 310:main.c        ****     if(previousDirection == waitForRightTurn) {
 979              		.loc 1 310 0
 980 00c6 6B4B     		ldr	r3, .L66+20
 981 00c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 00ca 022B     		cmp	r3, #2
 983 00cc 11D1     		bne	.L49
 311:main.c        ****         //ignoreSensor = 0;
 312:main.c        ****         if(!s4) {
 984              		.loc 1 312 0
 985 00ce 6C4B     		ldr	r3, .L66+32
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 24


 986 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 987 00d2 002B     		cmp	r3, #0
 988 00d4 06D1     		bne	.L50
 313:main.c        ****             //usbPutString("Turn Right\n");
 314:main.c        ****             directionState = TurnRight;
 989              		.loc 1 314 0
 990 00d6 0123     		movs	r3, #1
 991 00d8 FB70     		strb	r3, [r7, #3]
 315:main.c        ****             previousDirection = directionState;
 992              		.loc 1 315 0
 993 00da 664A     		ldr	r2, .L66+20
 994 00dc FB78     		ldrb	r3, [r7, #3]
 995 00de 1370     		strb	r3, [r2]
 316:main.c        ****             return directionState;
 996              		.loc 1 316 0
 997 00e0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 998 00e2 B8E0     		b	.L42
 999              	.L50:
 317:main.c        ****         } else {
 318:main.c        ****             //usbPutString("Wait for Right Turn\n");
 319:main.c        ****             directionState = waitForRightTurn;
 1000              		.loc 1 319 0
 1001 00e4 0223     		movs	r3, #2
 1002 00e6 FB70     		strb	r3, [r7, #3]
 320:main.c        ****             previousDirection = directionState;
 1003              		.loc 1 320 0
 1004 00e8 624A     		ldr	r2, .L66+20
 1005 00ea FB78     		ldrb	r3, [r7, #3]
 1006 00ec 1370     		strb	r3, [r2]
 321:main.c        ****             return directionState;
 1007              		.loc 1 321 0
 1008 00ee FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1009 00f0 B1E0     		b	.L42
 1010              	.L49:
 322:main.c        ****         }
 323:main.c        ****     }
 324:main.c        **** 
 325:main.c        ****     if(previousDirection == waitForLeftTurn) {
 1011              		.loc 1 325 0
 1012 00f2 604B     		ldr	r3, .L66+20
 1013 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 00f6 012B     		cmp	r3, #1
 1015 00f8 11D1     		bne	.L51
 326:main.c        ****         //ignoreSensor = 0;
 327:main.c        ****         if(!s3) {
 1016              		.loc 1 327 0
 1017 00fa 604B     		ldr	r3, .L66+28
 1018 00fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1019 00fe 002B     		cmp	r3, #0
 1020 0100 06D1     		bne	.L52
 328:main.c        ****             //usbPutString("Turn Left\n");
 329:main.c        ****             directionState = TurnLeft;
 1021              		.loc 1 329 0
 1022 0102 0223     		movs	r3, #2
 1023 0104 FB70     		strb	r3, [r7, #3]
 330:main.c        ****             previousDirection = directionState;
 1024              		.loc 1 330 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 25


 1025 0106 5B4A     		ldr	r2, .L66+20
 1026 0108 FB78     		ldrb	r3, [r7, #3]
 1027 010a 1370     		strb	r3, [r2]
 331:main.c        ****             return directionState;
 1028              		.loc 1 331 0
 1029 010c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1030 010e A2E0     		b	.L42
 1031              	.L52:
 332:main.c        ****         } else {
 333:main.c        ****             //usbPutString("Wait for Left Turn\n");
 334:main.c        ****             directionState = waitForLeftTurn;
 1032              		.loc 1 334 0
 1033 0110 0123     		movs	r3, #1
 1034 0112 FB70     		strb	r3, [r7, #3]
 335:main.c        ****             previousDirection = directionState;
 1035              		.loc 1 335 0
 1036 0114 574A     		ldr	r2, .L66+20
 1037 0116 FB78     		ldrb	r3, [r7, #3]
 1038 0118 1370     		strb	r3, [r2]
 336:main.c        ****             return directionState;
 1039              		.loc 1 336 0
 1040 011a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1041 011c 9BE0     		b	.L42
 1042              	.L51:
 337:main.c        ****         }
 338:main.c        ****     }
 339:main.c        **** 
 340:main.c        ****     if(previousDirection == TurnRight) {
 1043              		.loc 1 340 0
 1044 011e 554B     		ldr	r3, .L66+20
 1045 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1046 0122 012B     		cmp	r3, #1
 1047 0124 24D1     		bne	.L53
 341:main.c        ****         if(s5 && s6) {
 1048              		.loc 1 341 0
 1049 0126 574B     		ldr	r3, .L66+36
 1050 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1051 012a 002B     		cmp	r3, #0
 1052 012c 0AD0     		beq	.L54
 1053              		.loc 1 341 0 is_stmt 0 discriminator 1
 1054 012e 564B     		ldr	r3, .L66+40
 1055 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1056 0132 002B     		cmp	r3, #0
 1057 0134 06D0     		beq	.L54
 342:main.c        ****             //usbPutString("Turn Right\n");
 343:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 1058              		.loc 1 343 0 is_stmt 1
 1059 0136 0123     		movs	r3, #1
 1060 0138 FB70     		strb	r3, [r7, #3]
 344:main.c        ****             previousDirection = directionState;
 1061              		.loc 1 344 0
 1062 013a 4E4A     		ldr	r2, .L66+20
 1063 013c FB78     		ldrb	r3, [r7, #3]
 1064 013e 1370     		strb	r3, [r2]
 345:main.c        ****             return directionState;
 1065              		.loc 1 345 0
 1066 0140 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 26


 1067 0142 88E0     		b	.L42
 1068              	.L54:
 346:main.c        ****         } 
 347:main.c        ****         else if (!s5 || !s6) {
 1069              		.loc 1 347 0
 1070 0144 4F4B     		ldr	r3, .L66+36
 1071 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1072 0148 002B     		cmp	r3, #0
 1073 014a 03D0     		beq	.L55
 1074              		.loc 1 347 0 is_stmt 0 discriminator 1
 1075 014c 4E4B     		ldr	r3, .L66+40
 1076 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1077 0150 002B     		cmp	r3, #0
 1078 0152 0DD1     		bne	.L53
 1079              	.L55:
 348:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 349:main.c        ****             //usbPutString("Stop after Right Turn");
 350:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 1080              		.loc 1 350 0 is_stmt 1
 1081 0154 0523     		movs	r3, #5
 1082 0156 FB70     		strb	r3, [r7, #3]
 351:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 1083              		.loc 1 351 0
 1084 0158 474B     		ldr	r3, .L66+24
 1085 015a 4FF00002 		mov	r2, #0
 1086 015e 1A60     		str	r2, [r3]	@ float
 352:main.c        ****             previousDirection = directionState;
 1087              		.loc 1 352 0
 1088 0160 444A     		ldr	r2, .L66+20
 1089 0162 FB78     		ldrb	r3, [r7, #3]
 1090 0164 1370     		strb	r3, [r2]
 353:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 1091              		.loc 1 353 0
 1092 0166 414B     		ldr	r3, .L66+12
 1093 0168 0122     		movs	r2, #1
 1094 016a 1A70     		strb	r2, [r3]
 354:main.c        ****             return directionState;
 1095              		.loc 1 354 0
 1096 016c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1097 016e 72E0     		b	.L42
 1098              	.L53:
 355:main.c        ****         }
 356:main.c        ****     }    
 357:main.c        **** 
 358:main.c        ****     if(previousDirection == TurnLeft) {
 1099              		.loc 1 358 0
 1100 0170 404B     		ldr	r3, .L66+20
 1101 0172 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1102 0174 022B     		cmp	r3, #2
 1103 0176 24D1     		bne	.L56
 359:main.c        ****         if(s5 && s6) {
 1104              		.loc 1 359 0
 1105 0178 424B     		ldr	r3, .L66+36
 1106 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1107 017c 002B     		cmp	r3, #0
 1108 017e 0AD0     		beq	.L57
 1109              		.loc 1 359 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 27


 1110 0180 414B     		ldr	r3, .L66+40
 1111 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1112 0184 002B     		cmp	r3, #0
 1113 0186 06D0     		beq	.L57
 360:main.c        ****             //usbPutString("Turn Left\n");
 361:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 1114              		.loc 1 361 0 is_stmt 1
 1115 0188 0223     		movs	r3, #2
 1116 018a FB70     		strb	r3, [r7, #3]
 362:main.c        ****             previousDirection = directionState;
 1117              		.loc 1 362 0
 1118 018c 394A     		ldr	r2, .L66+20
 1119 018e FB78     		ldrb	r3, [r7, #3]
 1120 0190 1370     		strb	r3, [r2]
 363:main.c        ****             return directionState;
 1121              		.loc 1 363 0
 1122 0192 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1123 0194 5FE0     		b	.L42
 1124              	.L57:
 364:main.c        ****         } 
 365:main.c        ****         else if (!s5 || !s6) {
 1125              		.loc 1 365 0
 1126 0196 3B4B     		ldr	r3, .L66+36
 1127 0198 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1128 019a 002B     		cmp	r3, #0
 1129 019c 03D0     		beq	.L58
 1130              		.loc 1 365 0 is_stmt 0 discriminator 1
 1131 019e 3A4B     		ldr	r3, .L66+40
 1132 01a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1133 01a2 002B     		cmp	r3, #0
 1134 01a4 0DD1     		bne	.L56
 1135              	.L58:
 366:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 367:main.c        ****            // usbPutString("Stop after Left Turn\n");
 368:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 1136              		.loc 1 368 0 is_stmt 1
 1137 01a6 0523     		movs	r3, #5
 1138 01a8 FB70     		strb	r3, [r7, #3]
 369:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 1139              		.loc 1 369 0
 1140 01aa 334B     		ldr	r3, .L66+24
 1141 01ac 4FF00002 		mov	r2, #0
 1142 01b0 1A60     		str	r2, [r3]	@ float
 370:main.c        ****             previousDirection = directionState;
 1143              		.loc 1 370 0
 1144 01b2 304A     		ldr	r2, .L66+20
 1145 01b4 FB78     		ldrb	r3, [r7, #3]
 1146 01b6 1370     		strb	r3, [r2]
 371:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 1147              		.loc 1 371 0
 1148 01b8 2C4B     		ldr	r3, .L66+12
 1149 01ba 0122     		movs	r2, #1
 1150 01bc 1A70     		strb	r2, [r3]
 372:main.c        ****             return directionState;
 1151              		.loc 1 372 0
 1152 01be FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1153 01c0 49E0     		b	.L42
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 28


 1154              	.L56:
 373:main.c        ****         }
 374:main.c        ****     }
 375:main.c        ****     
 376:main.c        ****     // COURSE CORRECTION * ========================================
 377:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 1155              		.loc 1 377 0
 1156 01c2 2C4B     		ldr	r3, .L66+20
 1157 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1158 01c6 002B     		cmp	r3, #0
 1159 01c8 07D0     		beq	.L59
 1160              		.loc 1 377 0 is_stmt 0 discriminator 1
 1161 01ca 2A4B     		ldr	r3, .L66+20
 1162 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1163 01ce 032B     		cmp	r3, #3
 1164 01d0 03D0     		beq	.L59
 1165              		.loc 1 377 0 discriminator 2
 1166 01d2 284B     		ldr	r3, .L66+20
 1167 01d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1168 01d6 042B     		cmp	r3, #4
 1169 01d8 15D1     		bne	.L60
 1170              	.L59:
 378:main.c        ****         //ignoreSensor = 0;
 379:main.c        ****         if(s6) {
 1171              		.loc 1 379 0 is_stmt 1
 1172 01da 2B4B     		ldr	r3, .L66+40
 1173 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1174 01de 002B     		cmp	r3, #0
 1175 01e0 06D0     		beq	.L61
 380:main.c        ****             //usbPutString("Adjust to the left\n");
 381:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 1176              		.loc 1 381 0
 1177 01e2 0323     		movs	r3, #3
 1178 01e4 FB70     		strb	r3, [r7, #3]
 382:main.c        ****             previousDirection = directionState;
 1179              		.loc 1 382 0
 1180 01e6 234A     		ldr	r2, .L66+20
 1181 01e8 FB78     		ldrb	r3, [r7, #3]
 1182 01ea 1370     		strb	r3, [r2]
 383:main.c        ****             return directionState;
 1183              		.loc 1 383 0
 1184 01ec FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1185 01ee 32E0     		b	.L42
 1186              	.L61:
 384:main.c        ****         }
 385:main.c        ****         if(s5) {
 1187              		.loc 1 385 0
 1188 01f0 244B     		ldr	r3, .L66+36
 1189 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1190 01f4 002B     		cmp	r3, #0
 1191 01f6 06D0     		beq	.L60
 386:main.c        ****             //usbPutString("Adjust to the right\n");
 387:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 1192              		.loc 1 387 0
 1193 01f8 0423     		movs	r3, #4
 1194 01fa FB70     		strb	r3, [r7, #3]
 388:main.c        ****             previousDirection = directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 29


 1195              		.loc 1 388 0
 1196 01fc 1D4A     		ldr	r2, .L66+20
 1197 01fe FB78     		ldrb	r3, [r7, #3]
 1198 0200 1370     		strb	r3, [r2]
 389:main.c        ****             return directionState;
 1199              		.loc 1 389 0
 1200 0202 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1201 0204 27E0     		b	.L42
 1202              	.L60:
 390:main.c        ****         }
 391:main.c        ****     }
 392:main.c        ****     
 393:main.c        ****     // FORWARD * ========================================
 394:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 1203              		.loc 1 394 0
 1204 0206 1D4B     		ldr	r3, .L66+28
 1205 0208 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1206 020a 002B     		cmp	r3, #0
 1207 020c 12D0     		beq	.L62
 1208              		.loc 1 394 0 is_stmt 0 discriminator 1
 1209 020e 1C4B     		ldr	r3, .L66+32
 1210 0210 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1211 0212 002B     		cmp	r3, #0
 1212 0214 0ED0     		beq	.L62
 1213              		.loc 1 394 0 discriminator 2
 1214 0216 1B4B     		ldr	r3, .L66+36
 1215 0218 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1216 021a 002B     		cmp	r3, #0
 1217 021c 0AD1     		bne	.L62
 1218              		.loc 1 394 0 discriminator 3
 1219 021e 1A4B     		ldr	r3, .L66+40
 1220 0220 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1221 0222 002B     		cmp	r3, #0
 1222 0224 06D1     		bne	.L62
 395:main.c        ****         //usbPutString("Forward\n");
 396:main.c        ****         directionState = Forward;
 1223              		.loc 1 396 0 is_stmt 1
 1224 0226 0023     		movs	r3, #0
 1225 0228 FB70     		strb	r3, [r7, #3]
 397:main.c        ****         previousDirection = directionState;
 1226              		.loc 1 397 0
 1227 022a 124A     		ldr	r2, .L66+20
 1228 022c FB78     		ldrb	r3, [r7, #3]
 1229 022e 1370     		strb	r3, [r2]
 398:main.c        ****         return directionState;   
 1230              		.loc 1 398 0
 1231 0230 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1232 0232 10E0     		b	.L42
 1233              	.L62:
 399:main.c        ****     }
 400:main.c        **** 
 401:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 402:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 403:main.c        ****     if (previousDirection == Unknown) {
 1234              		.loc 1 403 0
 1235 0234 0F4B     		ldr	r3, .L66+20
 1236 0236 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 30


 1237 0238 062B     		cmp	r3, #6
 1238 023a 06D1     		bne	.L63
 404:main.c        ****         directionState = Forward;
 1239              		.loc 1 404 0
 1240 023c 0023     		movs	r3, #0
 1241 023e FB70     		strb	r3, [r7, #3]
 405:main.c        ****         previousDirection = directionState;
 1242              		.loc 1 405 0
 1243 0240 0C4A     		ldr	r2, .L66+20
 1244 0242 FB78     		ldrb	r3, [r7, #3]
 1245 0244 1370     		strb	r3, [r2]
 406:main.c        ****         return directionState;
 1246              		.loc 1 406 0
 1247 0246 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1248 0248 05E0     		b	.L42
 1249              	.L63:
 407:main.c        ****     }
 408:main.c        **** 
 409:main.c        ****     // Possible reason
 410:main.c        ****     previousDirection = currentDirection;
 1250              		.loc 1 410 0
 1251 024a 104B     		ldr	r3, .L66+44
 1252 024c 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1253 024e 094B     		ldr	r3, .L66+20
 1254 0250 1A70     		strb	r2, [r3]
 411:main.c        ****     return previousDirection;
 1255              		.loc 1 411 0
 1256 0252 084B     		ldr	r3, .L66+20
 1257 0254 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1258              	.L42:
 412:main.c        **** }
 1259              		.loc 1 412 0
 1260 0256 1846     		mov	r0, r3
 1261 0258 0837     		adds	r7, r7, #8
 1262              		.cfi_def_cfa_offset 8
 1263 025a BD46     		mov	sp, r7
 1264              		.cfi_def_cfa_register 13
 1265              		@ sp needed
 1266 025c 80BD     		pop	{r7, pc}
 1267              	.L67:
 1268 025e 00BF     		.align	2
 1269              	.L66:
 1270 0260 00000000 		.word	currentOrientation
 1271 0264 00000000 		.word	yBlocksize
 1272 0268 00000000 		.word	xBlocksize
 1273 026c 00000000 		.word	stoppedAfterTurn
 1274 0270 00000000 		.word	stopBuffer
 1275 0274 00000000 		.word	previousDirection
 1276 0278 00000000 		.word	totalDistance
 1277 027c 00000000 		.word	s3
 1278 0280 00000000 		.word	s4
 1279 0284 00000000 		.word	s5
 1280 0288 00000000 		.word	s6
 1281 028c 00000000 		.word	currentDirection
 1282              		.cfi_endproc
 1283              	.LFE73:
 1284              		.size	CheckSensorDirection, .-CheckSensorDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 31


 1285              		.section	.text.getNextInstruction,"ax",%progbits
 1286              		.align	2
 1287              		.global	getNextInstruction
 1288              		.thumb
 1289              		.thumb_func
 1290              		.type	getNextInstruction, %function
 1291              	getNextInstruction:
 1292              	.LFB74:
 413:main.c        **** 
 414:main.c        **** // get next instruction
 415:main.c        **** Instruction getNextInstruction(int numSteps, Instruction instructionList[numSteps]) {
 1293              		.loc 1 415 0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 32
 1296              		@ frame_needed = 1, uses_anonymous_args = 0
 1297              		@ link register save eliminated.
 1298 0000 90B4     		push	{r4, r7}
 1299              		.cfi_def_cfa_offset 8
 1300              		.cfi_offset 4, -8
 1301              		.cfi_offset 7, -4
 1302 0002 88B0     		sub	sp, sp, #32
 1303              		.cfi_def_cfa_offset 40
 1304 0004 00AF     		add	r7, sp, #0
 1305              		.cfi_def_cfa_register 7
 1306 0006 F860     		str	r0, [r7, #12]
 1307 0008 B960     		str	r1, [r7, #8]
 1308 000a 7A60     		str	r2, [r7, #4]
 1309              	.LBB3:
 416:main.c        ****     Instruction out;
 417:main.c        ****     // input is list of instructions and robot will react accordingly
 418:main.c        ****     for(int i = 0; i < numSteps; i++) {
 1310              		.loc 1 418 0
 1311 000c 0023     		movs	r3, #0
 1312 000e FB61     		str	r3, [r7, #28]
 1313 0010 34E0     		b	.L69
 1314              	.L72:
 419:main.c        ****         if(instructionList[i].direction != Skip) {
 1315              		.loc 1 419 0
 1316 0012 FA69     		ldr	r2, [r7, #28]
 1317 0014 1346     		mov	r3, r2
 1318 0016 5B00     		lsls	r3, r3, #1
 1319 0018 1344     		add	r3, r3, r2
 1320 001a 9B00     		lsls	r3, r3, #2
 1321 001c 1A46     		mov	r2, r3
 1322 001e 7B68     		ldr	r3, [r7, #4]
 1323 0020 1344     		add	r3, r3, r2
 1324 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1325 0024 062B     		cmp	r3, #6
 1326 0026 26D0     		beq	.L70
 420:main.c        ****             out.direction = instructionList[i].direction;
 1327              		.loc 1 420 0
 1328 0028 FA69     		ldr	r2, [r7, #28]
 1329 002a 1346     		mov	r3, r2
 1330 002c 5B00     		lsls	r3, r3, #1
 1331 002e 1344     		add	r3, r3, r2
 1332 0030 9B00     		lsls	r3, r3, #2
 1333 0032 1A46     		mov	r2, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 32


 1334 0034 7B68     		ldr	r3, [r7, #4]
 1335 0036 1344     		add	r3, r3, r2
 1336 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1337 003a 3B74     		strb	r3, [r7, #16]
 421:main.c        ****             out.ignoreL = instructionList[i].ignoreL;
 1338              		.loc 1 421 0
 1339 003c FA69     		ldr	r2, [r7, #28]
 1340 003e 1346     		mov	r3, r2
 1341 0040 5B00     		lsls	r3, r3, #1
 1342 0042 1344     		add	r3, r3, r2
 1343 0044 9B00     		lsls	r3, r3, #2
 1344 0046 1A46     		mov	r2, r3
 1345 0048 7B68     		ldr	r3, [r7, #4]
 1346 004a 1344     		add	r3, r3, r2
 1347 004c 5B68     		ldr	r3, [r3, #4]
 1348 004e 7B61     		str	r3, [r7, #20]
 422:main.c        ****             out.ignoreR = instructionList[i].ignoreR;
 1349              		.loc 1 422 0
 1350 0050 FA69     		ldr	r2, [r7, #28]
 1351 0052 1346     		mov	r3, r2
 1352 0054 5B00     		lsls	r3, r3, #1
 1353 0056 1344     		add	r3, r3, r2
 1354 0058 9B00     		lsls	r3, r3, #2
 1355 005a 1A46     		mov	r2, r3
 1356 005c 7B68     		ldr	r3, [r7, #4]
 1357 005e 1344     		add	r3, r3, r2
 1358 0060 9B68     		ldr	r3, [r3, #8]
 1359 0062 BB61     		str	r3, [r7, #24]
 423:main.c        ****             return out; // return next instruction
 1360              		.loc 1 423 0
 1361 0064 FB68     		ldr	r3, [r7, #12]
 1362 0066 1C46     		mov	r4, r3
 1363 0068 07F11003 		add	r3, r7, #16
 1364 006c 93E80700 		ldmia	r3, {r0, r1, r2}
 1365 0070 84E80700 		stmia	r4, {r0, r1, r2}
 1366 0074 0EE0     		b	.L68
 1367              	.L70:
 418:main.c        ****         if(instructionList[i].direction != Skip) {
 1368              		.loc 1 418 0 discriminator 2
 1369 0076 FB69     		ldr	r3, [r7, #28]
 1370 0078 0133     		adds	r3, r3, #1
 1371 007a FB61     		str	r3, [r7, #28]
 1372              	.L69:
 418:main.c        ****         if(instructionList[i].direction != Skip) {
 1373              		.loc 1 418 0 is_stmt 0 discriminator 1
 1374 007c FA69     		ldr	r2, [r7, #28]
 1375 007e BB68     		ldr	r3, [r7, #8]
 1376 0080 9A42     		cmp	r2, r3
 1377 0082 C6DB     		blt	.L72
 1378              	.LBE3:
 424:main.c        ****         }
 425:main.c        ****     }
 426:main.c        ****     return out;
 1379              		.loc 1 426 0 is_stmt 1
 1380 0084 FB68     		ldr	r3, [r7, #12]
 1381 0086 1C46     		mov	r4, r3
 1382 0088 07F11003 		add	r3, r7, #16
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 33


 1383 008c 93E80700 		ldmia	r3, {r0, r1, r2}
 1384 0090 84E80700 		stmia	r4, {r0, r1, r2}
 1385              	.L68:
 427:main.c        **** }
 1386              		.loc 1 427 0
 1387 0094 F868     		ldr	r0, [r7, #12]
 1388 0096 2037     		adds	r7, r7, #32
 1389              		.cfi_def_cfa_offset 8
 1390 0098 BD46     		mov	sp, r7
 1391              		.cfi_def_cfa_register 13
 1392              		@ sp needed
 1393 009a 90BC     		pop	{r4, r7}
 1394              		.cfi_restore 7
 1395              		.cfi_restore 4
 1396              		.cfi_def_cfa_offset 0
 1397 009c 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE74:
 1400              		.size	getNextInstruction, .-getNextInstruction
 1401 009e 00BF     		.section	.text.SetRobotMovement,"ax",%progbits
 1402              		.align	2
 1403              		.global	SetRobotMovement
 1404              		.thumb
 1405              		.thumb_func
 1406              		.type	SetRobotMovement, %function
 1407              	SetRobotMovement:
 1408              	.LFB75:
 428:main.c        **** 
 429:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 430:main.c        **** void SetRobotMovement() {
 1409              		.loc 1 430 0
 1410              		.cfi_startproc
 1411              		@ args = 0, pretend = 0, frame = 16
 1412              		@ frame_needed = 1, uses_anonymous_args = 0
 1413 0000 90B5     		push	{r4, r7, lr}
 1414              		.cfi_def_cfa_offset 12
 1415              		.cfi_offset 4, -12
 1416              		.cfi_offset 7, -8
 1417              		.cfi_offset 14, -4
 1418 0002 85B0     		sub	sp, sp, #20
 1419              		.cfi_def_cfa_offset 32
 1420 0004 00AF     		add	r7, sp, #0
 1421              		.cfi_def_cfa_register 7
 431:main.c        ****     currentInstruction = getNextInstruction(numSteps, instructionList); // get current/ next instru
 1422              		.loc 1 431 0
 1423 0006 264B     		ldr	r3, .L89
 1424 0008 1968     		ldr	r1, [r3]
 1425 000a 264B     		ldr	r3, .L89+4
 1426 000c 1A68     		ldr	r2, [r3]
 1427 000e 264C     		ldr	r4, .L89+8
 1428 0010 3B46     		mov	r3, r7
 1429 0012 1846     		mov	r0, r3
 1430 0014 FFF7FEFF 		bl	getNextInstruction
 1431 0018 3B46     		mov	r3, r7
 1432 001a 93E80700 		ldmia	r3, {r0, r1, r2}
 1433 001e 84E80700 		stmia	r4, {r0, r1, r2}
 432:main.c        ****     currentDirection = CheckSensorDirection(); // check sensors, adjust robot movement
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 34


 1434              		.loc 1 432 0
 1435 0022 FFF7FEFF 		bl	CheckSensorDirection
 1436 0026 0346     		mov	r3, r0
 1437 0028 1A46     		mov	r2, r3
 1438 002a 204B     		ldr	r3, .L89+12
 1439 002c 1A70     		strb	r2, [r3]
 433:main.c        ****     // move robot depending on sensors
 434:main.c        ****     switch (currentDirection) {
 1440              		.loc 1 434 0
 1441 002e 1F4B     		ldr	r3, .L89+12
 1442 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1443 0032 092B     		cmp	r3, #9
 1444 0034 2FD8     		bhi	.L87
 1445 0036 01A2     		adr	r2, .L77
 1446 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1447              		.p2align 2
 1448              	.L77:
 1449 003c 65000000 		.word	.L76+1
 1450 0040 6B000000 		.word	.L78+1
 1451 0044 71000000 		.word	.L79+1
 1452 0048 7D000000 		.word	.L80+1
 1453 004c 77000000 		.word	.L81+1
 1454 0050 83000000 		.word	.L82+1
 1455 0054 95000000 		.word	.L88+1
 1456 0058 95000000 		.word	.L88+1
 1457 005c 89000000 		.word	.L85+1
 1458 0060 8F000000 		.word	.L86+1
 1459              		.p2align 1
 1460              	.L76:
 435:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 436:main.c        ****         case Forward:
 437:main.c        ****             moveForward();
 1461              		.loc 1 437 0
 1462 0064 FFF7FEFF 		bl	moveForward
 438:main.c        ****             break;
 1463              		.loc 1 438 0
 1464 0068 15E0     		b	.L75
 1465              	.L78:
 439:main.c        ****         case TurnRight:
 440:main.c        ****             turnRight();
 1466              		.loc 1 440 0
 1467 006a FFF7FEFF 		bl	turnRight
 441:main.c        ****             break;
 1468              		.loc 1 441 0
 1469 006e 12E0     		b	.L75
 1470              	.L79:
 442:main.c        ****         case TurnLeft:
 443:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1471              		.loc 1 443 0
 1472 0070 FFF7FEFF 		bl	turnLeft
 444:main.c        ****             break;
 1473              		.loc 1 444 0
 1474 0074 0FE0     		b	.L75
 1475              	.L81:
 445:main.c        ****         case AdjustToTheRight:
 446:main.c        ****             adjustRight();
 1476              		.loc 1 446 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 35


 1477 0076 FFF7FEFF 		bl	adjustRight
 447:main.c        ****             break;
 1478              		.loc 1 447 0
 1479 007a 0CE0     		b	.L75
 1480              	.L80:
 448:main.c        ****         case AdjustToTheLeft:
 449:main.c        ****             adjustLeft();
 1481              		.loc 1 449 0
 1482 007c FFF7FEFF 		bl	adjustLeft
 450:main.c        ****             break;
 1483              		.loc 1 450 0
 1484 0080 09E0     		b	.L75
 1485              	.L82:
 451:main.c        ****         case Stop:
 452:main.c        ****             stopMoving();
 1486              		.loc 1 452 0
 1487 0082 FFF7FEFF 		bl	stopMoving
 453:main.c        ****             break;
 1488              		.loc 1 453 0
 1489 0086 06E0     		b	.L75
 1490              	.L85:
 454:main.c        ****         case ForwardAfterTurn:
 455:main.c        ****             moveForward();
 1491              		.loc 1 455 0
 1492 0088 FFF7FEFF 		bl	moveForward
 456:main.c        ****             break;
 1493              		.loc 1 456 0
 1494 008c 03E0     		b	.L75
 1495              	.L86:
 457:main.c        ****         case Backward:
 458:main.c        ****             moveBackward();
 1496              		.loc 1 458 0
 1497 008e FFF7FEFF 		bl	moveBackward
 459:main.c        ****             break;
 1498              		.loc 1 459 0
 1499 0092 00E0     		b	.L75
 1500              	.L88:
 460:main.c        ****         case waitForTurn:
 461:main.c        ****             break;
 462:main.c        ****         /*case waitForLeftTurn:
 463:main.c        ****             moveForward();
 464:main.c        ****             break;
 465:main.c        ****         case waitForRightTurn:
 466:main.c        ****             moveForward();
 467:main.c        ****             break;*/
 468:main.c        ****         case Unknown:
 469:main.c        ****             // UNKNOWN CONFIGURATION
 470:main.c        ****             break;  
 1501              		.loc 1 470 0
 1502 0094 00BF     		nop
 1503              	.L75:
 1504              	.L87:
 471:main.c        ****     }
 472:main.c        **** }...
 1505              		.loc 1 472 0
 1506 0096 00BF     		nop
 1507 0098 1437     		adds	r7, r7, #20
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 36


 1508              		.cfi_def_cfa_offset 12
 1509 009a BD46     		mov	sp, r7
 1510              		.cfi_def_cfa_register 13
 1511              		@ sp needed
 1512 009c 90BD     		pop	{r4, r7, pc}
 1513              	.L90:
 1514 009e 00BF     		.align	2
 1515              	.L89:
 1516 00a0 00000000 		.word	numSteps
 1517 00a4 00000000 		.word	instructionList
 1518 00a8 00000000 		.word	currentInstruction
 1519 00ac 00000000 		.word	currentDirection
 1520              		.cfi_endproc
 1521              	.LFE75:
 1522              		.size	SetRobotMovement, .-SetRobotMovement
 1523              		.text
 1524              	.Letext0:
 1525              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1526              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1527              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1528              		.file 5 "vars.h"
 1529              		.file 6 "pathfinding.h"
 1530              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 1531              		.file 8 "map.h"
 1532              		.section	.debug_info,"",%progbits
 1533              	.Ldebug_info0:
 1534 0000 C9070000 		.4byte	0x7c9
 1535 0004 0400     		.2byte	0x4
 1536 0006 00000000 		.4byte	.Ldebug_abbrev0
 1537 000a 04       		.byte	0x4
 1538 000b 01       		.uleb128 0x1
 1539 000c 72000000 		.4byte	.LASF123
 1540 0010 0C       		.byte	0xc
 1541 0011 30000000 		.4byte	.LASF124
 1542 0015 7F040000 		.4byte	.LASF125
 1543 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1544 001d 00000000 		.4byte	0
 1545 0021 00000000 		.4byte	.Ldebug_line0
 1546 0025 02       		.uleb128 0x2
 1547 0026 01       		.byte	0x1
 1548 0027 06       		.byte	0x6
 1549 0028 86050000 		.4byte	.LASF0
 1550 002c 02       		.uleb128 0x2
 1551 002d 01       		.byte	0x1
 1552 002e 08       		.byte	0x8
 1553 002f 0C050000 		.4byte	.LASF1
 1554 0033 02       		.uleb128 0x2
 1555 0034 02       		.byte	0x2
 1556 0035 05       		.byte	0x5
 1557 0036 E6030000 		.4byte	.LASF2
 1558 003a 02       		.uleb128 0x2
 1559 003b 02       		.byte	0x2
 1560 003c 07       		.byte	0x7
 1561 003d 9D050000 		.4byte	.LASF3
 1562 0041 03       		.uleb128 0x3
 1563 0042 55000000 		.4byte	.LASF12
 1564 0046 02       		.byte	0x2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 37


 1565 0047 3F       		.byte	0x3f
 1566 0048 4C000000 		.4byte	0x4c
 1567 004c 02       		.uleb128 0x2
 1568 004d 04       		.byte	0x4
 1569 004e 05       		.byte	0x5
 1570 004f 08040000 		.4byte	.LASF4
 1571 0053 02       		.uleb128 0x2
 1572 0054 04       		.byte	0x4
 1573 0055 07       		.byte	0x7
 1574 0056 C8040000 		.4byte	.LASF5
 1575 005a 02       		.uleb128 0x2
 1576 005b 08       		.byte	0x8
 1577 005c 05       		.byte	0x5
 1578 005d DA020000 		.4byte	.LASF6
 1579 0061 02       		.uleb128 0x2
 1580 0062 08       		.byte	0x8
 1581 0063 07       		.byte	0x7
 1582 0064 8F010000 		.4byte	.LASF7
 1583 0068 04       		.uleb128 0x4
 1584 0069 04       		.byte	0x4
 1585 006a 05       		.byte	0x5
 1586 006b 696E7400 		.ascii	"int\000"
 1587 006f 02       		.uleb128 0x2
 1588 0070 04       		.byte	0x4
 1589 0071 07       		.byte	0x7
 1590 0072 48000000 		.4byte	.LASF8
 1591 0076 02       		.uleb128 0x2
 1592 0077 08       		.byte	0x8
 1593 0078 04       		.byte	0x4
 1594 0079 AA030000 		.4byte	.LASF9
 1595 007d 02       		.uleb128 0x2
 1596 007e 04       		.byte	0x4
 1597 007f 07       		.byte	0x7
 1598 0080 BF040000 		.4byte	.LASF10
 1599 0084 02       		.uleb128 0x2
 1600 0085 01       		.byte	0x1
 1601 0086 08       		.byte	0x8
 1602 0087 78020000 		.4byte	.LASF11
 1603 008b 03       		.uleb128 0x3
 1604 008c E5040000 		.4byte	.LASF13
 1605 0090 03       		.byte	0x3
 1606 0091 2C       		.byte	0x2c
 1607 0092 41000000 		.4byte	0x41
 1608 0096 05       		.uleb128 0x5
 1609 0097 06060000 		.4byte	.LASF14
 1610 009b 04       		.byte	0x4
 1611 009c E701     		.2byte	0x1e7
 1612 009e 2C000000 		.4byte	0x2c
 1613 00a2 05       		.uleb128 0x5
 1614 00a3 96020000 		.4byte	.LASF15
 1615 00a7 04       		.byte	0x4
 1616 00a8 E801     		.2byte	0x1e8
 1617 00aa 3A000000 		.4byte	0x3a
 1618 00ae 05       		.uleb128 0x5
 1619 00af 5A030000 		.4byte	.LASF16
 1620 00b3 04       		.byte	0x4
 1621 00b4 E901     		.2byte	0x1e9
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 38


 1622 00b6 53000000 		.4byte	0x53
 1623 00ba 05       		.uleb128 0x5
 1624 00bb 9D020000 		.4byte	.LASF17
 1625 00bf 04       		.byte	0x4
 1626 00c0 EA01     		.2byte	0x1ea
 1627 00c2 25000000 		.4byte	0x25
 1628 00c6 05       		.uleb128 0x5
 1629 00c7 5F000000 		.4byte	.LASF18
 1630 00cb 04       		.byte	0x4
 1631 00cc EB01     		.2byte	0x1eb
 1632 00ce 33000000 		.4byte	0x33
 1633 00d2 02       		.uleb128 0x2
 1634 00d3 04       		.byte	0x4
 1635 00d4 04       		.byte	0x4
 1636 00d5 73010000 		.4byte	.LASF19
 1637 00d9 02       		.uleb128 0x2
 1638 00da 08       		.byte	0x8
 1639 00db 04       		.byte	0x4
 1640 00dc 0C060000 		.4byte	.LASF20
 1641 00e0 06       		.uleb128 0x6
 1642 00e1 7C030000 		.4byte	.LASF45
 1643 00e5 20       		.byte	0x20
 1644 00e6 05       		.byte	0x5
 1645 00e7 28       		.byte	0x28
 1646 00e8 B9010000 		.4byte	0x1b9
 1647 00ec 07       		.uleb128 0x7
 1648 00ed 86030000 		.4byte	.LASF21
 1649 00f1 05       		.byte	0x5
 1650 00f2 2A       		.byte	0x2a
 1651 00f3 BA000000 		.4byte	0xba
 1652 00f7 00       		.byte	0
 1653 00f8 07       		.uleb128 0x7
 1654 00f9 89010000 		.4byte	.LASF22
 1655 00fd 05       		.byte	0x5
 1656 00fe 2B       		.byte	0x2b
 1657 00ff 96000000 		.4byte	0x96
 1658 0103 01       		.byte	0x1
 1659 0104 07       		.uleb128 0x7
 1660 0105 ED040000 		.4byte	.LASF23
 1661 0109 05       		.byte	0x5
 1662 010a 2C       		.byte	0x2c
 1663 010b C6000000 		.4byte	0xc6
 1664 010f 02       		.byte	0x2
 1665 0110 07       		.uleb128 0x7
 1666 0111 4F020000 		.4byte	.LASF24
 1667 0115 05       		.byte	0x5
 1668 0116 2D       		.byte	0x2d
 1669 0117 C6000000 		.4byte	0xc6
 1670 011b 04       		.byte	0x4
 1671 011c 07       		.uleb128 0x7
 1672 011d B0050000 		.4byte	.LASF25
 1673 0121 05       		.byte	0x5
 1674 0122 2E       		.byte	0x2e
 1675 0123 C6000000 		.4byte	0xc6
 1676 0127 06       		.byte	0x6
 1677 0128 07       		.uleb128 0x7
 1678 0129 33060000 		.4byte	.LASF26
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 39


 1679 012d 05       		.byte	0x5
 1680 012e 2F       		.byte	0x2f
 1681 012f C6000000 		.4byte	0xc6
 1682 0133 08       		.byte	0x8
 1683 0134 07       		.uleb128 0x7
 1684 0135 1F030000 		.4byte	.LASF27
 1685 0139 05       		.byte	0x5
 1686 013a 30       		.byte	0x30
 1687 013b C6000000 		.4byte	0xc6
 1688 013f 0A       		.byte	0xa
 1689 0140 07       		.uleb128 0x7
 1690 0141 7D020000 		.4byte	.LASF28
 1691 0145 05       		.byte	0x5
 1692 0146 31       		.byte	0x31
 1693 0147 C6000000 		.4byte	0xc6
 1694 014b 0C       		.byte	0xc
 1695 014c 07       		.uleb128 0x7
 1696 014d 8B030000 		.4byte	.LASF29
 1697 0151 05       		.byte	0x5
 1698 0152 32       		.byte	0x32
 1699 0153 C6000000 		.4byte	0xc6
 1700 0157 0E       		.byte	0xe
 1701 0158 07       		.uleb128 0x7
 1702 0159 E8020000 		.4byte	.LASF30
 1703 015d 05       		.byte	0x5
 1704 015e 33       		.byte	0x33
 1705 015f C6000000 		.4byte	0xc6
 1706 0163 10       		.byte	0x10
 1707 0164 07       		.uleb128 0x7
 1708 0165 66040000 		.4byte	.LASF31
 1709 0169 05       		.byte	0x5
 1710 016a 34       		.byte	0x34
 1711 016b C6000000 		.4byte	0xc6
 1712 016f 12       		.byte	0x12
 1713 0170 07       		.uleb128 0x7
 1714 0171 53060000 		.4byte	.LASF32
 1715 0175 05       		.byte	0x5
 1716 0176 35       		.byte	0x35
 1717 0177 C6000000 		.4byte	0xc6
 1718 017b 14       		.byte	0x14
 1719 017c 07       		.uleb128 0x7
 1720 017d AD020000 		.4byte	.LASF33
 1721 0181 05       		.byte	0x5
 1722 0182 36       		.byte	0x36
 1723 0183 C6000000 		.4byte	0xc6
 1724 0187 16       		.byte	0x16
 1725 0188 07       		.uleb128 0x7
 1726 0189 1A010000 		.4byte	.LASF34
 1727 018d 05       		.byte	0x5
 1728 018e 37       		.byte	0x37
 1729 018f C6000000 		.4byte	0xc6
 1730 0193 18       		.byte	0x18
 1731 0194 07       		.uleb128 0x7
 1732 0195 42040000 		.4byte	.LASF35
 1733 0199 05       		.byte	0x5
 1734 019a 38       		.byte	0x38
 1735 019b C6000000 		.4byte	0xc6
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 40


 1736 019f 1A       		.byte	0x1a
 1737 01a0 07       		.uleb128 0x7
 1738 01a1 16030000 		.4byte	.LASF36
 1739 01a5 05       		.byte	0x5
 1740 01a6 39       		.byte	0x39
 1741 01a7 C6000000 		.4byte	0xc6
 1742 01ab 1C       		.byte	0x1c
 1743 01ac 07       		.uleb128 0x7
 1744 01ad 58010000 		.4byte	.LASF37
 1745 01b1 05       		.byte	0x5
 1746 01b2 3A       		.byte	0x3a
 1747 01b3 C6000000 		.4byte	0xc6
 1748 01b7 1E       		.byte	0x1e
 1749 01b8 00       		.byte	0
 1750 01b9 08       		.uleb128 0x8
 1751 01ba 1B000000 		.4byte	.LASF50
 1752 01be 01       		.byte	0x1
 1753 01bf 2C000000 		.4byte	0x2c
 1754 01c3 06       		.byte	0x6
 1755 01c4 0D       		.byte	0xd
 1756 01c5 F4010000 		.4byte	0x1f4
 1757 01c9 09       		.uleb128 0x9
 1758 01ca 70050000 		.4byte	.LASF38
 1759 01ce 00       		.byte	0
 1760 01cf 09       		.uleb128 0x9
 1761 01d0 CA020000 		.4byte	.LASF39
 1762 01d4 01       		.byte	0x1
 1763 01d5 09       		.uleb128 0x9
 1764 01d6 61030000 		.4byte	.LASF40
 1765 01da 02       		.byte	0x2
 1766 01db 09       		.uleb128 0x9
 1767 01dc 04030000 		.4byte	.LASF41
 1768 01e0 03       		.byte	0x3
 1769 01e1 09       		.uleb128 0x9
 1770 01e2 E6010000 		.4byte	.LASF42
 1771 01e6 04       		.byte	0x4
 1772 01e7 09       		.uleb128 0x9
 1773 01e8 36020000 		.4byte	.LASF43
 1774 01ec 05       		.byte	0x5
 1775 01ed 09       		.uleb128 0x9
 1776 01ee 5D050000 		.4byte	.LASF44
 1777 01f2 06       		.byte	0x6
 1778 01f3 00       		.byte	0
 1779 01f4 06       		.uleb128 0x6
 1780 01f5 A6010000 		.4byte	.LASF46
 1781 01f9 0C       		.byte	0xc
 1782 01fa 06       		.byte	0x6
 1783 01fb 0E       		.byte	0xe
 1784 01fc 25020000 		.4byte	0x225
 1785 0200 07       		.uleb128 0x7
 1786 0201 00000000 		.4byte	.LASF47
 1787 0205 06       		.byte	0x6
 1788 0206 0F       		.byte	0xf
 1789 0207 B9010000 		.4byte	0x1b9
 1790 020b 00       		.byte	0
 1791 020c 07       		.uleb128 0x7
 1792 020d 5C060000 		.4byte	.LASF48
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 41


 1793 0211 06       		.byte	0x6
 1794 0212 10       		.byte	0x10
 1795 0213 68000000 		.4byte	0x68
 1796 0217 04       		.byte	0x4
 1797 0218 07       		.uleb128 0x7
 1798 0219 64060000 		.4byte	.LASF49
 1799 021d 06       		.byte	0x6
 1800 021e 11       		.byte	0x11
 1801 021f 68000000 		.4byte	0x68
 1802 0223 08       		.byte	0x8
 1803 0224 00       		.byte	0
 1804 0225 03       		.uleb128 0x3
 1805 0226 A6010000 		.4byte	.LASF46
 1806 022a 06       		.byte	0x6
 1807 022b 12       		.byte	0x12
 1808 022c F4010000 		.4byte	0x1f4
 1809 0230 08       		.uleb128 0x8
 1810 0231 4A040000 		.4byte	.LASF51
 1811 0235 01       		.byte	0x1
 1812 0236 2C000000 		.4byte	0x2c
 1813 023a 06       		.byte	0x6
 1814 023b 14       		.byte	0x14
 1815 023c 58020000 		.4byte	0x258
 1816 0240 0A       		.uleb128 0xa
 1817 0241 557000   		.ascii	"Up\000"
 1818 0244 00       		.byte	0
 1819 0245 09       		.uleb128 0x9
 1820 0246 5B040000 		.4byte	.LASF52
 1821 024a 01       		.byte	0x1
 1822 024b 09       		.uleb128 0x9
 1823 024c BA020000 		.4byte	.LASF53
 1824 0250 02       		.byte	0x2
 1825 0251 09       		.uleb128 0x9
 1826 0252 60040000 		.4byte	.LASF54
 1827 0256 03       		.byte	0x3
 1828 0257 00       		.byte	0
 1829 0258 08       		.uleb128 0x8
 1830 0259 FE040000 		.4byte	.LASF55
 1831 025d 01       		.byte	0x1
 1832 025e 2C000000 		.4byte	0x2c
 1833 0262 01       		.byte	0x1
 1834 0263 18       		.byte	0x18
 1835 0264 A5020000 		.4byte	0x2a5
 1836 0268 09       		.uleb128 0x9
 1837 0269 28040000 		.4byte	.LASF56
 1838 026d 00       		.byte	0
 1839 026e 09       		.uleb128 0x9
 1840 026f 72030000 		.4byte	.LASF57
 1841 0273 01       		.byte	0x1
 1842 0274 09       		.uleb128 0x9
 1843 0275 31030000 		.4byte	.LASF58
 1844 0279 02       		.byte	0x2
 1845 027a 09       		.uleb128 0x9
 1846 027b ED050000 		.4byte	.LASF59
 1847 027f 03       		.byte	0x3
 1848 0280 09       		.uleb128 0x9
 1849 0281 30050000 		.4byte	.LASF60
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 42


 1850 0285 04       		.byte	0x4
 1851 0286 09       		.uleb128 0x9
 1852 0287 41050000 		.4byte	.LASF61
 1853 028b 05       		.byte	0x5
 1854 028c 09       		.uleb128 0x9
 1855 028d 43030000 		.4byte	.LASF62
 1856 0291 06       		.byte	0x6
 1857 0292 09       		.uleb128 0x9
 1858 0293 43020000 		.4byte	.LASF63
 1859 0297 07       		.byte	0x7
 1860 0298 09       		.uleb128 0x9
 1861 0299 0A000000 		.4byte	.LASF64
 1862 029d 08       		.byte	0x8
 1863 029e 09       		.uleb128 0x9
 1864 029f FD050000 		.4byte	.LASF65
 1865 02a3 09       		.byte	0x9
 1866 02a4 00       		.byte	0
 1867 02a5 0B       		.uleb128 0xb
 1868 02a6 BF020000 		.4byte	.LASF71
 1869 02aa 01       		.byte	0x1
 1870 02ab 30       		.byte	0x30
 1871 02ac 00000000 		.4byte	.LFB64
 1872 02b0 F4000000 		.4byte	.LFE64-.LFB64
 1873 02b4 01       		.uleb128 0x1
 1874 02b5 9C       		.byte	0x9c
 1875 02b6 D3020000 		.4byte	0x2d3
 1876 02ba 0C       		.uleb128 0xc
 1877 02bb 58000000 		.4byte	.LBB2
 1878 02bf 62000000 		.4byte	.LBE2-.LBB2
 1879 02c3 0D       		.uleb128 0xd
 1880 02c4 0A030000 		.4byte	.LASF73
 1881 02c8 01       		.byte	0x1
 1882 02c9 3E       		.byte	0x3e
 1883 02ca D2000000 		.4byte	0xd2
 1884 02ce 02       		.uleb128 0x2
 1885 02cf 91       		.byte	0x91
 1886 02d0 6C       		.sleb128 -20
 1887 02d1 00       		.byte	0
 1888 02d2 00       		.byte	0
 1889 02d3 0E       		.uleb128 0xe
 1890 02d4 FC030000 		.4byte	.LASF66
 1891 02d8 01       		.byte	0x1
 1892 02d9 49       		.byte	0x49
 1893 02da 00000000 		.4byte	.LFB65
 1894 02de 18000000 		.4byte	.LFE65-.LFB65
 1895 02e2 01       		.uleb128 0x1
 1896 02e3 9C       		.byte	0x9c
 1897 02e4 0E       		.uleb128 0xe
 1898 02e5 F0030000 		.4byte	.LASF67
 1899 02e9 01       		.byte	0x1
 1900 02ea 4F       		.byte	0x4f
 1901 02eb 00000000 		.4byte	.LFB66
 1902 02ef 18000000 		.4byte	.LFE66-.LFB66
 1903 02f3 01       		.uleb128 0x1
 1904 02f4 9C       		.byte	0x9c
 1905 02f5 0E       		.uleb128 0xe
 1906 02f6 7A050000 		.4byte	.LASF68
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 43


 1907 02fa 01       		.byte	0x1
 1908 02fb 55       		.byte	0x55
 1909 02fc 00000000 		.4byte	.LFB67
 1910 0300 18000000 		.4byte	.LFE67-.LFB67
 1911 0304 01       		.uleb128 0x1
 1912 0305 9C       		.byte	0x9c
 1913 0306 0E       		.uleb128 0xe
 1914 0307 00010000 		.4byte	.LASF69
 1915 030b 01       		.byte	0x1
 1916 030c 5B       		.byte	0x5b
 1917 030d 00000000 		.4byte	.LFB68
 1918 0311 18000000 		.4byte	.LFE68-.LFB68
 1919 0315 01       		.uleb128 0x1
 1920 0316 9C       		.byte	0x9c
 1921 0317 0F       		.uleb128 0xf
 1922 0318 CF010000 		.4byte	.LASF70
 1923 031c 01       		.byte	0x1
 1924 031d 61       		.byte	0x61
 1925 031e 00000000 		.4byte	.LFB69
 1926 0322 38000000 		.4byte	.LFE69-.LFB69
 1927 0326 01       		.uleb128 0x1
 1928 0327 9C       		.byte	0x9c
 1929 0328 10       		.uleb128 0x10
 1930 0329 C2050000 		.4byte	.LASF72
 1931 032d 01       		.byte	0x1
 1932 032e 6D       		.byte	0x6d
 1933 032f 68000000 		.4byte	0x68
 1934 0333 00000000 		.4byte	.LFB70
 1935 0337 EC000000 		.4byte	.LFE70-.LFB70
 1936 033b 01       		.uleb128 0x1
 1937 033c 9C       		.byte	0x9c
 1938 033d 6C030000 		.4byte	0x36c
 1939 0341 11       		.uleb128 0x11
 1940 0342 6F6E6500 		.ascii	"one\000"
 1941 0346 01       		.byte	0x1
 1942 0347 7C       		.byte	0x7c
 1943 0348 25020000 		.4byte	0x225
 1944 034c 02       		.uleb128 0x2
 1945 034d 91       		.byte	0x91
 1946 034e 6C       		.sleb128 -20
 1947 034f 11       		.uleb128 0x11
 1948 0350 74776F00 		.ascii	"two\000"
 1949 0354 01       		.byte	0x1
 1950 0355 7D       		.byte	0x7d
 1951 0356 25020000 		.4byte	0x225
 1952 035a 02       		.uleb128 0x2
 1953 035b 91       		.byte	0x91
 1954 035c 60       		.sleb128 -32
 1955 035d 0D       		.uleb128 0xd
 1956 035e 30020000 		.4byte	.LASF74
 1957 0362 01       		.byte	0x1
 1958 0363 7E       		.byte	0x7e
 1959 0364 25020000 		.4byte	0x225
 1960 0368 02       		.uleb128 0x2
 1961 0369 91       		.byte	0x91
 1962 036a 54       		.sleb128 -44
 1963 036b 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 44


 1964 036c 12       		.uleb128 0x12
 1965 036d 14020000 		.4byte	.LASF78
 1966 0371 01       		.byte	0x1
 1967 0372 9E       		.byte	0x9e
 1968 0373 C6000000 		.4byte	0xc6
 1969 0377 00000000 		.4byte	.LFB71
 1970 037b 54000000 		.4byte	.LFE71-.LFB71
 1971 037f 01       		.uleb128 0x1
 1972 0380 9C       		.byte	0x9c
 1973 0381 B0030000 		.4byte	0x3b0
 1974 0385 13       		.uleb128 0x13
 1975 0386 83010000 		.4byte	.LASF80
 1976 038a 01       		.byte	0x1
 1977 038b 9E       		.byte	0x9e
 1978 038c A2000000 		.4byte	0xa2
 1979 0390 02       		.uleb128 0x2
 1980 0391 91       		.byte	0x91
 1981 0392 66       		.sleb128 -26
 1982 0393 11       		.uleb128 0x11
 1983 0394 63707300 		.ascii	"cps\000"
 1984 0398 01       		.byte	0x1
 1985 0399 A0       		.byte	0xa0
 1986 039a D2000000 		.4byte	0xd2
 1987 039e 02       		.uleb128 0x2
 1988 039f 91       		.byte	0x91
 1989 03a0 6C       		.sleb128 -20
 1990 03a1 11       		.uleb128 0x11
 1991 03a2 72706D00 		.ascii	"rpm\000"
 1992 03a6 01       		.byte	0x1
 1993 03a7 A1       		.byte	0xa1
 1994 03a8 C6000000 		.4byte	0xc6
 1995 03ac 02       		.uleb128 0x2
 1996 03ad 91       		.byte	0x91
 1997 03ae 6A       		.sleb128 -22
 1998 03af 00       		.byte	0
 1999 03b0 14       		.uleb128 0x14
 2000 03b1 47010000 		.4byte	.LASF83
 2001 03b5 01       		.byte	0x1
 2002 03b6 A9       		.byte	0xa9
 2003 03b7 00000000 		.4byte	.LFB72
 2004 03bb 34000000 		.4byte	.LFE72-.LFB72
 2005 03bf 01       		.uleb128 0x1
 2006 03c0 9C       		.byte	0x9c
 2007 03c1 15       		.uleb128 0x15
 2008 03c2 13060000 		.4byte	.LASF75
 2009 03c6 01       		.byte	0x1
 2010 03c7 0301     		.2byte	0x103
 2011 03c9 58020000 		.4byte	0x258
 2012 03cd 00000000 		.4byte	.LFB73
 2013 03d1 90020000 		.4byte	.LFE73-.LFB73
 2014 03d5 01       		.uleb128 0x1
 2015 03d6 9C       		.byte	0x9c
 2016 03d7 FA030000 		.4byte	0x3fa
 2017 03db 16       		.uleb128 0x16
 2018 03dc 37000000 		.4byte	.LASF76
 2019 03e0 01       		.byte	0x1
 2020 03e1 0401     		.2byte	0x104
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 45


 2021 03e3 D2000000 		.4byte	0xd2
 2022 03e7 02       		.uleb128 0x2
 2023 03e8 91       		.byte	0x91
 2024 03e9 74       		.sleb128 -12
 2025 03ea 16       		.uleb128 0x16
 2026 03eb 4B030000 		.4byte	.LASF77
 2027 03ef 01       		.byte	0x1
 2028 03f0 0B01     		.2byte	0x10b
 2029 03f2 58020000 		.4byte	0x258
 2030 03f6 02       		.uleb128 0x2
 2031 03f7 91       		.byte	0x91
 2032 03f8 73       		.sleb128 -13
 2033 03f9 00       		.byte	0
 2034 03fa 17       		.uleb128 0x17
 2035 03fb C7050000 		.4byte	.LASF79
 2036 03ff 01       		.byte	0x1
 2037 0400 9F01     		.2byte	0x19f
 2038 0402 25020000 		.4byte	0x225
 2039 0406 00000000 		.4byte	.LFB74
 2040 040a 9E000000 		.4byte	.LFE74-.LFB74
 2041 040e 01       		.uleb128 0x1
 2042 040f 9C       		.byte	0x9c
 2043 0410 59040000 		.4byte	0x459
 2044 0414 18       		.uleb128 0x18
 2045 0415 22010000 		.4byte	.LASF81
 2046 0419 01       		.byte	0x1
 2047 041a 9F01     		.2byte	0x19f
 2048 041c 68000000 		.4byte	0x68
 2049 0420 02       		.uleb128 0x2
 2050 0421 91       		.byte	0x91
 2051 0422 60       		.sleb128 -32
 2052 0423 18       		.uleb128 0x18
 2053 0424 86020000 		.4byte	.LASF82
 2054 0428 01       		.byte	0x1
 2055 0429 9F01     		.2byte	0x19f
 2056 042b 59040000 		.4byte	0x459
 2057 042f 02       		.uleb128 0x2
 2058 0430 91       		.byte	0x91
 2059 0431 5C       		.sleb128 -36
 2060 0432 19       		.uleb128 0x19
 2061 0433 6F757400 		.ascii	"out\000"
 2062 0437 01       		.byte	0x1
 2063 0438 A001     		.2byte	0x1a0
 2064 043a 25020000 		.4byte	0x225
 2065 043e 02       		.uleb128 0x2
 2066 043f 91       		.byte	0x91
 2067 0440 68       		.sleb128 -24
 2068 0441 0C       		.uleb128 0xc
 2069 0442 0C000000 		.4byte	.LBB3
 2070 0446 78000000 		.4byte	.LBE3-.LBB3
 2071 044a 19       		.uleb128 0x19
 2072 044b 6900     		.ascii	"i\000"
 2073 044d 01       		.byte	0x1
 2074 044e A201     		.2byte	0x1a2
 2075 0450 68000000 		.4byte	0x68
 2076 0454 02       		.uleb128 0x2
 2077 0455 91       		.byte	0x91
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 46


 2078 0456 74       		.sleb128 -12
 2079 0457 00       		.byte	0
 2080 0458 00       		.byte	0
 2081 0459 1A       		.uleb128 0x1a
 2082 045a 04       		.byte	0x4
 2083 045b 25020000 		.4byte	0x225
 2084 045f 1B       		.uleb128 0x1b
 2085 0460 BE010000 		.4byte	.LASF84
 2086 0464 01       		.byte	0x1
 2087 0465 AE01     		.2byte	0x1ae
 2088 0467 00000000 		.4byte	.LFB75
 2089 046b B0000000 		.4byte	.LFE75-.LFB75
 2090 046f 01       		.uleb128 0x1
 2091 0470 9C       		.byte	0x9c
 2092 0471 1C       		.uleb128 0x1c
 2093 0472 11040000 		.4byte	.LASF85
 2094 0476 07       		.byte	0x7
 2095 0477 1207     		.2byte	0x712
 2096 0479 7D040000 		.4byte	0x47d
 2097 047d 1D       		.uleb128 0x1d
 2098 047e 8B000000 		.4byte	0x8b
 2099 0482 1E       		.uleb128 0x1e
 2100 0483 747300   		.ascii	"ts\000"
 2101 0486 05       		.byte	0x5
 2102 0487 10       		.byte	0x10
 2103 0488 96000000 		.4byte	0x96
 2104 048c 05       		.uleb128 0x5
 2105 048d 03       		.byte	0x3
 2106 048e 00000000 		.4byte	ts
 2107 0492 1F       		.uleb128 0x1f
 2108 0493 46050000 		.4byte	.LASF86
 2109 0497 05       		.byte	0x5
 2110 0498 11       		.byte	0x11
 2111 0499 A2000000 		.4byte	0xa2
 2112 049d 05       		.uleb128 0x5
 2113 049e 03       		.byte	0x3
 2114 049f 00000000 		.4byte	ts_enc
 2115 04a3 1F       		.uleb128 0x1f
 2116 04a4 1E040000 		.4byte	.LASF87
 2117 04a8 05       		.byte	0x5
 2118 04a9 12       		.byte	0x12
 2119 04aa A2000000 		.4byte	0xa2
 2120 04ae 05       		.uleb128 0x5
 2121 04af 03       		.byte	0x3
 2122 04b0 00000000 		.4byte	ts_update
 2123 04b4 1F       		.uleb128 0x1f
 2124 04b5 3A030000 		.4byte	.LASF88
 2125 04b9 05       		.byte	0x5
 2126 04ba 13       		.byte	0x13
 2127 04bb A2000000 		.4byte	0xa2
 2128 04bf 05       		.uleb128 0x5
 2129 04c0 03       		.byte	0x3
 2130 04c1 00000000 		.4byte	ts_speed
 2131 04c5 1F       		.uleb128 0x1f
 2132 04c6 5A020000 		.4byte	.LASF89
 2133 04ca 05       		.byte	0x5
 2134 04cb 14       		.byte	0x14
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 47


 2135 04cc A2000000 		.4byte	0xa2
 2136 04d0 05       		.uleb128 0x5
 2137 04d1 03       		.byte	0x3
 2138 04d2 00000000 		.4byte	ts_display
 2139 04d6 1F       		.uleb128 0x1f
 2140 04d7 08020000 		.4byte	.LASF90
 2141 04db 05       		.byte	0x5
 2142 04dc 16       		.byte	0x16
 2143 04dd 96000000 		.4byte	0x96
 2144 04e1 05       		.uleb128 0x5
 2145 04e2 03       		.byte	0x3
 2146 04e3 00000000 		.4byte	flag_ts_enc
 2147 04e7 1F       		.uleb128 0x1f
 2148 04e8 F9010000 		.4byte	.LASF91
 2149 04ec 05       		.byte	0x5
 2150 04ed 17       		.byte	0x17
 2151 04ee 96000000 		.4byte	0x96
 2152 04f2 05       		.uleb128 0x5
 2153 04f3 03       		.byte	0x3
 2154 04f4 00000000 		.4byte	flag_ts_update
 2155 04f8 1F       		.uleb128 0x1f
 2156 04f9 B6030000 		.4byte	.LASF92
 2157 04fd 05       		.byte	0x5
 2158 04fe 18       		.byte	0x18
 2159 04ff 96000000 		.4byte	0x96
 2160 0503 05       		.uleb128 0x5
 2161 0504 03       		.byte	0x3
 2162 0505 00000000 		.4byte	flag_ts_speed
 2163 0509 1F       		.uleb128 0x1f
 2164 050a 4D050000 		.4byte	.LASF93
 2165 050e 05       		.byte	0x5
 2166 050f 19       		.byte	0x19
 2167 0510 96000000 		.4byte	0x96
 2168 0514 05       		.uleb128 0x5
 2169 0515 03       		.byte	0x3
 2170 0516 00000000 		.4byte	flag_ts_display
 2171 051a 1F       		.uleb128 0x1f
 2172 051b D3030000 		.4byte	.LASF94
 2173 051f 05       		.byte	0x5
 2174 0520 1B       		.byte	0x1b
 2175 0521 96000000 		.4byte	0x96
 2176 0525 05       		.uleb128 0x5
 2177 0526 03       		.byte	0x3
 2178 0527 00000000 		.4byte	flag_rx
 2179 052b 1F       		.uleb128 0x1f
 2180 052c B2010000 		.4byte	.LASF95
 2181 0530 05       		.byte	0x5
 2182 0531 1C       		.byte	0x1c
 2183 0532 96000000 		.4byte	0x96
 2184 0536 05       		.uleb128 0x5
 2185 0537 03       		.byte	0x3
 2186 0538 00000000 		.4byte	flag_packet
 2187 053c 1F       		.uleb128 0x1f
 2188 053d 44060000 		.4byte	.LASF96
 2189 0541 05       		.byte	0x5
 2190 0542 1D       		.byte	0x1d
 2191 0543 96000000 		.4byte	0x96
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 48


 2192 0547 05       		.uleb128 0x5
 2193 0548 03       		.byte	0x3
 2194 0549 00000000 		.4byte	flag_KB_string
 2195 054d 1F       		.uleb128 0x1f
 2196 054e C4030000 		.4byte	.LASF97
 2197 0552 05       		.byte	0x5
 2198 0553 1F       		.byte	0x1f
 2199 0554 96000000 		.4byte	0x96
 2200 0558 05       		.uleb128 0x5
 2201 0559 03       		.byte	0x3
 2202 055a 00000000 		.4byte	dataready_flag
 2203 055e 1F       		.uleb128 0x1f
 2204 055f 2B010000 		.4byte	.LASF98
 2205 0563 05       		.byte	0x5
 2206 0564 21       		.byte	0x21
 2207 0565 96000000 		.4byte	0x96
 2208 0569 05       		.uleb128 0x5
 2209 056a 03       		.byte	0x3
 2210 056b 00000000 		.4byte	flag_rf_transmission_active
 2211 056f 20       		.uleb128 0x20
 2212 0570 84000000 		.4byte	0x84
 2213 0574 7F050000 		.4byte	0x57f
 2214 0578 21       		.uleb128 0x21
 2215 0579 7D000000 		.4byte	0x7d
 2216 057d 3F       		.byte	0x3f
 2217 057e 00       		.byte	0
 2218 057f 1F       		.uleb128 0x1f
 2219 0580 62050000 		.4byte	.LASF99
 2220 0584 05       		.byte	0x5
 2221 0585 24       		.byte	0x24
 2222 0586 6F050000 		.4byte	0x56f
 2223 058a 05       		.uleb128 0x5
 2224 058b 03       		.byte	0x3
 2225 058c 00000000 		.4byte	displaystring
 2226 0590 1F       		.uleb128 0x1f
 2227 0591 2B050000 		.4byte	.LASF100
 2228 0595 05       		.byte	0x5
 2229 0596 25       		.byte	0x25
 2230 0597 6F050000 		.4byte	0x56f
 2231 059b 05       		.uleb128 0x5
 2232 059c 03       		.byte	0x3
 2233 059d 00000000 		.4byte	line
 2234 05a1 1F       		.uleb128 0x1f
 2235 05a2 F8040000 		.4byte	.LASF101
 2236 05a6 05       		.byte	0x5
 2237 05a7 25       		.byte	0x25
 2238 05a8 6F050000 		.4byte	0x56f
 2239 05ac 05       		.uleb128 0x5
 2240 05ad 03       		.byte	0x3
 2241 05ae 00000000 		.4byte	entry
 2242 05b2 20       		.uleb128 0x20
 2243 05b3 96000000 		.4byte	0x96
 2244 05b7 C2050000 		.4byte	0x5c2
 2245 05bb 21       		.uleb128 0x21
 2246 05bc 7D000000 		.4byte	0x7d
 2247 05c0 3F       		.byte	0x3f
 2248 05c1 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 49


 2249 05c2 1F       		.uleb128 0x1f
 2250 05c3 79010000 		.4byte	.LASF102
 2251 05c7 05       		.byte	0x5
 2252 05c8 26       		.byte	0x26
 2253 05c9 B2050000 		.4byte	0x5b2
 2254 05cd 05       		.uleb128 0x5
 2255 05ce 03       		.byte	0x3
 2256 05cf 00000000 		.4byte	usbBuffer
 2257 05d3 1F       		.uleb128 0x1f
 2258 05d4 65000000 		.4byte	.LASF103
 2259 05d8 05       		.byte	0x5
 2260 05d9 3C       		.byte	0x3c
 2261 05da E0000000 		.4byte	0xe0
 2262 05de 05       		.uleb128 0x5
 2263 05df 03       		.byte	0x3
 2264 05e0 00000000 		.4byte	system_state
 2265 05e4 20       		.uleb128 0x20
 2266 05e5 68000000 		.4byte	0x68
 2267 05e9 FA050000 		.4byte	0x5fa
 2268 05ed 21       		.uleb128 0x21
 2269 05ee 7D000000 		.4byte	0x7d
 2270 05f2 0E       		.byte	0xe
 2271 05f3 21       		.uleb128 0x21
 2272 05f4 7D000000 		.4byte	0x7d
 2273 05f8 12       		.byte	0x12
 2274 05f9 00       		.byte	0
 2275 05fa 22       		.uleb128 0x22
 2276 05fb 6D617000 		.ascii	"map\000"
 2277 05ff 08       		.byte	0x8
 2278 0600 04       		.byte	0x4
 2279 0601 E4050000 		.4byte	0x5e4
 2280 0605 20       		.uleb128 0x20
 2281 0606 68000000 		.4byte	0x68
 2282 060a 1B060000 		.4byte	0x61b
 2283 060e 21       		.uleb128 0x21
 2284 060f 7D000000 		.4byte	0x7d
 2285 0613 04       		.byte	0x4
 2286 0614 21       		.uleb128 0x21
 2287 0615 7D000000 		.4byte	0x7d
 2288 0619 01       		.byte	0x1
 2289 061a 00       		.byte	0
 2290 061b 23       		.uleb128 0x23
 2291 061c 27030000 		.4byte	.LASF104
 2292 0620 08       		.byte	0x8
 2293 0621 05       		.byte	0x5
 2294 0622 05060000 		.4byte	0x605
 2295 0626 1F       		.uleb128 0x1f
 2296 0627 6E040000 		.4byte	.LASF105
 2297 062b 01       		.byte	0x1
 2298 062c 19       		.byte	0x19
 2299 062d 58020000 		.4byte	0x258
 2300 0631 05       		.uleb128 0x5
 2301 0632 03       		.byte	0x3
 2302 0633 00000000 		.4byte	currentDirection
 2303 0637 1F       		.uleb128 0x1f
 2304 0638 98030000 		.4byte	.LASF106
 2305 063c 01       		.byte	0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 50


 2306 063d 19       		.byte	0x19
 2307 063e 58020000 		.4byte	0x258
 2308 0642 05       		.uleb128 0x5
 2309 0643 03       		.byte	0x3
 2310 0644 00000000 		.4byte	previousDirection
 2311 0648 1F       		.uleb128 0x1f
 2312 0649 65020000 		.4byte	.LASF107
 2313 064d 01       		.byte	0x1
 2314 064e 1A       		.byte	0x1a
 2315 064f 30020000 		.4byte	0x230
 2316 0653 05       		.uleb128 0x5
 2317 0654 03       		.byte	0x3
 2318 0655 00000000 		.4byte	currentOrientation
 2319 0659 1F       		.uleb128 0x1f
 2320 065a F0020000 		.4byte	.LASF108
 2321 065e 01       		.byte	0x1
 2322 065f 1A       		.byte	0x1a
 2323 0660 30020000 		.4byte	0x230
 2324 0664 05       		.uleb128 0x5
 2325 0665 03       		.byte	0x3
 2326 0666 00000000 		.4byte	previousOrientation
 2327 066a 1F       		.uleb128 0x1f
 2328 066b DA050000 		.4byte	.LASF109
 2329 066f 01       		.byte	0x1
 2330 0670 1B       		.byte	0x1b
 2331 0671 25020000 		.4byte	0x225
 2332 0675 05       		.uleb128 0x5
 2333 0676 03       		.byte	0x3
 2334 0677 00000000 		.4byte	currentInstruction
 2335 067b 1F       		.uleb128 0x1f
 2336 067c 22010000 		.4byte	.LASF81
 2337 0680 01       		.byte	0x1
 2338 0681 1C       		.byte	0x1c
 2339 0682 68000000 		.4byte	0x68
 2340 0686 05       		.uleb128 0x5
 2341 0687 03       		.byte	0x3
 2342 0688 00000000 		.4byte	numSteps
 2343 068c 1F       		.uleb128 0x1f
 2344 068d 86020000 		.4byte	.LASF82
 2345 0691 01       		.byte	0x1
 2346 0692 1E       		.byte	0x1e
 2347 0693 59040000 		.4byte	0x459
 2348 0697 05       		.uleb128 0x5
 2349 0698 03       		.byte	0x3
 2350 0699 00000000 		.4byte	instructionList
 2351 069d 1E       		.uleb128 0x1e
 2352 069e 733300   		.ascii	"s3\000"
 2353 06a1 01       		.byte	0x1
 2354 06a2 20       		.byte	0x20
 2355 06a3 96000000 		.4byte	0x96
 2356 06a7 05       		.uleb128 0x5
 2357 06a8 03       		.byte	0x3
 2358 06a9 00000000 		.4byte	s3
 2359 06ad 1E       		.uleb128 0x1e
 2360 06ae 733400   		.ascii	"s4\000"
 2361 06b1 01       		.byte	0x1
 2362 06b2 20       		.byte	0x20
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 51


 2363 06b3 96000000 		.4byte	0x96
 2364 06b7 05       		.uleb128 0x5
 2365 06b8 03       		.byte	0x3
 2366 06b9 00000000 		.4byte	s4
 2367 06bd 1E       		.uleb128 0x1e
 2368 06be 733500   		.ascii	"s5\000"
 2369 06c1 01       		.byte	0x1
 2370 06c2 20       		.byte	0x20
 2371 06c3 96000000 		.4byte	0x96
 2372 06c7 05       		.uleb128 0x5
 2373 06c8 03       		.byte	0x3
 2374 06c9 00000000 		.4byte	s5
 2375 06cd 1E       		.uleb128 0x1e
 2376 06ce 733600   		.ascii	"s6\000"
 2377 06d1 01       		.byte	0x1
 2378 06d2 20       		.byte	0x20
 2379 06d3 96000000 		.4byte	0x96
 2380 06d7 05       		.uleb128 0x5
 2381 06d8 03       		.byte	0x3
 2382 06d9 00000000 		.4byte	s6
 2383 06dd 1F       		.uleb128 0x1f
 2384 06de 30040000 		.4byte	.LASF110
 2385 06e2 01       		.byte	0x1
 2386 06e3 25       		.byte	0x25
 2387 06e4 AE000000 		.4byte	0xae
 2388 06e8 05       		.uleb128 0x5
 2389 06e9 03       		.byte	0x3
 2390 06ea 00000000 		.4byte	totalMilliseconds
 2391 06ee 1F       		.uleb128 0x1f
 2392 06ef 0C010000 		.4byte	.LASF111
 2393 06f3 01       		.byte	0x1
 2394 06f4 26       		.byte	0x26
 2395 06f5 D2000000 		.4byte	0xd2
 2396 06f9 05       		.uleb128 0x5
 2397 06fa 03       		.byte	0x3
 2398 06fb 00000000 		.4byte	totalDistance
 2399 06ff 20       		.uleb128 0x20
 2400 0700 84000000 		.4byte	0x84
 2401 0704 0F070000 		.4byte	0x70f
 2402 0708 21       		.uleb128 0x21
 2403 0709 7D000000 		.4byte	0x7d
 2404 070d 44       		.byte	0x44
 2405 070e 00       		.byte	0
 2406 070f 1F       		.uleb128 0x1f
 2407 0710 41000000 		.4byte	.LASF112
 2408 0714 01       		.byte	0x1
 2409 0715 28       		.byte	0x28
 2410 0716 FF060000 		.4byte	0x6ff
 2411 071a 05       		.uleb128 0x5
 2412 071b 03       		.byte	0x3
 2413 071c 00000000 		.4byte	buffer
 2414 0720 1F       		.uleb128 0x1f
 2415 0721 65010000 		.4byte	.LASF113
 2416 0725 01       		.byte	0x1
 2417 0726 29       		.byte	0x29
 2418 0727 68000000 		.4byte	0x68
 2419 072b 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 52


 2420 072c 03       		.byte	0x3
 2421 072d 00000000 		.4byte	quadDec2Count
 2422 0731 1F       		.uleb128 0x1f
 2423 0732 3B060000 		.4byte	.LASF114
 2424 0736 01       		.byte	0x1
 2425 0737 2A       		.byte	0x2a
 2426 0738 68000000 		.4byte	0x68
 2427 073c 05       		.uleb128 0x5
 2428 073d 03       		.byte	0x3
 2429 073e 00000000 		.4byte	timerInt
 2430 0742 1F       		.uleb128 0x1f
 2431 0743 DC010000 		.4byte	.LASF115
 2432 0747 01       		.byte	0x1
 2433 0748 2B       		.byte	0x2b
 2434 0749 68000000 		.4byte	0x68
 2435 074d 05       		.uleb128 0x5
 2436 074e 03       		.byte	0x3
 2437 074f 00000000 		.4byte	keepLedOn
 2438 0753 1F       		.uleb128 0x1f
 2439 0754 DA040000 		.4byte	.LASF116
 2440 0758 01       		.byte	0x1
 2441 0759 2C       		.byte	0x2c
 2442 075a AE000000 		.4byte	0xae
 2443 075e 05       		.uleb128 0x5
 2444 075f 03       		.byte	0x3
 2445 0760 00000000 		.4byte	stopBuffer
 2446 0764 1F       		.uleb128 0x1f
 2447 0765 A2020000 		.4byte	.LASF117
 2448 0769 01       		.byte	0x1
 2449 076a B0       		.byte	0xb0
 2450 076b D2000000 		.4byte	0xd2
 2451 076f 05       		.uleb128 0x5
 2452 0770 03       		.byte	0x3
 2453 0771 00000000 		.4byte	xBlocksize
 2454 0775 1F       		.uleb128 0x1f
 2455 0776 DB030000 		.4byte	.LASF118
 2456 077a 01       		.byte	0x1
 2457 077b B1       		.byte	0xb1
 2458 077c D2000000 		.4byte	0xd2
 2459 0780 05       		.uleb128 0x5
 2460 0781 03       		.byte	0x3
 2461 0782 00000000 		.4byte	yBlocksize
 2462 0786 1F       		.uleb128 0x1f
 2463 0787 92050000 		.4byte	.LASF119
 2464 078b 01       		.byte	0x1
 2465 078c B2       		.byte	0xb2
 2466 078d 96000000 		.4byte	0x96
 2467 0791 05       		.uleb128 0x5
 2468 0792 03       		.byte	0x3
 2469 0793 00000000 		.4byte	currentRow
 2470 0797 1F       		.uleb128 0x1f
 2471 0798 28060000 		.4byte	.LASF120
 2472 079c 01       		.byte	0x1
 2473 079d B3       		.byte	0xb3
 2474 079e 96000000 		.4byte	0x96
 2475 07a2 05       		.uleb128 0x5
 2476 07a3 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 53


 2477 07a4 00000000 		.4byte	currentCol
 2478 07a8 24       		.uleb128 0x24
 2479 07a9 1A050000 		.4byte	.LASF121
 2480 07ad 01       		.byte	0x1
 2481 07ae 0001     		.2byte	0x100
 2482 07b0 96000000 		.4byte	0x96
 2483 07b4 05       		.uleb128 0x5
 2484 07b5 03       		.byte	0x3
 2485 07b6 00000000 		.4byte	stoppedAfterTurn
 2486 07ba 24       		.uleb128 0x24
 2487 07bb 23020000 		.4byte	.LASF122
 2488 07bf 01       		.byte	0x1
 2489 07c0 0101     		.2byte	0x101
 2490 07c2 96000000 		.4byte	0x96
 2491 07c6 05       		.uleb128 0x5
 2492 07c7 03       		.byte	0x3
 2493 07c8 00000000 		.4byte	ignoreSensor
 2494 07cc 00       		.byte	0
 2495              		.section	.debug_abbrev,"",%progbits
 2496              	.Ldebug_abbrev0:
 2497 0000 01       		.uleb128 0x1
 2498 0001 11       		.uleb128 0x11
 2499 0002 01       		.byte	0x1
 2500 0003 25       		.uleb128 0x25
 2501 0004 0E       		.uleb128 0xe
 2502 0005 13       		.uleb128 0x13
 2503 0006 0B       		.uleb128 0xb
 2504 0007 03       		.uleb128 0x3
 2505 0008 0E       		.uleb128 0xe
 2506 0009 1B       		.uleb128 0x1b
 2507 000a 0E       		.uleb128 0xe
 2508 000b 55       		.uleb128 0x55
 2509 000c 17       		.uleb128 0x17
 2510 000d 11       		.uleb128 0x11
 2511 000e 01       		.uleb128 0x1
 2512 000f 10       		.uleb128 0x10
 2513 0010 17       		.uleb128 0x17
 2514 0011 00       		.byte	0
 2515 0012 00       		.byte	0
 2516 0013 02       		.uleb128 0x2
 2517 0014 24       		.uleb128 0x24
 2518 0015 00       		.byte	0
 2519 0016 0B       		.uleb128 0xb
 2520 0017 0B       		.uleb128 0xb
 2521 0018 3E       		.uleb128 0x3e
 2522 0019 0B       		.uleb128 0xb
 2523 001a 03       		.uleb128 0x3
 2524 001b 0E       		.uleb128 0xe
 2525 001c 00       		.byte	0
 2526 001d 00       		.byte	0
 2527 001e 03       		.uleb128 0x3
 2528 001f 16       		.uleb128 0x16
 2529 0020 00       		.byte	0
 2530 0021 03       		.uleb128 0x3
 2531 0022 0E       		.uleb128 0xe
 2532 0023 3A       		.uleb128 0x3a
 2533 0024 0B       		.uleb128 0xb
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 54


 2534 0025 3B       		.uleb128 0x3b
 2535 0026 0B       		.uleb128 0xb
 2536 0027 49       		.uleb128 0x49
 2537 0028 13       		.uleb128 0x13
 2538 0029 00       		.byte	0
 2539 002a 00       		.byte	0
 2540 002b 04       		.uleb128 0x4
 2541 002c 24       		.uleb128 0x24
 2542 002d 00       		.byte	0
 2543 002e 0B       		.uleb128 0xb
 2544 002f 0B       		.uleb128 0xb
 2545 0030 3E       		.uleb128 0x3e
 2546 0031 0B       		.uleb128 0xb
 2547 0032 03       		.uleb128 0x3
 2548 0033 08       		.uleb128 0x8
 2549 0034 00       		.byte	0
 2550 0035 00       		.byte	0
 2551 0036 05       		.uleb128 0x5
 2552 0037 16       		.uleb128 0x16
 2553 0038 00       		.byte	0
 2554 0039 03       		.uleb128 0x3
 2555 003a 0E       		.uleb128 0xe
 2556 003b 3A       		.uleb128 0x3a
 2557 003c 0B       		.uleb128 0xb
 2558 003d 3B       		.uleb128 0x3b
 2559 003e 05       		.uleb128 0x5
 2560 003f 49       		.uleb128 0x49
 2561 0040 13       		.uleb128 0x13
 2562 0041 00       		.byte	0
 2563 0042 00       		.byte	0
 2564 0043 06       		.uleb128 0x6
 2565 0044 13       		.uleb128 0x13
 2566 0045 01       		.byte	0x1
 2567 0046 03       		.uleb128 0x3
 2568 0047 0E       		.uleb128 0xe
 2569 0048 0B       		.uleb128 0xb
 2570 0049 0B       		.uleb128 0xb
 2571 004a 3A       		.uleb128 0x3a
 2572 004b 0B       		.uleb128 0xb
 2573 004c 3B       		.uleb128 0x3b
 2574 004d 0B       		.uleb128 0xb
 2575 004e 01       		.uleb128 0x1
 2576 004f 13       		.uleb128 0x13
 2577 0050 00       		.byte	0
 2578 0051 00       		.byte	0
 2579 0052 07       		.uleb128 0x7
 2580 0053 0D       		.uleb128 0xd
 2581 0054 00       		.byte	0
 2582 0055 03       		.uleb128 0x3
 2583 0056 0E       		.uleb128 0xe
 2584 0057 3A       		.uleb128 0x3a
 2585 0058 0B       		.uleb128 0xb
 2586 0059 3B       		.uleb128 0x3b
 2587 005a 0B       		.uleb128 0xb
 2588 005b 49       		.uleb128 0x49
 2589 005c 13       		.uleb128 0x13
 2590 005d 38       		.uleb128 0x38
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 55


 2591 005e 0B       		.uleb128 0xb
 2592 005f 00       		.byte	0
 2593 0060 00       		.byte	0
 2594 0061 08       		.uleb128 0x8
 2595 0062 04       		.uleb128 0x4
 2596 0063 01       		.byte	0x1
 2597 0064 03       		.uleb128 0x3
 2598 0065 0E       		.uleb128 0xe
 2599 0066 0B       		.uleb128 0xb
 2600 0067 0B       		.uleb128 0xb
 2601 0068 49       		.uleb128 0x49
 2602 0069 13       		.uleb128 0x13
 2603 006a 3A       		.uleb128 0x3a
 2604 006b 0B       		.uleb128 0xb
 2605 006c 3B       		.uleb128 0x3b
 2606 006d 0B       		.uleb128 0xb
 2607 006e 01       		.uleb128 0x1
 2608 006f 13       		.uleb128 0x13
 2609 0070 00       		.byte	0
 2610 0071 00       		.byte	0
 2611 0072 09       		.uleb128 0x9
 2612 0073 28       		.uleb128 0x28
 2613 0074 00       		.byte	0
 2614 0075 03       		.uleb128 0x3
 2615 0076 0E       		.uleb128 0xe
 2616 0077 1C       		.uleb128 0x1c
 2617 0078 0B       		.uleb128 0xb
 2618 0079 00       		.byte	0
 2619 007a 00       		.byte	0
 2620 007b 0A       		.uleb128 0xa
 2621 007c 28       		.uleb128 0x28
 2622 007d 00       		.byte	0
 2623 007e 03       		.uleb128 0x3
 2624 007f 08       		.uleb128 0x8
 2625 0080 1C       		.uleb128 0x1c
 2626 0081 0B       		.uleb128 0xb
 2627 0082 00       		.byte	0
 2628 0083 00       		.byte	0
 2629 0084 0B       		.uleb128 0xb
 2630 0085 2E       		.uleb128 0x2e
 2631 0086 01       		.byte	0x1
 2632 0087 3F       		.uleb128 0x3f
 2633 0088 19       		.uleb128 0x19
 2634 0089 03       		.uleb128 0x3
 2635 008a 0E       		.uleb128 0xe
 2636 008b 3A       		.uleb128 0x3a
 2637 008c 0B       		.uleb128 0xb
 2638 008d 3B       		.uleb128 0x3b
 2639 008e 0B       		.uleb128 0xb
 2640 008f 27       		.uleb128 0x27
 2641 0090 19       		.uleb128 0x19
 2642 0091 11       		.uleb128 0x11
 2643 0092 01       		.uleb128 0x1
 2644 0093 12       		.uleb128 0x12
 2645 0094 06       		.uleb128 0x6
 2646 0095 40       		.uleb128 0x40
 2647 0096 18       		.uleb128 0x18
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 56


 2648 0097 9642     		.uleb128 0x2116
 2649 0099 19       		.uleb128 0x19
 2650 009a 01       		.uleb128 0x1
 2651 009b 13       		.uleb128 0x13
 2652 009c 00       		.byte	0
 2653 009d 00       		.byte	0
 2654 009e 0C       		.uleb128 0xc
 2655 009f 0B       		.uleb128 0xb
 2656 00a0 01       		.byte	0x1
 2657 00a1 11       		.uleb128 0x11
 2658 00a2 01       		.uleb128 0x1
 2659 00a3 12       		.uleb128 0x12
 2660 00a4 06       		.uleb128 0x6
 2661 00a5 00       		.byte	0
 2662 00a6 00       		.byte	0
 2663 00a7 0D       		.uleb128 0xd
 2664 00a8 34       		.uleb128 0x34
 2665 00a9 00       		.byte	0
 2666 00aa 03       		.uleb128 0x3
 2667 00ab 0E       		.uleb128 0xe
 2668 00ac 3A       		.uleb128 0x3a
 2669 00ad 0B       		.uleb128 0xb
 2670 00ae 3B       		.uleb128 0x3b
 2671 00af 0B       		.uleb128 0xb
 2672 00b0 49       		.uleb128 0x49
 2673 00b1 13       		.uleb128 0x13
 2674 00b2 02       		.uleb128 0x2
 2675 00b3 18       		.uleb128 0x18
 2676 00b4 00       		.byte	0
 2677 00b5 00       		.byte	0
 2678 00b6 0E       		.uleb128 0xe
 2679 00b7 2E       		.uleb128 0x2e
 2680 00b8 00       		.byte	0
 2681 00b9 3F       		.uleb128 0x3f
 2682 00ba 19       		.uleb128 0x19
 2683 00bb 03       		.uleb128 0x3
 2684 00bc 0E       		.uleb128 0xe
 2685 00bd 3A       		.uleb128 0x3a
 2686 00be 0B       		.uleb128 0xb
 2687 00bf 3B       		.uleb128 0x3b
 2688 00c0 0B       		.uleb128 0xb
 2689 00c1 27       		.uleb128 0x27
 2690 00c2 19       		.uleb128 0x19
 2691 00c3 11       		.uleb128 0x11
 2692 00c4 01       		.uleb128 0x1
 2693 00c5 12       		.uleb128 0x12
 2694 00c6 06       		.uleb128 0x6
 2695 00c7 40       		.uleb128 0x40
 2696 00c8 18       		.uleb128 0x18
 2697 00c9 9742     		.uleb128 0x2117
 2698 00cb 19       		.uleb128 0x19
 2699 00cc 00       		.byte	0
 2700 00cd 00       		.byte	0
 2701 00ce 0F       		.uleb128 0xf
 2702 00cf 2E       		.uleb128 0x2e
 2703 00d0 00       		.byte	0
 2704 00d1 3F       		.uleb128 0x3f
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 57


 2705 00d2 19       		.uleb128 0x19
 2706 00d3 03       		.uleb128 0x3
 2707 00d4 0E       		.uleb128 0xe
 2708 00d5 3A       		.uleb128 0x3a
 2709 00d6 0B       		.uleb128 0xb
 2710 00d7 3B       		.uleb128 0x3b
 2711 00d8 0B       		.uleb128 0xb
 2712 00d9 27       		.uleb128 0x27
 2713 00da 19       		.uleb128 0x19
 2714 00db 11       		.uleb128 0x11
 2715 00dc 01       		.uleb128 0x1
 2716 00dd 12       		.uleb128 0x12
 2717 00de 06       		.uleb128 0x6
 2718 00df 40       		.uleb128 0x40
 2719 00e0 18       		.uleb128 0x18
 2720 00e1 9642     		.uleb128 0x2116
 2721 00e3 19       		.uleb128 0x19
 2722 00e4 00       		.byte	0
 2723 00e5 00       		.byte	0
 2724 00e6 10       		.uleb128 0x10
 2725 00e7 2E       		.uleb128 0x2e
 2726 00e8 01       		.byte	0x1
 2727 00e9 3F       		.uleb128 0x3f
 2728 00ea 19       		.uleb128 0x19
 2729 00eb 03       		.uleb128 0x3
 2730 00ec 0E       		.uleb128 0xe
 2731 00ed 3A       		.uleb128 0x3a
 2732 00ee 0B       		.uleb128 0xb
 2733 00ef 3B       		.uleb128 0x3b
 2734 00f0 0B       		.uleb128 0xb
 2735 00f1 49       		.uleb128 0x49
 2736 00f2 13       		.uleb128 0x13
 2737 00f3 11       		.uleb128 0x11
 2738 00f4 01       		.uleb128 0x1
 2739 00f5 12       		.uleb128 0x12
 2740 00f6 06       		.uleb128 0x6
 2741 00f7 40       		.uleb128 0x40
 2742 00f8 18       		.uleb128 0x18
 2743 00f9 9642     		.uleb128 0x2116
 2744 00fb 19       		.uleb128 0x19
 2745 00fc 01       		.uleb128 0x1
 2746 00fd 13       		.uleb128 0x13
 2747 00fe 00       		.byte	0
 2748 00ff 00       		.byte	0
 2749 0100 11       		.uleb128 0x11
 2750 0101 34       		.uleb128 0x34
 2751 0102 00       		.byte	0
 2752 0103 03       		.uleb128 0x3
 2753 0104 08       		.uleb128 0x8
 2754 0105 3A       		.uleb128 0x3a
 2755 0106 0B       		.uleb128 0xb
 2756 0107 3B       		.uleb128 0x3b
 2757 0108 0B       		.uleb128 0xb
 2758 0109 49       		.uleb128 0x49
 2759 010a 13       		.uleb128 0x13
 2760 010b 02       		.uleb128 0x2
 2761 010c 18       		.uleb128 0x18
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 58


 2762 010d 00       		.byte	0
 2763 010e 00       		.byte	0
 2764 010f 12       		.uleb128 0x12
 2765 0110 2E       		.uleb128 0x2e
 2766 0111 01       		.byte	0x1
 2767 0112 3F       		.uleb128 0x3f
 2768 0113 19       		.uleb128 0x19
 2769 0114 03       		.uleb128 0x3
 2770 0115 0E       		.uleb128 0xe
 2771 0116 3A       		.uleb128 0x3a
 2772 0117 0B       		.uleb128 0xb
 2773 0118 3B       		.uleb128 0x3b
 2774 0119 0B       		.uleb128 0xb
 2775 011a 27       		.uleb128 0x27
 2776 011b 19       		.uleb128 0x19
 2777 011c 49       		.uleb128 0x49
 2778 011d 13       		.uleb128 0x13
 2779 011e 11       		.uleb128 0x11
 2780 011f 01       		.uleb128 0x1
 2781 0120 12       		.uleb128 0x12
 2782 0121 06       		.uleb128 0x6
 2783 0122 40       		.uleb128 0x40
 2784 0123 18       		.uleb128 0x18
 2785 0124 9642     		.uleb128 0x2116
 2786 0126 19       		.uleb128 0x19
 2787 0127 01       		.uleb128 0x1
 2788 0128 13       		.uleb128 0x13
 2789 0129 00       		.byte	0
 2790 012a 00       		.byte	0
 2791 012b 13       		.uleb128 0x13
 2792 012c 05       		.uleb128 0x5
 2793 012d 00       		.byte	0
 2794 012e 03       		.uleb128 0x3
 2795 012f 0E       		.uleb128 0xe
 2796 0130 3A       		.uleb128 0x3a
 2797 0131 0B       		.uleb128 0xb
 2798 0132 3B       		.uleb128 0x3b
 2799 0133 0B       		.uleb128 0xb
 2800 0134 49       		.uleb128 0x49
 2801 0135 13       		.uleb128 0x13
 2802 0136 02       		.uleb128 0x2
 2803 0137 18       		.uleb128 0x18
 2804 0138 00       		.byte	0
 2805 0139 00       		.byte	0
 2806 013a 14       		.uleb128 0x14
 2807 013b 2E       		.uleb128 0x2e
 2808 013c 00       		.byte	0
 2809 013d 3F       		.uleb128 0x3f
 2810 013e 19       		.uleb128 0x19
 2811 013f 03       		.uleb128 0x3
 2812 0140 0E       		.uleb128 0xe
 2813 0141 3A       		.uleb128 0x3a
 2814 0142 0B       		.uleb128 0xb
 2815 0143 3B       		.uleb128 0x3b
 2816 0144 0B       		.uleb128 0xb
 2817 0145 11       		.uleb128 0x11
 2818 0146 01       		.uleb128 0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 59


 2819 0147 12       		.uleb128 0x12
 2820 0148 06       		.uleb128 0x6
 2821 0149 40       		.uleb128 0x40
 2822 014a 18       		.uleb128 0x18
 2823 014b 9742     		.uleb128 0x2117
 2824 014d 19       		.uleb128 0x19
 2825 014e 00       		.byte	0
 2826 014f 00       		.byte	0
 2827 0150 15       		.uleb128 0x15
 2828 0151 2E       		.uleb128 0x2e
 2829 0152 01       		.byte	0x1
 2830 0153 3F       		.uleb128 0x3f
 2831 0154 19       		.uleb128 0x19
 2832 0155 03       		.uleb128 0x3
 2833 0156 0E       		.uleb128 0xe
 2834 0157 3A       		.uleb128 0x3a
 2835 0158 0B       		.uleb128 0xb
 2836 0159 3B       		.uleb128 0x3b
 2837 015a 05       		.uleb128 0x5
 2838 015b 49       		.uleb128 0x49
 2839 015c 13       		.uleb128 0x13
 2840 015d 11       		.uleb128 0x11
 2841 015e 01       		.uleb128 0x1
 2842 015f 12       		.uleb128 0x12
 2843 0160 06       		.uleb128 0x6
 2844 0161 40       		.uleb128 0x40
 2845 0162 18       		.uleb128 0x18
 2846 0163 9642     		.uleb128 0x2116
 2847 0165 19       		.uleb128 0x19
 2848 0166 01       		.uleb128 0x1
 2849 0167 13       		.uleb128 0x13
 2850 0168 00       		.byte	0
 2851 0169 00       		.byte	0
 2852 016a 16       		.uleb128 0x16
 2853 016b 34       		.uleb128 0x34
 2854 016c 00       		.byte	0
 2855 016d 03       		.uleb128 0x3
 2856 016e 0E       		.uleb128 0xe
 2857 016f 3A       		.uleb128 0x3a
 2858 0170 0B       		.uleb128 0xb
 2859 0171 3B       		.uleb128 0x3b
 2860 0172 05       		.uleb128 0x5
 2861 0173 49       		.uleb128 0x49
 2862 0174 13       		.uleb128 0x13
 2863 0175 02       		.uleb128 0x2
 2864 0176 18       		.uleb128 0x18
 2865 0177 00       		.byte	0
 2866 0178 00       		.byte	0
 2867 0179 17       		.uleb128 0x17
 2868 017a 2E       		.uleb128 0x2e
 2869 017b 01       		.byte	0x1
 2870 017c 3F       		.uleb128 0x3f
 2871 017d 19       		.uleb128 0x19
 2872 017e 03       		.uleb128 0x3
 2873 017f 0E       		.uleb128 0xe
 2874 0180 3A       		.uleb128 0x3a
 2875 0181 0B       		.uleb128 0xb
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 60


 2876 0182 3B       		.uleb128 0x3b
 2877 0183 05       		.uleb128 0x5
 2878 0184 27       		.uleb128 0x27
 2879 0185 19       		.uleb128 0x19
 2880 0186 49       		.uleb128 0x49
 2881 0187 13       		.uleb128 0x13
 2882 0188 11       		.uleb128 0x11
 2883 0189 01       		.uleb128 0x1
 2884 018a 12       		.uleb128 0x12
 2885 018b 06       		.uleb128 0x6
 2886 018c 40       		.uleb128 0x40
 2887 018d 18       		.uleb128 0x18
 2888 018e 9742     		.uleb128 0x2117
 2889 0190 19       		.uleb128 0x19
 2890 0191 01       		.uleb128 0x1
 2891 0192 13       		.uleb128 0x13
 2892 0193 00       		.byte	0
 2893 0194 00       		.byte	0
 2894 0195 18       		.uleb128 0x18
 2895 0196 05       		.uleb128 0x5
 2896 0197 00       		.byte	0
 2897 0198 03       		.uleb128 0x3
 2898 0199 0E       		.uleb128 0xe
 2899 019a 3A       		.uleb128 0x3a
 2900 019b 0B       		.uleb128 0xb
 2901 019c 3B       		.uleb128 0x3b
 2902 019d 05       		.uleb128 0x5
 2903 019e 49       		.uleb128 0x49
 2904 019f 13       		.uleb128 0x13
 2905 01a0 02       		.uleb128 0x2
 2906 01a1 18       		.uleb128 0x18
 2907 01a2 00       		.byte	0
 2908 01a3 00       		.byte	0
 2909 01a4 19       		.uleb128 0x19
 2910 01a5 34       		.uleb128 0x34
 2911 01a6 00       		.byte	0
 2912 01a7 03       		.uleb128 0x3
 2913 01a8 08       		.uleb128 0x8
 2914 01a9 3A       		.uleb128 0x3a
 2915 01aa 0B       		.uleb128 0xb
 2916 01ab 3B       		.uleb128 0x3b
 2917 01ac 05       		.uleb128 0x5
 2918 01ad 49       		.uleb128 0x49
 2919 01ae 13       		.uleb128 0x13
 2920 01af 02       		.uleb128 0x2
 2921 01b0 18       		.uleb128 0x18
 2922 01b1 00       		.byte	0
 2923 01b2 00       		.byte	0
 2924 01b3 1A       		.uleb128 0x1a
 2925 01b4 0F       		.uleb128 0xf
 2926 01b5 00       		.byte	0
 2927 01b6 0B       		.uleb128 0xb
 2928 01b7 0B       		.uleb128 0xb
 2929 01b8 49       		.uleb128 0x49
 2930 01b9 13       		.uleb128 0x13
 2931 01ba 00       		.byte	0
 2932 01bb 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 61


 2933 01bc 1B       		.uleb128 0x1b
 2934 01bd 2E       		.uleb128 0x2e
 2935 01be 00       		.byte	0
 2936 01bf 3F       		.uleb128 0x3f
 2937 01c0 19       		.uleb128 0x19
 2938 01c1 03       		.uleb128 0x3
 2939 01c2 0E       		.uleb128 0xe
 2940 01c3 3A       		.uleb128 0x3a
 2941 01c4 0B       		.uleb128 0xb
 2942 01c5 3B       		.uleb128 0x3b
 2943 01c6 05       		.uleb128 0x5
 2944 01c7 11       		.uleb128 0x11
 2945 01c8 01       		.uleb128 0x1
 2946 01c9 12       		.uleb128 0x12
 2947 01ca 06       		.uleb128 0x6
 2948 01cb 40       		.uleb128 0x40
 2949 01cc 18       		.uleb128 0x18
 2950 01cd 9642     		.uleb128 0x2116
 2951 01cf 19       		.uleb128 0x19
 2952 01d0 00       		.byte	0
 2953 01d1 00       		.byte	0
 2954 01d2 1C       		.uleb128 0x1c
 2955 01d3 34       		.uleb128 0x34
 2956 01d4 00       		.byte	0
 2957 01d5 03       		.uleb128 0x3
 2958 01d6 0E       		.uleb128 0xe
 2959 01d7 3A       		.uleb128 0x3a
 2960 01d8 0B       		.uleb128 0xb
 2961 01d9 3B       		.uleb128 0x3b
 2962 01da 05       		.uleb128 0x5
 2963 01db 49       		.uleb128 0x49
 2964 01dc 13       		.uleb128 0x13
 2965 01dd 3F       		.uleb128 0x3f
 2966 01de 19       		.uleb128 0x19
 2967 01df 3C       		.uleb128 0x3c
 2968 01e0 19       		.uleb128 0x19
 2969 01e1 00       		.byte	0
 2970 01e2 00       		.byte	0
 2971 01e3 1D       		.uleb128 0x1d
 2972 01e4 35       		.uleb128 0x35
 2973 01e5 00       		.byte	0
 2974 01e6 49       		.uleb128 0x49
 2975 01e7 13       		.uleb128 0x13
 2976 01e8 00       		.byte	0
 2977 01e9 00       		.byte	0
 2978 01ea 1E       		.uleb128 0x1e
 2979 01eb 34       		.uleb128 0x34
 2980 01ec 00       		.byte	0
 2981 01ed 03       		.uleb128 0x3
 2982 01ee 08       		.uleb128 0x8
 2983 01ef 3A       		.uleb128 0x3a
 2984 01f0 0B       		.uleb128 0xb
 2985 01f1 3B       		.uleb128 0x3b
 2986 01f2 0B       		.uleb128 0xb
 2987 01f3 49       		.uleb128 0x49
 2988 01f4 13       		.uleb128 0x13
 2989 01f5 3F       		.uleb128 0x3f
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 62


 2990 01f6 19       		.uleb128 0x19
 2991 01f7 02       		.uleb128 0x2
 2992 01f8 18       		.uleb128 0x18
 2993 01f9 00       		.byte	0
 2994 01fa 00       		.byte	0
 2995 01fb 1F       		.uleb128 0x1f
 2996 01fc 34       		.uleb128 0x34
 2997 01fd 00       		.byte	0
 2998 01fe 03       		.uleb128 0x3
 2999 01ff 0E       		.uleb128 0xe
 3000 0200 3A       		.uleb128 0x3a
 3001 0201 0B       		.uleb128 0xb
 3002 0202 3B       		.uleb128 0x3b
 3003 0203 0B       		.uleb128 0xb
 3004 0204 49       		.uleb128 0x49
 3005 0205 13       		.uleb128 0x13
 3006 0206 3F       		.uleb128 0x3f
 3007 0207 19       		.uleb128 0x19
 3008 0208 02       		.uleb128 0x2
 3009 0209 18       		.uleb128 0x18
 3010 020a 00       		.byte	0
 3011 020b 00       		.byte	0
 3012 020c 20       		.uleb128 0x20
 3013 020d 01       		.uleb128 0x1
 3014 020e 01       		.byte	0x1
 3015 020f 49       		.uleb128 0x49
 3016 0210 13       		.uleb128 0x13
 3017 0211 01       		.uleb128 0x1
 3018 0212 13       		.uleb128 0x13
 3019 0213 00       		.byte	0
 3020 0214 00       		.byte	0
 3021 0215 21       		.uleb128 0x21
 3022 0216 21       		.uleb128 0x21
 3023 0217 00       		.byte	0
 3024 0218 49       		.uleb128 0x49
 3025 0219 13       		.uleb128 0x13
 3026 021a 2F       		.uleb128 0x2f
 3027 021b 0B       		.uleb128 0xb
 3028 021c 00       		.byte	0
 3029 021d 00       		.byte	0
 3030 021e 22       		.uleb128 0x22
 3031 021f 34       		.uleb128 0x34
 3032 0220 00       		.byte	0
 3033 0221 03       		.uleb128 0x3
 3034 0222 08       		.uleb128 0x8
 3035 0223 3A       		.uleb128 0x3a
 3036 0224 0B       		.uleb128 0xb
 3037 0225 3B       		.uleb128 0x3b
 3038 0226 0B       		.uleb128 0xb
 3039 0227 49       		.uleb128 0x49
 3040 0228 13       		.uleb128 0x13
 3041 0229 3F       		.uleb128 0x3f
 3042 022a 19       		.uleb128 0x19
 3043 022b 3C       		.uleb128 0x3c
 3044 022c 19       		.uleb128 0x19
 3045 022d 00       		.byte	0
 3046 022e 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 63


 3047 022f 23       		.uleb128 0x23
 3048 0230 34       		.uleb128 0x34
 3049 0231 00       		.byte	0
 3050 0232 03       		.uleb128 0x3
 3051 0233 0E       		.uleb128 0xe
 3052 0234 3A       		.uleb128 0x3a
 3053 0235 0B       		.uleb128 0xb
 3054 0236 3B       		.uleb128 0x3b
 3055 0237 0B       		.uleb128 0xb
 3056 0238 49       		.uleb128 0x49
 3057 0239 13       		.uleb128 0x13
 3058 023a 3F       		.uleb128 0x3f
 3059 023b 19       		.uleb128 0x19
 3060 023c 3C       		.uleb128 0x3c
 3061 023d 19       		.uleb128 0x19
 3062 023e 00       		.byte	0
 3063 023f 00       		.byte	0
 3064 0240 24       		.uleb128 0x24
 3065 0241 34       		.uleb128 0x34
 3066 0242 00       		.byte	0
 3067 0243 03       		.uleb128 0x3
 3068 0244 0E       		.uleb128 0xe
 3069 0245 3A       		.uleb128 0x3a
 3070 0246 0B       		.uleb128 0xb
 3071 0247 3B       		.uleb128 0x3b
 3072 0248 05       		.uleb128 0x5
 3073 0249 49       		.uleb128 0x49
 3074 024a 13       		.uleb128 0x13
 3075 024b 3F       		.uleb128 0x3f
 3076 024c 19       		.uleb128 0x19
 3077 024d 02       		.uleb128 0x2
 3078 024e 18       		.uleb128 0x18
 3079 024f 00       		.byte	0
 3080 0250 00       		.byte	0
 3081 0251 00       		.byte	0
 3082              		.section	.debug_aranges,"",%progbits
 3083 0000 74000000 		.4byte	0x74
 3084 0004 0200     		.2byte	0x2
 3085 0006 00000000 		.4byte	.Ldebug_info0
 3086 000a 04       		.byte	0x4
 3087 000b 00       		.byte	0
 3088 000c 0000     		.2byte	0
 3089 000e 0000     		.2byte	0
 3090 0010 00000000 		.4byte	.LFB64
 3091 0014 F4000000 		.4byte	.LFE64-.LFB64
 3092 0018 00000000 		.4byte	.LFB65
 3093 001c 18000000 		.4byte	.LFE65-.LFB65
 3094 0020 00000000 		.4byte	.LFB66
 3095 0024 18000000 		.4byte	.LFE66-.LFB66
 3096 0028 00000000 		.4byte	.LFB67
 3097 002c 18000000 		.4byte	.LFE67-.LFB67
 3098 0030 00000000 		.4byte	.LFB68
 3099 0034 18000000 		.4byte	.LFE68-.LFB68
 3100 0038 00000000 		.4byte	.LFB69
 3101 003c 38000000 		.4byte	.LFE69-.LFB69
 3102 0040 00000000 		.4byte	.LFB70
 3103 0044 EC000000 		.4byte	.LFE70-.LFB70
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 64


 3104 0048 00000000 		.4byte	.LFB71
 3105 004c 54000000 		.4byte	.LFE71-.LFB71
 3106 0050 00000000 		.4byte	.LFB72
 3107 0054 34000000 		.4byte	.LFE72-.LFB72
 3108 0058 00000000 		.4byte	.LFB73
 3109 005c 90020000 		.4byte	.LFE73-.LFB73
 3110 0060 00000000 		.4byte	.LFB74
 3111 0064 9E000000 		.4byte	.LFE74-.LFB74
 3112 0068 00000000 		.4byte	.LFB75
 3113 006c B0000000 		.4byte	.LFE75-.LFB75
 3114 0070 00000000 		.4byte	0
 3115 0074 00000000 		.4byte	0
 3116              		.section	.debug_ranges,"",%progbits
 3117              	.Ldebug_ranges0:
 3118 0000 00000000 		.4byte	.LFB64
 3119 0004 F4000000 		.4byte	.LFE64
 3120 0008 00000000 		.4byte	.LFB65
 3121 000c 18000000 		.4byte	.LFE65
 3122 0010 00000000 		.4byte	.LFB66
 3123 0014 18000000 		.4byte	.LFE66
 3124 0018 00000000 		.4byte	.LFB67
 3125 001c 18000000 		.4byte	.LFE67
 3126 0020 00000000 		.4byte	.LFB68
 3127 0024 18000000 		.4byte	.LFE68
 3128 0028 00000000 		.4byte	.LFB69
 3129 002c 38000000 		.4byte	.LFE69
 3130 0030 00000000 		.4byte	.LFB70
 3131 0034 EC000000 		.4byte	.LFE70
 3132 0038 00000000 		.4byte	.LFB71
 3133 003c 54000000 		.4byte	.LFE71
 3134 0040 00000000 		.4byte	.LFB72
 3135 0044 34000000 		.4byte	.LFE72
 3136 0048 00000000 		.4byte	.LFB73
 3137 004c 90020000 		.4byte	.LFE73
 3138 0050 00000000 		.4byte	.LFB74
 3139 0054 9E000000 		.4byte	.LFE74
 3140 0058 00000000 		.4byte	.LFB75
 3141 005c B0000000 		.4byte	.LFE75
 3142 0060 00000000 		.4byte	0
 3143 0064 00000000 		.4byte	0
 3144              		.section	.debug_line,"",%progbits
 3145              	.Ldebug_line0:
 3146 0000 4E030000 		.section	.debug_str,"MS",%progbits,1
 3146      02007001 
 3146      00000201 
 3146      FB0E0D00 
 3146      01010101 
 3147              	.LASF47:
 3148 0000 64697265 		.ascii	"direction\000"
 3148      6374696F 
 3148      6E00
 3149              	.LASF64:
 3150 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3150      61726441 
 3150      66746572 
 3150      5475726E 
 3150      00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 65


 3151              	.LASF50:
 3152 001b 496E7374 		.ascii	"InstructionDirection\000"
 3152      72756374 
 3152      696F6E44 
 3152      69726563 
 3152      74696F6E 
 3153              	.LASF124:
 3154 0030 6D61696E 		.ascii	"main.c\000"
 3154      2E6300
 3155              	.LASF76:
 3156 0037 626C6F63 		.ascii	"blocksize\000"
 3156      6B73697A 
 3156      6500
 3157              	.LASF112:
 3158 0041 62756666 		.ascii	"buffer\000"
 3158      657200
 3159              	.LASF8:
 3160 0048 756E7369 		.ascii	"unsigned int\000"
 3160      676E6564 
 3160      20696E74 
 3160      00
 3161              	.LASF12:
 3162 0055 5F5F696E 		.ascii	"__int32_t\000"
 3162      7433325F 
 3162      7400
 3163              	.LASF18:
 3164 005f 696E7431 		.ascii	"int16\000"
 3164      3600
 3165              	.LASF103:
 3166 0065 73797374 		.ascii	"system_state\000"
 3166      656D5F73 
 3166      74617465 
 3166      00
 3167              	.LASF123:
 3168 0072 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3168      43313120 
 3168      352E342E 
 3168      31203230 
 3168      31363036 
 3169 00a5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3169      20726576 
 3169      6973696F 
 3169      6E203233 
 3169      37373135 
 3170 00d8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3170      66756E63 
 3170      74696F6E 
 3170      2D736563 
 3170      74696F6E 
 3171              	.LASF69:
 3172 0100 53365F44 		.ascii	"S6_DETECTED\000"
 3172      45544543 
 3172      54454400 
 3173              	.LASF111:
 3174 010c 746F7461 		.ascii	"totalDistance\000"
 3174      6C446973 
 3174      74616E63 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 66


 3174      6500
 3175              	.LASF34:
 3176 011a 67325F78 		.ascii	"g2_xpos\000"
 3176      706F7300 
 3177              	.LASF81:
 3178 0122 6E756D53 		.ascii	"numSteps\000"
 3178      74657073 
 3178      00
 3179              	.LASF98:
 3180 012b 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3180      5F72665F 
 3180      7472616E 
 3180      736D6973 
 3180      73696F6E 
 3181              	.LASF83:
 3182 0147 52657365 		.ascii	"ResetSensorFlags\000"
 3182      7453656E 
 3182      736F7246 
 3182      6C616773 
 3182      00
 3183              	.LASF37:
 3184 0158 67325F64 		.ascii	"g2_direction\000"
 3184      69726563 
 3184      74696F6E 
 3184      00
 3185              	.LASF113:
 3186 0165 71756164 		.ascii	"quadDec2Count\000"
 3186      44656332 
 3186      436F756E 
 3186      7400
 3187              	.LASF19:
 3188 0173 666C6F61 		.ascii	"float\000"
 3188      7400
 3189              	.LASF102:
 3190 0179 75736242 		.ascii	"usbBuffer\000"
 3190      75666665 
 3190      7200
 3191              	.LASF80:
 3192 0183 636F756E 		.ascii	"count\000"
 3192      7400
 3193              	.LASF22:
 3194 0189 696E6465 		.ascii	"index\000"
 3194      7800
 3195              	.LASF7:
 3196 018f 6C6F6E67 		.ascii	"long long unsigned int\000"
 3196      206C6F6E 
 3196      6720756E 
 3196      7369676E 
 3196      65642069 
 3197              	.LASF46:
 3198 01a6 496E7374 		.ascii	"Instruction\000"
 3198      72756374 
 3198      696F6E00 
 3199              	.LASF95:
 3200 01b2 666C6167 		.ascii	"flag_packet\000"
 3200      5F706163 
 3200      6B657400 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 67


 3201              	.LASF84:
 3202 01be 53657452 		.ascii	"SetRobotMovement\000"
 3202      6F626F74 
 3202      4D6F7665 
 3202      6D656E74 
 3202      00
 3203              	.LASF70:
 3204 01cf 54494D45 		.ascii	"TIMER_FINISH\000"
 3204      525F4649 
 3204      4E495348 
 3204      00
 3205              	.LASF115:
 3206 01dc 6B656570 		.ascii	"keepLedOn\000"
 3206      4C65644F 
 3206      6E00
 3207              	.LASF42:
 3208 01e6 466F7277 		.ascii	"ForwardUntilTarget\000"
 3208      61726455 
 3208      6E74696C 
 3208      54617267 
 3208      657400
 3209              	.LASF91:
 3210 01f9 666C6167 		.ascii	"flag_ts_update\000"
 3210      5F74735F 
 3210      75706461 
 3210      746500
 3211              	.LASF90:
 3212 0208 666C6167 		.ascii	"flag_ts_enc\000"
 3212      5F74735F 
 3212      656E6300 
 3213              	.LASF78:
 3214 0214 71756164 		.ascii	"quadCountToRPM\000"
 3214      436F756E 
 3214      74546F52 
 3214      504D00
 3215              	.LASF122:
 3216 0223 69676E6F 		.ascii	"ignoreSensor\000"
 3216      72655365 
 3216      6E736F72 
 3216      00
 3217              	.LASF74:
 3218 0230 74687265 		.ascii	"three\000"
 3218      6500
 3219              	.LASF43:
 3220 0236 53746F70 		.ascii	"StopAtTarget\000"
 3220      41745461 
 3220      72676574 
 3220      00
 3221              	.LASF63:
 3222 0243 77616974 		.ascii	"waitForTurn\000"
 3222      466F7254 
 3222      75726E00 
 3223              	.LASF24:
 3224 024f 726F626F 		.ascii	"robot_ypos\000"
 3224      745F7970 
 3224      6F7300
 3225              	.LASF89:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 68


 3226 025a 74735F64 		.ascii	"ts_display\000"
 3226      6973706C 
 3226      617900
 3227              	.LASF107:
 3228 0265 63757272 		.ascii	"currentOrientation\000"
 3228      656E744F 
 3228      7269656E 
 3228      74617469 
 3228      6F6E00
 3229              	.LASF11:
 3230 0278 63686172 		.ascii	"char\000"
 3230      00
 3231              	.LASF28:
 3232 027d 67305F73 		.ascii	"g0_speed\000"
 3232      70656564 
 3232      00
 3233              	.LASF82:
 3234 0286 696E7374 		.ascii	"instructionList\000"
 3234      72756374 
 3234      696F6E4C 
 3234      69737400 
 3235              	.LASF15:
 3236 0296 75696E74 		.ascii	"uint16\000"
 3236      313600
 3237              	.LASF17:
 3238 029d 696E7438 		.ascii	"int8\000"
 3238      00
 3239              	.LASF117:
 3240 02a2 78426C6F 		.ascii	"xBlocksize\000"
 3240      636B7369 
 3240      7A6500
 3241              	.LASF33:
 3242 02ad 67315F64 		.ascii	"g1_direction\000"
 3242      69726563 
 3242      74696F6E 
 3242      00
 3243              	.LASF53:
 3244 02ba 4C656674 		.ascii	"Left\000"
 3244      00
 3245              	.LASF71:
 3246 02bf 73706565 		.ascii	"speedTimer\000"
 3246      6454696D 
 3246      657200
 3247              	.LASF39:
 3248 02ca 77616974 		.ascii	"waitForLeftTurn\000"
 3248      466F724C 
 3248      65667454 
 3248      75726E00 
 3249              	.LASF6:
 3250 02da 6C6F6E67 		.ascii	"long long int\000"
 3250      206C6F6E 
 3250      6720696E 
 3250      7400
 3251              	.LASF30:
 3252 02e8 67315F78 		.ascii	"g1_xpos\000"
 3252      706F7300 
 3253              	.LASF108:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 69


 3254 02f0 70726576 		.ascii	"previousOrientation\000"
 3254      696F7573 
 3254      4F726965 
 3254      6E746174 
 3254      696F6E00 
 3255              	.LASF41:
 3256 0304 75547572 		.ascii	"uTurn\000"
 3256      6E00
 3257              	.LASF73:
 3258 030a 6E657744 		.ascii	"newDistance\000"
 3258      69737461 
 3258      6E636500 
 3259              	.LASF36:
 3260 0316 67325F73 		.ascii	"g2_speed\000"
 3260      70656564 
 3260      00
 3261              	.LASF27:
 3262 031f 67305F79 		.ascii	"g0_ypos\000"
 3262      706F7300 
 3263              	.LASF104:
 3264 0327 666F6F64 		.ascii	"food_list\000"
 3264      5F6C6973 
 3264      7400
 3265              	.LASF58:
 3266 0331 5475726E 		.ascii	"TurnLeft\000"
 3266      4C656674 
 3266      00
 3267              	.LASF88:
 3268 033a 74735F73 		.ascii	"ts_speed\000"
 3268      70656564 
 3268      00
 3269              	.LASF62:
 3270 0343 556E6B6E 		.ascii	"Unknown\000"
 3270      6F776E00 
 3271              	.LASF77:
 3272 034b 64697265 		.ascii	"directionState\000"
 3272      6374696F 
 3272      6E537461 
 3272      746500
 3273              	.LASF16:
 3274 035a 75696E74 		.ascii	"uint32\000"
 3274      333200
 3275              	.LASF40:
 3276 0361 77616974 		.ascii	"waitForRightTurn\000"
 3276      466F7252 
 3276      69676874 
 3276      5475726E 
 3276      00
 3277              	.LASF57:
 3278 0372 5475726E 		.ascii	"TurnRight\000"
 3278      52696768 
 3278      7400
 3279              	.LASF45:
 3280 037c 64617461 		.ascii	"data_main\000"
 3280      5F6D6169 
 3280      6E00
 3281              	.LASF21:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 70


 3282 0386 72737369 		.ascii	"rssi\000"
 3282      00
 3283              	.LASF29:
 3284 038b 67305F64 		.ascii	"g0_direction\000"
 3284      69726563 
 3284      74696F6E 
 3284      00
 3285              	.LASF106:
 3286 0398 70726576 		.ascii	"previousDirection\000"
 3286      696F7573 
 3286      44697265 
 3286      6374696F 
 3286      6E00
 3287              	.LASF9:
 3288 03aa 6C6F6E67 		.ascii	"long double\000"
 3288      20646F75 
 3288      626C6500 
 3289              	.LASF92:
 3290 03b6 666C6167 		.ascii	"flag_ts_speed\000"
 3290      5F74735F 
 3290      73706565 
 3290      6400
 3291              	.LASF97:
 3292 03c4 64617461 		.ascii	"dataready_flag\000"
 3292      72656164 
 3292      795F666C 
 3292      616700
 3293              	.LASF94:
 3294 03d3 666C6167 		.ascii	"flag_rx\000"
 3294      5F727800 
 3295              	.LASF118:
 3296 03db 79426C6F 		.ascii	"yBlocksize\000"
 3296      636B7369 
 3296      7A6500
 3297              	.LASF2:
 3298 03e6 73686F72 		.ascii	"short int\000"
 3298      7420696E 
 3298      7400
 3299              	.LASF67:
 3300 03f0 53345F44 		.ascii	"S4_DETECTED\000"
 3300      45544543 
 3300      54454400 
 3301              	.LASF66:
 3302 03fc 53335F44 		.ascii	"S3_DETECTED\000"
 3302      45544543 
 3302      54454400 
 3303              	.LASF4:
 3304 0408 6C6F6E67 		.ascii	"long int\000"
 3304      20696E74 
 3304      00
 3305              	.LASF85:
 3306 0411 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3306      52784275 
 3306      66666572 
 3306      00
 3307              	.LASF87:
 3308 041e 74735F75 		.ascii	"ts_update\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 71


 3308      70646174 
 3308      6500
 3309              	.LASF56:
 3310 0428 466F7277 		.ascii	"Forward\000"
 3310      61726400 
 3311              	.LASF110:
 3312 0430 746F7461 		.ascii	"totalMilliseconds\000"
 3312      6C4D696C 
 3312      6C697365 
 3312      636F6E64 
 3312      7300
 3313              	.LASF35:
 3314 0442 67325F79 		.ascii	"g2_ypos\000"
 3314      706F7300 
 3315              	.LASF51:
 3316 044a 4F726965 		.ascii	"OrientationState\000"
 3316      6E746174 
 3316      696F6E53 
 3316      74617465 
 3316      00
 3317              	.LASF52:
 3318 045b 446F776E 		.ascii	"Down\000"
 3318      00
 3319              	.LASF54:
 3320 0460 52696768 		.ascii	"Right\000"
 3320      7400
 3321              	.LASF31:
 3322 0466 67315F79 		.ascii	"g1_ypos\000"
 3322      706F7300 
 3323              	.LASF105:
 3324 046e 63757272 		.ascii	"currentDirection\000"
 3324      656E7444 
 3324      69726563 
 3324      74696F6E 
 3324      00
 3325              	.LASF125:
 3326 047f 483A5C33 		.ascii	"H:\\301-Robot\\psoc student pack\\psoc_code_base\\C"
 3326      30312D52 
 3326      6F626F74 
 3326      5C70736F 
 3326      63207374 
 3327 04ae 53333031 		.ascii	"S301_Class.cydsn\000"
 3327      5F436C61 
 3327      73732E63 
 3327      7964736E 
 3327      00
 3328              	.LASF10:
 3329 04bf 73697A65 		.ascii	"sizetype\000"
 3329      74797065 
 3329      00
 3330              	.LASF5:
 3331 04c8 6C6F6E67 		.ascii	"long unsigned int\000"
 3331      20756E73 
 3331      69676E65 
 3331      6420696E 
 3331      7400
 3332              	.LASF116:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 72


 3333 04da 73746F70 		.ascii	"stopBuffer\000"
 3333      42756666 
 3333      657200
 3334              	.LASF13:
 3335 04e5 696E7433 		.ascii	"int32_t\000"
 3335      325F7400 
 3336              	.LASF23:
 3337 04ed 726F626F 		.ascii	"robot_xpos\000"
 3337      745F7870 
 3337      6F7300
 3338              	.LASF101:
 3339 04f8 656E7472 		.ascii	"entry\000"
 3339      7900
 3340              	.LASF55:
 3341 04fe 526F626F 		.ascii	"RobotMovement\000"
 3341      744D6F76 
 3341      656D656E 
 3341      7400
 3342              	.LASF1:
 3343 050c 756E7369 		.ascii	"unsigned char\000"
 3343      676E6564 
 3343      20636861 
 3343      7200
 3344              	.LASF121:
 3345 051a 73746F70 		.ascii	"stoppedAfterTurn\000"
 3345      70656441 
 3345      66746572 
 3345      5475726E 
 3345      00
 3346              	.LASF100:
 3347 052b 6C696E65 		.ascii	"line\000"
 3347      00
 3348              	.LASF60:
 3349 0530 41646A75 		.ascii	"AdjustToTheRight\000"
 3349      7374546F 
 3349      54686552 
 3349      69676874 
 3349      00
 3350              	.LASF61:
 3351 0541 53746F70 		.ascii	"Stop\000"
 3351      00
 3352              	.LASF86:
 3353 0546 74735F65 		.ascii	"ts_enc\000"
 3353      6E6300
 3354              	.LASF93:
 3355 054d 666C6167 		.ascii	"flag_ts_display\000"
 3355      5F74735F 
 3355      64697370 
 3355      6C617900 
 3356              	.LASF44:
 3357 055d 536B6970 		.ascii	"Skip\000"
 3357      00
 3358              	.LASF99:
 3359 0562 64697370 		.ascii	"displaystring\000"
 3359      6C617973 
 3359      7472696E 
 3359      6700
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 73


 3360              	.LASF38:
 3361 0570 476F466F 		.ascii	"GoForward\000"
 3361      72776172 
 3361      6400
 3362              	.LASF68:
 3363 057a 53355F44 		.ascii	"S5_DETECTED\000"
 3363      45544543 
 3363      54454400 
 3364              	.LASF0:
 3365 0586 7369676E 		.ascii	"signed char\000"
 3365      65642063 
 3365      68617200 
 3366              	.LASF119:
 3367 0592 63757272 		.ascii	"currentRow\000"
 3367      656E7452 
 3367      6F7700
 3368              	.LASF3:
 3369 059d 73686F72 		.ascii	"short unsigned int\000"
 3369      7420756E 
 3369      7369676E 
 3369      65642069 
 3369      6E7400
 3370              	.LASF25:
 3371 05b0 726F626F 		.ascii	"robot_orientation\000"
 3371      745F6F72 
 3371      69656E74 
 3371      6174696F 
 3371      6E00
 3372              	.LASF72:
 3373 05c2 6D61696E 		.ascii	"main\000"
 3373      00
 3374              	.LASF79:
 3375 05c7 6765744E 		.ascii	"getNextInstruction\000"
 3375      65787449 
 3375      6E737472 
 3375      75637469 
 3375      6F6E00
 3376              	.LASF109:
 3377 05da 63757272 		.ascii	"currentInstruction\000"
 3377      656E7449 
 3377      6E737472 
 3377      75637469 
 3377      6F6E00
 3378              	.LASF59:
 3379 05ed 41646A75 		.ascii	"AdjustToTheLeft\000"
 3379      7374546F 
 3379      5468654C 
 3379      65667400 
 3380              	.LASF65:
 3381 05fd 4261636B 		.ascii	"Backward\000"
 3381      77617264 
 3381      00
 3382              	.LASF14:
 3383 0606 75696E74 		.ascii	"uint8\000"
 3383      3800
 3384              	.LASF20:
 3385 060c 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccUfMbge.s 			page 74


 3385      6C6500
 3386              	.LASF75:
 3387 0613 43686563 		.ascii	"CheckSensorDirection\000"
 3387      6B53656E 
 3387      736F7244 
 3387      69726563 
 3387      74696F6E 
 3388              	.LASF120:
 3389 0628 63757272 		.ascii	"currentCol\000"
 3389      656E7443 
 3389      6F6C00
 3390              	.LASF26:
 3391 0633 67305F78 		.ascii	"g0_xpos\000"
 3391      706F7300 
 3392              	.LASF114:
 3393 063b 74696D65 		.ascii	"timerInt\000"
 3393      72496E74 
 3393      00
 3394              	.LASF96:
 3395 0644 666C6167 		.ascii	"flag_KB_string\000"
 3395      5F4B425F 
 3395      73747269 
 3395      6E6700
 3396              	.LASF32:
 3397 0653 67315F73 		.ascii	"g1_speed\000"
 3397      70656564 
 3397      00
 3398              	.LASF48:
 3399 065c 69676E6F 		.ascii	"ignoreL\000"
 3399      72654C00 
 3400              	.LASF49:
 3401 0664 69676E6F 		.ascii	"ignoreR\000"
 3401      72655200 
 3402              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
