ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentRobotOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 01       		.byte	1
 120              		.comm	currentInstruction,20,4
 121              		.comm	previousInstruction,20,4
 122              		.comm	numSteps,4,4
 123              		.comm	instructionList,4,4
 124              		.bss
 125 0013 00       		.align	2
 126              	instructionIndex:
 127 0014 00000000 		.space	4
 128              		.comm	s3,1,1
 129              		.comm	s4,1,1
 130              		.comm	s5,1,1
 131              		.global	s6
 132              		.type	s6, %object
 133              		.size	s6, 1
 134              	s6:
 135 0018 00       		.space	1
 136              		.global	totalMilliseconds
 137 0019 000000   		.align	2
 138              		.type	totalMilliseconds, %object
 139              		.size	totalMilliseconds, 4
 140              	totalMilliseconds:
 141 001c 00000000 		.space	4
 142              		.global	totalDistance
 143              		.align	2
 144              		.type	totalDistance, %object
 145              		.size	totalDistance, 4
 146              	totalDistance:
 147 0020 00000000 		.space	4
 148              		.comm	buffer,69,4
 149              		.global	quadDec2Count
 150              		.align	2
 151              		.type	quadDec2Count, %object
 152              		.size	quadDec2Count, 4
 153              	quadDec2Count:
 154 0024 00000000 		.space	4
 155              		.global	timerInt
 156              		.align	2
 157              		.type	timerInt, %object
 158              		.size	timerInt, 4
 159              	timerInt:
 160 0028 00000000 		.space	4
 161              		.global	keepLedOn
 162              		.align	2
 163              		.type	keepLedOn, %object
 164              		.size	keepLedOn, 4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 4


 165              	keepLedOn:
 166 002c 00000000 		.space	4
 167              		.global	stopBuffer
 168              		.align	2
 169              		.type	stopBuffer, %object
 170              		.size	stopBuffer, 4
 171              	stopBuffer:
 172 0030 00000000 		.space	4
 173              		.global	forwardBuffer
 174              		.align	1
 175              		.type	forwardBuffer, %object
 176              		.size	forwardBuffer, 2
 177              	forwardBuffer:
 178 0034 0000     		.space	2
 179              	turnStartedFlag:
 180 0036 00       		.space	1
 181              	turnFinishedFlag:
 182 0037 00       		.space	1
 183              	forwardUntilTargetStartedFlag:
 184 0038 00       		.space	1
 185              	uTurnStartedFlag:
 186 0039 00       		.space	1
 187              	uTurnFinishedFlag:
 188 003a 00       		.space	1
 189              	leftStatusFlag:
 190 003b 00       		.space	1
 191              	rightStatusFlag:
 192 003c 00       		.space	1
 193              	spinCourseCorrectionStarted:
 194 003d 00       		.space	1
 195              	currentIgnoreL:
 196 003e 00       		.space	1
 197              	currentIgnoreR:
 198 003f 00       		.space	1
 199              	totalLineCount:
 200 0040 00       		.space	1
 201              	lineCount:
 202 0041 00       		.space	1
 203              	onLineFlag:
 204 0042 00       		.space	1
 205              	tooEarlyFlag:
 206 0043 00       		.space	1
 207              	tooLateFlag:
 208 0044 00       		.space	1
 209              	dontOverwriteRightIgnore:
 210 0045 00       		.space	1
 211              	dontOverwriteLeftIgnore:
 212 0046 00       		.space	1
 213              		.global	junctionConfiguration
 214 0047 00       		.align	2
 215              		.type	junctionConfiguration, %object
 216              		.size	junctionConfiguration, 4
 217              	junctionConfiguration:
 218 0048 00000000 		.space	4
 219              		.global	currentFoodListIndex
 220              		.type	currentFoodListIndex, %object
 221              		.size	currentFoodListIndex, 1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 5


 222              	currentFoodListIndex:
 223 004c 00       		.space	1
 224              		.global	blockSizeTotal
 225 004d 000000   		.align	2
 226              		.type	blockSizeTotal, %object
 227              		.size	blockSizeTotal, 4
 228              	blockSizeTotal:
 229 0050 00000000 		.space	4
 230              		.global	__aeabi_i2d
 231              		.global	__aeabi_dmul
 232              		.global	__aeabi_ddiv
 233              		.global	__aeabi_d2f
 234              		.global	__aeabi_fadd
 235              		.section	.text.speedTimer,"ax",%progbits
 236              		.align	2
 237              		.global	speedTimer
 238              		.thumb
 239              		.thumb_func
 240              		.type	speedTimer, %function
 241              	speedTimer:
 242              	.LFB64:
 243              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentRobotOrientation, previousOrientation = Down;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** Instruction previousInstruction;
  30:main.c        **** int numSteps;
  31:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  32:main.c        **** Instruction * instructionList; // pointer to array
  33:main.c        **** volatile static uint32 instructionIndex = 0;
  34:main.c        **** Instruction GetInstructionAtIndex();
  35:main.c        **** float CalculateDistanceToTravel(float blockSize);
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 6


  36:main.c        **** void MoveToNextInstruction();
  37:main.c        **** // ----------------------------------------
  38:main.c        **** uint8 s3, s4, s5, s6 = 0;
  39:main.c        **** //* ========================================
  40:main.c        **** // Calculating Distance
  41:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  42:main.c        **** 
  43:main.c        **** uint32 totalMilliseconds = 0;
  44:main.c        **** float totalDistance = 0; // in mm
  45:main.c        **** //* ========================================
  46:main.c        **** char buffer[69];
  47:main.c        **** int quadDec2Count = 0;
  48:main.c        **** int timerInt = 0;
  49:main.c        **** int keepLedOn = 0;
  50:main.c        **** // ========================================= FLAGS
  51:main.c        **** uint32 stopBuffer = 0;
  52:main.c        **** uint16 forwardBuffer = 0;
  53:main.c        **** volatile static uint8 turnStartedFlag = 0;
  54:main.c        **** volatile static uint8 turnFinishedFlag = 0;
  55:main.c        **** 
  56:main.c        **** volatile static uint8 forwardUntilTargetStartedFlag = 0;
  57:main.c        **** volatile static uint8 uTurnStartedFlag = 0;
  58:main.c        **** volatile static uint8 uTurnFinishedFlag = 0;
  59:main.c        **** 
  60:main.c        **** volatile static uint8 leftStatusFlag = 0;
  61:main.c        **** volatile static uint8 rightStatusFlag = 0;
  62:main.c        **** 
  63:main.c        **** volatile static uint8 spinCourseCorrectionStarted = 0;
  64:main.c        **** volatile static uint8 currentIgnoreL = 0;
  65:main.c        **** volatile static uint8 currentIgnoreR = 0;
  66:main.c        **** 
  67:main.c        **** void RotateClockwise180Degrees();
  68:main.c        **** 
  69:main.c        **** volatile static uint8 totalLineCount = 0;
  70:main.c        **** volatile static uint8 lineCount = 0;
  71:main.c        **** volatile static uint8 onLineFlag = 0;
  72:main.c        **** 
  73:main.c        **** volatile static uint8 tooEarlyFlag = 0;
  74:main.c        **** volatile static uint8 tooLateFlag = 0;
  75:main.c        **** 
  76:main.c        **** volatile static uint8 dontOverwriteRightIgnore = 0;
  77:main.c        **** volatile static uint8 dontOverwriteLeftIgnore = 0;
  78:main.c        **** 
  79:main.c        **** uint8 junctionConfiguration[4] = {0};
  80:main.c        **** uint8 currentFoodListIndex = 0;
  81:main.c        **** 
  82:main.c        **** float blockSizeTotal = 0;
  83:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  84:main.c        **** 
  85:main.c        **** CY_ISR (speedTimer) {
 244              		.loc 1 85 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 8
 247              		@ frame_needed = 1, uses_anonymous_args = 0
 248 0000 90B5     		push	{r4, r7, lr}
 249              		.cfi_def_cfa_offset 12
 250              		.cfi_offset 4, -12
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 7


 251              		.cfi_offset 7, -8
 252              		.cfi_offset 14, -4
 253 0002 83B0     		sub	sp, sp, #12
 254              		.cfi_def_cfa_offset 24
 255 0004 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
  86:main.c        ****     timerInt = 1;
 257              		.loc 1 86 0
 258 0006 344B     		ldr	r3, .L4+16
 259 0008 0122     		movs	r2, #1
 260 000a 1A60     		str	r2, [r3]
  87:main.c        ****     //quadDec_M1 used for turning macros
  88:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 261              		.loc 1 88 0
 262 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 263 0010 0346     		mov	r3, r0
 264 0012 1A46     		mov	r2, r3
 265 0014 314B     		ldr	r3, .L4+20
 266 0016 1A60     		str	r2, [r3]
  89:main.c        ****     
  90:main.c        ****     if ((currentDirection == Forward || 
 267              		.loc 1 90 0
 268 0018 314B     		ldr	r3, .L4+24
 269 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 270 001c 002B     		cmp	r3, #0
 271 001e 13D0     		beq	.L2
  91:main.c        ****         currentDirection == ForwardAfterTurn ||
 272              		.loc 1 91 0 discriminator 1
 273 0020 2F4B     		ldr	r3, .L4+24
 274 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  90:main.c        ****         currentDirection == ForwardAfterTurn ||
 275              		.loc 1 90 0 discriminator 1
 276 0024 082B     		cmp	r3, #8
 277 0026 0FD0     		beq	.L2
  92:main.c        ****         currentDirection == waitForTurn || 
 278              		.loc 1 92 0
 279 0028 2D4B     		ldr	r3, .L4+24
 280 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  91:main.c        ****         currentDirection == ForwardAfterTurn ||
 281              		.loc 1 91 0
 282 002c 072B     		cmp	r3, #7
 283 002e 0BD0     		beq	.L2
  93:main.c        ****         currentDirection == AdjustToTheLeft ||
 284              		.loc 1 93 0
 285 0030 2B4B     		ldr	r3, .L4+24
 286 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  92:main.c        ****         currentDirection == waitForTurn || 
 287              		.loc 1 92 0
 288 0034 032B     		cmp	r3, #3
 289 0036 07D0     		beq	.L2
  94:main.c        ****         currentDirection == AdjustToTheRight ||
 290              		.loc 1 94 0
 291 0038 294B     		ldr	r3, .L4+24
 292 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  93:main.c        ****         currentDirection == AdjustToTheLeft ||
 293              		.loc 1 93 0
 294 003c 042B     		cmp	r3, #4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 8


 295 003e 03D0     		beq	.L2
  95:main.c        ****         currentDirection == Backward) &&
 296              		.loc 1 95 0
 297 0040 274B     		ldr	r3, .L4+24
 298 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  94:main.c        ****         currentDirection == AdjustToTheRight ||
 299              		.loc 1 94 0
 300 0044 092B     		cmp	r3, #9
 301 0046 34D1     		bne	.L3
 302              	.L2:
  96:main.c        ****         quadDec2Count != 0) {
 303              		.loc 1 96 0
 304 0048 244B     		ldr	r3, .L4+20
 305 004a 1B68     		ldr	r3, [r3]
  95:main.c        ****         currentDirection == Backward) &&
 306              		.loc 1 95 0
 307 004c 002B     		cmp	r3, #0
 308 004e 30D0     		beq	.L3
 309              	.LBB2:
  97:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  98:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 310              		.loc 1 98 0
 311 0050 224B     		ldr	r3, .L4+20
 312 0052 1B68     		ldr	r3, [r3]
 313 0054 002B     		cmp	r3, #0
 314 0056 B8BF     		it	lt
 315 0058 5B42     		rsblt	r3, r3, #0
 316 005a 1846     		mov	r0, r3
 317 005c FFF7FEFF 		bl	__aeabi_i2d
 318 0060 19A3     		adr	r3, .L4
 319 0062 D3E90023 		ldrd	r2, [r3]
 320 0066 FFF7FEFF 		bl	__aeabi_dmul
 321 006a 0346     		mov	r3, r0
 322 006c 0C46     		mov	r4, r1
 323 006e 1846     		mov	r0, r3
 324 0070 2146     		mov	r1, r4
 325 0072 17A3     		adr	r3, .L4+8
 326 0074 D3E90023 		ldrd	r2, [r3]
 327 0078 FFF7FEFF 		bl	__aeabi_dmul
 328 007c 0346     		mov	r3, r0
 329 007e 0C46     		mov	r4, r1
 330 0080 1846     		mov	r0, r3
 331 0082 2146     		mov	r1, r4
 332 0084 4FF00002 		mov	r2, #0
 333 0088 164B     		ldr	r3, .L4+28
 334 008a FFF7FEFF 		bl	__aeabi_ddiv
 335 008e 0346     		mov	r3, r0
 336 0090 0C46     		mov	r4, r1
 337 0092 1846     		mov	r0, r3
 338 0094 2146     		mov	r1, r4
 339 0096 FFF7FEFF 		bl	__aeabi_d2f
 340 009a 0346     		mov	r3, r0
 341 009c 7B60     		str	r3, [r7, #4]	@ float
  99:main.c        ****         
 100:main.c        ****         totalDistance = totalDistance + newDistance;
 342              		.loc 1 100 0
 343 009e 124B     		ldr	r3, .L4+32
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 9


 344 00a0 1B68     		ldr	r3, [r3]	@ float
 345 00a2 7968     		ldr	r1, [r7, #4]	@ float
 346 00a4 1846     		mov	r0, r3
 347 00a6 FFF7FEFF 		bl	__aeabi_fadd
 348 00aa 0346     		mov	r3, r0
 349 00ac 1A46     		mov	r2, r3
 350 00ae 0E4B     		ldr	r3, .L4+32
 351 00b0 1A60     		str	r2, [r3]	@ float
 352              	.L3:
 353              	.LBE2:
 101:main.c        ****     }
 102:main.c        ****     
 103:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 354              		.loc 1 103 0
 355 00b2 0020     		movs	r0, #0
 356 00b4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
 104:main.c        ****     QuadDec_M2_Start(); // restart counter
 357              		.loc 1 104 0
 358 00b8 FFF7FEFF 		bl	QuadDec_M2_Start
 105:main.c        ****     
 106:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 359              		.loc 1 106 0
 360 00bc FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
 107:main.c        **** }
 361              		.loc 1 107 0
 362 00c0 00BF     		nop
 363 00c2 0C37     		adds	r7, r7, #12
 364              		.cfi_def_cfa_offset 12
 365 00c4 BD46     		mov	sp, r7
 366              		.cfi_def_cfa_register 13
 367              		@ sp needed
 368 00c6 90BD     		pop	{r4, r7, pc}
 369              	.L5:
 370              		.align	3
 371              	.L4:
 372 00c8 182D4454 		.word	1413754136
 373 00cc FB210940 		.word	1074340347
 374 00d0 00000000 		.word	0
 375 00d4 00205040 		.word	1078992896
 376 00d8 00000000 		.word	timerInt
 377 00dc 00000000 		.word	quadDec2Count
 378 00e0 00000000 		.word	currentDirection
 379 00e4 00806C40 		.word	1080852480
 380 00e8 00000000 		.word	totalDistance
 381              		.cfi_endproc
 382              	.LFE64:
 383              		.size	speedTimer, .-speedTimer
 384              		.section	.text.S3_DETECTED,"ax",%progbits
 385              		.align	2
 386              		.global	S3_DETECTED
 387              		.thumb
 388              		.thumb_func
 389              		.type	S3_DETECTED, %function
 390              	S3_DETECTED:
 391              	.LFB65:
 108:main.c        **** 
 109:main.c        **** CY_ISR(S3_DETECTED) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 10


 392              		.loc 1 109 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397 0000 80B4     		push	{r7}
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 0002 00AF     		add	r7, sp, #0
 401              		.cfi_def_cfa_register 7
 110:main.c        ****     // Sensor has detected WHITE
 111:main.c        ****     s3 = 1; // , Black = 0, White = 1
 402              		.loc 1 111 0
 403 0004 034B     		ldr	r3, .L7
 404 0006 0122     		movs	r2, #1
 405 0008 1A70     		strb	r2, [r3]
 112:main.c        ****     //LED_Write(1u);
 113:main.c        **** }
 406              		.loc 1 113 0
 407 000a 00BF     		nop
 408 000c BD46     		mov	sp, r7
 409              		.cfi_def_cfa_register 13
 410              		@ sp needed
 411 000e 80BC     		pop	{r7}
 412              		.cfi_restore 7
 413              		.cfi_def_cfa_offset 0
 414 0010 7047     		bx	lr
 415              	.L8:
 416 0012 00BF     		.align	2
 417              	.L7:
 418 0014 00000000 		.word	s3
 419              		.cfi_endproc
 420              	.LFE65:
 421              		.size	S3_DETECTED, .-S3_DETECTED
 422              		.section	.text.S4_DETECTED,"ax",%progbits
 423              		.align	2
 424              		.global	S4_DETECTED
 425              		.thumb
 426              		.thumb_func
 427              		.type	S4_DETECTED, %function
 428              	S4_DETECTED:
 429              	.LFB66:
 114:main.c        **** 
 115:main.c        **** CY_ISR(S4_DETECTED) {
 430              		.loc 1 115 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 0000 80B4     		push	{r7}
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 7, -4
 438 0002 00AF     		add	r7, sp, #0
 439              		.cfi_def_cfa_register 7
 116:main.c        ****     // Sensor has detected WHITE
 117:main.c        ****     s4 = 1; // , Black = 0, White = 1
 440              		.loc 1 117 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 11


 441 0004 034B     		ldr	r3, .L10
 442 0006 0122     		movs	r2, #1
 443 0008 1A70     		strb	r2, [r3]
 118:main.c        ****     //LED_Write(1u);
 119:main.c        **** }
 444              		.loc 1 119 0
 445 000a 00BF     		nop
 446 000c BD46     		mov	sp, r7
 447              		.cfi_def_cfa_register 13
 448              		@ sp needed
 449 000e 80BC     		pop	{r7}
 450              		.cfi_restore 7
 451              		.cfi_def_cfa_offset 0
 452 0010 7047     		bx	lr
 453              	.L11:
 454 0012 00BF     		.align	2
 455              	.L10:
 456 0014 00000000 		.word	s4
 457              		.cfi_endproc
 458              	.LFE66:
 459              		.size	S4_DETECTED, .-S4_DETECTED
 460              		.section	.text.S5_DETECTED,"ax",%progbits
 461              		.align	2
 462              		.global	S5_DETECTED
 463              		.thumb
 464              		.thumb_func
 465              		.type	S5_DETECTED, %function
 466              	S5_DETECTED:
 467              	.LFB67:
 120:main.c        **** 
 121:main.c        **** CY_ISR(S5_DETECTED) {
 468              		.loc 1 121 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 1, uses_anonymous_args = 0
 472              		@ link register save eliminated.
 473 0000 80B4     		push	{r7}
 474              		.cfi_def_cfa_offset 4
 475              		.cfi_offset 7, -4
 476 0002 00AF     		add	r7, sp, #0
 477              		.cfi_def_cfa_register 7
 122:main.c        ****     // Sensor has detected WHITE
 123:main.c        ****     s5 = 1; // , Black = 0, White = 1
 478              		.loc 1 123 0
 479 0004 034B     		ldr	r3, .L13
 480 0006 0122     		movs	r2, #1
 481 0008 1A70     		strb	r2, [r3]
 124:main.c        ****     //LED_Write(1u);
 125:main.c        **** }
 482              		.loc 1 125 0
 483 000a 00BF     		nop
 484 000c BD46     		mov	sp, r7
 485              		.cfi_def_cfa_register 13
 486              		@ sp needed
 487 000e 80BC     		pop	{r7}
 488              		.cfi_restore 7
 489              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 12


 490 0010 7047     		bx	lr
 491              	.L14:
 492 0012 00BF     		.align	2
 493              	.L13:
 494 0014 00000000 		.word	s5
 495              		.cfi_endproc
 496              	.LFE67:
 497              		.size	S5_DETECTED, .-S5_DETECTED
 498              		.section	.text.S6_DETECTED,"ax",%progbits
 499              		.align	2
 500              		.global	S6_DETECTED
 501              		.thumb
 502              		.thumb_func
 503              		.type	S6_DETECTED, %function
 504              	S6_DETECTED:
 505              	.LFB68:
 126:main.c        **** 
 127:main.c        **** CY_ISR(S6_DETECTED) {
 506              		.loc 1 127 0
 507              		.cfi_startproc
 508              		@ args = 0, pretend = 0, frame = 0
 509              		@ frame_needed = 1, uses_anonymous_args = 0
 510              		@ link register save eliminated.
 511 0000 80B4     		push	{r7}
 512              		.cfi_def_cfa_offset 4
 513              		.cfi_offset 7, -4
 514 0002 00AF     		add	r7, sp, #0
 515              		.cfi_def_cfa_register 7
 128:main.c        ****     // Sensor has detected WHITE
 129:main.c        ****     s6 = 1; // , Black = 0, White = 1
 516              		.loc 1 129 0
 517 0004 034B     		ldr	r3, .L16
 518 0006 0122     		movs	r2, #1
 519 0008 1A70     		strb	r2, [r3]
 130:main.c        ****     //LED_Write(1u);
 131:main.c        **** }
 520              		.loc 1 131 0
 521 000a 00BF     		nop
 522 000c BD46     		mov	sp, r7
 523              		.cfi_def_cfa_register 13
 524              		@ sp needed
 525 000e 80BC     		pop	{r7}
 526              		.cfi_restore 7
 527              		.cfi_def_cfa_offset 0
 528 0010 7047     		bx	lr
 529              	.L17:
 530 0012 00BF     		.align	2
 531              	.L16:
 532 0014 00000000 		.word	s6
 533              		.cfi_endproc
 534              	.LFE68:
 535              		.size	S6_DETECTED, .-S6_DETECTED
 536              		.section	.text.TIMER_FINISH,"ax",%progbits
 537              		.align	2
 538              		.global	TIMER_FINISH
 539              		.thumb
 540              		.thumb_func
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 13


 541              		.type	TIMER_FINISH, %function
 542              	TIMER_FINISH:
 543              	.LFB69:
 132:main.c        **** 
 133:main.c        **** CY_ISR(TIMER_FINISH) {
 544              		.loc 1 133 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 1, uses_anonymous_args = 0
 548 0000 80B5     		push	{r7, lr}
 549              		.cfi_def_cfa_offset 8
 550              		.cfi_offset 7, -8
 551              		.cfi_offset 14, -4
 552 0002 00AF     		add	r7, sp, #0
 553              		.cfi_def_cfa_register 7
 134:main.c        ****     if (currentDirection == Stop) {
 554              		.loc 1 134 0
 555 0004 174B     		ldr	r3, .L24
 556 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 557 0008 052B     		cmp	r3, #5
 558 000a 05D1     		bne	.L19
 135:main.c        ****         stopBuffer = stopBuffer + 1;
 559              		.loc 1 135 0
 560 000c 164B     		ldr	r3, .L24+4
 561 000e 1B68     		ldr	r3, [r3]
 562 0010 0133     		adds	r3, r3, #1
 563 0012 154A     		ldr	r2, .L24+4
 564 0014 1360     		str	r3, [r2]
 565 0016 02E0     		b	.L20
 566              	.L19:
 136:main.c        ****     } else {
 137:main.c        ****         stopBuffer = 0;
 567              		.loc 1 137 0
 568 0018 134B     		ldr	r3, .L24+4
 569 001a 0022     		movs	r2, #0
 570 001c 1A60     		str	r2, [r3]
 571              	.L20:
 138:main.c        ****     }
 139:main.c        ****     if (currentDirection == Forward || 
 572              		.loc 1 139 0
 573 001e 114B     		ldr	r3, .L24
 574 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 575 0022 002B     		cmp	r3, #0
 576 0024 0BD0     		beq	.L21
 140:main.c        ****         currentDirection == AdjustToTheLeft ||
 577              		.loc 1 140 0 discriminator 1
 578 0026 0F4B     		ldr	r3, .L24
 579 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 139:main.c        ****         currentDirection == AdjustToTheLeft ||
 580              		.loc 1 139 0 discriminator 1
 581 002a 032B     		cmp	r3, #3
 582 002c 07D0     		beq	.L21
 141:main.c        ****         currentDirection ==  AdjustToTheRight || 
 583              		.loc 1 141 0
 584 002e 0D4B     		ldr	r3, .L24
 585 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 140:main.c        ****         currentDirection == AdjustToTheLeft ||
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 14


 586              		.loc 1 140 0
 587 0032 042B     		cmp	r3, #4
 588 0034 03D0     		beq	.L21
 142:main.c        ****         currentDirection == ForwardAfterTurn) {
 589              		.loc 1 142 0
 590 0036 0B4B     		ldr	r3, .L24
 591 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 141:main.c        ****         currentDirection ==  AdjustToTheRight || 
 592              		.loc 1 141 0
 593 003a 082B     		cmp	r3, #8
 594 003c 06D1     		bne	.L22
 595              	.L21:
 143:main.c        ****         forwardBuffer = forwardBuffer + 1;
 596              		.loc 1 143 0
 597 003e 0B4B     		ldr	r3, .L24+8
 598 0040 1B88     		ldrh	r3, [r3]
 599 0042 0133     		adds	r3, r3, #1
 600 0044 9AB2     		uxth	r2, r3
 601 0046 094B     		ldr	r3, .L24+8
 602 0048 1A80     		strh	r2, [r3]	@ movhi
 603 004a 02E0     		b	.L23
 604              	.L22:
 144:main.c        ****     } else {
 145:main.c        ****         forwardBuffer = 0;    
 605              		.loc 1 145 0
 606 004c 074B     		ldr	r3, .L24+8
 607 004e 0022     		movs	r2, #0
 608 0050 1A80     		strh	r2, [r3]	@ movhi
 609              	.L23:
 146:main.c        ****     }
 147:main.c        ****     SetRobotMovement(); 
 610              		.loc 1 147 0
 611 0052 FFF7FEFF 		bl	SetRobotMovement
 148:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 612              		.loc 1 148 0
 613 0056 FFF7FEFF 		bl	ResetSensorFlags
 149:main.c        ****     Timer_LED_ReadStatusRegister();
 614              		.loc 1 149 0
 615 005a FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 150:main.c        **** }
 616              		.loc 1 150 0
 617 005e 00BF     		nop
 618 0060 80BD     		pop	{r7, pc}
 619              	.L25:
 620 0062 00BF     		.align	2
 621              	.L24:
 622 0064 00000000 		.word	currentDirection
 623 0068 00000000 		.word	stopBuffer
 624 006c 00000000 		.word	forwardBuffer
 625              		.cfi_endproc
 626              	.LFE69:
 627              		.size	TIMER_FINISH, .-TIMER_FINISH
 628              		.section	.text.main,"ax",%progbits
 629              		.align	2
 630              		.global	main
 631              		.thumb
 632              		.thumb_func
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 15


 633              		.type	main, %function
 634              	main:
 635              	.LFB70:
 151:main.c        **** 
 152:main.c        **** 
 153:main.c        **** int main() {
 636              		.loc 1 153 0
 637              		.cfi_startproc
 638              		@ args = 0, pretend = 0, frame = 24
 639              		@ frame_needed = 1, uses_anonymous_args = 0
 640 0000 B0B5     		push	{r4, r5, r7, lr}
 641              		.cfi_def_cfa_offset 16
 642              		.cfi_offset 4, -16
 643              		.cfi_offset 5, -12
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
 646 0002 86B0     		sub	sp, sp, #24
 647              		.cfi_def_cfa_offset 40
 648 0004 00AF     		add	r7, sp, #0
 649              		.cfi_def_cfa_register 7
 154:main.c        **** // ----- INITIALIZATIONS ----------
 155:main.c        ****     CYGlobalIntEnable;
 650              		.loc 1 155 0
 651              		.syntax unified
 652              	@ 155 "main.c" 1
 653 0006 62B6     		CPSIE   i
 654              	@ 0 "" 2
 156:main.c        ****     ResetSensorFlags();
 655              		.loc 1 156 0
 656              		.thumb
 657              		.syntax unified
 658 0008 FFF7FEFF 		bl	ResetSensorFlags
 157:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 659              		.loc 1 157 0
 660 000c FFF7FEFF 		bl	init
 158:main.c        ****     
 159:main.c        ****     // MAKE SURE TO CHANGE ORIENTATION
 160:main.c        ****     instructionList = findPathNewOrientation(map, food_list, currentFoodListIndex, Up); // initiali
 661              		.loc 1 160 0
 662 0010 2B4B     		ldr	r3, .L29
 663 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 664 0014 1A46     		mov	r2, r3
 665 0016 0023     		movs	r3, #0
 666 0018 2A49     		ldr	r1, .L29+4
 667 001a 2B48     		ldr	r0, .L29+8
 668 001c FFF7FEFF 		bl	findPathNewOrientation
 669 0020 0246     		mov	r2, r0
 670 0022 2A4B     		ldr	r3, .L29+12
 671 0024 1A60     		str	r2, [r3]
 161:main.c        ****     numSteps = instructionsListLength();
 672              		.loc 1 161 0
 673 0026 FFF7FEFF 		bl	instructionsListLength
 674 002a 0346     		mov	r3, r0
 675 002c 1A46     		mov	r2, r3
 676 002e 284B     		ldr	r3, .L29+16
 677 0030 1A60     		str	r2, [r3]
 162:main.c        ****     
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 16


 163:main.c        ****     currentInstruction = GetInstructionAtIndex();
 678              		.loc 1 163 0
 679 0032 284C     		ldr	r4, .L29+20
 680 0034 3B46     		mov	r3, r7
 681 0036 1846     		mov	r0, r3
 682 0038 FFF7FEFF 		bl	GetInstructionAtIndex
 683 003c 2546     		mov	r5, r4
 684 003e 3C46     		mov	r4, r7
 685 0040 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 686 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 687 0044 2368     		ldr	r3, [r4]
 688 0046 2B60     		str	r3, [r5]
 164:main.c        ****     
 165:main.c        ****     currentIgnoreL = instructionList[instructionIndex].ignoreL;
 689              		.loc 1 165 0
 690 0048 204B     		ldr	r3, .L29+12
 691 004a 1968     		ldr	r1, [r3]
 692 004c 224B     		ldr	r3, .L29+24
 693 004e 1A68     		ldr	r2, [r3]
 694 0050 1346     		mov	r3, r2
 695 0052 9B00     		lsls	r3, r3, #2
 696 0054 1344     		add	r3, r3, r2
 697 0056 9B00     		lsls	r3, r3, #2
 698 0058 0B44     		add	r3, r3, r1
 699 005a 5B68     		ldr	r3, [r3, #4]
 700 005c DAB2     		uxtb	r2, r3
 701 005e 1F4B     		ldr	r3, .L29+28
 702 0060 1A70     		strb	r2, [r3]
 166:main.c        ****     currentIgnoreR = instructionList[instructionIndex].ignoreR;
 703              		.loc 1 166 0
 704 0062 1A4B     		ldr	r3, .L29+12
 705 0064 1968     		ldr	r1, [r3]
 706 0066 1C4B     		ldr	r3, .L29+24
 707 0068 1A68     		ldr	r2, [r3]
 708 006a 1346     		mov	r3, r2
 709 006c 9B00     		lsls	r3, r3, #2
 710 006e 1344     		add	r3, r3, r2
 711 0070 9B00     		lsls	r3, r3, #2
 712 0072 0B44     		add	r3, r3, r1
 713 0074 9B68     		ldr	r3, [r3, #8]
 714 0076 DAB2     		uxtb	r2, r3
 715 0078 194B     		ldr	r3, .L29+32
 716 007a 1A70     		strb	r2, [r3]
 167:main.c        ****     
 168:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 717              		.loc 1 168 0
 718 007c 1948     		ldr	r0, .L29+36
 719 007e FFF7FEFF 		bl	isr_speed_StartEx
 169:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 720              		.loc 1 169 0
 721 0082 1948     		ldr	r0, .L29+40
 722 0084 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 170:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 723              		.loc 1 170 0
 724 0088 1848     		ldr	r0, .L29+44
 725 008a FFF7FEFF 		bl	S3_detected_StartEx
 171:main.c        ****     S4_detected_StartEx(S4_DETECTED);
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 17


 726              		.loc 1 171 0
 727 008e 1848     		ldr	r0, .L29+48
 728 0090 FFF7FEFF 		bl	S4_detected_StartEx
 172:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 729              		.loc 1 172 0
 730 0094 1748     		ldr	r0, .L29+52
 731 0096 FFF7FEFF 		bl	S5_detected_StartEx
 173:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 732              		.loc 1 173 0
 733 009a 1748     		ldr	r0, .L29+56
 734 009c FFF7FEFF 		bl	S6_detected_StartEx
 174:main.c        ****     Timer_LED_Start();
 735              		.loc 1 174 0
 736 00a0 FFF7FEFF 		bl	Timer_LED_Start
 737              	.L28:
 175:main.c        **** 
 176:main.c        ****     for(;;)
 177:main.c        ****     {
 178:main.c        ****         if(timerInt == 1) {
 738              		.loc 1 178 0
 739 00a4 154B     		ldr	r3, .L29+60
 740 00a6 1B68     		ldr	r3, [r3]
 741 00a8 012B     		cmp	r3, #1
 742 00aa FBD1     		bne	.L28
 179:main.c        ****             timerInt = 0;
 743              		.loc 1 179 0
 744 00ac 134B     		ldr	r3, .L29+60
 745 00ae 0022     		movs	r2, #0
 746 00b0 1A60     		str	r2, [r3]
 180:main.c        ****             // calculate RPM of M2
 181:main.c        ****             quadCountToRPM(quadDec2Count);
 747              		.loc 1 181 0
 748 00b2 134B     		ldr	r3, .L29+64
 749 00b4 1B68     		ldr	r3, [r3]
 750 00b6 9BB2     		uxth	r3, r3
 751 00b8 1846     		mov	r0, r3
 752 00ba FFF7FEFF 		bl	quadCountToRPM
 182:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 183:main.c        ****             //usbPutString(buffer);
 184:main.c        ****             //usbPutString(" ");
 185:main.c        ****         }
 186:main.c        ****     }
 753              		.loc 1 186 0
 754 00be F1E7     		b	.L28
 755              	.L30:
 756              		.align	2
 757              	.L29:
 758 00c0 00000000 		.word	currentFoodListIndex
 759 00c4 00000000 		.word	food_list
 760 00c8 00000000 		.word	map
 761 00cc 00000000 		.word	instructionList
 762 00d0 00000000 		.word	numSteps
 763 00d4 00000000 		.word	currentInstruction
 764 00d8 14000000 		.word	instructionIndex
 765 00dc 3E000000 		.word	currentIgnoreL
 766 00e0 3F000000 		.word	currentIgnoreR
 767 00e4 00000000 		.word	speedTimer
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 18


 768 00e8 00000000 		.word	TIMER_FINISH
 769 00ec 00000000 		.word	S3_DETECTED
 770 00f0 00000000 		.word	S4_DETECTED
 771 00f4 00000000 		.word	S5_DETECTED
 772 00f8 00000000 		.word	S6_DETECTED
 773 00fc 00000000 		.word	timerInt
 774 0100 00000000 		.word	quadDec2Count
 775              		.cfi_endproc
 776              	.LFE70:
 777              		.size	main, .-main
 778              		.global	__aeabi_fmul
 779              		.global	__aeabi_f2iz
 780              		.section	.text.quadCountToRPM,"ax",%progbits
 781              		.align	2
 782              		.global	quadCountToRPM
 783              		.thumb
 784              		.thumb_func
 785              		.type	quadCountToRPM, %function
 786              	quadCountToRPM:
 787              	.LFB71:
 187:main.c        ****     return 0;
 188:main.c        **** }
 189:main.c        **** 
 190:main.c        **** // Calculations
 191:main.c        **** //* ========================================
 192:main.c        **** int16 quadCountToRPM(uint16 count) {
 788              		.loc 1 192 0
 789              		.cfi_startproc
 790              		@ args = 0, pretend = 0, frame = 16
 791              		@ frame_needed = 1, uses_anonymous_args = 0
 792 0000 90B5     		push	{r4, r7, lr}
 793              		.cfi_def_cfa_offset 12
 794              		.cfi_offset 4, -12
 795              		.cfi_offset 7, -8
 796              		.cfi_offset 14, -4
 797 0002 85B0     		sub	sp, sp, #20
 798              		.cfi_def_cfa_offset 32
 799 0004 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 801 0006 0346     		mov	r3, r0
 802 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 193:main.c        ****     float cps = count/57.00;
 803              		.loc 1 193 0
 804 000a FB88     		ldrh	r3, [r7, #6]
 805 000c 1846     		mov	r0, r3
 806 000e FFF7FEFF 		bl	__aeabi_i2d
 807 0012 4FF00002 		mov	r2, #0
 808 0016 0D4B     		ldr	r3, .L33
 809 0018 FFF7FEFF 		bl	__aeabi_ddiv
 810 001c 0346     		mov	r3, r0
 811 001e 0C46     		mov	r4, r1
 812 0020 1846     		mov	r0, r3
 813 0022 2146     		mov	r1, r4
 814 0024 FFF7FEFF 		bl	__aeabi_d2f
 815 0028 0346     		mov	r3, r0
 816 002a FB60     		str	r3, [r7, #12]	@ float
 194:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 19


 817              		.loc 1 194 0
 818 002c 0849     		ldr	r1, .L33+4
 819 002e F868     		ldr	r0, [r7, #12]	@ float
 820 0030 FFF7FEFF 		bl	__aeabi_fmul
 821 0034 0346     		mov	r3, r0
 822 0036 1846     		mov	r0, r3
 823 0038 FFF7FEFF 		bl	__aeabi_f2iz
 824 003c 0346     		mov	r3, r0
 825 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 195:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 196:main.c        ****     return rpm;
 826              		.loc 1 196 0
 827 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 197:main.c        ****     //usbPutString(buffer);
 198:main.c        ****     //usbPutString("rpm ");
 199:main.c        **** }
 828              		.loc 1 199 0
 829 0044 1846     		mov	r0, r3
 830 0046 1437     		adds	r7, r7, #20
 831              		.cfi_def_cfa_offset 12
 832 0048 BD46     		mov	sp, r7
 833              		.cfi_def_cfa_register 13
 834              		@ sp needed
 835 004a 90BD     		pop	{r4, r7, pc}
 836              	.L34:
 837              		.align	2
 838              	.L33:
 839 004c 00804C40 		.word	1078755328
 840 0050 00007041 		.word	1097859072
 841              		.cfi_endproc
 842              	.LFE71:
 843              		.size	quadCountToRPM, .-quadCountToRPM
 844              		.section	.text.ResetSensorFlags,"ax",%progbits
 845              		.align	2
 846              		.global	ResetSensorFlags
 847              		.thumb
 848              		.thumb_func
 849              		.type	ResetSensorFlags, %function
 850              	ResetSensorFlags:
 851              	.LFB72:
 200:main.c        **** 
 201:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 202:main.c        **** void ResetSensorFlags() {
 852              		.loc 1 202 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 0
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857 0000 80B4     		push	{r7}
 858              		.cfi_def_cfa_offset 4
 859              		.cfi_offset 7, -4
 860 0002 00AF     		add	r7, sp, #0
 861              		.cfi_def_cfa_register 7
 203:main.c        ****     s3 = 0;
 862              		.loc 1 203 0
 863 0004 074B     		ldr	r3, .L36
 864 0006 0022     		movs	r2, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 20


 865 0008 1A70     		strb	r2, [r3]
 204:main.c        ****     s4 = 0;
 866              		.loc 1 204 0
 867 000a 074B     		ldr	r3, .L36+4
 868 000c 0022     		movs	r2, #0
 869 000e 1A70     		strb	r2, [r3]
 205:main.c        ****     s5 = 0;
 870              		.loc 1 205 0
 871 0010 064B     		ldr	r3, .L36+8
 872 0012 0022     		movs	r2, #0
 873 0014 1A70     		strb	r2, [r3]
 206:main.c        ****     s6 = 0;
 874              		.loc 1 206 0
 875 0016 064B     		ldr	r3, .L36+12
 876 0018 0022     		movs	r2, #0
 877 001a 1A70     		strb	r2, [r3]
 207:main.c        **** }
 878              		.loc 1 207 0
 879 001c 00BF     		nop
 880 001e BD46     		mov	sp, r7
 881              		.cfi_def_cfa_register 13
 882              		@ sp needed
 883 0020 80BC     		pop	{r7}
 884              		.cfi_restore 7
 885              		.cfi_def_cfa_offset 0
 886 0022 7047     		bx	lr
 887              	.L37:
 888              		.align	2
 889              	.L36:
 890 0024 00000000 		.word	s3
 891 0028 00000000 		.word	s4
 892 002c 00000000 		.word	s5
 893 0030 00000000 		.word	s6
 894              		.cfi_endproc
 895              	.LFE72:
 896              		.size	ResetSensorFlags, .-ResetSensorFlags
 897              		.global	xBlocksize
 898              		.data
 899 0045 000000   		.align	2
 900              		.type	xBlocksize, %object
 901              		.size	xBlocksize, 4
 902              	xBlocksize:
 903 0048 0000E842 		.word	1122500608
 904              		.global	yBlocksize
 905              		.align	2
 906              		.type	yBlocksize, %object
 907              		.size	yBlocksize, 4
 908              	yBlocksize:
 909 004c 00009042 		.word	1116733440
 910              		.global	currentRow
 911              		.type	currentRow, %object
 912              		.size	currentRow, 1
 913              	currentRow:
 914 0050 01       		.byte	1
 915              		.global	currentCol
 916              		.type	currentCol, %object
 917              		.size	currentCol, 1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 21


 918              	currentCol:
 919 0051 01       		.byte	1
 920              		.global	stoppedAfterTurn
 921              		.bss
 922              		.type	stoppedAfterTurn, %object
 923              		.size	stoppedAfterTurn, 1
 924              	stoppedAfterTurn:
 925 0054 00       		.space	1
 926              		.global	ignoreSensor
 927              		.type	ignoreSensor, %object
 928              		.size	ignoreSensor, 1
 929              	ignoreSensor:
 930 0055 00       		.space	1
 931              		.section	.text.ForwardCourseCorrection,"ax",%progbits
 932              		.align	2
 933              		.global	ForwardCourseCorrection
 934              		.thumb
 935              		.thumb_func
 936              		.type	ForwardCourseCorrection, %function
 937              	ForwardCourseCorrection:
 938              	.LFB73:
 208:main.c        **** 
 209:main.c        **** float xBlocksize = 116; // 122 mm
 210:main.c        **** float yBlocksize = 72; // 80 mm
 211:main.c        **** uint8 currentRow = 1;
 212:main.c        **** uint8 currentCol = 1;
 213:main.c        **** 
 214:main.c        **** uint8 stoppedAfterTurn = 0;
 215:main.c        **** uint8 ignoreSensor = 0;
 216:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 217:main.c        **** 
 218:main.c        **** enum RobotMovement ForwardCourseCorrection();
 219:main.c        **** enum RobotMovement ForwardCourseCorrection() {
 939              		.loc 1 219 0
 940              		.cfi_startproc
 941              		@ args = 0, pretend = 0, frame = 0
 942              		@ frame_needed = 1, uses_anonymous_args = 0
 943              		@ link register save eliminated.
 944 0000 80B4     		push	{r7}
 945              		.cfi_def_cfa_offset 4
 946              		.cfi_offset 7, -4
 947 0002 00AF     		add	r7, sp, #0
 948              		.cfi_def_cfa_register 7
 220:main.c        ****     // if S5 and S6 are on black, move forward
 221:main.c        ****     if (!s5 && !s6) {
 949              		.loc 1 221 0
 950 0004 1C4B     		ldr	r3, .L46
 951 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 952 0008 002B     		cmp	r3, #0
 953 000a 0FD1     		bne	.L39
 954              		.loc 1 221 0 is_stmt 0 discriminator 1
 955 000c 1B4B     		ldr	r3, .L46+4
 956 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 0010 002B     		cmp	r3, #0
 958 0012 0BD1     		bne	.L39
 222:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 959              		.loc 1 222 0 is_stmt 1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 22


 960 0014 1A4B     		ldr	r3, .L46+8
 961 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0018 032B     		cmp	r3, #3
 963 001a 01D0     		beq	.L40
 223:main.c        ****             return AdjustToTheLeft;
 964              		.loc 1 223 0
 965 001c 0323     		movs	r3, #3
 966 001e 26E0     		b	.L41
 967              	.L40:
 224:main.c        ****         }
 225:main.c        ****         if (previousDirection != AdjustToTheRight) {
 968              		.loc 1 225 0
 969 0020 174B     		ldr	r3, .L46+8
 970 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 971 0024 042B     		cmp	r3, #4
 972 0026 01D0     		beq	.L39
 226:main.c        ****             return AdjustToTheRight;    
 973              		.loc 1 226 0
 974 0028 0423     		movs	r3, #4
 975 002a 20E0     		b	.L41
 976              	.L39:
 227:main.c        ****         }
 228:main.c        ****     }
 229:main.c        ****     
 230:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 231:main.c        ****     if (s5 && s6) {
 977              		.loc 1 231 0
 978 002c 124B     		ldr	r3, .L46
 979 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 980 0030 002B     		cmp	r3, #0
 981 0032 0FD0     		beq	.L42
 982              		.loc 1 231 0 is_stmt 0 discriminator 1
 983 0034 114B     		ldr	r3, .L46+4
 984 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 985 0038 002B     		cmp	r3, #0
 986 003a 0BD0     		beq	.L42
 232:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 987              		.loc 1 232 0 is_stmt 1
 988 003c 104B     		ldr	r3, .L46+8
 989 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 990 0040 032B     		cmp	r3, #3
 991 0042 01D0     		beq	.L43
 233:main.c        ****             return AdjustToTheLeft;
 992              		.loc 1 233 0
 993 0044 0323     		movs	r3, #3
 994 0046 12E0     		b	.L41
 995              	.L43:
 234:main.c        ****         }
 235:main.c        ****         if (previousDirection != AdjustToTheRight) {
 996              		.loc 1 235 0
 997 0048 0D4B     		ldr	r3, .L46+8
 998 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 004c 042B     		cmp	r3, #4
 1000 004e 01D0     		beq	.L42
 236:main.c        ****             return AdjustToTheRight;    
 1001              		.loc 1 236 0
 1002 0050 0423     		movs	r3, #4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 23


 1003 0052 0CE0     		b	.L41
 1004              	.L42:
 237:main.c        ****         }
 238:main.c        ****     }
 239:main.c        **** 
 240:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 241:main.c        ****     if (s5) {
 1005              		.loc 1 241 0
 1006 0054 084B     		ldr	r3, .L46
 1007 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1008 0058 002B     		cmp	r3, #0
 1009 005a 01D0     		beq	.L44
 242:main.c        ****         return AdjustToTheRight;    
 1010              		.loc 1 242 0
 1011 005c 0423     		movs	r3, #4
 1012 005e 06E0     		b	.L41
 1013              	.L44:
 243:main.c        ****     }
 244:main.c        ****     if (s6) {
 1014              		.loc 1 244 0
 1015 0060 064B     		ldr	r3, .L46+4
 1016 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017 0064 002B     		cmp	r3, #0
 1018 0066 01D0     		beq	.L45
 245:main.c        ****         return AdjustToTheLeft;    
 1019              		.loc 1 245 0
 1020 0068 0323     		movs	r3, #3
 1021 006a 00E0     		b	.L41
 1022              	.L45:
 246:main.c        ****     }
 247:main.c        ****    
 248:main.c        ****     // We should never actually get to this point
 249:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 250:main.c        ****     return Stop;
 1023              		.loc 1 250 0
 1024 006c 0523     		movs	r3, #5
 1025              	.L41:
 251:main.c        **** }
 1026              		.loc 1 251 0
 1027 006e 1846     		mov	r0, r3
 1028 0070 BD46     		mov	sp, r7
 1029              		.cfi_def_cfa_register 13
 1030              		@ sp needed
 1031 0072 80BC     		pop	{r7}
 1032              		.cfi_restore 7
 1033              		.cfi_def_cfa_offset 0
 1034 0074 7047     		bx	lr
 1035              	.L47:
 1036 0076 00BF     		.align	2
 1037              	.L46:
 1038 0078 00000000 		.word	s5
 1039 007c 00000000 		.word	s6
 1040 0080 00000000 		.word	previousDirection
 1041              		.cfi_endproc
 1042              	.LFE73:
 1043              		.size	ForwardCourseCorrection, .-ForwardCourseCorrection
 1044              		.global	lastDirectionAfter180
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 24


 1045              		.data
 1046              		.type	lastDirectionAfter180, %object
 1047              		.size	lastDirectionAfter180, 1
 1048              	lastDirectionAfter180:
 1049 0052 06       		.byte	6
 1050              		.section	.text.SpinCourseCorrection,"ax",%progbits
 1051              		.align	2
 1052              		.global	SpinCourseCorrection
 1053              		.thumb
 1054              		.thumb_func
 1055              		.type	SpinCourseCorrection, %function
 1056              	SpinCourseCorrection:
 1057              	.LFB74:
 252:main.c        **** 
 253:main.c        **** enum RobotMovement SpinCourseCorrection();
 254:main.c        **** 
 255:main.c        **** enum RobotMovement lastDirectionAfter180 = Unknown;
 256:main.c        **** 
 257:main.c        **** enum RobotMovement SpinCourseCorrection() {
 1058              		.loc 1 257 0
 1059              		.cfi_startproc
 1060              		@ args = 0, pretend = 0, frame = 0
 1061              		@ frame_needed = 1, uses_anonymous_args = 0
 1062              		@ link register save eliminated.
 1063 0000 80B4     		push	{r7}
 1064              		.cfi_def_cfa_offset 4
 1065              		.cfi_offset 7, -4
 1066 0002 00AF     		add	r7, sp, #0
 1067              		.cfi_def_cfa_register 7
 258:main.c        ****     // Set first iteration flag.
 259:main.c        ****     if (!spinCourseCorrectionStarted) {
 1068              		.loc 1 259 0
 1069 0004 184B     		ldr	r3, .L55
 1070 0006 1B78     		ldrb	r3, [r3]
 1071 0008 DBB2     		uxtb	r3, r3
 1072 000a 002B     		cmp	r3, #0
 1073 000c 06D1     		bne	.L49
 260:main.c        ****         spinCourseCorrectionStarted = 1;    
 1074              		.loc 1 260 0
 1075 000e 164B     		ldr	r3, .L55
 1076 0010 0122     		movs	r2, #1
 1077 0012 1A70     		strb	r2, [r3]
 261:main.c        ****         lastDirectionAfter180 = currentDirection;
 1078              		.loc 1 261 0
 1079 0014 154B     		ldr	r3, .L55+4
 1080 0016 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1081 0018 154B     		ldr	r3, .L55+8
 1082 001a 1A70     		strb	r2, [r3]
 1083              	.L49:
 262:main.c        ****     }
 263:main.c        ****     
 264:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 265:main.c        ****     if (s5 && s6) {
 1084              		.loc 1 265 0
 1085 001c 154B     		ldr	r3, .L55+12
 1086 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1087 0020 002B     		cmp	r3, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 25


 1088 0022 0FD0     		beq	.L50
 1089              		.loc 1 265 0 is_stmt 0 discriminator 1
 1090 0024 144B     		ldr	r3, .L55+16
 1091 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1092 0028 002B     		cmp	r3, #0
 1093 002a 0BD0     		beq	.L50
 266:main.c        ****         if (lastDirectionAfter180 != TurnLeft) {
 1094              		.loc 1 266 0 is_stmt 1
 1095 002c 104B     		ldr	r3, .L55+8
 1096 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1097 0030 022B     		cmp	r3, #2
 1098 0032 01D0     		beq	.L51
 267:main.c        ****             return TurnLeft;
 1099              		.loc 1 267 0
 1100 0034 0223     		movs	r3, #2
 1101 0036 12E0     		b	.L52
 1102              	.L51:
 268:main.c        ****         }
 269:main.c        ****         if (lastDirectionAfter180 != TurnRight) {
 1103              		.loc 1 269 0
 1104 0038 0D4B     		ldr	r3, .L55+8
 1105 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1106 003c 012B     		cmp	r3, #1
 1107 003e 01D0     		beq	.L50
 270:main.c        ****             return TurnRight;    
 1108              		.loc 1 270 0
 1109 0040 0123     		movs	r3, #1
 1110 0042 0CE0     		b	.L52
 1111              	.L50:
 271:main.c        ****         }
 272:main.c        ****     }
 273:main.c        **** 
 274:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 275:main.c        ****     if (s5) {
 1112              		.loc 1 275 0
 1113 0044 0B4B     		ldr	r3, .L55+12
 1114 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 0048 002B     		cmp	r3, #0
 1116 004a 01D0     		beq	.L53
 276:main.c        ****         return TurnRight;    
 1117              		.loc 1 276 0
 1118 004c 0123     		movs	r3, #1
 1119 004e 06E0     		b	.L52
 1120              	.L53:
 277:main.c        ****     }
 278:main.c        ****     if (s6) {
 1121              		.loc 1 278 0
 1122 0050 094B     		ldr	r3, .L55+16
 1123 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1124 0054 002B     		cmp	r3, #0
 1125 0056 01D0     		beq	.L54
 279:main.c        ****         return TurnLeft;    
 1126              		.loc 1 279 0
 1127 0058 0223     		movs	r3, #2
 1128 005a 00E0     		b	.L52
 1129              	.L54:
 280:main.c        ****     }
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 26


 281:main.c        ****    
 282:main.c        ****     // We should never actually get to this point
 283:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 284:main.c        ****     return Stop;
 1130              		.loc 1 284 0
 1131 005c 0523     		movs	r3, #5
 1132              	.L52:
 285:main.c        **** }
 1133              		.loc 1 285 0
 1134 005e 1846     		mov	r0, r3
 1135 0060 BD46     		mov	sp, r7
 1136              		.cfi_def_cfa_register 13
 1137              		@ sp needed
 1138 0062 80BC     		pop	{r7}
 1139              		.cfi_restore 7
 1140              		.cfi_def_cfa_offset 0
 1141 0064 7047     		bx	lr
 1142              	.L56:
 1143 0066 00BF     		.align	2
 1144              	.L55:
 1145 0068 3D000000 		.word	spinCourseCorrectionStarted
 1146 006c 00000000 		.word	currentDirection
 1147 0070 00000000 		.word	lastDirectionAfter180
 1148 0074 00000000 		.word	s5
 1149 0078 00000000 		.word	s6
 1150              		.cfi_endproc
 1151              	.LFE74:
 1152              		.size	SpinCourseCorrection, .-SpinCourseCorrection
 1153              		.section	.text.SpinTurnCourseCorrection,"ax",%progbits
 1154              		.align	2
 1155              		.global	SpinTurnCourseCorrection
 1156              		.thumb
 1157              		.thumb_func
 1158              		.type	SpinTurnCourseCorrection, %function
 1159              	SpinTurnCourseCorrection:
 1160              	.LFB75:
 286:main.c        **** enum RobotMovement SpinTurnCourseCorrection();
 287:main.c        **** enum RobotMovement SpinTurnCourseCorrection() {
 1161              		.loc 1 287 0
 1162              		.cfi_startproc
 1163              		@ args = 0, pretend = 0, frame = 0
 1164              		@ frame_needed = 1, uses_anonymous_args = 0
 1165              		@ link register save eliminated.
 1166 0000 80B4     		push	{r7}
 1167              		.cfi_def_cfa_offset 4
 1168              		.cfi_offset 7, -4
 1169 0002 00AF     		add	r7, sp, #0
 1170              		.cfi_def_cfa_register 7
 288:main.c        ****     // if S5 and S6 are on black, move forward
 289:main.c        ****     if (!s5 && !s6) {
 1171              		.loc 1 289 0
 1172 0004 1C4B     		ldr	r3, .L65
 1173 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1174 0008 002B     		cmp	r3, #0
 1175 000a 0FD1     		bne	.L58
 1176              		.loc 1 289 0 is_stmt 0 discriminator 1
 1177 000c 1B4B     		ldr	r3, .L65+4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 27


 1178 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1179 0010 002B     		cmp	r3, #0
 1180 0012 0BD1     		bne	.L58
 290:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 1181              		.loc 1 290 0 is_stmt 1
 1182 0014 1A4B     		ldr	r3, .L65+8
 1183 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1184 0018 032B     		cmp	r3, #3
 1185 001a 01D0     		beq	.L59
 291:main.c        ****             return TurnLeft;
 1186              		.loc 1 291 0
 1187 001c 0223     		movs	r3, #2
 1188 001e 26E0     		b	.L60
 1189              	.L59:
 292:main.c        ****         }
 293:main.c        ****         if (previousDirection != AdjustToTheRight) {
 1190              		.loc 1 293 0
 1191 0020 174B     		ldr	r3, .L65+8
 1192 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1193 0024 042B     		cmp	r3, #4
 1194 0026 01D0     		beq	.L58
 294:main.c        ****             return TurnRight;    
 1195              		.loc 1 294 0
 1196 0028 0123     		movs	r3, #1
 1197 002a 20E0     		b	.L60
 1198              	.L58:
 295:main.c        ****         }
 296:main.c        ****     }
 297:main.c        ****     
 298:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 299:main.c        ****     if (s5 && s6) {
 1199              		.loc 1 299 0
 1200 002c 124B     		ldr	r3, .L65
 1201 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1202 0030 002B     		cmp	r3, #0
 1203 0032 0FD0     		beq	.L61
 1204              		.loc 1 299 0 is_stmt 0 discriminator 1
 1205 0034 114B     		ldr	r3, .L65+4
 1206 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1207 0038 002B     		cmp	r3, #0
 1208 003a 0BD0     		beq	.L61
 300:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 1209              		.loc 1 300 0 is_stmt 1
 1210 003c 104B     		ldr	r3, .L65+8
 1211 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1212 0040 032B     		cmp	r3, #3
 1213 0042 01D0     		beq	.L62
 301:main.c        ****             return TurnLeft;
 1214              		.loc 1 301 0
 1215 0044 0223     		movs	r3, #2
 1216 0046 12E0     		b	.L60
 1217              	.L62:
 302:main.c        ****         }
 303:main.c        ****         if (previousDirection != AdjustToTheRight) {
 1218              		.loc 1 303 0
 1219 0048 0D4B     		ldr	r3, .L65+8
 1220 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 28


 1221 004c 042B     		cmp	r3, #4
 1222 004e 01D0     		beq	.L61
 304:main.c        ****             return TurnRight;    
 1223              		.loc 1 304 0
 1224 0050 0123     		movs	r3, #1
 1225 0052 0CE0     		b	.L60
 1226              	.L61:
 305:main.c        ****         }
 306:main.c        ****     }
 307:main.c        **** 
 308:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 309:main.c        ****     if (s5) {
 1227              		.loc 1 309 0
 1228 0054 084B     		ldr	r3, .L65
 1229 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1230 0058 002B     		cmp	r3, #0
 1231 005a 01D0     		beq	.L63
 310:main.c        ****         return TurnRight;    
 1232              		.loc 1 310 0
 1233 005c 0123     		movs	r3, #1
 1234 005e 06E0     		b	.L60
 1235              	.L63:
 311:main.c        ****     }
 312:main.c        ****     if (s6) {
 1236              		.loc 1 312 0
 1237 0060 064B     		ldr	r3, .L65+4
 1238 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1239 0064 002B     		cmp	r3, #0
 1240 0066 01D0     		beq	.L64
 313:main.c        ****         return TurnLeft;    
 1241              		.loc 1 313 0
 1242 0068 0223     		movs	r3, #2
 1243 006a 00E0     		b	.L60
 1244              	.L64:
 314:main.c        ****     }
 315:main.c        ****    
 316:main.c        ****     // We should never actually get to this point
 317:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 318:main.c        ****     return Stop;
 1245              		.loc 1 318 0
 1246 006c 0523     		movs	r3, #5
 1247              	.L60:
 319:main.c        **** }
 1248              		.loc 1 319 0
 1249 006e 1846     		mov	r0, r3
 1250 0070 BD46     		mov	sp, r7
 1251              		.cfi_def_cfa_register 13
 1252              		@ sp needed
 1253 0072 80BC     		pop	{r7}
 1254              		.cfi_restore 7
 1255              		.cfi_def_cfa_offset 0
 1256 0074 7047     		bx	lr
 1257              	.L66:
 1258 0076 00BF     		.align	2
 1259              	.L65:
 1260 0078 00000000 		.word	s5
 1261 007c 00000000 		.word	s6
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 29


 1262 0080 00000000 		.word	previousDirection
 1263              		.cfi_endproc
 1264              	.LFE75:
 1265              		.size	SpinTurnCourseCorrection, .-SpinTurnCourseCorrection
 1266              		.global	firstTurnIteration
 1267              		.bss
 1268              		.type	firstTurnIteration, %object
 1269              		.size	firstTurnIteration, 1
 1270              	firstTurnIteration:
 1271 0056 00       		.space	1
 1272              	forwardAfterTurnLIgnore:
 1273 0057 00       		.space	1
 1274              	forwardAfterTurnRIgnore:
 1275 0058 00       		.space	1
 1276              		.global	__aeabi_i2f
 1277              		.global	__aeabi_fcmpge
 1278              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 1279              		.align	2
 1280              		.global	GetMovementAccordingToInstruction
 1281              		.thumb
 1282              		.thumb_func
 1283              		.type	GetMovementAccordingToInstruction, %function
 1284              	GetMovementAccordingToInstruction:
 1285              	.LFB76:
 320:main.c        **** 
 321:main.c        **** uint8 firstTurnIteration = 0;
 322:main.c        **** volatile static uint8 forwardAfterTurnLIgnore = 0;
 323:main.c        **** volatile static uint8 forwardAfterTurnRIgnore = 0;
 324:main.c        **** 
 325:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 1286              		.loc 1 325 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 40
 1289              		@ frame_needed = 1, uses_anonymous_args = 0
 1290 0000 B0B5     		push	{r4, r5, r7, lr}
 1291              		.cfi_def_cfa_offset 16
 1292              		.cfi_offset 4, -16
 1293              		.cfi_offset 5, -12
 1294              		.cfi_offset 7, -8
 1295              		.cfi_offset 14, -4
 1296 0002 8AB0     		sub	sp, sp, #40
 1297              		.cfi_def_cfa_offset 56
 1298 0004 00AF     		add	r7, sp, #0
 1299              		.cfi_def_cfa_register 7
 326:main.c        ****     float blocksize;
 327:main.c        ****     if(currentInstruction.expectedOrientation == Up || currentInstruction.expectedOrientation == Do
 1300              		.loc 1 327 0
 1301 0006 954B     		ldr	r3, .L141
 1302 0008 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1303 000a 002B     		cmp	r3, #0
 1304 000c 03D0     		beq	.L68
 1305              		.loc 1 327 0 is_stmt 0 discriminator 1
 1306 000e 934B     		ldr	r3, .L141
 1307 0010 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1308 0012 012B     		cmp	r3, #1
 1309 0014 03D1     		bne	.L69
 1310              	.L68:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 30


 328:main.c        ****         blocksize = yBlocksize;
 1311              		.loc 1 328 0 is_stmt 1
 1312 0016 924B     		ldr	r3, .L141+4
 1313 0018 1B68     		ldr	r3, [r3]	@ float
 1314 001a 7B62     		str	r3, [r7, #36]	@ float
 1315 001c 02E0     		b	.L70
 1316              	.L69:
 329:main.c        ****     } else {
 330:main.c        ****         blocksize = xBlocksize;
 1317              		.loc 1 330 0
 1318 001e 914B     		ldr	r3, .L141+8
 1319 0020 1B68     		ldr	r3, [r3]	@ float
 1320 0022 7B62     		str	r3, [r7, #36]	@ float
 1321              	.L70:
 331:main.c        ****     }
 332:main.c        ****     
 333:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 334:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 335:main.c        ****         // OR an EVENT happens in the current instruction
 336:main.c        ****         // e.g. CurrentInstruction: GoForward 
 337:main.c        ****         //      S3 on BLACK
 338:main.c        ****         //      Check Ignore Count
 339:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 340:main.c        ****     
 341:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 1322              		.loc 1 341 0
 1323 0024 8D4B     		ldr	r3, .L141
 1324 0026 1B78     		ldrb	r3, [r3]
 1325 0028 87F82330 		strb	r3, [r7, #35]
 342:main.c        ****     
 343:main.c        ****     /*
 344:main.c        ****     if (instructionList[instructionIndex + 1].direction == uTurn && currentInstructionDirection == 
 345:main.c        ****         if (s5 && s6) {
 346:main.c        ****             MoveToNextInstruction(); // case to start uTurns when needed. prevents uTurn overshooti
 347:main.c        ****             return Stop;
 348:main.c        ****         }
 349:main.c        ****     }
 350:main.c        ****     */
 351:main.c        ****     
 352:main.c        ****     switch (currentInstructionDirection) {
 1326              		.loc 1 352 0
 1327 002c 97F82330 		ldrb	r3, [r7, #35]	@ zero_extendqisi2
 1328 0030 052B     		cmp	r3, #5
 1329 0032 00F27283 		bhi	.L71
 1330 0036 01A2     		adr	r2, .L73
 1331 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1332              		.p2align 2
 1333              	.L73:
 1334 003c 55000000 		.word	.L72+1
 1335 0040 B7010000 		.word	.L74+1
 1336 0044 2D030000 		.word	.L75+1
 1337 0048 89060000 		.word	.L76+1
 1338 004c 59040000 		.word	.L77+1
 1339 0050 C9050000 		.word	.L78+1
 1340              		.p2align 1
 1341              	.L72:
 353:main.c        ****         case GoForward:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 31


 354:main.c        ****             if(currentDirection == Stop) {
 1342              		.loc 1 354 0
 1343 0054 844B     		ldr	r3, .L141+12
 1344 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1345 0058 052B     		cmp	r3, #5
 1346 005a 08D1     		bne	.L79
 355:main.c        ****                 if(stopBuffer <= 25) {
 1347              		.loc 1 355 0
 1348 005c 834B     		ldr	r3, .L141+16
 1349 005e 1B68     		ldr	r3, [r3]
 1350 0060 192B     		cmp	r3, #25
 1351 0062 01D8     		bhi	.L80
 356:main.c        ****                     return Stop;
 1352              		.loc 1 356 0
 1353 0064 0523     		movs	r3, #5
 1354 0066 59E3     		b	.L81
 1355              	.L80:
 357:main.c        ****                 } else {
 358:main.c        ****                     stopBuffer = 100;
 1356              		.loc 1 358 0
 1357 0068 804B     		ldr	r3, .L141+16
 1358 006a 6422     		movs	r2, #100
 1359 006c 1A60     		str	r2, [r3]
 1360              	.L79:
 359:main.c        ****                 }
 360:main.c        ****             }
 361:main.c        ****             if (s3) {
 1361              		.loc 1 361 0
 1362 006e 804B     		ldr	r3, .L141+20
 1363 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1364 0072 002B     		cmp	r3, #0
 1365 0074 02D0     		beq	.L82
 362:main.c        ****                 leftStatusFlag = 1;
 1366              		.loc 1 362 0
 1367 0076 7F4B     		ldr	r3, .L141+24
 1368 0078 0122     		movs	r2, #1
 1369 007a 1A70     		strb	r2, [r3]
 1370              	.L82:
 363:main.c        ****             }
 364:main.c        ****             
 365:main.c        ****             if (s4) {
 1371              		.loc 1 365 0
 1372 007c 7E4B     		ldr	r3, .L141+28
 1373 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1374 0080 002B     		cmp	r3, #0
 1375 0082 02D0     		beq	.L83
 366:main.c        ****                 rightStatusFlag = 1;
 1376              		.loc 1 366 0
 1377 0084 7D4B     		ldr	r3, .L141+32
 1378 0086 0122     		movs	r2, #1
 1379 0088 1A70     		strb	r2, [r3]
 1380              	.L83:
 367:main.c        ****             }
 368:main.c        ****             
 369:main.c        ****             
 370:main.c        ****             // LEFT WING CHECK =-=-=-=-=-=-=-=-=-=-=
 371:main.c        ****             if (leftStatusFlag) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 32


 1381              		.loc 1 371 0
 1382 008a 7A4B     		ldr	r3, .L141+24
 1383 008c 1B78     		ldrb	r3, [r3]
 1384 008e DBB2     		uxtb	r3, r3
 1385 0090 002B     		cmp	r3, #0
 1386 0092 38D0     		beq	.L84
 372:main.c        ****                 if (!s3) {
 1387              		.loc 1 372 0
 1388 0094 764B     		ldr	r3, .L141+20
 1389 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1390 0098 002B     		cmp	r3, #0
 1391 009a 34D1     		bne	.L84
 373:main.c        ****                     leftStatusFlag = 0;    
 1392              		.loc 1 373 0
 1393 009c 754B     		ldr	r3, .L141+24
 1394 009e 0022     		movs	r2, #0
 1395 00a0 1A70     		strb	r2, [r3]
 374:main.c        ****                     if (currentIgnoreR != 0 && forwardAfterTurnLIgnore > 0) {
 1396              		.loc 1 374 0
 1397 00a2 774B     		ldr	r3, .L141+36
 1398 00a4 1B78     		ldrb	r3, [r3]
 1399 00a6 DBB2     		uxtb	r3, r3
 1400 00a8 002B     		cmp	r3, #0
 1401 00aa 0CD0     		beq	.L85
 1402              		.loc 1 374 0 is_stmt 0 discriminator 1
 1403 00ac 754B     		ldr	r3, .L141+40
 1404 00ae 1B78     		ldrb	r3, [r3]
 1405 00b0 DBB2     		uxtb	r3, r3
 1406 00b2 002B     		cmp	r3, #0
 1407 00b4 07D0     		beq	.L85
 375:main.c        ****                         forwardAfterTurnLIgnore--;
 1408              		.loc 1 375 0 is_stmt 1
 1409 00b6 734B     		ldr	r3, .L141+40
 1410 00b8 1B78     		ldrb	r3, [r3]
 1411 00ba DBB2     		uxtb	r3, r3
 1412 00bc 013B     		subs	r3, r3, #1
 1413 00be DAB2     		uxtb	r2, r3
 1414 00c0 704B     		ldr	r3, .L141+40
 1415 00c2 1A70     		strb	r2, [r3]
 1416 00c4 1FE0     		b	.L84
 1417              	.L85:
 376:main.c        ****                     } else {
 377:main.c        ****                         if (currentIgnoreL == 0) {
 1418              		.loc 1 377 0
 1419 00c6 704B     		ldr	r3, .L141+44
 1420 00c8 1B78     		ldrb	r3, [r3]
 1421 00ca DBB2     		uxtb	r3, r3
 1422 00cc 002B     		cmp	r3, #0
 1423 00ce 0ED1     		bne	.L86
 378:main.c        ****                             if (forwardAfterTurnLIgnore > 0) {
 1424              		.loc 1 378 0
 1425 00d0 6C4B     		ldr	r3, .L141+40
 1426 00d2 1B78     		ldrb	r3, [r3]
 1427 00d4 DBB2     		uxtb	r3, r3
 1428 00d6 002B     		cmp	r3, #0
 1429 00d8 07D0     		beq	.L87
 379:main.c        ****                                 forwardAfterTurnLIgnore--;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 33


 1430              		.loc 1 379 0
 1431 00da 6A4B     		ldr	r3, .L141+40
 1432 00dc 1B78     		ldrb	r3, [r3]
 1433 00de DBB2     		uxtb	r3, r3
 1434 00e0 013B     		subs	r3, r3, #1
 1435 00e2 DAB2     		uxtb	r2, r3
 1436 00e4 674B     		ldr	r3, .L141+40
 1437 00e6 1A70     		strb	r2, [r3]
 1438 00e8 01E0     		b	.L86
 1439              	.L87:
 380:main.c        ****                             } else {
 381:main.c        ****                                 //MoveToNextInstruction();
 382:main.c        ****                                 return Stop;
 1440              		.loc 1 382 0
 1441 00ea 0523     		movs	r3, #5
 1442 00ec 16E3     		b	.L81
 1443              	.L86:
 383:main.c        ****                             }
 384:main.c        ****                         }
 385:main.c        ****                         if (currentIgnoreL > 0) {
 1444              		.loc 1 385 0
 1445 00ee 664B     		ldr	r3, .L141+44
 1446 00f0 1B78     		ldrb	r3, [r3]
 1447 00f2 DBB2     		uxtb	r3, r3
 1448 00f4 002B     		cmp	r3, #0
 1449 00f6 06D0     		beq	.L84
 386:main.c        ****                             currentIgnoreL--;    
 1450              		.loc 1 386 0
 1451 00f8 634B     		ldr	r3, .L141+44
 1452 00fa 1B78     		ldrb	r3, [r3]
 1453 00fc DBB2     		uxtb	r3, r3
 1454 00fe 013B     		subs	r3, r3, #1
 1455 0100 DAB2     		uxtb	r2, r3
 1456 0102 614B     		ldr	r3, .L141+44
 1457 0104 1A70     		strb	r2, [r3]
 1458              	.L84:
 387:main.c        ****                         }
 388:main.c        ****                     }
 389:main.c        ****                 }
 390:main.c        ****             }
 391:main.c        ****             // RIGHT WING CHECK =-=-=-=-=-=-=-=-=-=-=
 392:main.c        ****             if (rightStatusFlag) {
 1459              		.loc 1 392 0
 1460 0106 5D4B     		ldr	r3, .L141+32
 1461 0108 1B78     		ldrb	r3, [r3]
 1462 010a DBB2     		uxtb	r3, r3
 1463 010c 002B     		cmp	r3, #0
 1464 010e 38D0     		beq	.L88
 393:main.c        ****                 if (!s4) {
 1465              		.loc 1 393 0
 1466 0110 594B     		ldr	r3, .L141+28
 1467 0112 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1468 0114 002B     		cmp	r3, #0
 1469 0116 34D1     		bne	.L88
 394:main.c        ****                     rightStatusFlag = 0;           
 1470              		.loc 1 394 0
 1471 0118 584B     		ldr	r3, .L141+32
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 34


 1472 011a 0022     		movs	r2, #0
 1473 011c 1A70     		strb	r2, [r3]
 395:main.c        ****                     if (currentIgnoreR != 0 && forwardAfterTurnRIgnore > 0) {
 1474              		.loc 1 395 0
 1475 011e 584B     		ldr	r3, .L141+36
 1476 0120 1B78     		ldrb	r3, [r3]
 1477 0122 DBB2     		uxtb	r3, r3
 1478 0124 002B     		cmp	r3, #0
 1479 0126 0CD0     		beq	.L89
 1480              		.loc 1 395 0 is_stmt 0 discriminator 1
 1481 0128 584B     		ldr	r3, .L141+48
 1482 012a 1B78     		ldrb	r3, [r3]
 1483 012c DBB2     		uxtb	r3, r3
 1484 012e 002B     		cmp	r3, #0
 1485 0130 07D0     		beq	.L89
 396:main.c        ****                         forwardAfterTurnRIgnore--;
 1486              		.loc 1 396 0 is_stmt 1
 1487 0132 564B     		ldr	r3, .L141+48
 1488 0134 1B78     		ldrb	r3, [r3]
 1489 0136 DBB2     		uxtb	r3, r3
 1490 0138 013B     		subs	r3, r3, #1
 1491 013a DAB2     		uxtb	r2, r3
 1492 013c 534B     		ldr	r3, .L141+48
 1493 013e 1A70     		strb	r2, [r3]
 1494 0140 1FE0     		b	.L88
 1495              	.L89:
 397:main.c        ****                     } else {
 398:main.c        ****                         if (currentIgnoreR == 0) {
 1496              		.loc 1 398 0
 1497 0142 4F4B     		ldr	r3, .L141+36
 1498 0144 1B78     		ldrb	r3, [r3]
 1499 0146 DBB2     		uxtb	r3, r3
 1500 0148 002B     		cmp	r3, #0
 1501 014a 0ED1     		bne	.L90
 399:main.c        ****                             if (forwardAfterTurnRIgnore > 0) {
 1502              		.loc 1 399 0
 1503 014c 4F4B     		ldr	r3, .L141+48
 1504 014e 1B78     		ldrb	r3, [r3]
 1505 0150 DBB2     		uxtb	r3, r3
 1506 0152 002B     		cmp	r3, #0
 1507 0154 07D0     		beq	.L91
 400:main.c        ****                                 forwardAfterTurnRIgnore--;
 1508              		.loc 1 400 0
 1509 0156 4D4B     		ldr	r3, .L141+48
 1510 0158 1B78     		ldrb	r3, [r3]
 1511 015a DBB2     		uxtb	r3, r3
 1512 015c 013B     		subs	r3, r3, #1
 1513 015e DAB2     		uxtb	r2, r3
 1514 0160 4A4B     		ldr	r3, .L141+48
 1515 0162 1A70     		strb	r2, [r3]
 1516 0164 01E0     		b	.L90
 1517              	.L91:
 401:main.c        ****                             } else {
 402:main.c        ****                                 //MoveToNextInstruction();
 403:main.c        ****                                 return Stop;
 1518              		.loc 1 403 0
 1519 0166 0523     		movs	r3, #5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 35


 1520 0168 D8E2     		b	.L81
 1521              	.L90:
 404:main.c        ****                             }
 405:main.c        ****                         }
 406:main.c        ****                         if (currentIgnoreR > 0) {
 1522              		.loc 1 406 0
 1523 016a 454B     		ldr	r3, .L141+36
 1524 016c 1B78     		ldrb	r3, [r3]
 1525 016e DBB2     		uxtb	r3, r3
 1526 0170 002B     		cmp	r3, #0
 1527 0172 06D0     		beq	.L88
 407:main.c        ****                             currentIgnoreR--;   
 1528              		.loc 1 407 0
 1529 0174 424B     		ldr	r3, .L141+36
 1530 0176 1B78     		ldrb	r3, [r3]
 1531 0178 DBB2     		uxtb	r3, r3
 1532 017a 013B     		subs	r3, r3, #1
 1533 017c DAB2     		uxtb	r2, r3
 1534 017e 404B     		ldr	r3, .L141+36
 1535 0180 1A70     		strb	r2, [r3]
 1536              	.L88:
 408:main.c        ****                         }
 409:main.c        ****                     }
 410:main.c        ****                     
 411:main.c        ****                 }
 412:main.c        ****                    
 413:main.c        ****             }
 414:main.c        ****             
 415:main.c        ****             if (currentIgnoreL == 0 || currentIgnoreR == 0) {
 1537              		.loc 1 415 0
 1538 0182 414B     		ldr	r3, .L141+44
 1539 0184 1B78     		ldrb	r3, [r3]
 1540 0186 DBB2     		uxtb	r3, r3
 1541 0188 002B     		cmp	r3, #0
 1542 018a 04D0     		beq	.L92
 1543              		.loc 1 415 0 is_stmt 0 discriminator 1
 1544 018c 3C4B     		ldr	r3, .L141+36
 1545 018e 1B78     		ldrb	r3, [r3]
 1546 0190 DBB2     		uxtb	r3, r3
 1547 0192 002B     		cmp	r3, #0
 1548 0194 0BD1     		bne	.L93
 1549              	.L92:
 416:main.c        ****                 if (forwardAfterTurnLIgnore == 0 || forwardAfterTurnRIgnore == 0) {
 1550              		.loc 1 416 0 is_stmt 1
 1551 0196 3B4B     		ldr	r3, .L141+40
 1552 0198 1B78     		ldrb	r3, [r3]
 1553 019a DBB2     		uxtb	r3, r3
 1554 019c 002B     		cmp	r3, #0
 1555 019e 04D0     		beq	.L94
 1556              		.loc 1 416 0 is_stmt 0 discriminator 1
 1557 01a0 3A4B     		ldr	r3, .L141+48
 1558 01a2 1B78     		ldrb	r3, [r3]
 1559 01a4 DBB2     		uxtb	r3, r3
 1560 01a6 002B     		cmp	r3, #0
 1561 01a8 01D1     		bne	.L93
 1562              	.L94:
 417:main.c        ****                     MoveToNextInstruction();                    
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 36


 1563              		.loc 1 417 0 is_stmt 1
 1564 01aa FFF7FEFF 		bl	MoveToNextInstruction
 1565              	.L93:
 418:main.c        ****                 }
 419:main.c        ****             }
 420:main.c        ****           
 421:main.c        ****             return ForwardCourseCorrection();
 1566              		.loc 1 421 0
 1567 01ae FFF7FEFF 		bl	ForwardCourseCorrection
 1568 01b2 0346     		mov	r3, r0
 1569 01b4 B2E2     		b	.L81
 1570              	.L74:
 422:main.c        ****             break;
 423:main.c        ****         case waitForLeftTurn:
 424:main.c        ****             // continue moving forward until s3 goes on black
 425:main.c        ****             // if we are turning left already
 426:main.c        ****                 // wait until s5 || s6 are on black
 427:main.c        ****                 // return stop
 428:main.c        ****             if (!firstTurnIteration) {
 1571              		.loc 1 428 0
 1572 01b6 364B     		ldr	r3, .L141+52
 1573 01b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1574 01ba 002B     		cmp	r3, #0
 1575 01bc 08D1     		bne	.L95
 429:main.c        ****                 
 430:main.c        ****                 if (!s3) {
 1576              		.loc 1 430 0
 1577 01be 2C4B     		ldr	r3, .L141+20
 1578 01c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1579 01c2 002B     		cmp	r3, #0
 1580 01c4 04D1     		bne	.L95
 431:main.c        ****                     firstTurnIteration = 1;
 1581              		.loc 1 431 0
 1582 01c6 324B     		ldr	r3, .L141+52
 1583 01c8 0122     		movs	r2, #1
 1584 01ca 1A70     		strb	r2, [r3]
 432:main.c        ****                     return Stop;    
 1585              		.loc 1 432 0
 1586 01cc 0523     		movs	r3, #5
 1587 01ce A5E2     		b	.L81
 1588              	.L95:
 433:main.c        ****                 }
 434:main.c        ****                 if (s3) {
 435:main.c        ****                     //return Backward;    
 436:main.c        ****                 }
 437:main.c        ****             }
 438:main.c        ****             
 439:main.c        ****             if (turnFinishedFlag) {
 1589              		.loc 1 439 0
 1590 01d0 304B     		ldr	r3, .L141+56
 1591 01d2 1B78     		ldrb	r3, [r3]
 1592 01d4 DBB2     		uxtb	r3, r3
 1593 01d6 002B     		cmp	r3, #0
 1594 01d8 31D0     		beq	.L97
 440:main.c        ****                 if (!s3 && !s5 && !s6) {
 1595              		.loc 1 440 0
 1596 01da 254B     		ldr	r3, .L141+20
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 37


 1597 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1598 01de 002B     		cmp	r3, #0
 1599 01e0 0BD1     		bne	.L98
 1600              		.loc 1 440 0 is_stmt 0 discriminator 1
 1601 01e2 2D4B     		ldr	r3, .L141+60
 1602 01e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1603 01e6 002B     		cmp	r3, #0
 1604 01e8 07D1     		bne	.L98
 1605              		.loc 1 440 0 discriminator 2
 1606 01ea 2C4B     		ldr	r3, .L141+64
 1607 01ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1608 01ee 002B     		cmp	r3, #0
 1609 01f0 03D1     		bne	.L98
 441:main.c        ****                     // we are correctly on the line so go forward until S4 on white
 442:main.c        ****                     return ForwardCourseCorrection();
 1610              		.loc 1 442 0 is_stmt 1
 1611 01f2 FFF7FEFF 		bl	ForwardCourseCorrection
 1612 01f6 0346     		mov	r3, r0
 1613 01f8 90E2     		b	.L81
 1614              	.L98:
 443:main.c        ****                 }
 444:main.c        ****                 if (s5 || s6) {
 1615              		.loc 1 444 0
 1616 01fa 274B     		ldr	r3, .L141+60
 1617 01fc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1618 01fe 002B     		cmp	r3, #0
 1619 0200 03D1     		bne	.L99
 1620              		.loc 1 444 0 is_stmt 0 discriminator 1
 1621 0202 264B     		ldr	r3, .L141+64
 1622 0204 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1623 0206 002B     		cmp	r3, #0
 1624 0208 03D0     		beq	.L100
 1625              	.L99:
 445:main.c        ****                     return SpinCourseCorrection();
 1626              		.loc 1 445 0 is_stmt 1
 1627 020a FFF7FEFF 		bl	SpinCourseCorrection
 1628 020e 0346     		mov	r3, r0
 1629 0210 84E2     		b	.L81
 1630              	.L100:
 446:main.c        ****                 }
 447:main.c        ****                 if (forwardBuffer <= 10) {
 1631              		.loc 1 447 0
 1632 0212 234B     		ldr	r3, .L141+68
 1633 0214 1B88     		ldrh	r3, [r3]
 1634 0216 0A2B     		cmp	r3, #10
 1635 0218 03D8     		bhi	.L101
 448:main.c        ****                     return ForwardCourseCorrection();    
 1636              		.loc 1 448 0
 1637 021a FFF7FEFF 		bl	ForwardCourseCorrection
 1638 021e 0346     		mov	r3, r0
 1639 0220 7CE2     		b	.L81
 1640              	.L101:
 449:main.c        **** 
 450:main.c        ****                 } else {
 451:main.c        ****                     forwardBuffer = 100;
 1641              		.loc 1 451 0
 1642 0222 1F4B     		ldr	r3, .L141+68
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 38


 1643 0224 6422     		movs	r2, #100
 1644 0226 1A80     		strh	r2, [r3]	@ movhi
 452:main.c        ****                     if (s3) {
 1645              		.loc 1 452 0
 1646 0228 114B     		ldr	r3, .L141+20
 1647 022a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1648 022c 002B     		cmp	r3, #0
 1649 022e 06D0     		beq	.L97
 453:main.c        ****                         turnFinishedFlag = 0;
 1650              		.loc 1 453 0
 1651 0230 184B     		ldr	r3, .L141+56
 1652 0232 0022     		movs	r2, #0
 1653 0234 1A70     		strb	r2, [r3]
 454:main.c        ****                         MoveToNextInstruction();   
 1654              		.loc 1 454 0
 1655 0236 FFF7FEFF 		bl	MoveToNextInstruction
 455:main.c        ****                         return Stop;  
 1656              		.loc 1 455 0
 1657 023a 0523     		movs	r3, #5
 1658 023c 6EE2     		b	.L81
 1659              	.L97:
 456:main.c        ****                     }
 457:main.c        ****                 }
 458:main.c        ****             }
 459:main.c        ****             
 460:main.c        ****             
 461:main.c        ****             if (currentDirection == Stop) {
 1660              		.loc 1 461 0
 1661 023e 0A4B     		ldr	r3, .L141+12
 1662 0240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1663 0242 052B     		cmp	r3, #5
 1664 0244 2ED1     		bne	.L102
 462:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 463:main.c        ****                 if (stopBuffer <= 25) {
 1665              		.loc 1 463 0
 1666 0246 094B     		ldr	r3, .L141+16
 1667 0248 1B68     		ldr	r3, [r3]
 1668 024a 192B     		cmp	r3, #25
 1669 024c 01D8     		bhi	.L103
 464:main.c        ****                     return Stop;   
 1670              		.loc 1 464 0
 1671 024e 0523     		movs	r3, #5
 1672 0250 64E2     		b	.L81
 1673              	.L103:
 465:main.c        ****                 }
 466:main.c        ****                 return ForwardCourseCorrection();
 1674              		.loc 1 466 0
 1675 0252 FFF7FEFF 		bl	ForwardCourseCorrection
 1676 0256 0346     		mov	r3, r0
 1677 0258 60E2     		b	.L81
 1678              	.L142:
 1679 025a 00BF     		.align	2
 1680              	.L141:
 1681 025c 00000000 		.word	currentInstruction
 1682 0260 00000000 		.word	yBlocksize
 1683 0264 00000000 		.word	xBlocksize
 1684 0268 00000000 		.word	currentDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 39


 1685 026c 00000000 		.word	stopBuffer
 1686 0270 00000000 		.word	s3
 1687 0274 3B000000 		.word	leftStatusFlag
 1688 0278 00000000 		.word	s4
 1689 027c 3C000000 		.word	rightStatusFlag
 1690 0280 3F000000 		.word	currentIgnoreR
 1691 0284 57000000 		.word	forwardAfterTurnLIgnore
 1692 0288 3E000000 		.word	currentIgnoreL
 1693 028c 58000000 		.word	forwardAfterTurnRIgnore
 1694 0290 00000000 		.word	firstTurnIteration
 1695 0294 37000000 		.word	turnFinishedFlag
 1696 0298 00000000 		.word	s5
 1697 029c 00000000 		.word	s6
 1698 02a0 00000000 		.word	forwardBuffer
 1699              	.L102:
 467:main.c        ****             }
 468:main.c        ****          
 469:main.c        ****             // if we are already turning left, then check if s5 && s6 are on black
 470:main.c        ****             if (currentDirection == TurnLeft) {
 1700              		.loc 1 470 0
 1701 02a4 9D4B     		ldr	r3, .L143
 1702 02a6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1703 02a8 022B     		cmp	r3, #2
 1704 02aa 32D1     		bne	.L104
 471:main.c        ****                 // If turn started and we are still on black, continue turning
 472:main.c        ****                 // Otherwise, if all sensors are on white, turnStartedFlag = 0;
 473:main.c        ****                 if (turnStartedFlag) {
 1705              		.loc 1 473 0
 1706 02ac 9C4B     		ldr	r3, .L143+4
 1707 02ae 1B78     		ldrb	r3, [r3]
 1708 02b0 DBB2     		uxtb	r3, r3
 1709 02b2 002B     		cmp	r3, #0
 1710 02b4 0ED0     		beq	.L105
 474:main.c        ****                     if (s3 && (s5 && s6)) {
 1711              		.loc 1 474 0
 1712 02b6 9B4B     		ldr	r3, .L143+8
 1713 02b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1714 02ba 002B     		cmp	r3, #0
 1715 02bc 0AD0     		beq	.L105
 1716              		.loc 1 474 0 is_stmt 0 discriminator 1
 1717 02be 9A4B     		ldr	r3, .L143+12
 1718 02c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1719 02c2 002B     		cmp	r3, #0
 1720 02c4 06D0     		beq	.L105
 1721              		.loc 1 474 0 discriminator 2
 1722 02c6 994B     		ldr	r3, .L143+16
 1723 02c8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1724 02ca 002B     		cmp	r3, #0
 1725 02cc 02D0     		beq	.L105
 475:main.c        ****                         turnStartedFlag = 0;
 1726              		.loc 1 475 0 is_stmt 1
 1727 02ce 944B     		ldr	r3, .L143+4
 1728 02d0 0022     		movs	r2, #0
 1729 02d2 1A70     		strb	r2, [r3]
 1730              	.L105:
 476:main.c        ****                     }
 477:main.c        ****                 }
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 40


 478:main.c        ****                 if (!turnStartedFlag && !s3 && (!s5 || !s6)) {
 1731              		.loc 1 478 0
 1732 02d4 924B     		ldr	r3, .L143+4
 1733 02d6 1B78     		ldrb	r3, [r3]
 1734 02d8 DBB2     		uxtb	r3, r3
 1735 02da 002B     		cmp	r3, #0
 1736 02dc 17D1     		bne	.L106
 1737              		.loc 1 478 0 is_stmt 0 discriminator 1
 1738 02de 914B     		ldr	r3, .L143+8
 1739 02e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1740 02e2 002B     		cmp	r3, #0
 1741 02e4 13D1     		bne	.L106
 1742              		.loc 1 478 0 discriminator 2
 1743 02e6 904B     		ldr	r3, .L143+12
 1744 02e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1745 02ea 002B     		cmp	r3, #0
 1746 02ec 03D0     		beq	.L107
 1747              		.loc 1 478 0 discriminator 3
 1748 02ee 8F4B     		ldr	r3, .L143+16
 1749 02f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1750 02f2 002B     		cmp	r3, #0
 1751 02f4 0BD1     		bne	.L106
 1752              	.L107:
 479:main.c        ****                     turnFinishedFlag = 1;
 1753              		.loc 1 479 0 is_stmt 1
 1754 02f6 8E4B     		ldr	r3, .L143+20
 1755 02f8 0122     		movs	r2, #1
 1756 02fa 1A70     		strb	r2, [r3]
 480:main.c        ****                     firstTurnIteration = 0;
 1757              		.loc 1 480 0
 1758 02fc 8D4B     		ldr	r3, .L143+24
 1759 02fe 0022     		movs	r2, #0
 1760 0300 1A70     		strb	r2, [r3]
 481:main.c        ****                     totalDistance = 0;
 1761              		.loc 1 481 0
 1762 0302 8D4B     		ldr	r3, .L143+28
 1763 0304 4FF00002 		mov	r2, #0
 1764 0308 1A60     		str	r2, [r3]	@ float
 482:main.c        ****                     return ForwardAfterTurn;
 1765              		.loc 1 482 0
 1766 030a 0823     		movs	r3, #8
 1767 030c 06E2     		b	.L81
 1768              	.L106:
 483:main.c        ****                 }
 484:main.c        ****                 else
 485:main.c        ****                 {
 486:main.c        ****                     return TurnLeft;
 1769              		.loc 1 486 0
 1770 030e 0223     		movs	r3, #2
 1771 0310 04E2     		b	.L81
 1772              	.L104:
 487:main.c        ****                 }
 488:main.c        ****             }
 489:main.c        ****             
 490:main.c        ****             // If we are not already turning left then once s3 goes on BLACK, turn left
 491:main.c        ****             if (!s3) {
 1773              		.loc 1 491 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 41


 1774 0312 844B     		ldr	r3, .L143+8
 1775 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1776 0316 002B     		cmp	r3, #0
 1777 0318 04D1     		bne	.L108
 492:main.c        ****                 turnStartedFlag = 1;
 1778              		.loc 1 492 0
 1779 031a 814B     		ldr	r3, .L143+4
 1780 031c 0122     		movs	r2, #1
 1781 031e 1A70     		strb	r2, [r3]
 493:main.c        ****                 return TurnLeft;
 1782              		.loc 1 493 0
 1783 0320 0223     		movs	r3, #2
 1784 0322 FBE1     		b	.L81
 1785              	.L108:
 494:main.c        ****             }
 495:main.c        ****             
 496:main.c        ****             // Otherwise, keep going forward
 497:main.c        ****             return ForwardCourseCorrection(); 
 1786              		.loc 1 497 0
 1787 0324 FFF7FEFF 		bl	ForwardCourseCorrection
 1788 0328 0346     		mov	r3, r0
 1789 032a F7E1     		b	.L81
 1790              	.L75:
 498:main.c        ****             break;
 499:main.c        ****         case waitForRightTurn:
 500:main.c        ****             // continue moving forward until s4 goes on black
 501:main.c        ****             // if we are turning left already
 502:main.c        ****                 // wait until s5 || s6 are on black
 503:main.c        ****                 // return stop
 504:main.c        ****             if (!firstTurnIteration) {
 1791              		.loc 1 504 0
 1792 032c 814B     		ldr	r3, .L143+24
 1793 032e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1794 0330 002B     		cmp	r3, #0
 1795 0332 08D1     		bne	.L109
 505:main.c        ****                 
 506:main.c        ****                 if (!s4) {
 1796              		.loc 1 506 0
 1797 0334 814B     		ldr	r3, .L143+32
 1798 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1799 0338 002B     		cmp	r3, #0
 1800 033a 04D1     		bne	.L109
 507:main.c        ****                     firstTurnIteration = 1; 
 1801              		.loc 1 507 0
 1802 033c 7D4B     		ldr	r3, .L143+24
 1803 033e 0122     		movs	r2, #1
 1804 0340 1A70     		strb	r2, [r3]
 508:main.c        ****                     return Stop;
 1805              		.loc 1 508 0
 1806 0342 0523     		movs	r3, #5
 1807 0344 EAE1     		b	.L81
 1808              	.L109:
 509:main.c        ****                 }
 510:main.c        ****                 if (s4) {
 511:main.c        ****                     //return Backward;    
 512:main.c        ****                 }
 513:main.c        ****             }
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 42


 514:main.c        **** 
 515:main.c        ****             if (turnFinishedFlag) {
 1809              		.loc 1 515 0
 1810 0346 7A4B     		ldr	r3, .L143+20
 1811 0348 1B78     		ldrb	r3, [r3]
 1812 034a DBB2     		uxtb	r3, r3
 1813 034c 002B     		cmp	r3, #0
 1814 034e 34D0     		beq	.L111
 516:main.c        ****                 if (!s4 && !s5 && !s6) {
 1815              		.loc 1 516 0
 1816 0350 7A4B     		ldr	r3, .L143+32
 1817 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1818 0354 002B     		cmp	r3, #0
 1819 0356 0BD1     		bne	.L112
 1820              		.loc 1 516 0 is_stmt 0 discriminator 1
 1821 0358 734B     		ldr	r3, .L143+12
 1822 035a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1823 035c 002B     		cmp	r3, #0
 1824 035e 07D1     		bne	.L112
 1825              		.loc 1 516 0 discriminator 2
 1826 0360 724B     		ldr	r3, .L143+16
 1827 0362 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1828 0364 002B     		cmp	r3, #0
 1829 0366 03D1     		bne	.L112
 517:main.c        ****                     // we are correctly on the line so go forward until S4 on white
 518:main.c        ****                     return ForwardCourseCorrection();
 1830              		.loc 1 518 0 is_stmt 1
 1831 0368 FFF7FEFF 		bl	ForwardCourseCorrection
 1832 036c 0346     		mov	r3, r0
 1833 036e D5E1     		b	.L81
 1834              	.L112:
 519:main.c        ****                 }
 520:main.c        ****                 if (s5 || s6) {
 1835              		.loc 1 520 0
 1836 0370 6D4B     		ldr	r3, .L143+12
 1837 0372 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1838 0374 002B     		cmp	r3, #0
 1839 0376 03D1     		bne	.L113
 1840              		.loc 1 520 0 is_stmt 0 discriminator 1
 1841 0378 6C4B     		ldr	r3, .L143+16
 1842 037a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1843 037c 002B     		cmp	r3, #0
 1844 037e 03D0     		beq	.L114
 1845              	.L113:
 521:main.c        ****                     return SpinCourseCorrection();
 1846              		.loc 1 521 0 is_stmt 1
 1847 0380 FFF7FEFF 		bl	SpinCourseCorrection
 1848 0384 0346     		mov	r3, r0
 1849 0386 C9E1     		b	.L81
 1850              	.L114:
 522:main.c        ****                 }
 523:main.c        ****                 if (forwardBuffer <= 9) {
 1851              		.loc 1 523 0
 1852 0388 6D4B     		ldr	r3, .L143+36
 1853 038a 1B88     		ldrh	r3, [r3]
 1854 038c 092B     		cmp	r3, #9
 1855 038e 03D8     		bhi	.L115
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 43


 524:main.c        ****                     return ForwardCourseCorrection();    
 1856              		.loc 1 524 0
 1857 0390 FFF7FEFF 		bl	ForwardCourseCorrection
 1858 0394 0346     		mov	r3, r0
 1859 0396 C1E1     		b	.L81
 1860              	.L115:
 525:main.c        **** 
 526:main.c        ****                 } else {
 527:main.c        ****                     forwardBuffer = 100;
 1861              		.loc 1 527 0
 1862 0398 694B     		ldr	r3, .L143+36
 1863 039a 6422     		movs	r2, #100
 1864 039c 1A80     		strh	r2, [r3]	@ movhi
 528:main.c        ****                     if (s4) {
 1865              		.loc 1 528 0
 1866 039e 674B     		ldr	r3, .L143+32
 1867 03a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1868 03a2 002B     		cmp	r3, #0
 1869 03a4 09D0     		beq	.L111
 529:main.c        ****                         firstTurnIteration = 0;
 1870              		.loc 1 529 0
 1871 03a6 634B     		ldr	r3, .L143+24
 1872 03a8 0022     		movs	r2, #0
 1873 03aa 1A70     		strb	r2, [r3]
 530:main.c        ****                         turnFinishedFlag = 0;
 1874              		.loc 1 530 0
 1875 03ac 604B     		ldr	r3, .L143+20
 1876 03ae 0022     		movs	r2, #0
 1877 03b0 1A70     		strb	r2, [r3]
 531:main.c        ****                         MoveToNextInstruction();   
 1878              		.loc 1 531 0
 1879 03b2 FFF7FEFF 		bl	MoveToNextInstruction
 532:main.c        ****                         return Stop;  
 1880              		.loc 1 532 0
 1881 03b6 0523     		movs	r3, #5
 1882 03b8 B0E1     		b	.L81
 1883              	.L111:
 533:main.c        ****                     }
 534:main.c        ****                 }
 535:main.c        ****             }
 536:main.c        ****             
 537:main.c        ****             if (currentDirection == Stop) {
 1884              		.loc 1 537 0
 1885 03ba 584B     		ldr	r3, .L143
 1886 03bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1887 03be 052B     		cmp	r3, #5
 1888 03c0 09D1     		bne	.L116
 538:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 539:main.c        ****                 if (stopBuffer <= 25) {
 1889              		.loc 1 539 0
 1890 03c2 604B     		ldr	r3, .L143+40
 1891 03c4 1B68     		ldr	r3, [r3]
 1892 03c6 192B     		cmp	r3, #25
 1893 03c8 01D8     		bhi	.L117
 540:main.c        ****                     return Stop;   
 1894              		.loc 1 540 0
 1895 03ca 0523     		movs	r3, #5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 44


 1896 03cc A6E1     		b	.L81
 1897              	.L117:
 541:main.c        ****                 }
 542:main.c        **** 
 543:main.c        ****                 return ForwardCourseCorrection();
 1898              		.loc 1 543 0
 1899 03ce FFF7FEFF 		bl	ForwardCourseCorrection
 1900 03d2 0346     		mov	r3, r0
 1901 03d4 A2E1     		b	.L81
 1902              	.L116:
 544:main.c        ****             }
 545:main.c        ****                       
 546:main.c        ****             // if we are already turning right, then check if s5 && s6 are on black
 547:main.c        ****             if (currentDirection == TurnRight) {
 1903              		.loc 1 547 0
 1904 03d6 514B     		ldr	r3, .L143
 1905 03d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1906 03da 012B     		cmp	r3, #1
 1907 03dc 2FD1     		bne	.L118
 548:main.c        ****                 // If turn started and we are still on black, continue turning
 549:main.c        ****                 // Otherwise, if all sensors are on white, turnStartedFlag = 0;
 550:main.c        ****                 if (turnStartedFlag) {
 1908              		.loc 1 550 0
 1909 03de 504B     		ldr	r3, .L143+4
 1910 03e0 1B78     		ldrb	r3, [r3]
 1911 03e2 DBB2     		uxtb	r3, r3
 1912 03e4 002B     		cmp	r3, #0
 1913 03e6 0ED0     		beq	.L119
 551:main.c        ****                     if (s4 && (s5 && s6)) {
 1914              		.loc 1 551 0
 1915 03e8 544B     		ldr	r3, .L143+32
 1916 03ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1917 03ec 002B     		cmp	r3, #0
 1918 03ee 0AD0     		beq	.L119
 1919              		.loc 1 551 0 is_stmt 0 discriminator 1
 1920 03f0 4D4B     		ldr	r3, .L143+12
 1921 03f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1922 03f4 002B     		cmp	r3, #0
 1923 03f6 06D0     		beq	.L119
 1924              		.loc 1 551 0 discriminator 2
 1925 03f8 4C4B     		ldr	r3, .L143+16
 1926 03fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1927 03fc 002B     		cmp	r3, #0
 1928 03fe 02D0     		beq	.L119
 552:main.c        ****                         turnStartedFlag = 0;
 1929              		.loc 1 552 0 is_stmt 1
 1930 0400 474B     		ldr	r3, .L143+4
 1931 0402 0022     		movs	r2, #0
 1932 0404 1A70     		strb	r2, [r3]
 1933              	.L119:
 553:main.c        ****                     }
 554:main.c        ****                 }
 555:main.c        ****                 if (!turnStartedFlag && !s4 && (!s5 || !s6)) {
 1934              		.loc 1 555 0
 1935 0406 464B     		ldr	r3, .L143+4
 1936 0408 1B78     		ldrb	r3, [r3]
 1937 040a DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 45


 1938 040c 002B     		cmp	r3, #0
 1939 040e 14D1     		bne	.L120
 1940              		.loc 1 555 0 is_stmt 0 discriminator 1
 1941 0410 4A4B     		ldr	r3, .L143+32
 1942 0412 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1943 0414 002B     		cmp	r3, #0
 1944 0416 10D1     		bne	.L120
 1945              		.loc 1 555 0 discriminator 2
 1946 0418 434B     		ldr	r3, .L143+12
 1947 041a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1948 041c 002B     		cmp	r3, #0
 1949 041e 03D0     		beq	.L121
 1950              		.loc 1 555 0 discriminator 3
 1951 0420 424B     		ldr	r3, .L143+16
 1952 0422 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1953 0424 002B     		cmp	r3, #0
 1954 0426 08D1     		bne	.L120
 1955              	.L121:
 556:main.c        ****                     turnFinishedFlag = 1;
 1956              		.loc 1 556 0 is_stmt 1
 1957 0428 414B     		ldr	r3, .L143+20
 1958 042a 0122     		movs	r2, #1
 1959 042c 1A70     		strb	r2, [r3]
 557:main.c        ****                     totalDistance = 0;
 1960              		.loc 1 557 0
 1961 042e 424B     		ldr	r3, .L143+28
 1962 0430 4FF00002 		mov	r2, #0
 1963 0434 1A60     		str	r2, [r3]	@ float
 558:main.c        ****                     return ForwardAfterTurn;
 1964              		.loc 1 558 0
 1965 0436 0823     		movs	r3, #8
 1966 0438 70E1     		b	.L81
 1967              	.L120:
 559:main.c        ****                 }
 560:main.c        ****                 else
 561:main.c        ****                 {
 562:main.c        ****                     return TurnRight;
 1968              		.loc 1 562 0
 1969 043a 0123     		movs	r3, #1
 1970 043c 6EE1     		b	.L81
 1971              	.L118:
 563:main.c        ****                 }
 564:main.c        ****             }
 565:main.c        ****             
 566:main.c        ****             // If we are not already turning right then once s4 goes on BLACK, turn left
 567:main.c        ****             if (!s4) {
 1972              		.loc 1 567 0
 1973 043e 3F4B     		ldr	r3, .L143+32
 1974 0440 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1975 0442 002B     		cmp	r3, #0
 1976 0444 04D1     		bne	.L122
 568:main.c        ****                 turnStartedFlag = 1;
 1977              		.loc 1 568 0
 1978 0446 364B     		ldr	r3, .L143+4
 1979 0448 0122     		movs	r2, #1
 1980 044a 1A70     		strb	r2, [r3]
 569:main.c        ****                 return TurnRight;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 46


 1981              		.loc 1 569 0
 1982 044c 0123     		movs	r3, #1
 1983 044e 65E1     		b	.L81
 1984              	.L122:
 570:main.c        ****             }
 571:main.c        ****             
 572:main.c        ****             // Otherwise, keep going forward
 573:main.c        ****             return ForwardCourseCorrection(); 
 1985              		.loc 1 573 0
 1986 0450 FFF7FEFF 		bl	ForwardCourseCorrection
 1987 0454 0346     		mov	r3, r0
 1988 0456 61E1     		b	.L81
 1989              	.L77:
 574:main.c        ****             break;
 575:main.c        ****         case ForwardUntilTarget:       
 576:main.c        ****             // Reset distance on first iteration of this instruction
 577:main.c        ****             if (!forwardUntilTargetStartedFlag) {
 1990              		.loc 1 577 0
 1991 0458 3B4B     		ldr	r3, .L143+44
 1992 045a 1B78     		ldrb	r3, [r3]
 1993 045c DBB2     		uxtb	r3, r3
 1994 045e 002B     		cmp	r3, #0
 1995 0460 17D1     		bne	.L123
 1996              	.LBB3:
 578:main.c        ****                 forwardUntilTargetStartedFlag = 1;
 1997              		.loc 1 578 0
 1998 0462 394B     		ldr	r3, .L143+44
 1999 0464 0122     		movs	r2, #1
 2000 0466 1A70     		strb	r2, [r3]
 579:main.c        ****                 //uTurnIgnoreL = 0;
 580:main.c        ****                 //uTurnIgnoreR = 0;
 581:main.c        ****                 forwardAfterTurnLIgnore = 0;
 2001              		.loc 1 581 0
 2002 0468 384B     		ldr	r3, .L143+48
 2003 046a 0022     		movs	r2, #0
 2004 046c 1A70     		strb	r2, [r3]
 582:main.c        ****                 forwardAfterTurnRIgnore = 0;
 2005              		.loc 1 582 0
 2006 046e 384B     		ldr	r3, .L143+52
 2007 0470 0022     		movs	r2, #0
 2008 0472 1A70     		strb	r2, [r3]
 583:main.c        ****                 //blockSizeTotal = CalculateDistanceToTravel(blocksize);
 584:main.c        ****                 int blocksToTarget = currentInstruction.distanceToTarget;
 2009              		.loc 1 584 0
 2010 0474 374B     		ldr	r3, .L143+56
 2011 0476 DB68     		ldr	r3, [r3, #12]
 2012 0478 FB61     		str	r3, [r7, #28]
 585:main.c        ****                 blockSizeTotal = blocksize * blocksToTarget;
 2013              		.loc 1 585 0
 2014 047a F869     		ldr	r0, [r7, #28]
 2015 047c FFF7FEFF 		bl	__aeabi_i2f
 2016 0480 0346     		mov	r3, r0
 2017 0482 796A     		ldr	r1, [r7, #36]	@ float
 2018 0484 1846     		mov	r0, r3
 2019 0486 FFF7FEFF 		bl	__aeabi_fmul
 2020 048a 0346     		mov	r3, r0
 2021 048c 1A46     		mov	r2, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 47


 2022 048e 324B     		ldr	r3, .L143+60
 2023 0490 1A60     		str	r2, [r3]	@ float
 2024              	.L123:
 2025              	.LBE3:
 586:main.c        ****             }
 587:main.c        ****             
 588:main.c        ****             if (s3) {
 2026              		.loc 1 588 0
 2027 0492 244B     		ldr	r3, .L143+8
 2028 0494 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2029 0496 002B     		cmp	r3, #0
 2030 0498 02D0     		beq	.L124
 589:main.c        ****                 leftStatusFlag = 1;
 2031              		.loc 1 589 0
 2032 049a 304B     		ldr	r3, .L143+64
 2033 049c 0122     		movs	r2, #1
 2034 049e 1A70     		strb	r2, [r3]
 2035              	.L124:
 590:main.c        ****             }
 591:main.c        ****             
 592:main.c        ****             if (s4) {
 2036              		.loc 1 592 0
 2037 04a0 264B     		ldr	r3, .L143+32
 2038 04a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2039 04a4 002B     		cmp	r3, #0
 2040 04a6 02D0     		beq	.L125
 593:main.c        ****                 rightStatusFlag = 1;
 2041              		.loc 1 593 0
 2042 04a8 2D4B     		ldr	r3, .L143+68
 2043 04aa 0122     		movs	r2, #1
 2044 04ac 1A70     		strb	r2, [r3]
 2045              	.L125:
 594:main.c        ****             }
 595:main.c        ****             // FLAG CHECKS FOR UTURN STATE
 596:main.c        ****             // LEFT WING CHECK =-=-=-=-=-=-=-=-=-=-=
 597:main.c        ****             if (leftStatusFlag) {
 2046              		.loc 1 597 0
 2047 04ae 2B4B     		ldr	r3, .L143+64
 2048 04b0 1B78     		ldrb	r3, [r3]
 2049 04b2 DBB2     		uxtb	r3, r3
 2050 04b4 002B     		cmp	r3, #0
 2051 04b6 15D0     		beq	.L126
 598:main.c        ****                 if (currentInstruction.ignoreL == 0 && !s3) {
 2052              		.loc 1 598 0
 2053 04b8 264B     		ldr	r3, .L143+56
 2054 04ba 5B68     		ldr	r3, [r3, #4]
 2055 04bc 002B     		cmp	r3, #0
 2056 04be 11D1     		bne	.L126
 2057              		.loc 1 598 0 is_stmt 0 discriminator 1
 2058 04c0 184B     		ldr	r3, .L143+8
 2059 04c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2060 04c4 002B     		cmp	r3, #0
 2061 04c6 0DD1     		bne	.L126
 599:main.c        ****                     leftStatusFlag = 0;    
 2062              		.loc 1 599 0 is_stmt 1
 2063 04c8 244B     		ldr	r3, .L143+64
 2064 04ca 0022     		movs	r2, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 48


 2065 04cc 1A70     		strb	r2, [r3]
 600:main.c        ****                     forwardAfterTurnRIgnore++; // TRYING TO FIX UTURN EDGE CASE BY INCREMENTING OPP
 2066              		.loc 1 600 0
 2067 04ce 204B     		ldr	r3, .L143+52
 2068 04d0 1B78     		ldrb	r3, [r3]
 2069 04d2 DBB2     		uxtb	r3, r3
 2070 04d4 0133     		adds	r3, r3, #1
 2071 04d6 DAB2     		uxtb	r2, r3
 2072 04d8 1D4B     		ldr	r3, .L143+52
 2073 04da 1A70     		strb	r2, [r3]
 601:main.c        ****                     return ForwardCourseCorrection();
 2074              		.loc 1 601 0
 2075 04dc FFF7FEFF 		bl	ForwardCourseCorrection
 2076 04e0 0346     		mov	r3, r0
 2077 04e2 1BE1     		b	.L81
 2078              	.L126:
 602:main.c        ****                 }
 603:main.c        ****             }
 604:main.c        ****             // RIGHT WING CHECK =-=-=-=-=-=-=-=-=-=-=
 605:main.c        ****             if (rightStatusFlag) {
 2079              		.loc 1 605 0
 2080 04e4 1E4B     		ldr	r3, .L143+68
 2081 04e6 1B78     		ldrb	r3, [r3]
 2082 04e8 DBB2     		uxtb	r3, r3
 2083 04ea 002B     		cmp	r3, #0
 2084 04ec 3AD0     		beq	.L127
 606:main.c        ****                 if (currentInstruction.ignoreR == 0 && !s4) {
 2085              		.loc 1 606 0
 2086 04ee 194B     		ldr	r3, .L143+56
 2087 04f0 9B68     		ldr	r3, [r3, #8]
 2088 04f2 002B     		cmp	r3, #0
 2089 04f4 36D1     		bne	.L127
 2090              		.loc 1 606 0 is_stmt 0 discriminator 1
 2091 04f6 114B     		ldr	r3, .L143+32
 2092 04f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2093 04fa 002B     		cmp	r3, #0
 2094 04fc 32D1     		bne	.L127
 607:main.c        ****                     rightStatusFlag = 0;
 2095              		.loc 1 607 0 is_stmt 1
 2096 04fe 184B     		ldr	r3, .L143+68
 2097 0500 0022     		movs	r2, #0
 2098 0502 1A70     		strb	r2, [r3]
 608:main.c        ****                     forwardAfterTurnLIgnore++; // TRYING TO FIX UTURN EDGE CASE BY INCREMENTING OPP
 2099              		.loc 1 608 0
 2100 0504 114B     		ldr	r3, .L143+48
 2101 0506 1B78     		ldrb	r3, [r3]
 2102 0508 DBB2     		uxtb	r3, r3
 2103 050a 0133     		adds	r3, r3, #1
 2104 050c DAB2     		uxtb	r2, r3
 2105 050e 0F4B     		ldr	r3, .L143+48
 2106 0510 1A70     		strb	r2, [r3]
 609:main.c        ****                     return ForwardCourseCorrection(); // CHEECK IF CONDITION IS ACTUALLY BEING FULF
 2107              		.loc 1 609 0
 2108 0512 FFF7FEFF 		bl	ForwardCourseCorrection
 2109 0516 0346     		mov	r3, r0
 2110 0518 00E1     		b	.L81
 2111              	.L144:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 49


 2112 051a 00BF     		.align	2
 2113              	.L143:
 2114 051c 00000000 		.word	currentDirection
 2115 0520 36000000 		.word	turnStartedFlag
 2116 0524 00000000 		.word	s3
 2117 0528 00000000 		.word	s5
 2118 052c 00000000 		.word	s6
 2119 0530 37000000 		.word	turnFinishedFlag
 2120 0534 00000000 		.word	firstTurnIteration
 2121 0538 00000000 		.word	totalDistance
 2122 053c 00000000 		.word	s4
 2123 0540 00000000 		.word	forwardBuffer
 2124 0544 00000000 		.word	stopBuffer
 2125 0548 38000000 		.word	forwardUntilTargetStartedFlag
 2126 054c 57000000 		.word	forwardAfterTurnLIgnore
 2127 0550 58000000 		.word	forwardAfterTurnRIgnore
 2128 0554 00000000 		.word	currentInstruction
 2129 0558 00000000 		.word	blockSizeTotal
 2130 055c 3B000000 		.word	leftStatusFlag
 2131 0560 3C000000 		.word	rightStatusFlag
 2132              	.L127:
 610:main.c        ****                 }
 611:main.c        ****             }
 612:main.c        ****             // FLAG CHECKS FOR UTURN STATE
 613:main.c        ****             
 614:main.c        ****             // If totalDistance >= blockSizeTotal then we should be at target
 615:main.c        ****             if (totalDistance >= blockSizeTotal && (currentInstruction.ignoreL > 0 && currentInstru
 2133              		.loc 1 615 0
 2134 0564 6F4B     		ldr	r3, .L145
 2135 0566 1A68     		ldr	r2, [r3]	@ float
 2136 0568 6F4B     		ldr	r3, .L145+4
 2137 056a 1B68     		ldr	r3, [r3]	@ float
 2138 056c 1946     		mov	r1, r3
 2139 056e 1046     		mov	r0, r2
 2140 0570 FFF7FEFF 		bl	__aeabi_fcmpge
 2141 0574 0346     		mov	r3, r0
 2142 0576 002B     		cmp	r3, #0
 2143 0578 0BD0     		beq	.L128
 2144              		.loc 1 615 0 is_stmt 0 discriminator 1
 2145 057a 6C4B     		ldr	r3, .L145+8
 2146 057c 5B68     		ldr	r3, [r3, #4]
 2147 057e 002B     		cmp	r3, #0
 2148 0580 07DD     		ble	.L128
 2149              		.loc 1 615 0 discriminator 2
 2150 0582 6A4B     		ldr	r3, .L145+8
 2151 0584 9B68     		ldr	r3, [r3, #8]
 2152 0586 002B     		cmp	r3, #0
 2153 0588 03DD     		ble	.L128
 616:main.c        ****                 // Get next instruction
 617:main.c        ****                 MoveToNextInstruction();
 2154              		.loc 1 617 0 is_stmt 1
 2155 058a FFF7FEFF 		bl	MoveToNextInstruction
 618:main.c        **** 
 619:main.c        ****                 
 620:main.c        ****                 return Stop;
 2156              		.loc 1 620 0
 2157 058e 0523     		movs	r3, #5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 50


 2158 0590 C4E0     		b	.L81
 2159              	.L128:
 621:main.c        ****             }
 622:main.c        ****             else if (totalDistance >= blockSizeTotal || (currentInstruction.ignoreL == 0 || current
 2160              		.loc 1 622 0
 2161 0592 644B     		ldr	r3, .L145
 2162 0594 1A68     		ldr	r2, [r3]	@ float
 2163 0596 644B     		ldr	r3, .L145+4
 2164 0598 1B68     		ldr	r3, [r3]	@ float
 2165 059a 1946     		mov	r1, r3
 2166 059c 1046     		mov	r0, r2
 2167 059e FFF7FEFF 		bl	__aeabi_fcmpge
 2168 05a2 0346     		mov	r3, r0
 2169 05a4 002B     		cmp	r3, #0
 2170 05a6 07D1     		bne	.L130
 2171              		.loc 1 622 0 is_stmt 0 discriminator 1
 2172 05a8 604B     		ldr	r3, .L145+8
 2173 05aa 5B68     		ldr	r3, [r3, #4]
 2174 05ac 002B     		cmp	r3, #0
 2175 05ae 03D0     		beq	.L130
 2176              		.loc 1 622 0 discriminator 2
 2177 05b0 5E4B     		ldr	r3, .L145+8
 2178 05b2 9B68     		ldr	r3, [r3, #8]
 2179 05b4 002B     		cmp	r3, #0
 2180 05b6 03D1     		bne	.L131
 2181              	.L130:
 623:main.c        ****                 MoveToNextInstruction();
 2182              		.loc 1 623 0 is_stmt 1
 2183 05b8 FFF7FEFF 		bl	MoveToNextInstruction
 624:main.c        ****                 return Stop;
 2184              		.loc 1 624 0
 2185 05bc 0523     		movs	r3, #5
 2186 05be ADE0     		b	.L81
 2187              	.L131:
 625:main.c        ****             }
 626:main.c        ****             
 627:main.c        ****             return ForwardCourseCorrection();
 2188              		.loc 1 627 0
 2189 05c0 FFF7FEFF 		bl	ForwardCourseCorrection
 2190 05c4 0346     		mov	r3, r0
 2191 05c6 A9E0     		b	.L81
 2192              	.L78:
 628:main.c        ****             break;
 629:main.c        ****         case StopAtTarget:
 630:main.c        ****             // Reset Forward Until Target Flags (Had to move in here to make it work)
 631:main.c        ****             // Reset flags
 632:main.c        ****             totalDistance = 0;
 2193              		.loc 1 632 0
 2194 05c8 564B     		ldr	r3, .L145
 2195 05ca 4FF00002 		mov	r2, #0
 2196 05ce 1A60     		str	r2, [r3]	@ float
 633:main.c        ****             forwardUntilTargetStartedFlag = 0;
 2197              		.loc 1 633 0
 2198 05d0 574B     		ldr	r3, .L145+12
 2199 05d2 0022     		movs	r2, #0
 2200 05d4 1A70     		strb	r2, [r3]
 634:main.c        ****             blockSizeTotal = 0;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 51


 2201              		.loc 1 634 0
 2202 05d6 544B     		ldr	r3, .L145+4
 2203 05d8 4FF00002 		mov	r2, #0
 2204 05dc 1A60     		str	r2, [r3]	@ float
 635:main.c        ****             
 636:main.c        ****             if (currentDirection == Stop) {
 2205              		.loc 1 636 0
 2206 05de 554B     		ldr	r3, .L145+16
 2207 05e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2208 05e2 052B     		cmp	r3, #5
 2209 05e4 08D1     		bne	.L132
 637:main.c        ****                 if (stopBuffer <= 100) {
 2210              		.loc 1 637 0
 2211 05e6 544B     		ldr	r3, .L145+20
 2212 05e8 1B68     		ldr	r3, [r3]
 2213 05ea 642B     		cmp	r3, #100
 2214 05ec 01D8     		bhi	.L133
 638:main.c        ****                     return Stop;    
 2215              		.loc 1 638 0
 2216 05ee 0523     		movs	r3, #5
 2217 05f0 94E0     		b	.L81
 2218              	.L133:
 639:main.c        ****                 } else {
 640:main.c        ****                     stopBuffer = 250;
 2219              		.loc 1 640 0
 2220 05f2 514B     		ldr	r3, .L145+20
 2221 05f4 FA22     		movs	r2, #250
 2222 05f6 1A60     		str	r2, [r3]
 2223              	.L132:
 641:main.c        ****                 }
 642:main.c        ****             }
 643:main.c        ****             
 644:main.c        ****             // RESET EVERYTHING AND FIND NEW PATH FOR NEXT FOOD LIST
 645:main.c        ****             // Make sure index doesn't go over cap
 646:main.c        ****             // Stop at final location
 647:main.c        ****             if (currentFoodListIndex == 4) {
 2224              		.loc 1 647 0
 2225 05f8 504B     		ldr	r3, .L145+24
 2226 05fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2227 05fc 042B     		cmp	r3, #4
 2228 05fe 01D1     		bne	.L134
 648:main.c        ****                 return Stop;    
 2229              		.loc 1 648 0
 2230 0600 0523     		movs	r3, #5
 2231 0602 8BE0     		b	.L81
 2232              	.L134:
 649:main.c        ****             }
 650:main.c        ****             
 651:main.c        ****             currentFoodListIndex++;
 2233              		.loc 1 651 0
 2234 0604 4D4B     		ldr	r3, .L145+24
 2235 0606 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2236 0608 0133     		adds	r3, r3, #1
 2237 060a DAB2     		uxtb	r2, r3
 2238 060c 4B4B     		ldr	r3, .L145+24
 2239 060e 1A70     		strb	r2, [r3]
 652:main.c        ****             instructionIndex = 0;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 52


 2240              		.loc 1 652 0
 2241 0610 4B4B     		ldr	r3, .L145+28
 2242 0612 0022     		movs	r2, #0
 2243 0614 1A60     		str	r2, [r3]
 653:main.c        ****             instructionList = findPathNewOrientation(map, food_list, currentFoodListIndex, currentI
 2244              		.loc 1 653 0
 2245 0616 494B     		ldr	r3, .L145+24
 2246 0618 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2247 061a 1A46     		mov	r2, r3
 2248 061c 434B     		ldr	r3, .L145+8
 2249 061e 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2250 0620 4849     		ldr	r1, .L145+32
 2251 0622 4948     		ldr	r0, .L145+36
 2252 0624 FFF7FEFF 		bl	findPathNewOrientation
 2253 0628 0246     		mov	r2, r0
 2254 062a 484B     		ldr	r3, .L145+40
 2255 062c 1A60     		str	r2, [r3]
 654:main.c        ****             numSteps = instructionsListLength();
 2256              		.loc 1 654 0
 2257 062e FFF7FEFF 		bl	instructionsListLength
 2258 0632 0346     		mov	r3, r0
 2259 0634 1A46     		mov	r2, r3
 2260 0636 464B     		ldr	r3, .L145+44
 2261 0638 1A60     		str	r2, [r3]
 655:main.c        ****     
 656:main.c        ****             currentInstruction = GetInstructionAtIndex();
 2262              		.loc 1 656 0
 2263 063a 3C4C     		ldr	r4, .L145+8
 2264 063c 3B46     		mov	r3, r7
 2265 063e 1846     		mov	r0, r3
 2266 0640 FFF7FEFF 		bl	GetInstructionAtIndex
 2267 0644 2546     		mov	r5, r4
 2268 0646 3C46     		mov	r4, r7
 2269 0648 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2270 064a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 2271 064c 2368     		ldr	r3, [r4]
 2272 064e 2B60     		str	r3, [r5]
 657:main.c        **** 
 658:main.c        ****             currentIgnoreL = instructionList[instructionIndex].ignoreL;
 2273              		.loc 1 658 0
 2274 0650 3E4B     		ldr	r3, .L145+40
 2275 0652 1968     		ldr	r1, [r3]
 2276 0654 3A4B     		ldr	r3, .L145+28
 2277 0656 1A68     		ldr	r2, [r3]
 2278 0658 1346     		mov	r3, r2
 2279 065a 9B00     		lsls	r3, r3, #2
 2280 065c 1344     		add	r3, r3, r2
 2281 065e 9B00     		lsls	r3, r3, #2
 2282 0660 0B44     		add	r3, r3, r1
 2283 0662 5B68     		ldr	r3, [r3, #4]
 2284 0664 DAB2     		uxtb	r2, r3
 2285 0666 3B4B     		ldr	r3, .L145+48
 2286 0668 1A70     		strb	r2, [r3]
 659:main.c        ****             currentIgnoreR = instructionList[instructionIndex].ignoreR;
 2287              		.loc 1 659 0
 2288 066a 384B     		ldr	r3, .L145+40
 2289 066c 1968     		ldr	r1, [r3]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 53


 2290 066e 344B     		ldr	r3, .L145+28
 2291 0670 1A68     		ldr	r2, [r3]
 2292 0672 1346     		mov	r3, r2
 2293 0674 9B00     		lsls	r3, r3, #2
 2294 0676 1344     		add	r3, r3, r2
 2295 0678 9B00     		lsls	r3, r3, #2
 2296 067a 0B44     		add	r3, r3, r1
 2297 067c 9B68     		ldr	r3, [r3, #8]
 2298 067e DAB2     		uxtb	r2, r3
 2299 0680 354B     		ldr	r3, .L145+52
 2300 0682 1A70     		strb	r2, [r3]
 660:main.c        ****             
 661:main.c        ****             return Stop;
 2301              		.loc 1 661 0
 2302 0684 0523     		movs	r3, #5
 2303 0686 49E0     		b	.L81
 2304              	.L76:
 662:main.c        ****             break;
 663:main.c        ****         case uTurn:
 664:main.c        ****             if (currentDirection == Stop) {
 2305              		.loc 1 664 0
 2306 0688 2A4B     		ldr	r3, .L145+16
 2307 068a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2308 068c 052B     		cmp	r3, #5
 2309 068e 08D1     		bne	.L135
 665:main.c        ****                 if (stopBuffer <= 50) {
 2310              		.loc 1 665 0
 2311 0690 294B     		ldr	r3, .L145+20
 2312 0692 1B68     		ldr	r3, [r3]
 2313 0694 322B     		cmp	r3, #50
 2314 0696 01D8     		bhi	.L136
 666:main.c        ****                     return Stop;    
 2315              		.loc 1 666 0
 2316 0698 0523     		movs	r3, #5
 2317 069a 3FE0     		b	.L81
 2318              	.L136:
 667:main.c        ****                 } else {
 668:main.c        ****                     stopBuffer = 100;    
 2319              		.loc 1 668 0
 2320 069c 264B     		ldr	r3, .L145+20
 2321 069e 6422     		movs	r2, #100
 2322 06a0 1A60     		str	r2, [r3]
 2323              	.L135:
 669:main.c        ****                 }
 670:main.c        ****             }
 671:main.c        ****             
 672:main.c        ****             
 673:main.c        ****             if (!uTurnStartedFlag) {
 2324              		.loc 1 673 0
 2325 06a2 2E4B     		ldr	r3, .L145+56
 2326 06a4 1B78     		ldrb	r3, [r3]
 2327 06a6 DBB2     		uxtb	r3, r3
 2328 06a8 002B     		cmp	r3, #0
 2329 06aa 07D1     		bne	.L137
 674:main.c        ****                 uTurnStartedFlag = 1;
 2330              		.loc 1 674 0
 2331 06ac 2B4B     		ldr	r3, .L145+56
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 54


 2332 06ae 0122     		movs	r2, #1
 2333 06b0 1A70     		strb	r2, [r3]
 675:main.c        ****                 spinCourseCorrectionStarted = 0;
 2334              		.loc 1 675 0
 2335 06b2 2B4B     		ldr	r3, .L145+60
 2336 06b4 0022     		movs	r2, #0
 2337 06b6 1A70     		strb	r2, [r3]
 676:main.c        ****                 return Spin180;
 2338              		.loc 1 676 0
 2339 06b8 0A23     		movs	r3, #10
 2340 06ba 2FE0     		b	.L81
 2341              	.L137:
 677:main.c        ****             } 
 678:main.c        ****             
 679:main.c        ****             if (uTurnFinishedFlag) {
 2342              		.loc 1 679 0
 2343 06bc 294B     		ldr	r3, .L145+64
 2344 06be 1B78     		ldrb	r3, [r3]
 2345 06c0 DBB2     		uxtb	r3, r3
 2346 06c2 002B     		cmp	r3, #0
 2347 06c4 09D0     		beq	.L138
 680:main.c        ****                 // MOVE TO NEXT INSTRUCTION
 681:main.c        ****                 uTurnFinishedFlag = 0;
 2348              		.loc 1 681 0
 2349 06c6 274B     		ldr	r3, .L145+64
 2350 06c8 0022     		movs	r2, #0
 2351 06ca 1A70     		strb	r2, [r3]
 682:main.c        ****                 uTurnStartedFlag = 0;
 2352              		.loc 1 682 0
 2353 06cc 234B     		ldr	r3, .L145+56
 2354 06ce 0022     		movs	r2, #0
 2355 06d0 1A70     		strb	r2, [r3]
 683:main.c        ****                 MoveToNextInstruction();
 2356              		.loc 1 683 0
 2357 06d2 FFF7FEFF 		bl	MoveToNextInstruction
 684:main.c        ****                 return Stop;    
 2358              		.loc 1 684 0
 2359 06d6 0523     		movs	r3, #5
 2360 06d8 20E0     		b	.L81
 2361              	.L138:
 685:main.c        ****             }
 686:main.c        ****             
 687:main.c        ****             // Repeat SpinCourseCorrection until both or one on black
 688:main.c        ****             if (uTurnStartedFlag) {
 2362              		.loc 1 688 0
 2363 06da 204B     		ldr	r3, .L145+56
 2364 06dc 1B78     		ldrb	r3, [r3]
 2365 06de DBB2     		uxtb	r3, r3
 2366 06e0 002B     		cmp	r3, #0
 2367 06e2 16D0     		beq	.L139
 689:main.c        ****                 if (!s5 && !s6) {
 2368              		.loc 1 689 0
 2369 06e4 204B     		ldr	r3, .L145+68
 2370 06e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2371 06e8 002B     		cmp	r3, #0
 2372 06ea 12D1     		bne	.L139
 2373              		.loc 1 689 0 is_stmt 0 discriminator 1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 55


 2374 06ec 1F4B     		ldr	r3, .L145+72
 2375 06ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2376 06f0 002B     		cmp	r3, #0
 2377 06f2 0ED1     		bne	.L139
 690:main.c        ****                     totalLineCount = 0;
 2378              		.loc 1 690 0 is_stmt 1
 2379 06f4 1E4B     		ldr	r3, .L145+76
 2380 06f6 0022     		movs	r2, #0
 2381 06f8 1A70     		strb	r2, [r3]
 691:main.c        ****                     lineCount = 0;
 2382              		.loc 1 691 0
 2383 06fa 1E4B     		ldr	r3, .L145+80
 2384 06fc 0022     		movs	r2, #0
 2385 06fe 1A70     		strb	r2, [r3]
 692:main.c        ****                     tooEarlyFlag = 0;
 2386              		.loc 1 692 0
 2387 0700 1D4B     		ldr	r3, .L145+84
 2388 0702 0022     		movs	r2, #0
 2389 0704 1A70     		strb	r2, [r3]
 693:main.c        ****                     tooLateFlag = 0;
 2390              		.loc 1 693 0
 2391 0706 1D4B     		ldr	r3, .L145+88
 2392 0708 0022     		movs	r2, #0
 2393 070a 1A70     		strb	r2, [r3]
 694:main.c        ****                     uTurnFinishedFlag = 1;    
 2394              		.loc 1 694 0
 2395 070c 154B     		ldr	r3, .L145+64
 2396 070e 0122     		movs	r2, #1
 2397 0710 1A70     		strb	r2, [r3]
 2398              	.L139:
 695:main.c        ****                 }    
 696:main.c        ****             }
 697:main.c        ****             
 698:main.c        ****             return SpinCourseCorrection();
 2399              		.loc 1 698 0
 2400 0712 FFF7FEFF 		bl	SpinCourseCorrection
 2401 0716 0346     		mov	r3, r0
 2402 0718 00E0     		b	.L81
 2403              	.L71:
 699:main.c        ****             break;
 700:main.c        ****         default:
 701:main.c        ****             return Stop;
 2404              		.loc 1 701 0
 2405 071a 0523     		movs	r3, #5
 2406              	.L81:
 702:main.c        ****             break;
 703:main.c        ****     }
 704:main.c        ****     return Stop;
 705:main.c        **** }
 2407              		.loc 1 705 0
 2408 071c 1846     		mov	r0, r3
 2409 071e 2837     		adds	r7, r7, #40
 2410              		.cfi_def_cfa_offset 16
 2411 0720 BD46     		mov	sp, r7
 2412              		.cfi_def_cfa_register 13
 2413              		@ sp needed
 2414 0722 B0BD     		pop	{r4, r5, r7, pc}
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 56


 2415              	.L146:
 2416              		.align	2
 2417              	.L145:
 2418 0724 00000000 		.word	totalDistance
 2419 0728 00000000 		.word	blockSizeTotal
 2420 072c 00000000 		.word	currentInstruction
 2421 0730 38000000 		.word	forwardUntilTargetStartedFlag
 2422 0734 00000000 		.word	currentDirection
 2423 0738 00000000 		.word	stopBuffer
 2424 073c 00000000 		.word	currentFoodListIndex
 2425 0740 14000000 		.word	instructionIndex
 2426 0744 00000000 		.word	food_list
 2427 0748 00000000 		.word	map
 2428 074c 00000000 		.word	instructionList
 2429 0750 00000000 		.word	numSteps
 2430 0754 3E000000 		.word	currentIgnoreL
 2431 0758 3F000000 		.word	currentIgnoreR
 2432 075c 39000000 		.word	uTurnStartedFlag
 2433 0760 3D000000 		.word	spinCourseCorrectionStarted
 2434 0764 3A000000 		.word	uTurnFinishedFlag
 2435 0768 00000000 		.word	s5
 2436 076c 00000000 		.word	s6
 2437 0770 40000000 		.word	totalLineCount
 2438 0774 41000000 		.word	lineCount
 2439 0778 43000000 		.word	tooEarlyFlag
 2440 077c 44000000 		.word	tooLateFlag
 2441              		.cfi_endproc
 2442              	.LFE76:
 2443              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 2444              		.section	.text.MoveToNextInstruction,"ax",%progbits
 2445              		.align	2
 2446              		.global	MoveToNextInstruction
 2447              		.thumb
 2448              		.thumb_func
 2449              		.type	MoveToNextInstruction, %function
 2450              	MoveToNextInstruction:
 2451              	.LFB77:
 706:main.c        **** 
 707:main.c        **** // get next instruction
 708:main.c        **** void MoveToNextInstruction() {
 2452              		.loc 1 708 0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 1, uses_anonymous_args = 0
 2456              		@ link register save eliminated.
 2457 0000 80B4     		push	{r7}
 2458              		.cfi_def_cfa_offset 4
 2459              		.cfi_offset 7, -4
 2460 0002 00AF     		add	r7, sp, #0
 2461              		.cfi_def_cfa_register 7
 709:main.c        ****     currentIgnoreL = 0;
 2462              		.loc 1 709 0
 2463 0004 144B     		ldr	r3, .L148
 2464 0006 0022     		movs	r2, #0
 2465 0008 1A70     		strb	r2, [r3]
 710:main.c        ****     currentIgnoreR = 0;
 2466              		.loc 1 710 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 57


 2467 000a 144B     		ldr	r3, .L148+4
 2468 000c 0022     		movs	r2, #0
 2469 000e 1A70     		strb	r2, [r3]
 711:main.c        **** 
 712:main.c        ****     instructionIndex++;
 2470              		.loc 1 712 0
 2471 0010 134B     		ldr	r3, .L148+8
 2472 0012 1B68     		ldr	r3, [r3]
 2473 0014 0133     		adds	r3, r3, #1
 2474 0016 124A     		ldr	r2, .L148+8
 2475 0018 1360     		str	r3, [r2]
 713:main.c        ****     
 714:main.c        ****     currentIgnoreL = instructionList[instructionIndex].ignoreL;
 2476              		.loc 1 714 0
 2477 001a 124B     		ldr	r3, .L148+12
 2478 001c 1968     		ldr	r1, [r3]
 2479 001e 104B     		ldr	r3, .L148+8
 2480 0020 1A68     		ldr	r2, [r3]
 2481 0022 1346     		mov	r3, r2
 2482 0024 9B00     		lsls	r3, r3, #2
 2483 0026 1344     		add	r3, r3, r2
 2484 0028 9B00     		lsls	r3, r3, #2
 2485 002a 0B44     		add	r3, r3, r1
 2486 002c 5B68     		ldr	r3, [r3, #4]
 2487 002e DAB2     		uxtb	r2, r3
 2488 0030 094B     		ldr	r3, .L148
 2489 0032 1A70     		strb	r2, [r3]
 715:main.c        ****     currentIgnoreR = instructionList[instructionIndex].ignoreR;
 2490              		.loc 1 715 0
 2491 0034 0B4B     		ldr	r3, .L148+12
 2492 0036 1968     		ldr	r1, [r3]
 2493 0038 094B     		ldr	r3, .L148+8
 2494 003a 1A68     		ldr	r2, [r3]
 2495 003c 1346     		mov	r3, r2
 2496 003e 9B00     		lsls	r3, r3, #2
 2497 0040 1344     		add	r3, r3, r2
 2498 0042 9B00     		lsls	r3, r3, #2
 2499 0044 0B44     		add	r3, r3, r1
 2500 0046 9B68     		ldr	r3, [r3, #8]
 2501 0048 DAB2     		uxtb	r2, r3
 2502 004a 044B     		ldr	r3, .L148+4
 2503 004c 1A70     		strb	r2, [r3]
 716:main.c        **** 
 717:main.c        **** }
 2504              		.loc 1 717 0
 2505 004e 00BF     		nop
 2506 0050 BD46     		mov	sp, r7
 2507              		.cfi_def_cfa_register 13
 2508              		@ sp needed
 2509 0052 80BC     		pop	{r7}
 2510              		.cfi_restore 7
 2511              		.cfi_def_cfa_offset 0
 2512 0054 7047     		bx	lr
 2513              	.L149:
 2514 0056 00BF     		.align	2
 2515              	.L148:
 2516 0058 3E000000 		.word	currentIgnoreL
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 58


 2517 005c 3F000000 		.word	currentIgnoreR
 2518 0060 14000000 		.word	instructionIndex
 2519 0064 00000000 		.word	instructionList
 2520              		.cfi_endproc
 2521              	.LFE77:
 2522              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 2523              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 2524              		.align	2
 2525              		.global	GetInstructionAtIndex
 2526              		.thumb
 2527              		.thumb_func
 2528              		.type	GetInstructionAtIndex, %function
 2529              	GetInstructionAtIndex:
 2530              	.LFB78:
 718:main.c        **** 
 719:main.c        **** Instruction GetInstructionAtIndex() {
 2531              		.loc 1 719 0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 32
 2534              		@ frame_needed = 1, uses_anonymous_args = 0
 2535              		@ link register save eliminated.
 2536 0000 B0B4     		push	{r4, r5, r7}
 2537              		.cfi_def_cfa_offset 12
 2538              		.cfi_offset 4, -12
 2539              		.cfi_offset 5, -8
 2540              		.cfi_offset 7, -4
 2541 0002 89B0     		sub	sp, sp, #36
 2542              		.cfi_def_cfa_offset 48
 2543 0004 00AF     		add	r7, sp, #0
 2544              		.cfi_def_cfa_register 7
 2545 0006 7860     		str	r0, [r7, #4]
 720:main.c        ****     Instruction nextInstruction;
 721:main.c        ****     // input is list of instructions and robot will react accordingly
 722:main.c        ****     nextInstruction.direction = instructionList[instructionIndex].direction;        
 2546              		.loc 1 722 0
 2547 0008 164B     		ldr	r3, .L152
 2548 000a 1968     		ldr	r1, [r3]
 2549 000c 164B     		ldr	r3, .L152+4
 2550 000e 1A68     		ldr	r2, [r3]
 2551 0010 1346     		mov	r3, r2
 2552 0012 9B00     		lsls	r3, r3, #2
 2553 0014 1344     		add	r3, r3, r2
 2554 0016 9B00     		lsls	r3, r3, #2
 2555 0018 0B44     		add	r3, r3, r1
 2556 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2557 001c 3B73     		strb	r3, [r7, #12]
 723:main.c        ****     nextInstruction.expectedOrientation = instructionList[instructionIndex].expectedOrientation;
 2558              		.loc 1 723 0
 2559 001e 114B     		ldr	r3, .L152
 2560 0020 1968     		ldr	r1, [r3]
 2561 0022 114B     		ldr	r3, .L152+4
 2562 0024 1A68     		ldr	r2, [r3]
 2563 0026 1346     		mov	r3, r2
 2564 0028 9B00     		lsls	r3, r3, #2
 2565 002a 1344     		add	r3, r3, r2
 2566 002c 9B00     		lsls	r3, r3, #2
 2567 002e 0B44     		add	r3, r3, r1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 59


 2568 0030 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2569 0032 3B77     		strb	r3, [r7, #28]
 724:main.c        ****     nextInstruction.distanceToTarget = instructionList[instructionIndex].distanceToTarget;
 2570              		.loc 1 724 0
 2571 0034 0B4B     		ldr	r3, .L152
 2572 0036 1968     		ldr	r1, [r3]
 2573 0038 0B4B     		ldr	r3, .L152+4
 2574 003a 1A68     		ldr	r2, [r3]
 2575 003c 1346     		mov	r3, r2
 2576 003e 9B00     		lsls	r3, r3, #2
 2577 0040 1344     		add	r3, r3, r2
 2578 0042 9B00     		lsls	r3, r3, #2
 2579 0044 0B44     		add	r3, r3, r1
 2580 0046 DB68     		ldr	r3, [r3, #12]
 2581 0048 BB61     		str	r3, [r7, #24]
 725:main.c        ****     return nextInstruction;
 2582              		.loc 1 725 0
 2583 004a 7B68     		ldr	r3, [r7, #4]
 2584 004c 1D46     		mov	r5, r3
 2585 004e 07F10C04 		add	r4, r7, #12
 2586 0052 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2587 0054 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 2588 0056 2368     		ldr	r3, [r4]
 2589 0058 2B60     		str	r3, [r5]
 726:main.c        **** }
 2590              		.loc 1 726 0
 2591 005a 7868     		ldr	r0, [r7, #4]
 2592 005c 2437     		adds	r7, r7, #36
 2593              		.cfi_def_cfa_offset 12
 2594 005e BD46     		mov	sp, r7
 2595              		.cfi_def_cfa_register 13
 2596              		@ sp needed
 2597 0060 B0BC     		pop	{r4, r5, r7}
 2598              		.cfi_restore 7
 2599              		.cfi_restore 5
 2600              		.cfi_restore 4
 2601              		.cfi_def_cfa_offset 0
 2602 0062 7047     		bx	lr
 2603              	.L153:
 2604              		.align	2
 2605              	.L152:
 2606 0064 00000000 		.word	instructionList
 2607 0068 14000000 		.word	instructionIndex
 2608              		.cfi_endproc
 2609              	.LFE78:
 2610              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 2611              		.section	.text.RotateClockwise180Degrees,"ax",%progbits
 2612              		.align	2
 2613              		.global	RotateClockwise180Degrees
 2614              		.thumb
 2615              		.thumb_func
 2616              		.type	RotateClockwise180Degrees, %function
 2617              	RotateClockwise180Degrees:
 2618              	.LFB79:
 727:main.c        **** 
 728:main.c        **** void RotateClockwise180Degrees() {
 2619              		.loc 1 728 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 60


 2620              		.cfi_startproc
 2621              		@ args = 0, pretend = 0, frame = 8
 2622              		@ frame_needed = 1, uses_anonymous_args = 0
 2623 0000 80B5     		push	{r7, lr}
 2624              		.cfi_def_cfa_offset 8
 2625              		.cfi_offset 7, -8
 2626              		.cfi_offset 14, -4
 2627 0002 82B0     		sub	sp, sp, #8
 2628              		.cfi_def_cfa_offset 16
 2629 0004 00AF     		add	r7, sp, #0
 2630              		.cfi_def_cfa_register 7
 729:main.c        ****     uint16 count1 = (32767 + (6553 * 0.9));
 2631              		.loc 1 729 0
 2632 0006 49F20873 		movw	r3, #38664
 2633 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 730:main.c        ****     uint16 count2 = (32767 + (6553 * 0.9));
 2634              		.loc 1 730 0
 2635 000c 49F20873 		movw	r3, #38664
 2636 0010 3B80     		strh	r3, [r7]	@ movhi
 731:main.c        ****     PWM_1_WriteCompare(count1);
 2637              		.loc 1 731 0
 2638 0012 7B88     		ldrh	r3, [r7, #2]
 2639 0014 1846     		mov	r0, r3
 2640 0016 FFF7FEFF 		bl	PWM_1_WriteCompare
 732:main.c        ****     PWM_2_WriteCompare(count2);
 2641              		.loc 1 732 0
 2642 001a 3B88     		ldrh	r3, [r7]
 2643 001c 1846     		mov	r0, r3
 2644 001e FFF7FEFF 		bl	PWM_2_WriteCompare
 733:main.c        ****     
 734:main.c        ****     int quadPulseCount = 0;
 2645              		.loc 1 734 0
 2646 0022 0023     		movs	r3, #0
 2647 0024 7B60     		str	r3, [r7, #4]
 735:main.c        ****     QuadDec_M1_SetCounter(0);
 2648              		.loc 1 735 0
 2649 0026 0020     		movs	r0, #0
 2650 0028 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 736:main.c        ****     // Before 180, save initial configuration
 737:main.c        ****     if (!s3) {
 2651              		.loc 1 737 0
 2652 002c 3A4B     		ldr	r3, .L167
 2653 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2654 0030 002B     		cmp	r3, #0
 2655 0032 06D1     		bne	.L155
 738:main.c        ****         totalLineCount++;    
 2656              		.loc 1 738 0
 2657 0034 394B     		ldr	r3, .L167+4
 2658 0036 1B78     		ldrb	r3, [r3]
 2659 0038 DBB2     		uxtb	r3, r3
 2660 003a 0133     		adds	r3, r3, #1
 2661 003c DAB2     		uxtb	r2, r3
 2662 003e 374B     		ldr	r3, .L167+4
 2663 0040 1A70     		strb	r2, [r3]
 2664              	.L155:
 739:main.c        ****     }
 740:main.c        ****     if (!s4) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 61


 2665              		.loc 1 740 0
 2666 0042 374B     		ldr	r3, .L167+8
 2667 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2668 0046 002B     		cmp	r3, #0
 2669 0048 06D1     		bne	.L156
 741:main.c        ****         totalLineCount++;    
 2670              		.loc 1 741 0
 2671 004a 344B     		ldr	r3, .L167+4
 2672 004c 1B78     		ldrb	r3, [r3]
 2673 004e DBB2     		uxtb	r3, r3
 2674 0050 0133     		adds	r3, r3, #1
 2675 0052 DAB2     		uxtb	r2, r3
 2676 0054 314B     		ldr	r3, .L167+4
 2677 0056 1A70     		strb	r2, [r3]
 2678              	.L156:
 742:main.c        ****     }
 743:main.c        ****     if (!s5 || !s6) {
 2679              		.loc 1 743 0
 2680 0058 324B     		ldr	r3, .L167+12
 2681 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2682 005c 002B     		cmp	r3, #0
 2683 005e 03D0     		beq	.L157
 2684              		.loc 1 743 0 is_stmt 0 discriminator 1
 2685 0060 314B     		ldr	r3, .L167+16
 2686 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2687 0064 002B     		cmp	r3, #0
 2688 0066 2AD1     		bne	.L159
 2689              	.L157:
 744:main.c        ****         totalLineCount++;    
 2690              		.loc 1 744 0 is_stmt 1
 2691 0068 2C4B     		ldr	r3, .L167+4
 2692 006a 1B78     		ldrb	r3, [r3]
 2693 006c DBB2     		uxtb	r3, r3
 2694 006e 0133     		adds	r3, r3, #1
 2695 0070 DAB2     		uxtb	r2, r3
 2696 0072 2A4B     		ldr	r3, .L167+4
 2697 0074 1A70     		strb	r2, [r3]
 745:main.c        ****     }
 746:main.c        ****     
 747:main.c        ****     // During 180
 748:main.c        ****     while(quadPulseCount < 210) {
 2698              		.loc 1 748 0
 2699 0076 22E0     		b	.L159
 2700              	.L162:
 749:main.c        ****         quadPulseCount = QuadDec_M1_GetCounter();
 2701              		.loc 1 749 0
 2702 0078 FFF7FEFF 		bl	QuadDec_M1_GetCounter
 2703 007c 0346     		mov	r3, r0
 2704 007e 7B60     		str	r3, [r7, #4]
 750:main.c        ****         if (!s3) {
 2705              		.loc 1 750 0
 2706 0080 254B     		ldr	r3, .L167
 2707 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2708 0084 002B     		cmp	r3, #0
 2709 0086 02D1     		bne	.L160
 751:main.c        ****             onLineFlag = 1;    
 2710              		.loc 1 751 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 62


 2711 0088 284B     		ldr	r3, .L167+20
 2712 008a 0122     		movs	r2, #1
 2713 008c 1A70     		strb	r2, [r3]
 2714              	.L160:
 752:main.c        ****         }
 753:main.c        ****         
 754:main.c        ****         if (onLineFlag) {
 2715              		.loc 1 754 0
 2716 008e 274B     		ldr	r3, .L167+20
 2717 0090 1B78     		ldrb	r3, [r3]
 2718 0092 DBB2     		uxtb	r3, r3
 2719 0094 002B     		cmp	r3, #0
 2720 0096 06D0     		beq	.L161
 755:main.c        ****             lineCount++;    
 2721              		.loc 1 755 0
 2722 0098 254B     		ldr	r3, .L167+24
 2723 009a 1B78     		ldrb	r3, [r3]
 2724 009c DBB2     		uxtb	r3, r3
 2725 009e 0133     		adds	r3, r3, #1
 2726 00a0 DAB2     		uxtb	r2, r3
 2727 00a2 234B     		ldr	r3, .L167+24
 2728 00a4 1A70     		strb	r2, [r3]
 2729              	.L161:
 756:main.c        ****         }
 757:main.c        ****         
 758:main.c        ****         if (!onLineFlag) {
 2730              		.loc 1 758 0
 2731 00a6 214B     		ldr	r3, .L167+20
 2732 00a8 1B78     		ldrb	r3, [r3]
 2733 00aa DBB2     		uxtb	r3, r3
 2734 00ac 002B     		cmp	r3, #0
 2735 00ae 06D1     		bne	.L159
 759:main.c        ****             if (s3) {
 2736              		.loc 1 759 0
 2737 00b0 194B     		ldr	r3, .L167
 2738 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2739 00b4 002B     		cmp	r3, #0
 2740 00b6 02D0     		beq	.L159
 760:main.c        ****                 onLineFlag = 0;    
 2741              		.loc 1 760 0
 2742 00b8 1C4B     		ldr	r3, .L167+20
 2743 00ba 0022     		movs	r2, #0
 2744 00bc 1A70     		strb	r2, [r3]
 2745              	.L159:
 748:main.c        ****         quadPulseCount = QuadDec_M1_GetCounter();
 2746              		.loc 1 748 0
 2747 00be 7B68     		ldr	r3, [r7, #4]
 2748 00c0 D12B     		cmp	r3, #209
 2749 00c2 D9DD     		ble	.L162
 761:main.c        ****             }
 762:main.c        ****         }
 763:main.c        ****     }
 764:main.c        ****     
 765:main.c        ****     // After 180
 766:main.c        ****     if (totalLineCount == 0) {
 2750              		.loc 1 766 0
 2751 00c4 154B     		ldr	r3, .L167+4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 63


 2752 00c6 1B78     		ldrb	r3, [r3]
 2753 00c8 DBB2     		uxtb	r3, r3
 2754 00ca 002B     		cmp	r3, #0
 2755 00cc 06D1     		bne	.L163
 767:main.c        ****         // we are on no lines
 768:main.c        ****         tooEarlyFlag = 1;
 2756              		.loc 1 768 0
 2757 00ce 194B     		ldr	r3, .L167+28
 2758 00d0 0122     		movs	r2, #1
 2759 00d2 1A70     		strb	r2, [r3]
 769:main.c        ****         QuadDec_M1_SetCounter(0);
 2760              		.loc 1 769 0
 2761 00d4 0020     		movs	r0, #0
 2762 00d6 FFF7FEFF 		bl	QuadDec_M1_SetCounter
 770:main.c        ****         return;
 2763              		.loc 1 770 0
 2764 00da 19E0     		b	.L154
 2765              	.L163:
 771:main.c        ****     }
 772:main.c        ****     else if (lineCount > totalLineCount) {
 2766              		.loc 1 772 0
 2767 00dc 144B     		ldr	r3, .L167+24
 2768 00de 1B78     		ldrb	r3, [r3]
 2769 00e0 DAB2     		uxtb	r2, r3
 2770 00e2 0E4B     		ldr	r3, .L167+4
 2771 00e4 1B78     		ldrb	r3, [r3]
 2772 00e6 DBB2     		uxtb	r3, r3
 2773 00e8 9A42     		cmp	r2, r3
 2774 00ea 03D9     		bls	.L165
 773:main.c        ****         tooLateFlag = 1;    
 2775              		.loc 1 773 0
 2776 00ec 124B     		ldr	r3, .L167+32
 2777 00ee 0122     		movs	r2, #1
 2778 00f0 1A70     		strb	r2, [r3]
 2779 00f2 0AE0     		b	.L166
 2780              	.L165:
 774:main.c        ****     }
 775:main.c        ****     else if (lineCount < totalLineCount) {
 2781              		.loc 1 775 0
 2782 00f4 0E4B     		ldr	r3, .L167+24
 2783 00f6 1B78     		ldrb	r3, [r3]
 2784 00f8 DAB2     		uxtb	r2, r3
 2785 00fa 084B     		ldr	r3, .L167+4
 2786 00fc 1B78     		ldrb	r3, [r3]
 2787 00fe DBB2     		uxtb	r3, r3
 2788 0100 9A42     		cmp	r2, r3
 2789 0102 02D2     		bcs	.L166
 776:main.c        ****         tooEarlyFlag = 1;    
 2790              		.loc 1 776 0
 2791 0104 0B4B     		ldr	r3, .L167+28
 2792 0106 0122     		movs	r2, #1
 2793 0108 1A70     		strb	r2, [r3]
 2794              	.L166:
 777:main.c        ****     }
 778:main.c        ****     QuadDec_M1_SetCounter(0);
 2795              		.loc 1 778 0
 2796 010a 0020     		movs	r0, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 64


 2797 010c FFF7FEFF 		bl	QuadDec_M1_SetCounter
 2798              	.L154:
 779:main.c        **** }
 2799              		.loc 1 779 0
 2800 0110 0837     		adds	r7, r7, #8
 2801              		.cfi_def_cfa_offset 8
 2802 0112 BD46     		mov	sp, r7
 2803              		.cfi_def_cfa_register 13
 2804              		@ sp needed
 2805 0114 80BD     		pop	{r7, pc}
 2806              	.L168:
 2807 0116 00BF     		.align	2
 2808              	.L167:
 2809 0118 00000000 		.word	s3
 2810 011c 40000000 		.word	totalLineCount
 2811 0120 00000000 		.word	s4
 2812 0124 00000000 		.word	s5
 2813 0128 00000000 		.word	s6
 2814 012c 42000000 		.word	onLineFlag
 2815 0130 41000000 		.word	lineCount
 2816 0134 43000000 		.word	tooEarlyFlag
 2817 0138 44000000 		.word	tooLateFlag
 2818              		.cfi_endproc
 2819              	.LFE79:
 2820              		.size	RotateClockwise180Degrees, .-RotateClockwise180Degrees
 2821              		.section	.text.SetRobotMovement,"ax",%progbits
 2822              		.align	2
 2823              		.global	SetRobotMovement
 2824              		.thumb
 2825              		.thumb_func
 2826              		.type	SetRobotMovement, %function
 2827              	SetRobotMovement:
 2828              	.LFB80:
 780:main.c        **** 
 781:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 782:main.c        **** void SetRobotMovement() {
 2829              		.loc 1 782 0
 2830              		.cfi_startproc
 2831              		@ args = 0, pretend = 0, frame = 24
 2832              		@ frame_needed = 1, uses_anonymous_args = 0
 2833 0000 B0B5     		push	{r4, r5, r7, lr}
 2834              		.cfi_def_cfa_offset 16
 2835              		.cfi_offset 4, -16
 2836              		.cfi_offset 5, -12
 2837              		.cfi_offset 7, -8
 2838              		.cfi_offset 14, -4
 2839 0002 86B0     		sub	sp, sp, #24
 2840              		.cfi_def_cfa_offset 40
 2841 0004 00AF     		add	r7, sp, #0
 2842              		.cfi_def_cfa_register 7
 783:main.c        ****     //MoveToNextInstruction(); // debug purposes
 784:main.c        ****     previousInstruction = currentInstruction;
 2843              		.loc 1 784 0
 2844 0006 2D4A     		ldr	r2, .L185
 2845 0008 2D4B     		ldr	r3, .L185+4
 2846 000a 1446     		mov	r4, r2
 2847 000c 1D46     		mov	r5, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 65


 2848 000e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2849 0010 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2850 0012 2B68     		ldr	r3, [r5]
 2851 0014 2360     		str	r3, [r4]
 785:main.c        ****     currentInstruction = GetInstructionAtIndex(); // get current/ next instruction
 2852              		.loc 1 785 0
 2853 0016 2A4C     		ldr	r4, .L185+4
 2854 0018 3B46     		mov	r3, r7
 2855 001a 1846     		mov	r0, r3
 2856 001c FFF7FEFF 		bl	GetInstructionAtIndex
 2857 0020 2546     		mov	r5, r4
 2858 0022 3C46     		mov	r4, r7
 2859 0024 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 2860 0026 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 2861 0028 2368     		ldr	r3, [r4]
 2862 002a 2B60     		str	r3, [r5]
 786:main.c        ****     previousDirection = currentDirection;
 2863              		.loc 1 786 0
 2864 002c 254B     		ldr	r3, .L185+8
 2865 002e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2866 0030 254B     		ldr	r3, .L185+12
 2867 0032 1A70     		strb	r2, [r3]
 787:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 2868              		.loc 1 787 0
 2869 0034 FFF7FEFF 		bl	GetMovementAccordingToInstruction
 2870 0038 0346     		mov	r3, r0
 2871 003a 1A46     		mov	r2, r3
 2872 003c 214B     		ldr	r3, .L185+8
 2873 003e 1A70     		strb	r2, [r3]
 788:main.c        ****     // move robot depending on sensors
 789:main.c        ****     switch (currentDirection) {
 2874              		.loc 1 789 0
 2875 0040 204B     		ldr	r3, .L185+8
 2876 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2877 0044 0A2B     		cmp	r3, #10
 2878 0046 35D8     		bhi	.L183
 2879 0048 01A2     		adr	r2, .L172
 2880 004a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2881 004e 00BF     		.p2align 2
 2882              	.L172:
 2883 0050 7D000000 		.word	.L171+1
 2884 0054 83000000 		.word	.L173+1
 2885 0058 89000000 		.word	.L174+1
 2886 005c 95000000 		.word	.L175+1
 2887 0060 8F000000 		.word	.L176+1
 2888 0064 9B000000 		.word	.L177+1
 2889 0068 B3000000 		.word	.L184+1
 2890 006c B3000000 		.word	.L184+1
 2891 0070 A1000000 		.word	.L180+1
 2892 0074 A7000000 		.word	.L181+1
 2893 0078 AD000000 		.word	.L182+1
 2894              		.p2align 1
 2895              	.L171:
 790:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 791:main.c        ****         case Forward:
 792:main.c        ****             moveForward();
 2896              		.loc 1 792 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 66


 2897 007c FFF7FEFF 		bl	moveForward
 793:main.c        ****             break;
 2898              		.loc 1 793 0
 2899 0080 18E0     		b	.L170
 2900              	.L173:
 794:main.c        ****         case TurnRight:
 795:main.c        ****             turnRight();
 2901              		.loc 1 795 0
 2902 0082 FFF7FEFF 		bl	turnRight
 796:main.c        ****             break;
 2903              		.loc 1 796 0
 2904 0086 15E0     		b	.L170
 2905              	.L174:
 797:main.c        ****         case TurnLeft:
 798:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 2906              		.loc 1 798 0
 2907 0088 FFF7FEFF 		bl	turnLeft
 799:main.c        ****             break;
 2908              		.loc 1 799 0
 2909 008c 12E0     		b	.L170
 2910              	.L176:
 800:main.c        ****         case AdjustToTheRight:
 801:main.c        ****             adjustRight();
 2911              		.loc 1 801 0
 2912 008e FFF7FEFF 		bl	adjustRight
 802:main.c        ****             break;
 2913              		.loc 1 802 0
 2914 0092 0FE0     		b	.L170
 2915              	.L175:
 803:main.c        ****         case AdjustToTheLeft:
 804:main.c        ****             adjustLeft();
 2916              		.loc 1 804 0
 2917 0094 FFF7FEFF 		bl	adjustLeft
 805:main.c        ****             break;
 2918              		.loc 1 805 0
 2919 0098 0CE0     		b	.L170
 2920              	.L177:
 806:main.c        ****         case Stop:
 807:main.c        ****             stopMoving();
 2921              		.loc 1 807 0
 2922 009a FFF7FEFF 		bl	stopMoving
 808:main.c        ****             break;
 2923              		.loc 1 808 0
 2924 009e 09E0     		b	.L170
 2925              	.L180:
 809:main.c        ****         case ForwardAfterTurn:
 810:main.c        ****             moveForward();
 2926              		.loc 1 810 0
 2927 00a0 FFF7FEFF 		bl	moveForward
 811:main.c        ****             break;
 2928              		.loc 1 811 0
 2929 00a4 06E0     		b	.L170
 2930              	.L181:
 812:main.c        ****         case Backward:
 813:main.c        ****             moveBackward();
 2931              		.loc 1 813 0
 2932 00a6 FFF7FEFF 		bl	moveBackward
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 67


 814:main.c        ****             break;
 2933              		.loc 1 814 0
 2934 00aa 03E0     		b	.L170
 2935              	.L182:
 815:main.c        ****         case waitForTurn:
 816:main.c        ****             break;
 817:main.c        ****         case Spin180:
 818:main.c        ****             RotateClockwise180Degrees();
 2936              		.loc 1 818 0
 2937 00ac FFF7FEFF 		bl	RotateClockwise180Degrees
 819:main.c        ****             break;
 2938              		.loc 1 819 0
 2939 00b0 00E0     		b	.L170
 2940              	.L184:
 820:main.c        ****         case Unknown:
 821:main.c        ****             break;  
 2941              		.loc 1 821 0
 2942 00b2 00BF     		nop
 2943              	.L170:
 2944              	.L183:
 822:main.c        ****     }
 823:main.c        **** }
 2945              		.loc 1 823 0
 2946 00b4 00BF     		nop
 2947 00b6 1837     		adds	r7, r7, #24
 2948              		.cfi_def_cfa_offset 16
 2949 00b8 BD46     		mov	sp, r7
 2950              		.cfi_def_cfa_register 13
 2951              		@ sp needed
 2952 00ba B0BD     		pop	{r4, r5, r7, pc}
 2953              	.L186:
 2954              		.align	2
 2955              	.L185:
 2956 00bc 00000000 		.word	previousInstruction
 2957 00c0 00000000 		.word	currentInstruction
 2958 00c4 00000000 		.word	currentDirection
 2959 00c8 00000000 		.word	previousDirection
 2960              		.cfi_endproc
 2961              	.LFE80:
 2962              		.size	SetRobotMovement, .-SetRobotMovement
 2963              		.text
 2964              	.Letext0:
 2965              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2966              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2967              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2968              		.file 5 "vars.h"
 2969              		.file 6 "pathfinding.h"
 2970              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2971              		.file 8 "map.h"
 2972              		.section	.debug_info,"",%progbits
 2973              	.Ldebug_info0:
 2974 0000 130A0000 		.4byte	0xa13
 2975 0004 0400     		.2byte	0x4
 2976 0006 00000000 		.4byte	.Ldebug_abbrev0
 2977 000a 04       		.byte	0x4
 2978 000b 01       		.uleb128 0x1
 2979 000c A4000000 		.4byte	.LASF158
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 68


 2980 0010 0C       		.byte	0xc
 2981 0011 5E040000 		.4byte	.LASF159
 2982 0015 BA050000 		.4byte	.LASF160
 2983 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2984 001d 00000000 		.4byte	0
 2985 0021 00000000 		.4byte	.Ldebug_line0
 2986 0025 02       		.uleb128 0x2
 2987 0026 01       		.byte	0x1
 2988 0027 06       		.byte	0x6
 2989 0028 79000000 		.4byte	.LASF0
 2990 002c 02       		.uleb128 0x2
 2991 002d 01       		.byte	0x1
 2992 002e 08       		.byte	0x8
 2993 002f 5E060000 		.4byte	.LASF1
 2994 0033 02       		.uleb128 0x2
 2995 0034 02       		.byte	0x2
 2996 0035 05       		.byte	0x5
 2997 0036 83040000 		.4byte	.LASF2
 2998 003a 02       		.uleb128 0x2
 2999 003b 02       		.byte	0x2
 3000 003c 07       		.byte	0x7
 3001 003d FA030000 		.4byte	.LASF3
 3002 0041 03       		.uleb128 0x3
 3003 0042 54040000 		.4byte	.LASF12
 3004 0046 02       		.byte	0x2
 3005 0047 3F       		.byte	0x3f
 3006 0048 4C000000 		.4byte	0x4c
 3007 004c 02       		.uleb128 0x2
 3008 004d 04       		.byte	0x4
 3009 004e 05       		.byte	0x5
 3010 004f 33020000 		.4byte	.LASF4
 3011 0053 02       		.uleb128 0x2
 3012 0054 04       		.byte	0x4
 3013 0055 07       		.byte	0x7
 3014 0056 9F030000 		.4byte	.LASF5
 3015 005a 02       		.uleb128 0x2
 3016 005b 08       		.byte	0x8
 3017 005c 05       		.byte	0x5
 3018 005d 9C020000 		.4byte	.LASF6
 3019 0061 02       		.uleb128 0x2
 3020 0062 08       		.byte	0x8
 3021 0063 07       		.byte	0x7
 3022 0064 54010000 		.4byte	.LASF7
 3023 0068 04       		.uleb128 0x4
 3024 0069 04       		.byte	0x4
 3025 006a 05       		.byte	0x5
 3026 006b 696E7400 		.ascii	"int\000"
 3027 006f 02       		.uleb128 0x2
 3028 0070 04       		.byte	0x4
 3029 0071 07       		.byte	0x7
 3030 0072 8C070000 		.4byte	.LASF8
 3031 0076 02       		.uleb128 0x2
 3032 0077 08       		.byte	0x8
 3033 0078 04       		.byte	0x4
 3034 0079 6B070000 		.4byte	.LASF9
 3035 007d 02       		.uleb128 0x2
 3036 007e 04       		.byte	0x4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 69


 3037 007f 07       		.byte	0x7
 3038 0080 0E050000 		.4byte	.LASF10
 3039 0084 02       		.uleb128 0x2
 3040 0085 01       		.byte	0x1
 3041 0086 08       		.byte	0x8
 3042 0087 77070000 		.4byte	.LASF11
 3043 008b 03       		.uleb128 0x3
 3044 008c 56060000 		.4byte	.LASF13
 3045 0090 03       		.byte	0x3
 3046 0091 2C       		.byte	0x2c
 3047 0092 41000000 		.4byte	0x41
 3048 0096 05       		.uleb128 0x5
 3049 0097 96020000 		.4byte	.LASF14
 3050 009b 04       		.byte	0x4
 3051 009c E701     		.2byte	0x1e7
 3052 009e 2C000000 		.4byte	0x2c
 3053 00a2 05       		.uleb128 0x5
 3054 00a3 6C060000 		.4byte	.LASF15
 3055 00a7 04       		.byte	0x4
 3056 00a8 E801     		.2byte	0x1e8
 3057 00aa 3A000000 		.4byte	0x3a
 3058 00ae 05       		.uleb128 0x5
 3059 00af 14030000 		.4byte	.LASF16
 3060 00b3 04       		.byte	0x4
 3061 00b4 E901     		.2byte	0x1e9
 3062 00b6 53000000 		.4byte	0x53
 3063 00ba 05       		.uleb128 0x5
 3064 00bb 44040000 		.4byte	.LASF17
 3065 00bf 04       		.byte	0x4
 3066 00c0 EA01     		.2byte	0x1ea
 3067 00c2 25000000 		.4byte	0x25
 3068 00c6 05       		.uleb128 0x5
 3069 00c7 C8080000 		.4byte	.LASF18
 3070 00cb 04       		.byte	0x4
 3071 00cc EB01     		.2byte	0x1eb
 3072 00ce 33000000 		.4byte	0x33
 3073 00d2 02       		.uleb128 0x2
 3074 00d3 04       		.byte	0x4
 3075 00d4 04       		.byte	0x4
 3076 00d5 B4050000 		.4byte	.LASF19
 3077 00d9 02       		.uleb128 0x2
 3078 00da 08       		.byte	0x8
 3079 00db 04       		.byte	0x4
 3080 00dc AA020000 		.4byte	.LASF20
 3081 00e0 06       		.uleb128 0x6
 3082 00e1 96000000 		.4byte	0x96
 3083 00e5 06       		.uleb128 0x6
 3084 00e6 AE000000 		.4byte	0xae
 3085 00ea 07       		.uleb128 0x7
 3086 00eb 96000000 		.4byte	0x96
 3087 00ef FA000000 		.4byte	0xfa
 3088 00f3 08       		.uleb128 0x8
 3089 00f4 7D000000 		.4byte	0x7d
 3090 00f8 03       		.byte	0x3
 3091 00f9 00       		.byte	0
 3092 00fa 09       		.uleb128 0x9
 3093 00fb 84030000 		.4byte	.LASF49
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 70


 3094 00ff 20       		.byte	0x20
 3095 0100 05       		.byte	0x5
 3096 0101 28       		.byte	0x28
 3097 0102 D3010000 		.4byte	0x1d3
 3098 0106 0A       		.uleb128 0xa
 3099 0107 99070000 		.4byte	.LASF21
 3100 010b 05       		.byte	0x5
 3101 010c 2A       		.byte	0x2a
 3102 010d BA000000 		.4byte	0xba
 3103 0111 00       		.byte	0
 3104 0112 0A       		.uleb128 0xa
 3105 0113 9E070000 		.4byte	.LASF22
 3106 0117 05       		.byte	0x5
 3107 0118 2B       		.byte	0x2b
 3108 0119 96000000 		.4byte	0x96
 3109 011d 01       		.byte	0x1
 3110 011e 0A       		.uleb128 0xa
 3111 011f E3070000 		.4byte	.LASF23
 3112 0123 05       		.byte	0x5
 3113 0124 2C       		.byte	0x2c
 3114 0125 C6000000 		.4byte	0xc6
 3115 0129 02       		.byte	0x2
 3116 012a 0A       		.uleb128 0xa
 3117 012b F0060000 		.4byte	.LASF24
 3118 012f 05       		.byte	0x5
 3119 0130 2D       		.byte	0x2d
 3120 0131 C6000000 		.4byte	0xc6
 3121 0135 04       		.byte	0x4
 3122 0136 0A       		.uleb128 0xa
 3123 0137 27090000 		.4byte	.LASF25
 3124 013b 05       		.byte	0x5
 3125 013c 2E       		.byte	0x2e
 3126 013d C6000000 		.4byte	0xc6
 3127 0141 06       		.byte	0x6
 3128 0142 0A       		.uleb128 0xa
 3129 0143 85010000 		.4byte	.LASF26
 3130 0147 05       		.byte	0x5
 3131 0148 2F       		.byte	0x2f
 3132 0149 C6000000 		.4byte	0xc6
 3133 014d 08       		.byte	0x8
 3134 014e 0A       		.uleb128 0xa
 3135 014f 7C070000 		.4byte	.LASF27
 3136 0153 05       		.byte	0x5
 3137 0154 30       		.byte	0x30
 3138 0155 C6000000 		.4byte	0xc6
 3139 0159 0A       		.byte	0xa
 3140 015a 0A       		.uleb128 0xa
 3141 015b 06090000 		.4byte	.LASF28
 3142 015f 05       		.byte	0x5
 3143 0160 31       		.byte	0x31
 3144 0161 C6000000 		.4byte	0xc6
 3145 0165 0C       		.byte	0xc
 3146 0166 0A       		.uleb128 0xa
 3147 0167 41010000 		.4byte	.LASF29
 3148 016b 05       		.byte	0x5
 3149 016c 32       		.byte	0x32
 3150 016d C6000000 		.4byte	0xc6
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 71


 3151 0171 0E       		.byte	0xe
 3152 0172 0A       		.uleb128 0xa
 3153 0173 56050000 		.4byte	.LASF30
 3154 0177 05       		.byte	0x5
 3155 0178 33       		.byte	0x33
 3156 0179 C6000000 		.4byte	0xc6
 3157 017d 10       		.byte	0x10
 3158 017e 0A       		.uleb128 0xa
 3159 017f 65040000 		.4byte	.LASF31
 3160 0183 05       		.byte	0x5
 3161 0184 34       		.byte	0x34
 3162 0185 C6000000 		.4byte	0xc6
 3163 0189 12       		.byte	0x12
 3164 018a 0A       		.uleb128 0xa
 3165 018b EE040000 		.4byte	.LASF32
 3166 018f 05       		.byte	0x5
 3167 0190 35       		.byte	0x35
 3168 0191 C6000000 		.4byte	0xc6
 3169 0195 14       		.byte	0x14
 3170 0196 0A       		.uleb128 0xa
 3171 0197 2F050000 		.4byte	.LASF33
 3172 019b 05       		.byte	0x5
 3173 019c 36       		.byte	0x36
 3174 019d C6000000 		.4byte	0xc6
 3175 01a1 16       		.byte	0x16
 3176 01a2 0A       		.uleb128 0xa
 3177 01a3 88060000 		.4byte	.LASF34
 3178 01a7 05       		.byte	0x5
 3179 01a8 37       		.byte	0x37
 3180 01a9 C6000000 		.4byte	0xc6
 3181 01ad 18       		.byte	0x18
 3182 01ae 0A       		.uleb128 0xa
 3183 01af 5E050000 		.4byte	.LASF35
 3184 01b3 05       		.byte	0x5
 3185 01b4 38       		.byte	0x38
 3186 01b5 C6000000 		.4byte	0xc6
 3187 01b9 1A       		.byte	0x1a
 3188 01ba 0A       		.uleb128 0xa
 3189 01bb 1F000000 		.4byte	.LASF36
 3190 01bf 05       		.byte	0x5
 3191 01c0 39       		.byte	0x39
 3192 01c1 C6000000 		.4byte	0xc6
 3193 01c5 1C       		.byte	0x1c
 3194 01c6 0A       		.uleb128 0xa
 3195 01c7 36030000 		.4byte	.LASF37
 3196 01cb 05       		.byte	0x5
 3197 01cc 3A       		.byte	0x3a
 3198 01cd C6000000 		.4byte	0xc6
 3199 01d1 1E       		.byte	0x1e
 3200 01d2 00       		.byte	0
 3201 01d3 0B       		.uleb128 0xb
 3202 01d4 0E000000 		.4byte	.LASF41
 3203 01d8 01       		.byte	0x1
 3204 01d9 2C000000 		.4byte	0x2c
 3205 01dd 06       		.byte	0x6
 3206 01de 0D       		.byte	0xd
 3207 01df FB010000 		.4byte	0x1fb
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 72


 3208 01e3 0C       		.uleb128 0xc
 3209 01e4 557000   		.ascii	"Up\000"
 3210 01e7 00       		.byte	0
 3211 01e8 0D       		.uleb128 0xd
 3212 01e9 BA070000 		.4byte	.LASF38
 3213 01ed 01       		.byte	0x1
 3214 01ee 0D       		.uleb128 0xd
 3215 01ef F7040000 		.4byte	.LASF39
 3216 01f3 02       		.byte	0x2
 3217 01f4 0D       		.uleb128 0xd
 3218 01f5 15070000 		.4byte	.LASF40
 3219 01f9 03       		.byte	0x3
 3220 01fa 00       		.byte	0
 3221 01fb 0B       		.uleb128 0xb
 3222 01fc 73060000 		.4byte	.LASF42
 3223 0200 01       		.byte	0x1
 3224 0201 2C000000 		.4byte	0x2c
 3225 0205 06       		.byte	0x6
 3226 0206 0E       		.byte	0xe
 3227 0207 30020000 		.4byte	0x230
 3228 020b 0D       		.uleb128 0xd
 3229 020c 0B070000 		.4byte	.LASF43
 3230 0210 00       		.byte	0
 3231 0211 0D       		.uleb128 0xd
 3232 0212 46050000 		.4byte	.LASF44
 3233 0216 01       		.byte	0x1
 3234 0217 0D       		.uleb128 0xd
 3235 0218 5A080000 		.4byte	.LASF45
 3236 021c 02       		.byte	0x2
 3237 021d 0D       		.uleb128 0xd
 3238 021e 7F010000 		.4byte	.LASF46
 3239 0222 03       		.byte	0x3
 3240 0223 0D       		.uleb128 0xd
 3241 0224 7A020000 		.4byte	.LASF47
 3242 0228 04       		.byte	0x4
 3243 0229 0D       		.uleb128 0xd
 3244 022a B4010000 		.4byte	.LASF48
 3245 022e 05       		.byte	0x5
 3246 022f 00       		.byte	0
 3247 0230 09       		.uleb128 0x9
 3248 0231 17020000 		.4byte	.LASF50
 3249 0235 14       		.byte	0x14
 3250 0236 06       		.byte	0x6
 3251 0237 10       		.byte	0x10
 3252 0238 79020000 		.4byte	0x279
 3253 023c 0A       		.uleb128 0xa
 3254 023d 91000000 		.4byte	.LASF51
 3255 0241 06       		.byte	0x6
 3256 0242 11       		.byte	0x11
 3257 0243 FB010000 		.4byte	0x1fb
 3258 0247 00       		.byte	0
 3259 0248 0A       		.uleb128 0xa
 3260 0249 DD080000 		.4byte	.LASF52
 3261 024d 06       		.byte	0x6
 3262 024e 12       		.byte	0x12
 3263 024f 68000000 		.4byte	0x68
 3264 0253 04       		.byte	0x4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 73


 3265 0254 0A       		.uleb128 0xa
 3266 0255 EE080000 		.4byte	.LASF53
 3267 0259 06       		.byte	0x6
 3268 025a 13       		.byte	0x13
 3269 025b 68000000 		.4byte	0x68
 3270 025f 08       		.byte	0x8
 3271 0260 0A       		.uleb128 0xa
 3272 0261 A3010000 		.4byte	.LASF54
 3273 0265 06       		.byte	0x6
 3274 0266 14       		.byte	0x14
 3275 0267 68000000 		.4byte	0x68
 3276 026b 0C       		.byte	0xc
 3277 026c 0A       		.uleb128 0xa
 3278 026d 6B010000 		.4byte	.LASF55
 3279 0271 06       		.byte	0x6
 3280 0272 15       		.byte	0x15
 3281 0273 D3010000 		.4byte	0x1d3
 3282 0277 10       		.byte	0x10
 3283 0278 00       		.byte	0
 3284 0279 03       		.uleb128 0x3
 3285 027a 17020000 		.4byte	.LASF50
 3286 027e 06       		.byte	0x6
 3287 027f 16       		.byte	0x16
 3288 0280 30020000 		.4byte	0x230
 3289 0284 0B       		.uleb128 0xb
 3290 0285 46000000 		.4byte	.LASF56
 3291 0289 01       		.byte	0x1
 3292 028a 2C000000 		.4byte	0x2c
 3293 028e 01       		.byte	0x1
 3294 028f 18       		.byte	0x18
 3295 0290 D7020000 		.4byte	0x2d7
 3296 0294 0D       		.uleb128 0xd
 3297 0295 F2030000 		.4byte	.LASF57
 3298 0299 00       		.byte	0
 3299 029a 0D       		.uleb128 0xd
 3300 029b 69030000 		.4byte	.LASF58
 3301 029f 01       		.byte	0x1
 3302 02a0 0D       		.uleb128 0xd
 3303 02a1 E5080000 		.4byte	.LASF59
 3304 02a5 02       		.byte	0x2
 3305 02a6 0D       		.uleb128 0xd
 3306 02a7 FB060000 		.4byte	.LASF60
 3307 02ab 03       		.byte	0x3
 3308 02ac 0D       		.uleb128 0xd
 3309 02ad E3020000 		.4byte	.LASF61
 3310 02b1 04       		.byte	0x4
 3311 02b2 0D       		.uleb128 0xd
 3312 02b3 2E020000 		.4byte	.LASF62
 3313 02b7 05       		.byte	0x5
 3314 02b8 0D       		.uleb128 0xd
 3315 02b9 13060000 		.4byte	.LASF63
 3316 02bd 06       		.byte	0x6
 3317 02be 0D       		.uleb128 0xd
 3318 02bf E6030000 		.4byte	.LASF64
 3319 02c3 07       		.byte	0x7
 3320 02c4 0D       		.uleb128 0xd
 3321 02c5 73030000 		.4byte	.LASF65
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 74


 3322 02c9 08       		.byte	0x8
 3323 02ca 0D       		.uleb128 0xd
 3324 02cb 8D020000 		.4byte	.LASF66
 3325 02cf 09       		.byte	0x9
 3326 02d0 0D       		.uleb128 0xd
 3327 02d1 84070000 		.4byte	.LASF67
 3328 02d5 0A       		.byte	0xa
 3329 02d6 00       		.byte	0
 3330 02d7 0E       		.uleb128 0xe
 3331 02d8 49040000 		.4byte	.LASF78
 3332 02dc 01       		.byte	0x1
 3333 02dd 55       		.byte	0x55
 3334 02de 00000000 		.4byte	.LFB64
 3335 02e2 EC000000 		.4byte	.LFE64-.LFB64
 3336 02e6 01       		.uleb128 0x1
 3337 02e7 9C       		.byte	0x9c
 3338 02e8 05030000 		.4byte	0x305
 3339 02ec 0F       		.uleb128 0xf
 3340 02ed 50000000 		.4byte	.LBB2
 3341 02f1 62000000 		.4byte	.LBE2-.LBB2
 3342 02f5 10       		.uleb128 0x10
 3343 02f6 5F070000 		.4byte	.LASF74
 3344 02fa 01       		.byte	0x1
 3345 02fb 62       		.byte	0x62
 3346 02fc D2000000 		.4byte	0xd2
 3347 0300 02       		.uleb128 0x2
 3348 0301 91       		.byte	0x91
 3349 0302 6C       		.sleb128 -20
 3350 0303 00       		.byte	0
 3351 0304 00       		.byte	0
 3352 0305 11       		.uleb128 0x11
 3353 0306 E0010000 		.4byte	.LASF68
 3354 030a 01       		.byte	0x1
 3355 030b 6D       		.byte	0x6d
 3356 030c 00000000 		.4byte	.LFB65
 3357 0310 18000000 		.4byte	.LFE65-.LFB65
 3358 0314 01       		.uleb128 0x1
 3359 0315 9C       		.byte	0x9c
 3360 0316 11       		.uleb128 0x11
 3361 0317 85000000 		.4byte	.LASF69
 3362 031b 01       		.byte	0x1
 3363 031c 73       		.byte	0x73
 3364 031d 00000000 		.4byte	.LFB66
 3365 0321 18000000 		.4byte	.LFE66-.LFB66
 3366 0325 01       		.uleb128 0x1
 3367 0326 9C       		.byte	0x9c
 3368 0327 11       		.uleb128 0x11
 3369 0328 FB010000 		.4byte	.LASF70
 3370 032c 01       		.byte	0x1
 3371 032d 79       		.byte	0x79
 3372 032e 00000000 		.4byte	.LFB67
 3373 0332 18000000 		.4byte	.LFE67-.LFB67
 3374 0336 01       		.uleb128 0x1
 3375 0337 9C       		.byte	0x9c
 3376 0338 11       		.uleb128 0x11
 3377 0339 A4070000 		.4byte	.LASF71
 3378 033d 01       		.byte	0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 75


 3379 033e 7F       		.byte	0x7f
 3380 033f 00000000 		.4byte	.LFB68
 3381 0343 18000000 		.4byte	.LFE68-.LFB68
 3382 0347 01       		.uleb128 0x1
 3383 0348 9C       		.byte	0x9c
 3384 0349 12       		.uleb128 0x12
 3385 034a AA080000 		.4byte	.LASF72
 3386 034e 01       		.byte	0x1
 3387 034f 85       		.byte	0x85
 3388 0350 00000000 		.4byte	.LFB69
 3389 0354 70000000 		.4byte	.LFE69-.LFB69
 3390 0358 01       		.uleb128 0x1
 3391 0359 9C       		.byte	0x9c
 3392 035a 13       		.uleb128 0x13
 3393 035b CF020000 		.4byte	.LASF73
 3394 035f 01       		.byte	0x1
 3395 0360 99       		.byte	0x99
 3396 0361 68000000 		.4byte	0x68
 3397 0365 00000000 		.4byte	.LFB70
 3398 0369 04010000 		.4byte	.LFE70-.LFB70
 3399 036d 01       		.uleb128 0x1
 3400 036e 9C       		.byte	0x9c
 3401 036f 14       		.uleb128 0x14
 3402 0370 CE080000 		.4byte	.LASF161
 3403 0374 01       		.byte	0x1
 3404 0375 C0       		.byte	0xc0
 3405 0376 C6000000 		.4byte	0xc6
 3406 037a 00000000 		.4byte	.LFB71
 3407 037e 54000000 		.4byte	.LFE71-.LFB71
 3408 0382 01       		.uleb128 0x1
 3409 0383 9C       		.byte	0x9c
 3410 0384 B3030000 		.4byte	0x3b3
 3411 0388 15       		.uleb128 0x15
 3412 0389 2B030000 		.4byte	.LASF162
 3413 038d 01       		.byte	0x1
 3414 038e C0       		.byte	0xc0
 3415 038f A2000000 		.4byte	0xa2
 3416 0393 02       		.uleb128 0x2
 3417 0394 91       		.byte	0x91
 3418 0395 66       		.sleb128 -26
 3419 0396 16       		.uleb128 0x16
 3420 0397 63707300 		.ascii	"cps\000"
 3421 039b 01       		.byte	0x1
 3422 039c C1       		.byte	0xc1
 3423 039d D2000000 		.4byte	0xd2
 3424 03a1 02       		.uleb128 0x2
 3425 03a2 91       		.byte	0x91
 3426 03a3 6C       		.sleb128 -20
 3427 03a4 16       		.uleb128 0x16
 3428 03a5 72706D00 		.ascii	"rpm\000"
 3429 03a9 01       		.byte	0x1
 3430 03aa C2       		.byte	0xc2
 3431 03ab C6000000 		.4byte	0xc6
 3432 03af 02       		.uleb128 0x2
 3433 03b0 91       		.byte	0x91
 3434 03b1 6A       		.sleb128 -22
 3435 03b2 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 76


 3436 03b3 17       		.uleb128 0x17
 3437 03b4 B7080000 		.4byte	.LASF83
 3438 03b8 01       		.byte	0x1
 3439 03b9 CA       		.byte	0xca
 3440 03ba 00000000 		.4byte	.LFB72
 3441 03be 34000000 		.4byte	.LFE72-.LFB72
 3442 03c2 01       		.uleb128 0x1
 3443 03c3 9C       		.byte	0x9c
 3444 03c4 18       		.uleb128 0x18
 3445 03c5 BC040000 		.4byte	.LASF75
 3446 03c9 01       		.byte	0x1
 3447 03ca DB       		.byte	0xdb
 3448 03cb 84020000 		.4byte	0x284
 3449 03cf 00000000 		.4byte	.LFB73
 3450 03d3 84000000 		.4byte	.LFE73-.LFB73
 3451 03d7 01       		.uleb128 0x1
 3452 03d8 9C       		.byte	0x9c
 3453 03d9 19       		.uleb128 0x19
 3454 03da 3A070000 		.4byte	.LASF76
 3455 03de 01       		.byte	0x1
 3456 03df 0101     		.2byte	0x101
 3457 03e1 84020000 		.4byte	0x284
 3458 03e5 00000000 		.4byte	.LFB74
 3459 03e9 7C000000 		.4byte	.LFE74-.LFB74
 3460 03ed 01       		.uleb128 0x1
 3461 03ee 9C       		.byte	0x9c
 3462 03ef 19       		.uleb128 0x19
 3463 03f0 61020000 		.4byte	.LASF77
 3464 03f4 01       		.byte	0x1
 3465 03f5 1F01     		.2byte	0x11f
 3466 03f7 84020000 		.4byte	0x284
 3467 03fb 00000000 		.4byte	.LFB75
 3468 03ff 84000000 		.4byte	.LFE75-.LFB75
 3469 0403 01       		.uleb128 0x1
 3470 0404 9C       		.byte	0x9c
 3471 0405 1A       		.uleb128 0x1a
 3472 0406 17080000 		.4byte	.LASF79
 3473 040a 01       		.byte	0x1
 3474 040b 4501     		.2byte	0x145
 3475 040d 84020000 		.4byte	0x284
 3476 0411 00000000 		.4byte	.LFB76
 3477 0415 80070000 		.4byte	.LFE76-.LFB76
 3478 0419 01       		.uleb128 0x1
 3479 041a 9C       		.byte	0x9c
 3480 041b 57040000 		.4byte	0x457
 3481 041f 1B       		.uleb128 0x1b
 3482 0420 8E030000 		.4byte	.LASF80
 3483 0424 01       		.byte	0x1
 3484 0425 4601     		.2byte	0x146
 3485 0427 D2000000 		.4byte	0xd2
 3486 042b 02       		.uleb128 0x2
 3487 042c 91       		.byte	0x91
 3488 042d 6C       		.sleb128 -20
 3489 042e 1B       		.uleb128 0x1b
 3490 042f D4060000 		.4byte	.LASF81
 3491 0433 01       		.byte	0x1
 3492 0434 5501     		.2byte	0x155
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 77


 3493 0436 FB010000 		.4byte	0x1fb
 3494 043a 02       		.uleb128 0x2
 3495 043b 91       		.byte	0x91
 3496 043c 6B       		.sleb128 -21
 3497 043d 0F       		.uleb128 0xf
 3498 043e 62040000 		.4byte	.LBB3
 3499 0442 30000000 		.4byte	.LBE3-.LBB3
 3500 0446 1B       		.uleb128 0x1b
 3501 0447 32010000 		.4byte	.LASF82
 3502 044b 01       		.byte	0x1
 3503 044c 4802     		.2byte	0x248
 3504 044e 68000000 		.4byte	0x68
 3505 0452 02       		.uleb128 0x2
 3506 0453 91       		.byte	0x91
 3507 0454 64       		.sleb128 -28
 3508 0455 00       		.byte	0
 3509 0456 00       		.byte	0
 3510 0457 1C       		.uleb128 0x1c
 3511 0458 6D040000 		.4byte	.LASF84
 3512 045c 01       		.byte	0x1
 3513 045d C402     		.2byte	0x2c4
 3514 045f 00000000 		.4byte	.LFB77
 3515 0463 68000000 		.4byte	.LFE77-.LFB77
 3516 0467 01       		.uleb128 0x1
 3517 0468 9C       		.byte	0x9c
 3518 0469 1D       		.uleb128 0x1d
 3519 046a 1B060000 		.4byte	.LASF85
 3520 046e 01       		.byte	0x1
 3521 046f CF02     		.2byte	0x2cf
 3522 0471 79020000 		.4byte	0x279
 3523 0475 00000000 		.4byte	.LFB78
 3524 0479 6C000000 		.4byte	.LFE78-.LFB78
 3525 047d 01       		.uleb128 0x1
 3526 047e 9C       		.byte	0x9c
 3527 047f 93040000 		.4byte	0x493
 3528 0483 1B       		.uleb128 0x1b
 3529 0484 1B030000 		.4byte	.LASF86
 3530 0488 01       		.byte	0x1
 3531 0489 D002     		.2byte	0x2d0
 3532 048b 79020000 		.4byte	0x279
 3533 048f 02       		.uleb128 0x2
 3534 0490 91       		.byte	0x91
 3535 0491 5C       		.sleb128 -36
 3536 0492 00       		.byte	0
 3537 0493 1E       		.uleb128 0x1e
 3538 0494 CC030000 		.4byte	.LASF163
 3539 0498 01       		.byte	0x1
 3540 0499 D802     		.2byte	0x2d8
 3541 049b 00000000 		.4byte	.LFB79
 3542 049f 3C010000 		.4byte	.LFE79-.LFB79
 3543 04a3 01       		.uleb128 0x1
 3544 04a4 9C       		.byte	0x9c
 3545 04a5 D7040000 		.4byte	0x4d7
 3546 04a9 1B       		.uleb128 0x1b
 3547 04aa A3080000 		.4byte	.LASF87
 3548 04ae 01       		.byte	0x1
 3549 04af D902     		.2byte	0x2d9
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 78


 3550 04b1 A2000000 		.4byte	0xa2
 3551 04b5 02       		.uleb128 0x2
 3552 04b6 91       		.byte	0x91
 3553 04b7 72       		.sleb128 -14
 3554 04b8 1B       		.uleb128 0x1b
 3555 04b9 49020000 		.4byte	.LASF88
 3556 04bd 01       		.byte	0x1
 3557 04be DA02     		.2byte	0x2da
 3558 04c0 A2000000 		.4byte	0xa2
 3559 04c4 02       		.uleb128 0x2
 3560 04c5 91       		.byte	0x91
 3561 04c6 70       		.sleb128 -16
 3562 04c7 1B       		.uleb128 0x1b
 3563 04c8 8D040000 		.4byte	.LASF89
 3564 04cc 01       		.byte	0x1
 3565 04cd DE02     		.2byte	0x2de
 3566 04cf 68000000 		.4byte	0x68
 3567 04d3 02       		.uleb128 0x2
 3568 04d4 91       		.byte	0x91
 3569 04d5 74       		.sleb128 -12
 3570 04d6 00       		.byte	0
 3571 04d7 1F       		.uleb128 0x1f
 3572 04d8 33040000 		.4byte	.LASF90
 3573 04dc 01       		.byte	0x1
 3574 04dd 0E03     		.2byte	0x30e
 3575 04df 00000000 		.4byte	.LFB80
 3576 04e3 CC000000 		.4byte	.LFE80-.LFB80
 3577 04e7 01       		.uleb128 0x1
 3578 04e8 9C       		.byte	0x9c
 3579 04e9 10       		.uleb128 0x10
 3580 04ea 50020000 		.4byte	.LASF91
 3581 04ee 01       		.byte	0x1
 3582 04ef 21       		.byte	0x21
 3583 04f0 E5000000 		.4byte	0xe5
 3584 04f4 05       		.uleb128 0x5
 3585 04f5 03       		.byte	0x3
 3586 04f6 14000000 		.4byte	instructionIndex
 3587 04fa 10       		.uleb128 0x10
 3588 04fb F6080000 		.4byte	.LASF92
 3589 04ff 01       		.byte	0x1
 3590 0500 35       		.byte	0x35
 3591 0501 E0000000 		.4byte	0xe0
 3592 0505 05       		.uleb128 0x5
 3593 0506 03       		.byte	0x3
 3594 0507 36000000 		.4byte	turnStartedFlag
 3595 050b 10       		.uleb128 0x10
 3596 050c 39080000 		.4byte	.LASF93
 3597 0510 01       		.byte	0x1
 3598 0511 36       		.byte	0x36
 3599 0512 E0000000 		.4byte	0xe0
 3600 0516 05       		.uleb128 0x5
 3601 0517 03       		.byte	0x3
 3602 0518 37000000 		.4byte	turnFinishedFlag
 3603 051c 10       		.uleb128 0x10
 3604 051d 28000000 		.4byte	.LASF94
 3605 0521 01       		.byte	0x1
 3606 0522 38       		.byte	0x38
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 79


 3607 0523 E0000000 		.4byte	0xe0
 3608 0527 05       		.uleb128 0x5
 3609 0528 03       		.byte	0x3
 3610 0529 38000000 		.4byte	forwardUntilTargetStartedFlag
 3611 052d 10       		.uleb128 0x10
 3612 052e 45060000 		.4byte	.LASF95
 3613 0532 01       		.byte	0x1
 3614 0533 39       		.byte	0x39
 3615 0534 E0000000 		.4byte	0xe0
 3616 0538 05       		.uleb128 0x5
 3617 0539 03       		.byte	0x3
 3618 053a 39000000 		.4byte	uTurnStartedFlag
 3619 053e 10       		.uleb128 0x10
 3620 053f FC040000 		.4byte	.LASF96
 3621 0543 01       		.byte	0x1
 3622 0544 3A       		.byte	0x3a
 3623 0545 E0000000 		.4byte	0xe0
 3624 0549 05       		.uleb128 0x5
 3625 054a 03       		.byte	0x3
 3626 054b 3A000000 		.4byte	uTurnFinishedFlag
 3627 054f 10       		.uleb128 0x10
 3628 0550 C5060000 		.4byte	.LASF97
 3629 0554 01       		.byte	0x1
 3630 0555 3C       		.byte	0x3c
 3631 0556 E0000000 		.4byte	0xe0
 3632 055a 05       		.uleb128 0x5
 3633 055b 03       		.byte	0x3
 3634 055c 3B000000 		.4byte	leftStatusFlag
 3635 0560 10       		.uleb128 0x10
 3636 0561 07020000 		.4byte	.LASF98
 3637 0565 01       		.byte	0x1
 3638 0566 3D       		.byte	0x3d
 3639 0567 E0000000 		.4byte	0xe0
 3640 056b 05       		.uleb128 0x5
 3641 056c 03       		.byte	0x3
 3642 056d 3C000000 		.4byte	rightStatusFlag
 3643 0571 10       		.uleb128 0x10
 3644 0572 66050000 		.4byte	.LASF99
 3645 0576 01       		.byte	0x1
 3646 0577 3F       		.byte	0x3f
 3647 0578 E0000000 		.4byte	0xe0
 3648 057c 05       		.uleb128 0x5
 3649 057d 03       		.byte	0x3
 3650 057e 3D000000 		.4byte	spinCourseCorrectionStarted
 3651 0582 10       		.uleb128 0x10
 3652 0583 B1020000 		.4byte	.LASF100
 3653 0587 01       		.byte	0x1
 3654 0588 40       		.byte	0x40
 3655 0589 E0000000 		.4byte	0xe0
 3656 058d 05       		.uleb128 0x5
 3657 058e 03       		.byte	0x3
 3658 058f 3E000000 		.4byte	currentIgnoreL
 3659 0593 10       		.uleb128 0x10
 3660 0594 D4020000 		.4byte	.LASF101
 3661 0598 01       		.byte	0x1
 3662 0599 41       		.byte	0x41
 3663 059a E0000000 		.4byte	0xe0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 80


 3664 059e 05       		.uleb128 0x5
 3665 059f 03       		.byte	0x3
 3666 05a0 3F000000 		.4byte	currentIgnoreR
 3667 05a4 10       		.uleb128 0x10
 3668 05a5 94080000 		.4byte	.LASF102
 3669 05a9 01       		.byte	0x1
 3670 05aa 45       		.byte	0x45
 3671 05ab E0000000 		.4byte	0xe0
 3672 05af 05       		.uleb128 0x5
 3673 05b0 03       		.byte	0x3
 3674 05b1 40000000 		.4byte	totalLineCount
 3675 05b5 10       		.uleb128 0x10
 3676 05b6 66000000 		.4byte	.LASF103
 3677 05ba 01       		.byte	0x1
 3678 05bb 46       		.byte	0x46
 3679 05bc E0000000 		.4byte	0xe0
 3680 05c0 05       		.uleb128 0x5
 3681 05c1 03       		.byte	0x3
 3682 05c2 41000000 		.4byte	lineCount
 3683 05c6 10       		.uleb128 0x10
 3684 05c7 98010000 		.4byte	.LASF104
 3685 05cb 01       		.byte	0x1
 3686 05cc 47       		.byte	0x47
 3687 05cd E0000000 		.4byte	0xe0
 3688 05d1 05       		.uleb128 0x5
 3689 05d2 03       		.byte	0x3
 3690 05d3 42000000 		.4byte	onLineFlag
 3691 05d7 10       		.uleb128 0x10
 3692 05d8 26040000 		.4byte	.LASF105
 3693 05dc 01       		.byte	0x1
 3694 05dd 49       		.byte	0x49
 3695 05de E0000000 		.4byte	0xe0
 3696 05e2 05       		.uleb128 0x5
 3697 05e3 03       		.byte	0x3
 3698 05e4 43000000 		.4byte	tooEarlyFlag
 3699 05e8 10       		.uleb128 0x10
 3700 05e9 B1030000 		.4byte	.LASF106
 3701 05ed 01       		.byte	0x1
 3702 05ee 4A       		.byte	0x4a
 3703 05ef E0000000 		.4byte	0xe0
 3704 05f3 05       		.uleb128 0x5
 3705 05f4 03       		.byte	0x3
 3706 05f5 44000000 		.4byte	tooLateFlag
 3707 05f9 10       		.uleb128 0x10
 3708 05fa 0D040000 		.4byte	.LASF107
 3709 05fe 01       		.byte	0x1
 3710 05ff 4C       		.byte	0x4c
 3711 0600 E0000000 		.4byte	0xe0
 3712 0604 05       		.uleb128 0x5
 3713 0605 03       		.byte	0x3
 3714 0606 45000000 		.4byte	dontOverwriteRightIgnore
 3715 060a 10       		.uleb128 0x10
 3716 060b 43030000 		.4byte	.LASF108
 3717 060f 01       		.byte	0x1
 3718 0610 4D       		.byte	0x4d
 3719 0611 E0000000 		.4byte	0xe0
 3720 0615 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 81


 3721 0616 03       		.byte	0x3
 3722 0617 46000000 		.4byte	dontOverwriteLeftIgnore
 3723 061b 1B       		.uleb128 0x1b
 3724 061c F4020000 		.4byte	.LASF109
 3725 0620 01       		.byte	0x1
 3726 0621 4201     		.2byte	0x142
 3727 0623 E0000000 		.4byte	0xe0
 3728 0627 05       		.uleb128 0x5
 3729 0628 03       		.byte	0x3
 3730 0629 57000000 		.4byte	forwardAfterTurnLIgnore
 3731 062d 1B       		.uleb128 0x1b
 3732 062e 0F090000 		.4byte	.LASF110
 3733 0632 01       		.byte	0x1
 3734 0633 4301     		.2byte	0x143
 3735 0635 E0000000 		.4byte	0xe0
 3736 0639 05       		.uleb128 0x5
 3737 063a 03       		.byte	0x3
 3738 063b 58000000 		.4byte	forwardAfterTurnRIgnore
 3739 063f 20       		.uleb128 0x20
 3740 0640 3C020000 		.4byte	.LASF111
 3741 0644 07       		.byte	0x7
 3742 0645 1207     		.2byte	0x712
 3743 0647 4B060000 		.4byte	0x64b
 3744 064b 06       		.uleb128 0x6
 3745 064c 8B000000 		.4byte	0x8b
 3746 0650 21       		.uleb128 0x21
 3747 0651 747300   		.ascii	"ts\000"
 3748 0654 05       		.byte	0x5
 3749 0655 10       		.byte	0x10
 3750 0656 96000000 		.4byte	0x96
 3751 065a 05       		.uleb128 0x5
 3752 065b 03       		.byte	0x3
 3753 065c 00000000 		.4byte	ts
 3754 0660 22       		.uleb128 0x22
 3755 0661 98030000 		.4byte	.LASF112
 3756 0665 05       		.byte	0x5
 3757 0666 11       		.byte	0x11
 3758 0667 A2000000 		.4byte	0xa2
 3759 066b 05       		.uleb128 0x5
 3760 066c 03       		.byte	0x3
 3761 066d 00000000 		.4byte	ts_enc
 3762 0671 22       		.uleb128 0x22
 3763 0672 3B060000 		.4byte	.LASF113
 3764 0676 05       		.byte	0x5
 3765 0677 12       		.byte	0x12
 3766 0678 A2000000 		.4byte	0xa2
 3767 067c 05       		.uleb128 0x5
 3768 067d 03       		.byte	0x3
 3769 067e 00000000 		.4byte	ts_update
 3770 0682 22       		.uleb128 0x22
 3771 0683 70000000 		.4byte	.LASF114
 3772 0687 05       		.byte	0x5
 3773 0688 13       		.byte	0x13
 3774 0689 A2000000 		.4byte	0xa2
 3775 068d 05       		.uleb128 0x5
 3776 068e 03       		.byte	0x3
 3777 068f 00000000 		.4byte	ts_speed
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 82


 3778 0693 22       		.uleb128 0x22
 3779 0694 9C040000 		.4byte	.LASF115
 3780 0698 05       		.byte	0x5
 3781 0699 14       		.byte	0x14
 3782 069a A2000000 		.4byte	0xa2
 3783 069e 05       		.uleb128 0x5
 3784 069f 03       		.byte	0x3
 3785 06a0 00000000 		.4byte	ts_display
 3786 06a4 22       		.uleb128 0x22
 3787 06a5 D4010000 		.4byte	.LASF116
 3788 06a9 05       		.byte	0x5
 3789 06aa 16       		.byte	0x16
 3790 06ab 96000000 		.4byte	0x96
 3791 06af 05       		.uleb128 0x5
 3792 06b0 03       		.byte	0x3
 3793 06b1 00000000 		.4byte	flag_ts_enc
 3794 06b5 22       		.uleb128 0x22
 3795 06b6 C6070000 		.4byte	.LASF117
 3796 06ba 05       		.byte	0x5
 3797 06bb 17       		.byte	0x17
 3798 06bc 96000000 		.4byte	0x96
 3799 06c0 05       		.uleb128 0x5
 3800 06c1 03       		.byte	0x3
 3801 06c2 00000000 		.4byte	flag_ts_update
 3802 06c6 22       		.uleb128 0x22
 3803 06c7 E0040000 		.4byte	.LASF118
 3804 06cb 05       		.byte	0x5
 3805 06cc 18       		.byte	0x18
 3806 06cd 96000000 		.4byte	0x96
 3807 06d1 05       		.uleb128 0x5
 3808 06d2 03       		.byte	0x3
 3809 06d3 00000000 		.4byte	flag_ts_speed
 3810 06d7 22       		.uleb128 0x22
 3811 06d8 4F070000 		.4byte	.LASF119
 3812 06dc 05       		.byte	0x5
 3813 06dd 19       		.byte	0x19
 3814 06de 96000000 		.4byte	0x96
 3815 06e2 05       		.uleb128 0x5
 3816 06e3 03       		.byte	0x3
 3817 06e4 00000000 		.4byte	flag_ts_display
 3818 06e8 22       		.uleb128 0x22
 3819 06e9 0C030000 		.4byte	.LASF120
 3820 06ed 05       		.byte	0x5
 3821 06ee 1B       		.byte	0x1b
 3822 06ef 96000000 		.4byte	0x96
 3823 06f3 05       		.uleb128 0x5
 3824 06f4 03       		.byte	0x3
 3825 06f5 00000000 		.4byte	flag_rx
 3826 06f9 22       		.uleb128 0x22
 3827 06fa D4040000 		.4byte	.LASF121
 3828 06fe 05       		.byte	0x5
 3829 06ff 1C       		.byte	0x1c
 3830 0700 96000000 		.4byte	0x96
 3831 0704 05       		.uleb128 0x5
 3832 0705 03       		.byte	0x3
 3833 0706 00000000 		.4byte	flag_packet
 3834 070a 22       		.uleb128 0x22
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 83


 3835 070b EC010000 		.4byte	.LASF122
 3836 070f 05       		.byte	0x5
 3837 0710 1D       		.byte	0x1d
 3838 0711 96000000 		.4byte	0x96
 3839 0715 05       		.uleb128 0x5
 3840 0716 03       		.byte	0x3
 3841 0717 00000000 		.4byte	flag_KB_string
 3842 071b 22       		.uleb128 0x22
 3843 071c C0020000 		.4byte	.LASF123
 3844 0720 05       		.byte	0x5
 3845 0721 1F       		.byte	0x1f
 3846 0722 96000000 		.4byte	0x96
 3847 0726 05       		.uleb128 0x5
 3848 0727 03       		.byte	0x3
 3849 0728 00000000 		.4byte	dataready_flag
 3850 072c 22       		.uleb128 0x22
 3851 072d 82050000 		.4byte	.LASF124
 3852 0731 05       		.byte	0x5
 3853 0732 21       		.byte	0x21
 3854 0733 96000000 		.4byte	0x96
 3855 0737 05       		.uleb128 0x5
 3856 0738 03       		.byte	0x3
 3857 0739 00000000 		.4byte	flag_rf_transmission_active
 3858 073d 07       		.uleb128 0x7
 3859 073e 84000000 		.4byte	0x84
 3860 0742 4D070000 		.4byte	0x74d
 3861 0746 08       		.uleb128 0x8
 3862 0747 7D000000 		.4byte	0x7d
 3863 074b 3F       		.byte	0x3f
 3864 074c 00       		.byte	0
 3865 074d 22       		.uleb128 0x22
 3866 074e D5070000 		.4byte	.LASF125
 3867 0752 05       		.byte	0x5
 3868 0753 24       		.byte	0x24
 3869 0754 3D070000 		.4byte	0x73d
 3870 0758 05       		.uleb128 0x5
 3871 0759 03       		.byte	0x3
 3872 075a 00000000 		.4byte	displaystring
 3873 075e 22       		.uleb128 0x22
 3874 075f 31030000 		.4byte	.LASF126
 3875 0763 05       		.byte	0x5
 3876 0764 25       		.byte	0x25
 3877 0765 3D070000 		.4byte	0x73d
 3878 0769 05       		.uleb128 0x5
 3879 076a 03       		.byte	0x3
 3880 076b 00000000 		.4byte	line
 3881 076f 22       		.uleb128 0x22
 3882 0770 4E010000 		.4byte	.LASF127
 3883 0774 05       		.byte	0x5
 3884 0775 25       		.byte	0x25
 3885 0776 3D070000 		.4byte	0x73d
 3886 077a 05       		.uleb128 0x5
 3887 077b 03       		.byte	0x3
 3888 077c 00000000 		.4byte	entry
 3889 0780 07       		.uleb128 0x7
 3890 0781 96000000 		.4byte	0x96
 3891 0785 90070000 		.4byte	0x790
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 84


 3892 0789 08       		.uleb128 0x8
 3893 078a 7D000000 		.4byte	0x7d
 3894 078e 3F       		.byte	0x3f
 3895 078f 00       		.byte	0
 3896 0790 22       		.uleb128 0x22
 3897 0791 3C050000 		.4byte	.LASF128
 3898 0795 05       		.byte	0x5
 3899 0796 26       		.byte	0x26
 3900 0797 80070000 		.4byte	0x780
 3901 079b 05       		.uleb128 0x5
 3902 079c 03       		.byte	0x3
 3903 079d 00000000 		.4byte	usbBuffer
 3904 07a1 22       		.uleb128 0x22
 3905 07a2 22050000 		.4byte	.LASF129
 3906 07a6 05       		.byte	0x5
 3907 07a7 3C       		.byte	0x3c
 3908 07a8 FA000000 		.4byte	0xfa
 3909 07ac 05       		.uleb128 0x5
 3910 07ad 03       		.byte	0x3
 3911 07ae 00000000 		.4byte	system_state
 3912 07b2 07       		.uleb128 0x7
 3913 07b3 68000000 		.4byte	0x68
 3914 07b7 C8070000 		.4byte	0x7c8
 3915 07bb 08       		.uleb128 0x8
 3916 07bc 7D000000 		.4byte	0x7d
 3917 07c0 0E       		.byte	0xe
 3918 07c1 08       		.uleb128 0x8
 3919 07c2 7D000000 		.4byte	0x7d
 3920 07c6 12       		.byte	0x12
 3921 07c7 00       		.byte	0
 3922 07c8 23       		.uleb128 0x23
 3923 07c9 6D617000 		.ascii	"map\000"
 3924 07cd 08       		.byte	0x8
 3925 07ce 04       		.byte	0x4
 3926 07cf B2070000 		.4byte	0x7b2
 3927 07d3 07       		.uleb128 0x7
 3928 07d4 68000000 		.4byte	0x68
 3929 07d8 E9070000 		.4byte	0x7e9
 3930 07dc 08       		.uleb128 0x8
 3931 07dd 7D000000 		.4byte	0x7d
 3932 07e1 05       		.byte	0x5
 3933 07e2 08       		.uleb128 0x8
 3934 07e3 7D000000 		.4byte	0x7d
 3935 07e7 01       		.byte	0x1
 3936 07e8 00       		.byte	0
 3937 07e9 24       		.uleb128 0x24
 3938 07ea B0070000 		.4byte	.LASF130
 3939 07ee 08       		.byte	0x8
 3940 07ef 05       		.byte	0x5
 3941 07f0 D3070000 		.4byte	0x7d3
 3942 07f4 22       		.uleb128 0x22
 3943 07f5 06080000 		.4byte	.LASF131
 3944 07f9 01       		.byte	0x1
 3945 07fa 19       		.byte	0x19
 3946 07fb 84020000 		.4byte	0x284
 3947 07ff 05       		.uleb128 0x5
 3948 0800 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 85


 3949 0801 00000000 		.4byte	currentDirection
 3950 0805 22       		.uleb128 0x22
 3951 0806 54000000 		.4byte	.LASF132
 3952 080a 01       		.byte	0x1
 3953 080b 19       		.byte	0x19
 3954 080c 84020000 		.4byte	0x284
 3955 0810 05       		.uleb128 0x5
 3956 0811 03       		.byte	0x3
 3957 0812 00000000 		.4byte	previousDirection
 3958 0816 22       		.uleb128 0x22
 3959 0817 EE070000 		.4byte	.LASF133
 3960 081b 01       		.byte	0x1
 3961 081c 1B       		.byte	0x1b
 3962 081d D3010000 		.4byte	0x1d3
 3963 0821 05       		.uleb128 0x5
 3964 0822 03       		.byte	0x3
 3965 0823 00000000 		.4byte	currentRobotOrientation
 3966 0827 22       		.uleb128 0x22
 3967 0828 A4060000 		.4byte	.LASF134
 3968 082c 01       		.byte	0x1
 3969 082d 1B       		.byte	0x1b
 3970 082e D3010000 		.4byte	0x1d3
 3971 0832 05       		.uleb128 0x5
 3972 0833 03       		.byte	0x3
 3973 0834 00000000 		.4byte	previousOrientation
 3974 0838 22       		.uleb128 0x22
 3975 0839 81080000 		.4byte	.LASF135
 3976 083d 01       		.byte	0x1
 3977 083e 1C       		.byte	0x1c
 3978 083f 79020000 		.4byte	0x279
 3979 0843 05       		.uleb128 0x5
 3980 0844 03       		.byte	0x3
 3981 0845 00000000 		.4byte	currentInstruction
 3982 0849 22       		.uleb128 0x22
 3983 084a 90060000 		.4byte	.LASF136
 3984 084e 01       		.byte	0x1
 3985 084f 1D       		.byte	0x1d
 3986 0850 79020000 		.4byte	0x279
 3987 0854 05       		.uleb128 0x5
 3988 0855 03       		.byte	0x3
 3989 0856 00000000 		.4byte	previousInstruction
 3990 085a 22       		.uleb128 0x22
 3991 085b 31070000 		.4byte	.LASF137
 3992 085f 01       		.byte	0x1
 3993 0860 1E       		.byte	0x1e
 3994 0861 68000000 		.4byte	0x68
 3995 0865 05       		.uleb128 0x5
 3996 0866 03       		.byte	0x3
 3997 0867 00000000 		.4byte	numSteps
 3998 086b 22       		.uleb128 0x22
 3999 086c 4A080000 		.4byte	.LASF138
 4000 0870 01       		.byte	0x1
 4001 0871 20       		.byte	0x20
 4002 0872 7C080000 		.4byte	0x87c
 4003 0876 05       		.uleb128 0x5
 4004 0877 03       		.byte	0x3
 4005 0878 00000000 		.4byte	instructionList
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 86


 4006 087c 25       		.uleb128 0x25
 4007 087d 04       		.byte	0x4
 4008 087e 79020000 		.4byte	0x279
 4009 0882 21       		.uleb128 0x21
 4010 0883 733300   		.ascii	"s3\000"
 4011 0886 01       		.byte	0x1
 4012 0887 26       		.byte	0x26
 4013 0888 96000000 		.4byte	0x96
 4014 088c 05       		.uleb128 0x5
 4015 088d 03       		.byte	0x3
 4016 088e 00000000 		.4byte	s3
 4017 0892 21       		.uleb128 0x21
 4018 0893 733400   		.ascii	"s4\000"
 4019 0896 01       		.byte	0x1
 4020 0897 26       		.byte	0x26
 4021 0898 96000000 		.4byte	0x96
 4022 089c 05       		.uleb128 0x5
 4023 089d 03       		.byte	0x3
 4024 089e 00000000 		.4byte	s4
 4025 08a2 21       		.uleb128 0x21
 4026 08a3 733500   		.ascii	"s5\000"
 4027 08a6 01       		.byte	0x1
 4028 08a7 26       		.byte	0x26
 4029 08a8 96000000 		.4byte	0x96
 4030 08ac 05       		.uleb128 0x5
 4031 08ad 03       		.byte	0x3
 4032 08ae 00000000 		.4byte	s5
 4033 08b2 21       		.uleb128 0x21
 4034 08b3 733600   		.ascii	"s6\000"
 4035 08b6 01       		.byte	0x1
 4036 08b7 26       		.byte	0x26
 4037 08b8 96000000 		.4byte	0x96
 4038 08bc 05       		.uleb128 0x5
 4039 08bd 03       		.byte	0x3
 4040 08be 00000000 		.4byte	s6
 4041 08c2 22       		.uleb128 0x22
 4042 08c3 01060000 		.4byte	.LASF139
 4043 08c7 01       		.byte	0x1
 4044 08c8 2B       		.byte	0x2b
 4045 08c9 AE000000 		.4byte	0xae
 4046 08cd 05       		.uleb128 0x5
 4047 08ce 03       		.byte	0x3
 4048 08cf 00000000 		.4byte	totalMilliseconds
 4049 08d3 22       		.uleb128 0x22
 4050 08d4 00000000 		.4byte	.LASF140
 4051 08d8 01       		.byte	0x1
 4052 08d9 2C       		.byte	0x2c
 4053 08da D2000000 		.4byte	0xd2
 4054 08de 05       		.uleb128 0x5
 4055 08df 03       		.byte	0x3
 4056 08e0 00000000 		.4byte	totalDistance
 4057 08e4 07       		.uleb128 0x7
 4058 08e5 84000000 		.4byte	0x84
 4059 08e9 F4080000 		.4byte	0x8f4
 4060 08ed 08       		.uleb128 0x8
 4061 08ee 7D000000 		.4byte	0x7d
 4062 08f2 44       		.byte	0x44
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 87


 4063 08f3 00       		.byte	0
 4064 08f4 22       		.uleb128 0x22
 4065 08f5 BF070000 		.4byte	.LASF141
 4066 08f9 01       		.byte	0x1
 4067 08fa 2E       		.byte	0x2e
 4068 08fb E4080000 		.4byte	0x8e4
 4069 08ff 05       		.uleb128 0x5
 4070 0900 03       		.byte	0x3
 4071 0901 00000000 		.4byte	buffer
 4072 0905 22       		.uleb128 0x22
 4073 0906 5B030000 		.4byte	.LASF142
 4074 090a 01       		.byte	0x1
 4075 090b 2F       		.byte	0x2f
 4076 090c 68000000 		.4byte	0x68
 4077 0910 05       		.uleb128 0x5
 4078 0911 03       		.byte	0x3
 4079 0912 00000000 		.4byte	quadDec2Count
 4080 0916 22       		.uleb128 0x22
 4081 0917 9B000000 		.4byte	.LASF143
 4082 091b 01       		.byte	0x1
 4083 091c 30       		.byte	0x30
 4084 091d 68000000 		.4byte	0x68
 4085 0921 05       		.uleb128 0x5
 4086 0922 03       		.byte	0x3
 4087 0923 00000000 		.4byte	timerInt
 4088 0927 22       		.uleb128 0x22
 4089 0928 31060000 		.4byte	.LASF144
 4090 092c 01       		.byte	0x1
 4091 092d 31       		.byte	0x31
 4092 092e 68000000 		.4byte	0x68
 4093 0932 05       		.uleb128 0x5
 4094 0933 03       		.byte	0x3
 4095 0934 00000000 		.4byte	keepLedOn
 4096 0938 22       		.uleb128 0x22
 4097 0939 8D010000 		.4byte	.LASF145
 4098 093d 01       		.byte	0x1
 4099 093e 33       		.byte	0x33
 4100 093f AE000000 		.4byte	0xae
 4101 0943 05       		.uleb128 0x5
 4102 0944 03       		.byte	0x3
 4103 0945 00000000 		.4byte	stopBuffer
 4104 0949 22       		.uleb128 0x22
 4105 094a 4A090000 		.4byte	.LASF146
 4106 094e 01       		.byte	0x1
 4107 094f 34       		.byte	0x34
 4108 0950 A2000000 		.4byte	0xa2
 4109 0954 05       		.uleb128 0x5
 4110 0955 03       		.byte	0x3
 4111 0956 00000000 		.4byte	forwardBuffer
 4112 095a 22       		.uleb128 0x22
 4113 095b 6B080000 		.4byte	.LASF147
 4114 095f 01       		.byte	0x1
 4115 0960 4F       		.byte	0x4f
 4116 0961 EA000000 		.4byte	0xea
 4117 0965 05       		.uleb128 0x5
 4118 0966 03       		.byte	0x3
 4119 0967 00000000 		.4byte	junctionConfiguration
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 88


 4120 096b 22       		.uleb128 0x22
 4121 096c A7040000 		.4byte	.LASF148
 4122 0970 01       		.byte	0x1
 4123 0971 50       		.byte	0x50
 4124 0972 96000000 		.4byte	0x96
 4125 0976 05       		.uleb128 0x5
 4126 0977 03       		.byte	0x3
 4127 0978 00000000 		.4byte	currentFoodListIndex
 4128 097c 22       		.uleb128 0x22
 4129 097d BD030000 		.4byte	.LASF149
 4130 0981 01       		.byte	0x1
 4131 0982 52       		.byte	0x52
 4132 0983 D2000000 		.4byte	0xd2
 4133 0987 05       		.uleb128 0x5
 4134 0988 03       		.byte	0x3
 4135 0989 00000000 		.4byte	blockSizeTotal
 4136 098d 22       		.uleb128 0x22
 4137 098e 9E050000 		.4byte	.LASF150
 4138 0992 01       		.byte	0x1
 4139 0993 D1       		.byte	0xd1
 4140 0994 D2000000 		.4byte	0xd2
 4141 0998 05       		.uleb128 0x5
 4142 0999 03       		.byte	0x3
 4143 099a 00000000 		.4byte	xBlocksize
 4144 099e 22       		.uleb128 0x22
 4145 099f A9050000 		.4byte	.LASF151
 4146 09a3 01       		.byte	0x1
 4147 09a4 D2       		.byte	0xd2
 4148 09a5 D2000000 		.4byte	0xd2
 4149 09a9 05       		.uleb128 0x5
 4150 09aa 03       		.byte	0x3
 4151 09ab 00000000 		.4byte	yBlocksize
 4152 09af 22       		.uleb128 0x22
 4153 09b0 17050000 		.4byte	.LASF152
 4154 09b4 01       		.byte	0x1
 4155 09b5 D3       		.byte	0xd3
 4156 09b6 96000000 		.4byte	0x96
 4157 09ba 05       		.uleb128 0x5
 4158 09bb 03       		.byte	0x3
 4159 09bc 00000000 		.4byte	currentRow
 4160 09c0 22       		.uleb128 0x22
 4161 09c1 23020000 		.4byte	.LASF153
 4162 09c5 01       		.byte	0x1
 4163 09c6 D4       		.byte	0xd4
 4164 09c7 96000000 		.4byte	0x96
 4165 09cb 05       		.uleb128 0x5
 4166 09cc 03       		.byte	0x3
 4167 09cd 00000000 		.4byte	currentCol
 4168 09d1 22       		.uleb128 0x22
 4169 09d2 39090000 		.4byte	.LASF154
 4170 09d6 01       		.byte	0x1
 4171 09d7 D6       		.byte	0xd6
 4172 09d8 96000000 		.4byte	0x96
 4173 09dc 05       		.uleb128 0x5
 4174 09dd 03       		.byte	0x3
 4175 09de 00000000 		.4byte	stoppedAfterTurn
 4176 09e2 22       		.uleb128 0x22
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 89


 4177 09e3 B8060000 		.4byte	.LASF155
 4178 09e7 01       		.byte	0x1
 4179 09e8 D7       		.byte	0xd7
 4180 09e9 96000000 		.4byte	0x96
 4181 09ed 05       		.uleb128 0x5
 4182 09ee 03       		.byte	0x3
 4183 09ef 00000000 		.4byte	ignoreSensor
 4184 09f3 22       		.uleb128 0x22
 4185 09f4 1B070000 		.4byte	.LASF156
 4186 09f8 01       		.byte	0x1
 4187 09f9 FF       		.byte	0xff
 4188 09fa 84020000 		.4byte	0x284
 4189 09fe 05       		.uleb128 0x5
 4190 09ff 03       		.byte	0x3
 4191 0a00 00000000 		.4byte	lastDirectionAfter180
 4192 0a04 26       		.uleb128 0x26
 4193 0a05 C1010000 		.4byte	.LASF157
 4194 0a09 01       		.byte	0x1
 4195 0a0a 4101     		.2byte	0x141
 4196 0a0c 96000000 		.4byte	0x96
 4197 0a10 05       		.uleb128 0x5
 4198 0a11 03       		.byte	0x3
 4199 0a12 00000000 		.4byte	firstTurnIteration
 4200 0a16 00       		.byte	0
 4201              		.section	.debug_abbrev,"",%progbits
 4202              	.Ldebug_abbrev0:
 4203 0000 01       		.uleb128 0x1
 4204 0001 11       		.uleb128 0x11
 4205 0002 01       		.byte	0x1
 4206 0003 25       		.uleb128 0x25
 4207 0004 0E       		.uleb128 0xe
 4208 0005 13       		.uleb128 0x13
 4209 0006 0B       		.uleb128 0xb
 4210 0007 03       		.uleb128 0x3
 4211 0008 0E       		.uleb128 0xe
 4212 0009 1B       		.uleb128 0x1b
 4213 000a 0E       		.uleb128 0xe
 4214 000b 55       		.uleb128 0x55
 4215 000c 17       		.uleb128 0x17
 4216 000d 11       		.uleb128 0x11
 4217 000e 01       		.uleb128 0x1
 4218 000f 10       		.uleb128 0x10
 4219 0010 17       		.uleb128 0x17
 4220 0011 00       		.byte	0
 4221 0012 00       		.byte	0
 4222 0013 02       		.uleb128 0x2
 4223 0014 24       		.uleb128 0x24
 4224 0015 00       		.byte	0
 4225 0016 0B       		.uleb128 0xb
 4226 0017 0B       		.uleb128 0xb
 4227 0018 3E       		.uleb128 0x3e
 4228 0019 0B       		.uleb128 0xb
 4229 001a 03       		.uleb128 0x3
 4230 001b 0E       		.uleb128 0xe
 4231 001c 00       		.byte	0
 4232 001d 00       		.byte	0
 4233 001e 03       		.uleb128 0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 90


 4234 001f 16       		.uleb128 0x16
 4235 0020 00       		.byte	0
 4236 0021 03       		.uleb128 0x3
 4237 0022 0E       		.uleb128 0xe
 4238 0023 3A       		.uleb128 0x3a
 4239 0024 0B       		.uleb128 0xb
 4240 0025 3B       		.uleb128 0x3b
 4241 0026 0B       		.uleb128 0xb
 4242 0027 49       		.uleb128 0x49
 4243 0028 13       		.uleb128 0x13
 4244 0029 00       		.byte	0
 4245 002a 00       		.byte	0
 4246 002b 04       		.uleb128 0x4
 4247 002c 24       		.uleb128 0x24
 4248 002d 00       		.byte	0
 4249 002e 0B       		.uleb128 0xb
 4250 002f 0B       		.uleb128 0xb
 4251 0030 3E       		.uleb128 0x3e
 4252 0031 0B       		.uleb128 0xb
 4253 0032 03       		.uleb128 0x3
 4254 0033 08       		.uleb128 0x8
 4255 0034 00       		.byte	0
 4256 0035 00       		.byte	0
 4257 0036 05       		.uleb128 0x5
 4258 0037 16       		.uleb128 0x16
 4259 0038 00       		.byte	0
 4260 0039 03       		.uleb128 0x3
 4261 003a 0E       		.uleb128 0xe
 4262 003b 3A       		.uleb128 0x3a
 4263 003c 0B       		.uleb128 0xb
 4264 003d 3B       		.uleb128 0x3b
 4265 003e 05       		.uleb128 0x5
 4266 003f 49       		.uleb128 0x49
 4267 0040 13       		.uleb128 0x13
 4268 0041 00       		.byte	0
 4269 0042 00       		.byte	0
 4270 0043 06       		.uleb128 0x6
 4271 0044 35       		.uleb128 0x35
 4272 0045 00       		.byte	0
 4273 0046 49       		.uleb128 0x49
 4274 0047 13       		.uleb128 0x13
 4275 0048 00       		.byte	0
 4276 0049 00       		.byte	0
 4277 004a 07       		.uleb128 0x7
 4278 004b 01       		.uleb128 0x1
 4279 004c 01       		.byte	0x1
 4280 004d 49       		.uleb128 0x49
 4281 004e 13       		.uleb128 0x13
 4282 004f 01       		.uleb128 0x1
 4283 0050 13       		.uleb128 0x13
 4284 0051 00       		.byte	0
 4285 0052 00       		.byte	0
 4286 0053 08       		.uleb128 0x8
 4287 0054 21       		.uleb128 0x21
 4288 0055 00       		.byte	0
 4289 0056 49       		.uleb128 0x49
 4290 0057 13       		.uleb128 0x13
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 91


 4291 0058 2F       		.uleb128 0x2f
 4292 0059 0B       		.uleb128 0xb
 4293 005a 00       		.byte	0
 4294 005b 00       		.byte	0
 4295 005c 09       		.uleb128 0x9
 4296 005d 13       		.uleb128 0x13
 4297 005e 01       		.byte	0x1
 4298 005f 03       		.uleb128 0x3
 4299 0060 0E       		.uleb128 0xe
 4300 0061 0B       		.uleb128 0xb
 4301 0062 0B       		.uleb128 0xb
 4302 0063 3A       		.uleb128 0x3a
 4303 0064 0B       		.uleb128 0xb
 4304 0065 3B       		.uleb128 0x3b
 4305 0066 0B       		.uleb128 0xb
 4306 0067 01       		.uleb128 0x1
 4307 0068 13       		.uleb128 0x13
 4308 0069 00       		.byte	0
 4309 006a 00       		.byte	0
 4310 006b 0A       		.uleb128 0xa
 4311 006c 0D       		.uleb128 0xd
 4312 006d 00       		.byte	0
 4313 006e 03       		.uleb128 0x3
 4314 006f 0E       		.uleb128 0xe
 4315 0070 3A       		.uleb128 0x3a
 4316 0071 0B       		.uleb128 0xb
 4317 0072 3B       		.uleb128 0x3b
 4318 0073 0B       		.uleb128 0xb
 4319 0074 49       		.uleb128 0x49
 4320 0075 13       		.uleb128 0x13
 4321 0076 38       		.uleb128 0x38
 4322 0077 0B       		.uleb128 0xb
 4323 0078 00       		.byte	0
 4324 0079 00       		.byte	0
 4325 007a 0B       		.uleb128 0xb
 4326 007b 04       		.uleb128 0x4
 4327 007c 01       		.byte	0x1
 4328 007d 03       		.uleb128 0x3
 4329 007e 0E       		.uleb128 0xe
 4330 007f 0B       		.uleb128 0xb
 4331 0080 0B       		.uleb128 0xb
 4332 0081 49       		.uleb128 0x49
 4333 0082 13       		.uleb128 0x13
 4334 0083 3A       		.uleb128 0x3a
 4335 0084 0B       		.uleb128 0xb
 4336 0085 3B       		.uleb128 0x3b
 4337 0086 0B       		.uleb128 0xb
 4338 0087 01       		.uleb128 0x1
 4339 0088 13       		.uleb128 0x13
 4340 0089 00       		.byte	0
 4341 008a 00       		.byte	0
 4342 008b 0C       		.uleb128 0xc
 4343 008c 28       		.uleb128 0x28
 4344 008d 00       		.byte	0
 4345 008e 03       		.uleb128 0x3
 4346 008f 08       		.uleb128 0x8
 4347 0090 1C       		.uleb128 0x1c
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 92


 4348 0091 0B       		.uleb128 0xb
 4349 0092 00       		.byte	0
 4350 0093 00       		.byte	0
 4351 0094 0D       		.uleb128 0xd
 4352 0095 28       		.uleb128 0x28
 4353 0096 00       		.byte	0
 4354 0097 03       		.uleb128 0x3
 4355 0098 0E       		.uleb128 0xe
 4356 0099 1C       		.uleb128 0x1c
 4357 009a 0B       		.uleb128 0xb
 4358 009b 00       		.byte	0
 4359 009c 00       		.byte	0
 4360 009d 0E       		.uleb128 0xe
 4361 009e 2E       		.uleb128 0x2e
 4362 009f 01       		.byte	0x1
 4363 00a0 3F       		.uleb128 0x3f
 4364 00a1 19       		.uleb128 0x19
 4365 00a2 03       		.uleb128 0x3
 4366 00a3 0E       		.uleb128 0xe
 4367 00a4 3A       		.uleb128 0x3a
 4368 00a5 0B       		.uleb128 0xb
 4369 00a6 3B       		.uleb128 0x3b
 4370 00a7 0B       		.uleb128 0xb
 4371 00a8 27       		.uleb128 0x27
 4372 00a9 19       		.uleb128 0x19
 4373 00aa 11       		.uleb128 0x11
 4374 00ab 01       		.uleb128 0x1
 4375 00ac 12       		.uleb128 0x12
 4376 00ad 06       		.uleb128 0x6
 4377 00ae 40       		.uleb128 0x40
 4378 00af 18       		.uleb128 0x18
 4379 00b0 9642     		.uleb128 0x2116
 4380 00b2 19       		.uleb128 0x19
 4381 00b3 01       		.uleb128 0x1
 4382 00b4 13       		.uleb128 0x13
 4383 00b5 00       		.byte	0
 4384 00b6 00       		.byte	0
 4385 00b7 0F       		.uleb128 0xf
 4386 00b8 0B       		.uleb128 0xb
 4387 00b9 01       		.byte	0x1
 4388 00ba 11       		.uleb128 0x11
 4389 00bb 01       		.uleb128 0x1
 4390 00bc 12       		.uleb128 0x12
 4391 00bd 06       		.uleb128 0x6
 4392 00be 00       		.byte	0
 4393 00bf 00       		.byte	0
 4394 00c0 10       		.uleb128 0x10
 4395 00c1 34       		.uleb128 0x34
 4396 00c2 00       		.byte	0
 4397 00c3 03       		.uleb128 0x3
 4398 00c4 0E       		.uleb128 0xe
 4399 00c5 3A       		.uleb128 0x3a
 4400 00c6 0B       		.uleb128 0xb
 4401 00c7 3B       		.uleb128 0x3b
 4402 00c8 0B       		.uleb128 0xb
 4403 00c9 49       		.uleb128 0x49
 4404 00ca 13       		.uleb128 0x13
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 93


 4405 00cb 02       		.uleb128 0x2
 4406 00cc 18       		.uleb128 0x18
 4407 00cd 00       		.byte	0
 4408 00ce 00       		.byte	0
 4409 00cf 11       		.uleb128 0x11
 4410 00d0 2E       		.uleb128 0x2e
 4411 00d1 00       		.byte	0
 4412 00d2 3F       		.uleb128 0x3f
 4413 00d3 19       		.uleb128 0x19
 4414 00d4 03       		.uleb128 0x3
 4415 00d5 0E       		.uleb128 0xe
 4416 00d6 3A       		.uleb128 0x3a
 4417 00d7 0B       		.uleb128 0xb
 4418 00d8 3B       		.uleb128 0x3b
 4419 00d9 0B       		.uleb128 0xb
 4420 00da 27       		.uleb128 0x27
 4421 00db 19       		.uleb128 0x19
 4422 00dc 11       		.uleb128 0x11
 4423 00dd 01       		.uleb128 0x1
 4424 00de 12       		.uleb128 0x12
 4425 00df 06       		.uleb128 0x6
 4426 00e0 40       		.uleb128 0x40
 4427 00e1 18       		.uleb128 0x18
 4428 00e2 9742     		.uleb128 0x2117
 4429 00e4 19       		.uleb128 0x19
 4430 00e5 00       		.byte	0
 4431 00e6 00       		.byte	0
 4432 00e7 12       		.uleb128 0x12
 4433 00e8 2E       		.uleb128 0x2e
 4434 00e9 00       		.byte	0
 4435 00ea 3F       		.uleb128 0x3f
 4436 00eb 19       		.uleb128 0x19
 4437 00ec 03       		.uleb128 0x3
 4438 00ed 0E       		.uleb128 0xe
 4439 00ee 3A       		.uleb128 0x3a
 4440 00ef 0B       		.uleb128 0xb
 4441 00f0 3B       		.uleb128 0x3b
 4442 00f1 0B       		.uleb128 0xb
 4443 00f2 27       		.uleb128 0x27
 4444 00f3 19       		.uleb128 0x19
 4445 00f4 11       		.uleb128 0x11
 4446 00f5 01       		.uleb128 0x1
 4447 00f6 12       		.uleb128 0x12
 4448 00f7 06       		.uleb128 0x6
 4449 00f8 40       		.uleb128 0x40
 4450 00f9 18       		.uleb128 0x18
 4451 00fa 9642     		.uleb128 0x2116
 4452 00fc 19       		.uleb128 0x19
 4453 00fd 00       		.byte	0
 4454 00fe 00       		.byte	0
 4455 00ff 13       		.uleb128 0x13
 4456 0100 2E       		.uleb128 0x2e
 4457 0101 00       		.byte	0
 4458 0102 3F       		.uleb128 0x3f
 4459 0103 19       		.uleb128 0x19
 4460 0104 03       		.uleb128 0x3
 4461 0105 0E       		.uleb128 0xe
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 94


 4462 0106 3A       		.uleb128 0x3a
 4463 0107 0B       		.uleb128 0xb
 4464 0108 3B       		.uleb128 0x3b
 4465 0109 0B       		.uleb128 0xb
 4466 010a 49       		.uleb128 0x49
 4467 010b 13       		.uleb128 0x13
 4468 010c 11       		.uleb128 0x11
 4469 010d 01       		.uleb128 0x1
 4470 010e 12       		.uleb128 0x12
 4471 010f 06       		.uleb128 0x6
 4472 0110 40       		.uleb128 0x40
 4473 0111 18       		.uleb128 0x18
 4474 0112 9642     		.uleb128 0x2116
 4475 0114 19       		.uleb128 0x19
 4476 0115 00       		.byte	0
 4477 0116 00       		.byte	0
 4478 0117 14       		.uleb128 0x14
 4479 0118 2E       		.uleb128 0x2e
 4480 0119 01       		.byte	0x1
 4481 011a 3F       		.uleb128 0x3f
 4482 011b 19       		.uleb128 0x19
 4483 011c 03       		.uleb128 0x3
 4484 011d 0E       		.uleb128 0xe
 4485 011e 3A       		.uleb128 0x3a
 4486 011f 0B       		.uleb128 0xb
 4487 0120 3B       		.uleb128 0x3b
 4488 0121 0B       		.uleb128 0xb
 4489 0122 27       		.uleb128 0x27
 4490 0123 19       		.uleb128 0x19
 4491 0124 49       		.uleb128 0x49
 4492 0125 13       		.uleb128 0x13
 4493 0126 11       		.uleb128 0x11
 4494 0127 01       		.uleb128 0x1
 4495 0128 12       		.uleb128 0x12
 4496 0129 06       		.uleb128 0x6
 4497 012a 40       		.uleb128 0x40
 4498 012b 18       		.uleb128 0x18
 4499 012c 9642     		.uleb128 0x2116
 4500 012e 19       		.uleb128 0x19
 4501 012f 01       		.uleb128 0x1
 4502 0130 13       		.uleb128 0x13
 4503 0131 00       		.byte	0
 4504 0132 00       		.byte	0
 4505 0133 15       		.uleb128 0x15
 4506 0134 05       		.uleb128 0x5
 4507 0135 00       		.byte	0
 4508 0136 03       		.uleb128 0x3
 4509 0137 0E       		.uleb128 0xe
 4510 0138 3A       		.uleb128 0x3a
 4511 0139 0B       		.uleb128 0xb
 4512 013a 3B       		.uleb128 0x3b
 4513 013b 0B       		.uleb128 0xb
 4514 013c 49       		.uleb128 0x49
 4515 013d 13       		.uleb128 0x13
 4516 013e 02       		.uleb128 0x2
 4517 013f 18       		.uleb128 0x18
 4518 0140 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 95


 4519 0141 00       		.byte	0
 4520 0142 16       		.uleb128 0x16
 4521 0143 34       		.uleb128 0x34
 4522 0144 00       		.byte	0
 4523 0145 03       		.uleb128 0x3
 4524 0146 08       		.uleb128 0x8
 4525 0147 3A       		.uleb128 0x3a
 4526 0148 0B       		.uleb128 0xb
 4527 0149 3B       		.uleb128 0x3b
 4528 014a 0B       		.uleb128 0xb
 4529 014b 49       		.uleb128 0x49
 4530 014c 13       		.uleb128 0x13
 4531 014d 02       		.uleb128 0x2
 4532 014e 18       		.uleb128 0x18
 4533 014f 00       		.byte	0
 4534 0150 00       		.byte	0
 4535 0151 17       		.uleb128 0x17
 4536 0152 2E       		.uleb128 0x2e
 4537 0153 00       		.byte	0
 4538 0154 3F       		.uleb128 0x3f
 4539 0155 19       		.uleb128 0x19
 4540 0156 03       		.uleb128 0x3
 4541 0157 0E       		.uleb128 0xe
 4542 0158 3A       		.uleb128 0x3a
 4543 0159 0B       		.uleb128 0xb
 4544 015a 3B       		.uleb128 0x3b
 4545 015b 0B       		.uleb128 0xb
 4546 015c 11       		.uleb128 0x11
 4547 015d 01       		.uleb128 0x1
 4548 015e 12       		.uleb128 0x12
 4549 015f 06       		.uleb128 0x6
 4550 0160 40       		.uleb128 0x40
 4551 0161 18       		.uleb128 0x18
 4552 0162 9742     		.uleb128 0x2117
 4553 0164 19       		.uleb128 0x19
 4554 0165 00       		.byte	0
 4555 0166 00       		.byte	0
 4556 0167 18       		.uleb128 0x18
 4557 0168 2E       		.uleb128 0x2e
 4558 0169 00       		.byte	0
 4559 016a 3F       		.uleb128 0x3f
 4560 016b 19       		.uleb128 0x19
 4561 016c 03       		.uleb128 0x3
 4562 016d 0E       		.uleb128 0xe
 4563 016e 3A       		.uleb128 0x3a
 4564 016f 0B       		.uleb128 0xb
 4565 0170 3B       		.uleb128 0x3b
 4566 0171 0B       		.uleb128 0xb
 4567 0172 49       		.uleb128 0x49
 4568 0173 13       		.uleb128 0x13
 4569 0174 11       		.uleb128 0x11
 4570 0175 01       		.uleb128 0x1
 4571 0176 12       		.uleb128 0x12
 4572 0177 06       		.uleb128 0x6
 4573 0178 40       		.uleb128 0x40
 4574 0179 18       		.uleb128 0x18
 4575 017a 9742     		.uleb128 0x2117
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 96


 4576 017c 19       		.uleb128 0x19
 4577 017d 00       		.byte	0
 4578 017e 00       		.byte	0
 4579 017f 19       		.uleb128 0x19
 4580 0180 2E       		.uleb128 0x2e
 4581 0181 00       		.byte	0
 4582 0182 3F       		.uleb128 0x3f
 4583 0183 19       		.uleb128 0x19
 4584 0184 03       		.uleb128 0x3
 4585 0185 0E       		.uleb128 0xe
 4586 0186 3A       		.uleb128 0x3a
 4587 0187 0B       		.uleb128 0xb
 4588 0188 3B       		.uleb128 0x3b
 4589 0189 05       		.uleb128 0x5
 4590 018a 49       		.uleb128 0x49
 4591 018b 13       		.uleb128 0x13
 4592 018c 11       		.uleb128 0x11
 4593 018d 01       		.uleb128 0x1
 4594 018e 12       		.uleb128 0x12
 4595 018f 06       		.uleb128 0x6
 4596 0190 40       		.uleb128 0x40
 4597 0191 18       		.uleb128 0x18
 4598 0192 9742     		.uleb128 0x2117
 4599 0194 19       		.uleb128 0x19
 4600 0195 00       		.byte	0
 4601 0196 00       		.byte	0
 4602 0197 1A       		.uleb128 0x1a
 4603 0198 2E       		.uleb128 0x2e
 4604 0199 01       		.byte	0x1
 4605 019a 3F       		.uleb128 0x3f
 4606 019b 19       		.uleb128 0x19
 4607 019c 03       		.uleb128 0x3
 4608 019d 0E       		.uleb128 0xe
 4609 019e 3A       		.uleb128 0x3a
 4610 019f 0B       		.uleb128 0xb
 4611 01a0 3B       		.uleb128 0x3b
 4612 01a1 05       		.uleb128 0x5
 4613 01a2 49       		.uleb128 0x49
 4614 01a3 13       		.uleb128 0x13
 4615 01a4 11       		.uleb128 0x11
 4616 01a5 01       		.uleb128 0x1
 4617 01a6 12       		.uleb128 0x12
 4618 01a7 06       		.uleb128 0x6
 4619 01a8 40       		.uleb128 0x40
 4620 01a9 18       		.uleb128 0x18
 4621 01aa 9642     		.uleb128 0x2116
 4622 01ac 19       		.uleb128 0x19
 4623 01ad 01       		.uleb128 0x1
 4624 01ae 13       		.uleb128 0x13
 4625 01af 00       		.byte	0
 4626 01b0 00       		.byte	0
 4627 01b1 1B       		.uleb128 0x1b
 4628 01b2 34       		.uleb128 0x34
 4629 01b3 00       		.byte	0
 4630 01b4 03       		.uleb128 0x3
 4631 01b5 0E       		.uleb128 0xe
 4632 01b6 3A       		.uleb128 0x3a
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 97


 4633 01b7 0B       		.uleb128 0xb
 4634 01b8 3B       		.uleb128 0x3b
 4635 01b9 05       		.uleb128 0x5
 4636 01ba 49       		.uleb128 0x49
 4637 01bb 13       		.uleb128 0x13
 4638 01bc 02       		.uleb128 0x2
 4639 01bd 18       		.uleb128 0x18
 4640 01be 00       		.byte	0
 4641 01bf 00       		.byte	0
 4642 01c0 1C       		.uleb128 0x1c
 4643 01c1 2E       		.uleb128 0x2e
 4644 01c2 00       		.byte	0
 4645 01c3 3F       		.uleb128 0x3f
 4646 01c4 19       		.uleb128 0x19
 4647 01c5 03       		.uleb128 0x3
 4648 01c6 0E       		.uleb128 0xe
 4649 01c7 3A       		.uleb128 0x3a
 4650 01c8 0B       		.uleb128 0xb
 4651 01c9 3B       		.uleb128 0x3b
 4652 01ca 05       		.uleb128 0x5
 4653 01cb 11       		.uleb128 0x11
 4654 01cc 01       		.uleb128 0x1
 4655 01cd 12       		.uleb128 0x12
 4656 01ce 06       		.uleb128 0x6
 4657 01cf 40       		.uleb128 0x40
 4658 01d0 18       		.uleb128 0x18
 4659 01d1 9742     		.uleb128 0x2117
 4660 01d3 19       		.uleb128 0x19
 4661 01d4 00       		.byte	0
 4662 01d5 00       		.byte	0
 4663 01d6 1D       		.uleb128 0x1d
 4664 01d7 2E       		.uleb128 0x2e
 4665 01d8 01       		.byte	0x1
 4666 01d9 3F       		.uleb128 0x3f
 4667 01da 19       		.uleb128 0x19
 4668 01db 03       		.uleb128 0x3
 4669 01dc 0E       		.uleb128 0xe
 4670 01dd 3A       		.uleb128 0x3a
 4671 01de 0B       		.uleb128 0xb
 4672 01df 3B       		.uleb128 0x3b
 4673 01e0 05       		.uleb128 0x5
 4674 01e1 49       		.uleb128 0x49
 4675 01e2 13       		.uleb128 0x13
 4676 01e3 11       		.uleb128 0x11
 4677 01e4 01       		.uleb128 0x1
 4678 01e5 12       		.uleb128 0x12
 4679 01e6 06       		.uleb128 0x6
 4680 01e7 40       		.uleb128 0x40
 4681 01e8 18       		.uleb128 0x18
 4682 01e9 9742     		.uleb128 0x2117
 4683 01eb 19       		.uleb128 0x19
 4684 01ec 01       		.uleb128 0x1
 4685 01ed 13       		.uleb128 0x13
 4686 01ee 00       		.byte	0
 4687 01ef 00       		.byte	0
 4688 01f0 1E       		.uleb128 0x1e
 4689 01f1 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 98


 4690 01f2 01       		.byte	0x1
 4691 01f3 3F       		.uleb128 0x3f
 4692 01f4 19       		.uleb128 0x19
 4693 01f5 03       		.uleb128 0x3
 4694 01f6 0E       		.uleb128 0xe
 4695 01f7 3A       		.uleb128 0x3a
 4696 01f8 0B       		.uleb128 0xb
 4697 01f9 3B       		.uleb128 0x3b
 4698 01fa 05       		.uleb128 0x5
 4699 01fb 11       		.uleb128 0x11
 4700 01fc 01       		.uleb128 0x1
 4701 01fd 12       		.uleb128 0x12
 4702 01fe 06       		.uleb128 0x6
 4703 01ff 40       		.uleb128 0x40
 4704 0200 18       		.uleb128 0x18
 4705 0201 9642     		.uleb128 0x2116
 4706 0203 19       		.uleb128 0x19
 4707 0204 01       		.uleb128 0x1
 4708 0205 13       		.uleb128 0x13
 4709 0206 00       		.byte	0
 4710 0207 00       		.byte	0
 4711 0208 1F       		.uleb128 0x1f
 4712 0209 2E       		.uleb128 0x2e
 4713 020a 00       		.byte	0
 4714 020b 3F       		.uleb128 0x3f
 4715 020c 19       		.uleb128 0x19
 4716 020d 03       		.uleb128 0x3
 4717 020e 0E       		.uleb128 0xe
 4718 020f 3A       		.uleb128 0x3a
 4719 0210 0B       		.uleb128 0xb
 4720 0211 3B       		.uleb128 0x3b
 4721 0212 05       		.uleb128 0x5
 4722 0213 11       		.uleb128 0x11
 4723 0214 01       		.uleb128 0x1
 4724 0215 12       		.uleb128 0x12
 4725 0216 06       		.uleb128 0x6
 4726 0217 40       		.uleb128 0x40
 4727 0218 18       		.uleb128 0x18
 4728 0219 9642     		.uleb128 0x2116
 4729 021b 19       		.uleb128 0x19
 4730 021c 00       		.byte	0
 4731 021d 00       		.byte	0
 4732 021e 20       		.uleb128 0x20
 4733 021f 34       		.uleb128 0x34
 4734 0220 00       		.byte	0
 4735 0221 03       		.uleb128 0x3
 4736 0222 0E       		.uleb128 0xe
 4737 0223 3A       		.uleb128 0x3a
 4738 0224 0B       		.uleb128 0xb
 4739 0225 3B       		.uleb128 0x3b
 4740 0226 05       		.uleb128 0x5
 4741 0227 49       		.uleb128 0x49
 4742 0228 13       		.uleb128 0x13
 4743 0229 3F       		.uleb128 0x3f
 4744 022a 19       		.uleb128 0x19
 4745 022b 3C       		.uleb128 0x3c
 4746 022c 19       		.uleb128 0x19
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 99


 4747 022d 00       		.byte	0
 4748 022e 00       		.byte	0
 4749 022f 21       		.uleb128 0x21
 4750 0230 34       		.uleb128 0x34
 4751 0231 00       		.byte	0
 4752 0232 03       		.uleb128 0x3
 4753 0233 08       		.uleb128 0x8
 4754 0234 3A       		.uleb128 0x3a
 4755 0235 0B       		.uleb128 0xb
 4756 0236 3B       		.uleb128 0x3b
 4757 0237 0B       		.uleb128 0xb
 4758 0238 49       		.uleb128 0x49
 4759 0239 13       		.uleb128 0x13
 4760 023a 3F       		.uleb128 0x3f
 4761 023b 19       		.uleb128 0x19
 4762 023c 02       		.uleb128 0x2
 4763 023d 18       		.uleb128 0x18
 4764 023e 00       		.byte	0
 4765 023f 00       		.byte	0
 4766 0240 22       		.uleb128 0x22
 4767 0241 34       		.uleb128 0x34
 4768 0242 00       		.byte	0
 4769 0243 03       		.uleb128 0x3
 4770 0244 0E       		.uleb128 0xe
 4771 0245 3A       		.uleb128 0x3a
 4772 0246 0B       		.uleb128 0xb
 4773 0247 3B       		.uleb128 0x3b
 4774 0248 0B       		.uleb128 0xb
 4775 0249 49       		.uleb128 0x49
 4776 024a 13       		.uleb128 0x13
 4777 024b 3F       		.uleb128 0x3f
 4778 024c 19       		.uleb128 0x19
 4779 024d 02       		.uleb128 0x2
 4780 024e 18       		.uleb128 0x18
 4781 024f 00       		.byte	0
 4782 0250 00       		.byte	0
 4783 0251 23       		.uleb128 0x23
 4784 0252 34       		.uleb128 0x34
 4785 0253 00       		.byte	0
 4786 0254 03       		.uleb128 0x3
 4787 0255 08       		.uleb128 0x8
 4788 0256 3A       		.uleb128 0x3a
 4789 0257 0B       		.uleb128 0xb
 4790 0258 3B       		.uleb128 0x3b
 4791 0259 0B       		.uleb128 0xb
 4792 025a 49       		.uleb128 0x49
 4793 025b 13       		.uleb128 0x13
 4794 025c 3F       		.uleb128 0x3f
 4795 025d 19       		.uleb128 0x19
 4796 025e 3C       		.uleb128 0x3c
 4797 025f 19       		.uleb128 0x19
 4798 0260 00       		.byte	0
 4799 0261 00       		.byte	0
 4800 0262 24       		.uleb128 0x24
 4801 0263 34       		.uleb128 0x34
 4802 0264 00       		.byte	0
 4803 0265 03       		.uleb128 0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 100


 4804 0266 0E       		.uleb128 0xe
 4805 0267 3A       		.uleb128 0x3a
 4806 0268 0B       		.uleb128 0xb
 4807 0269 3B       		.uleb128 0x3b
 4808 026a 0B       		.uleb128 0xb
 4809 026b 49       		.uleb128 0x49
 4810 026c 13       		.uleb128 0x13
 4811 026d 3F       		.uleb128 0x3f
 4812 026e 19       		.uleb128 0x19
 4813 026f 3C       		.uleb128 0x3c
 4814 0270 19       		.uleb128 0x19
 4815 0271 00       		.byte	0
 4816 0272 00       		.byte	0
 4817 0273 25       		.uleb128 0x25
 4818 0274 0F       		.uleb128 0xf
 4819 0275 00       		.byte	0
 4820 0276 0B       		.uleb128 0xb
 4821 0277 0B       		.uleb128 0xb
 4822 0278 49       		.uleb128 0x49
 4823 0279 13       		.uleb128 0x13
 4824 027a 00       		.byte	0
 4825 027b 00       		.byte	0
 4826 027c 26       		.uleb128 0x26
 4827 027d 34       		.uleb128 0x34
 4828 027e 00       		.byte	0
 4829 027f 03       		.uleb128 0x3
 4830 0280 0E       		.uleb128 0xe
 4831 0281 3A       		.uleb128 0x3a
 4832 0282 0B       		.uleb128 0xb
 4833 0283 3B       		.uleb128 0x3b
 4834 0284 05       		.uleb128 0x5
 4835 0285 49       		.uleb128 0x49
 4836 0286 13       		.uleb128 0x13
 4837 0287 3F       		.uleb128 0x3f
 4838 0288 19       		.uleb128 0x19
 4839 0289 02       		.uleb128 0x2
 4840 028a 18       		.uleb128 0x18
 4841 028b 00       		.byte	0
 4842 028c 00       		.byte	0
 4843 028d 00       		.byte	0
 4844              		.section	.debug_aranges,"",%progbits
 4845 0000 9C000000 		.4byte	0x9c
 4846 0004 0200     		.2byte	0x2
 4847 0006 00000000 		.4byte	.Ldebug_info0
 4848 000a 04       		.byte	0x4
 4849 000b 00       		.byte	0
 4850 000c 0000     		.2byte	0
 4851 000e 0000     		.2byte	0
 4852 0010 00000000 		.4byte	.LFB64
 4853 0014 EC000000 		.4byte	.LFE64-.LFB64
 4854 0018 00000000 		.4byte	.LFB65
 4855 001c 18000000 		.4byte	.LFE65-.LFB65
 4856 0020 00000000 		.4byte	.LFB66
 4857 0024 18000000 		.4byte	.LFE66-.LFB66
 4858 0028 00000000 		.4byte	.LFB67
 4859 002c 18000000 		.4byte	.LFE67-.LFB67
 4860 0030 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 101


 4861 0034 18000000 		.4byte	.LFE68-.LFB68
 4862 0038 00000000 		.4byte	.LFB69
 4863 003c 70000000 		.4byte	.LFE69-.LFB69
 4864 0040 00000000 		.4byte	.LFB70
 4865 0044 04010000 		.4byte	.LFE70-.LFB70
 4866 0048 00000000 		.4byte	.LFB71
 4867 004c 54000000 		.4byte	.LFE71-.LFB71
 4868 0050 00000000 		.4byte	.LFB72
 4869 0054 34000000 		.4byte	.LFE72-.LFB72
 4870 0058 00000000 		.4byte	.LFB73
 4871 005c 84000000 		.4byte	.LFE73-.LFB73
 4872 0060 00000000 		.4byte	.LFB74
 4873 0064 7C000000 		.4byte	.LFE74-.LFB74
 4874 0068 00000000 		.4byte	.LFB75
 4875 006c 84000000 		.4byte	.LFE75-.LFB75
 4876 0070 00000000 		.4byte	.LFB76
 4877 0074 80070000 		.4byte	.LFE76-.LFB76
 4878 0078 00000000 		.4byte	.LFB77
 4879 007c 68000000 		.4byte	.LFE77-.LFB77
 4880 0080 00000000 		.4byte	.LFB78
 4881 0084 6C000000 		.4byte	.LFE78-.LFB78
 4882 0088 00000000 		.4byte	.LFB79
 4883 008c 3C010000 		.4byte	.LFE79-.LFB79
 4884 0090 00000000 		.4byte	.LFB80
 4885 0094 CC000000 		.4byte	.LFE80-.LFB80
 4886 0098 00000000 		.4byte	0
 4887 009c 00000000 		.4byte	0
 4888              		.section	.debug_ranges,"",%progbits
 4889              	.Ldebug_ranges0:
 4890 0000 00000000 		.4byte	.LFB64
 4891 0004 EC000000 		.4byte	.LFE64
 4892 0008 00000000 		.4byte	.LFB65
 4893 000c 18000000 		.4byte	.LFE65
 4894 0010 00000000 		.4byte	.LFB66
 4895 0014 18000000 		.4byte	.LFE66
 4896 0018 00000000 		.4byte	.LFB67
 4897 001c 18000000 		.4byte	.LFE67
 4898 0020 00000000 		.4byte	.LFB68
 4899 0024 18000000 		.4byte	.LFE68
 4900 0028 00000000 		.4byte	.LFB69
 4901 002c 70000000 		.4byte	.LFE69
 4902 0030 00000000 		.4byte	.LFB70
 4903 0034 04010000 		.4byte	.LFE70
 4904 0038 00000000 		.4byte	.LFB71
 4905 003c 54000000 		.4byte	.LFE71
 4906 0040 00000000 		.4byte	.LFB72
 4907 0044 34000000 		.4byte	.LFE72
 4908 0048 00000000 		.4byte	.LFB73
 4909 004c 84000000 		.4byte	.LFE73
 4910 0050 00000000 		.4byte	.LFB74
 4911 0054 7C000000 		.4byte	.LFE74
 4912 0058 00000000 		.4byte	.LFB75
 4913 005c 84000000 		.4byte	.LFE75
 4914 0060 00000000 		.4byte	.LFB76
 4915 0064 80070000 		.4byte	.LFE76
 4916 0068 00000000 		.4byte	.LFB77
 4917 006c 68000000 		.4byte	.LFE77
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 102


 4918 0070 00000000 		.4byte	.LFB78
 4919 0074 6C000000 		.4byte	.LFE78
 4920 0078 00000000 		.4byte	.LFB79
 4921 007c 3C010000 		.4byte	.LFE79
 4922 0080 00000000 		.4byte	.LFB80
 4923 0084 CC000000 		.4byte	.LFE80
 4924 0088 00000000 		.4byte	0
 4925 008c 00000000 		.4byte	0
 4926              		.section	.debug_line,"",%progbits
 4927              	.Ldebug_line0:
 4928 0000 EA040000 		.section	.debug_str,"MS",%progbits,1
 4928      02007001 
 4928      00000201 
 4928      FB0E0D00 
 4928      01010101 
 4929              	.LASF140:
 4930 0000 746F7461 		.ascii	"totalDistance\000"
 4930      6C446973 
 4930      74616E63 
 4930      6500
 4931              	.LASF41:
 4932 000e 4F726965 		.ascii	"OrientationState\000"
 4932      6E746174 
 4932      696F6E53 
 4932      74617465 
 4932      00
 4933              	.LASF36:
 4934 001f 67325F73 		.ascii	"g2_speed\000"
 4934      70656564 
 4934      00
 4935              	.LASF94:
 4936 0028 666F7277 		.ascii	"forwardUntilTargetStartedFlag\000"
 4936      61726455 
 4936      6E74696C 
 4936      54617267 
 4936      65745374 
 4937              	.LASF56:
 4938 0046 526F626F 		.ascii	"RobotMovement\000"
 4938      744D6F76 
 4938      656D656E 
 4938      7400
 4939              	.LASF132:
 4940 0054 70726576 		.ascii	"previousDirection\000"
 4940      696F7573 
 4940      44697265 
 4940      6374696F 
 4940      6E00
 4941              	.LASF103:
 4942 0066 6C696E65 		.ascii	"lineCount\000"
 4942      436F756E 
 4942      7400
 4943              	.LASF114:
 4944 0070 74735F73 		.ascii	"ts_speed\000"
 4944      70656564 
 4944      00
 4945              	.LASF0:
 4946 0079 7369676E 		.ascii	"signed char\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 103


 4946      65642063 
 4946      68617200 
 4947              	.LASF69:
 4948 0085 53345F44 		.ascii	"S4_DETECTED\000"
 4948      45544543 
 4948      54454400 
 4949              	.LASF51:
 4950 0091 64697265 		.ascii	"direction\000"
 4950      6374696F 
 4950      6E00
 4951              	.LASF143:
 4952 009b 74696D65 		.ascii	"timerInt\000"
 4952      72496E74 
 4952      00
 4953              	.LASF158:
 4954 00a4 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4954      43313120 
 4954      352E342E 
 4954      31203230 
 4954      31363036 
 4955 00d7 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4955      20726576 
 4955      6973696F 
 4955      6E203233 
 4955      37373135 
 4956 010a 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4956      66756E63 
 4956      74696F6E 
 4956      2D736563 
 4956      74696F6E 
 4957              	.LASF82:
 4958 0132 626C6F63 		.ascii	"blocksToTarget\000"
 4958      6B73546F 
 4958      54617267 
 4958      657400
 4959              	.LASF29:
 4960 0141 67305F64 		.ascii	"g0_direction\000"
 4960      69726563 
 4960      74696F6E 
 4960      00
 4961              	.LASF127:
 4962 014e 656E7472 		.ascii	"entry\000"
 4962      7900
 4963              	.LASF7:
 4964 0154 6C6F6E67 		.ascii	"long long unsigned int\000"
 4964      206C6F6E 
 4964      6720756E 
 4964      7369676E 
 4964      65642069 
 4965              	.LASF55:
 4966 016b 65787065 		.ascii	"expectedOrientation\000"
 4966      63746564 
 4966      4F726965 
 4966      6E746174 
 4966      696F6E00 
 4967              	.LASF46:
 4968 017f 75547572 		.ascii	"uTurn\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 104


 4968      6E00
 4969              	.LASF26:
 4970 0185 67305F78 		.ascii	"g0_xpos\000"
 4970      706F7300 
 4971              	.LASF145:
 4972 018d 73746F70 		.ascii	"stopBuffer\000"
 4972      42756666 
 4972      657200
 4973              	.LASF104:
 4974 0198 6F6E4C69 		.ascii	"onLineFlag\000"
 4974      6E65466C 
 4974      616700
 4975              	.LASF54:
 4976 01a3 64697374 		.ascii	"distanceToTarget\000"
 4976      616E6365 
 4976      546F5461 
 4976      72676574 
 4976      00
 4977              	.LASF48:
 4978 01b4 53746F70 		.ascii	"StopAtTarget\000"
 4978      41745461 
 4978      72676574 
 4978      00
 4979              	.LASF157:
 4980 01c1 66697273 		.ascii	"firstTurnIteration\000"
 4980      74547572 
 4980      6E497465 
 4980      72617469 
 4980      6F6E00
 4981              	.LASF116:
 4982 01d4 666C6167 		.ascii	"flag_ts_enc\000"
 4982      5F74735F 
 4982      656E6300 
 4983              	.LASF68:
 4984 01e0 53335F44 		.ascii	"S3_DETECTED\000"
 4984      45544543 
 4984      54454400 
 4985              	.LASF122:
 4986 01ec 666C6167 		.ascii	"flag_KB_string\000"
 4986      5F4B425F 
 4986      73747269 
 4986      6E6700
 4987              	.LASF70:
 4988 01fb 53355F44 		.ascii	"S5_DETECTED\000"
 4988      45544543 
 4988      54454400 
 4989              	.LASF98:
 4990 0207 72696768 		.ascii	"rightStatusFlag\000"
 4990      74537461 
 4990      74757346 
 4990      6C616700 
 4991              	.LASF50:
 4992 0217 496E7374 		.ascii	"Instruction\000"
 4992      72756374 
 4992      696F6E00 
 4993              	.LASF153:
 4994 0223 63757272 		.ascii	"currentCol\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 105


 4994      656E7443 
 4994      6F6C00
 4995              	.LASF62:
 4996 022e 53746F70 		.ascii	"Stop\000"
 4996      00
 4997              	.LASF4:
 4998 0233 6C6F6E67 		.ascii	"long int\000"
 4998      20696E74 
 4998      00
 4999              	.LASF111:
 5000 023c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5000      52784275 
 5000      66666572 
 5000      00
 5001              	.LASF88:
 5002 0249 636F756E 		.ascii	"count2\000"
 5002      743200
 5003              	.LASF91:
 5004 0250 696E7374 		.ascii	"instructionIndex\000"
 5004      72756374 
 5004      696F6E49 
 5004      6E646578 
 5004      00
 5005              	.LASF77:
 5006 0261 5370696E 		.ascii	"SpinTurnCourseCorrection\000"
 5006      5475726E 
 5006      436F7572 
 5006      7365436F 
 5006      72726563 
 5007              	.LASF47:
 5008 027a 466F7277 		.ascii	"ForwardUntilTarget\000"
 5008      61726455 
 5008      6E74696C 
 5008      54617267 
 5008      657400
 5009              	.LASF66:
 5010 028d 4261636B 		.ascii	"Backward\000"
 5010      77617264 
 5010      00
 5011              	.LASF14:
 5012 0296 75696E74 		.ascii	"uint8\000"
 5012      3800
 5013              	.LASF6:
 5014 029c 6C6F6E67 		.ascii	"long long int\000"
 5014      206C6F6E 
 5014      6720696E 
 5014      7400
 5015              	.LASF20:
 5016 02aa 646F7562 		.ascii	"double\000"
 5016      6C6500
 5017              	.LASF100:
 5018 02b1 63757272 		.ascii	"currentIgnoreL\000"
 5018      656E7449 
 5018      676E6F72 
 5018      654C00
 5019              	.LASF123:
 5020 02c0 64617461 		.ascii	"dataready_flag\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 106


 5020      72656164 
 5020      795F666C 
 5020      616700
 5021              	.LASF73:
 5022 02cf 6D61696E 		.ascii	"main\000"
 5022      00
 5023              	.LASF101:
 5024 02d4 63757272 		.ascii	"currentIgnoreR\000"
 5024      656E7449 
 5024      676E6F72 
 5024      655200
 5025              	.LASF61:
 5026 02e3 41646A75 		.ascii	"AdjustToTheRight\000"
 5026      7374546F 
 5026      54686552 
 5026      69676874 
 5026      00
 5027              	.LASF109:
 5028 02f4 666F7277 		.ascii	"forwardAfterTurnLIgnore\000"
 5028      61726441 
 5028      66746572 
 5028      5475726E 
 5028      4C49676E 
 5029              	.LASF120:
 5030 030c 666C6167 		.ascii	"flag_rx\000"
 5030      5F727800 
 5031              	.LASF16:
 5032 0314 75696E74 		.ascii	"uint32\000"
 5032      333200
 5033              	.LASF86:
 5034 031b 6E657874 		.ascii	"nextInstruction\000"
 5034      496E7374 
 5034      72756374 
 5034      696F6E00 
 5035              	.LASF162:
 5036 032b 636F756E 		.ascii	"count\000"
 5036      7400
 5037              	.LASF126:
 5038 0331 6C696E65 		.ascii	"line\000"
 5038      00
 5039              	.LASF37:
 5040 0336 67325F64 		.ascii	"g2_direction\000"
 5040      69726563 
 5040      74696F6E 
 5040      00
 5041              	.LASF108:
 5042 0343 646F6E74 		.ascii	"dontOverwriteLeftIgnore\000"
 5042      4F766572 
 5042      77726974 
 5042      654C6566 
 5042      7449676E 
 5043              	.LASF142:
 5044 035b 71756164 		.ascii	"quadDec2Count\000"
 5044      44656332 
 5044      436F756E 
 5044      7400
 5045              	.LASF58:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 107


 5046 0369 5475726E 		.ascii	"TurnRight\000"
 5046      52696768 
 5046      7400
 5047              	.LASF65:
 5048 0373 466F7277 		.ascii	"ForwardAfterTurn\000"
 5048      61726441 
 5048      66746572 
 5048      5475726E 
 5048      00
 5049              	.LASF49:
 5050 0384 64617461 		.ascii	"data_main\000"
 5050      5F6D6169 
 5050      6E00
 5051              	.LASF80:
 5052 038e 626C6F63 		.ascii	"blocksize\000"
 5052      6B73697A 
 5052      6500
 5053              	.LASF112:
 5054 0398 74735F65 		.ascii	"ts_enc\000"
 5054      6E6300
 5055              	.LASF5:
 5056 039f 6C6F6E67 		.ascii	"long unsigned int\000"
 5056      20756E73 
 5056      69676E65 
 5056      6420696E 
 5056      7400
 5057              	.LASF106:
 5058 03b1 746F6F4C 		.ascii	"tooLateFlag\000"
 5058      61746546 
 5058      6C616700 
 5059              	.LASF149:
 5060 03bd 626C6F63 		.ascii	"blockSizeTotal\000"
 5060      6B53697A 
 5060      65546F74 
 5060      616C00
 5061              	.LASF163:
 5062 03cc 526F7461 		.ascii	"RotateClockwise180Degrees\000"
 5062      7465436C 
 5062      6F636B77 
 5062      69736531 
 5062      38304465 
 5063              	.LASF64:
 5064 03e6 77616974 		.ascii	"waitForTurn\000"
 5064      466F7254 
 5064      75726E00 
 5065              	.LASF57:
 5066 03f2 466F7277 		.ascii	"Forward\000"
 5066      61726400 
 5067              	.LASF3:
 5068 03fa 73686F72 		.ascii	"short unsigned int\000"
 5068      7420756E 
 5068      7369676E 
 5068      65642069 
 5068      6E7400
 5069              	.LASF107:
 5070 040d 646F6E74 		.ascii	"dontOverwriteRightIgnore\000"
 5070      4F766572 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 108


 5070      77726974 
 5070      65526967 
 5070      68744967 
 5071              	.LASF105:
 5072 0426 746F6F45 		.ascii	"tooEarlyFlag\000"
 5072      61726C79 
 5072      466C6167 
 5072      00
 5073              	.LASF90:
 5074 0433 53657452 		.ascii	"SetRobotMovement\000"
 5074      6F626F74 
 5074      4D6F7665 
 5074      6D656E74 
 5074      00
 5075              	.LASF17:
 5076 0444 696E7438 		.ascii	"int8\000"
 5076      00
 5077              	.LASF78:
 5078 0449 73706565 		.ascii	"speedTimer\000"
 5078      6454696D 
 5078      657200
 5079              	.LASF12:
 5080 0454 5F5F696E 		.ascii	"__int32_t\000"
 5080      7433325F 
 5080      7400
 5081              	.LASF159:
 5082 045e 6D61696E 		.ascii	"main.c\000"
 5082      2E6300
 5083              	.LASF31:
 5084 0465 67315F79 		.ascii	"g1_ypos\000"
 5084      706F7300 
 5085              	.LASF84:
 5086 046d 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 5086      546F4E65 
 5086      7874496E 
 5086      73747275 
 5086      6374696F 
 5087              	.LASF2:
 5088 0483 73686F72 		.ascii	"short int\000"
 5088      7420696E 
 5088      7400
 5089              	.LASF89:
 5090 048d 71756164 		.ascii	"quadPulseCount\000"
 5090      50756C73 
 5090      65436F75 
 5090      6E7400
 5091              	.LASF115:
 5092 049c 74735F64 		.ascii	"ts_display\000"
 5092      6973706C 
 5092      617900
 5093              	.LASF148:
 5094 04a7 63757272 		.ascii	"currentFoodListIndex\000"
 5094      656E7446 
 5094      6F6F644C 
 5094      69737449 
 5094      6E646578 
 5095              	.LASF75:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 109


 5096 04bc 466F7277 		.ascii	"ForwardCourseCorrection\000"
 5096      61726443 
 5096      6F757273 
 5096      65436F72 
 5096      72656374 
 5097              	.LASF121:
 5098 04d4 666C6167 		.ascii	"flag_packet\000"
 5098      5F706163 
 5098      6B657400 
 5099              	.LASF118:
 5100 04e0 666C6167 		.ascii	"flag_ts_speed\000"
 5100      5F74735F 
 5100      73706565 
 5100      6400
 5101              	.LASF32:
 5102 04ee 67315F73 		.ascii	"g1_speed\000"
 5102      70656564 
 5102      00
 5103              	.LASF39:
 5104 04f7 4C656674 		.ascii	"Left\000"
 5104      00
 5105              	.LASF96:
 5106 04fc 75547572 		.ascii	"uTurnFinishedFlag\000"
 5106      6E46696E 
 5106      69736865 
 5106      64466C61 
 5106      6700
 5107              	.LASF10:
 5108 050e 73697A65 		.ascii	"sizetype\000"
 5108      74797065 
 5108      00
 5109              	.LASF152:
 5110 0517 63757272 		.ascii	"currentRow\000"
 5110      656E7452 
 5110      6F7700
 5111              	.LASF129:
 5112 0522 73797374 		.ascii	"system_state\000"
 5112      656D5F73 
 5112      74617465 
 5112      00
 5113              	.LASF33:
 5114 052f 67315F64 		.ascii	"g1_direction\000"
 5114      69726563 
 5114      74696F6E 
 5114      00
 5115              	.LASF128:
 5116 053c 75736242 		.ascii	"usbBuffer\000"
 5116      75666665 
 5116      7200
 5117              	.LASF44:
 5118 0546 77616974 		.ascii	"waitForLeftTurn\000"
 5118      466F724C 
 5118      65667454 
 5118      75726E00 
 5119              	.LASF30:
 5120 0556 67315F78 		.ascii	"g1_xpos\000"
 5120      706F7300 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 110


 5121              	.LASF35:
 5122 055e 67325F79 		.ascii	"g2_ypos\000"
 5122      706F7300 
 5123              	.LASF99:
 5124 0566 7370696E 		.ascii	"spinCourseCorrectionStarted\000"
 5124      436F7572 
 5124      7365436F 
 5124      72726563 
 5124      74696F6E 
 5125              	.LASF124:
 5126 0582 666C6167 		.ascii	"flag_rf_transmission_active\000"
 5126      5F72665F 
 5126      7472616E 
 5126      736D6973 
 5126      73696F6E 
 5127              	.LASF150:
 5128 059e 78426C6F 		.ascii	"xBlocksize\000"
 5128      636B7369 
 5128      7A6500
 5129              	.LASF151:
 5130 05a9 79426C6F 		.ascii	"yBlocksize\000"
 5130      636B7369 
 5130      7A6500
 5131              	.LASF19:
 5132 05b4 666C6F61 		.ascii	"float\000"
 5132      7400
 5133              	.LASF160:
 5134 05ba 483A5C47 		.ascii	"H:\\GitHub\\301-Robot\\psoc student pack\\psoc_code"
 5134      69744875 
 5134      625C3330 
 5134      312D526F 
 5134      626F745C 
 5135 05e9 5F626173 		.ascii	"_base\\CS301_Class.cydsn\000"
 5135      655C4353 
 5135      3330315F 
 5135      436C6173 
 5135      732E6379 
 5136              	.LASF139:
 5137 0601 746F7461 		.ascii	"totalMilliseconds\000"
 5137      6C4D696C 
 5137      6C697365 
 5137      636F6E64 
 5137      7300
 5138              	.LASF63:
 5139 0613 556E6B6E 		.ascii	"Unknown\000"
 5139      6F776E00 
 5140              	.LASF85:
 5141 061b 47657449 		.ascii	"GetInstructionAtIndex\000"
 5141      6E737472 
 5141      75637469 
 5141      6F6E4174 
 5141      496E6465 
 5142              	.LASF144:
 5143 0631 6B656570 		.ascii	"keepLedOn\000"
 5143      4C65644F 
 5143      6E00
 5144              	.LASF113:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 111


 5145 063b 74735F75 		.ascii	"ts_update\000"
 5145      70646174 
 5145      6500
 5146              	.LASF95:
 5147 0645 75547572 		.ascii	"uTurnStartedFlag\000"
 5147      6E537461 
 5147      72746564 
 5147      466C6167 
 5147      00
 5148              	.LASF13:
 5149 0656 696E7433 		.ascii	"int32_t\000"
 5149      325F7400 
 5150              	.LASF1:
 5151 065e 756E7369 		.ascii	"unsigned char\000"
 5151      676E6564 
 5151      20636861 
 5151      7200
 5152              	.LASF15:
 5153 066c 75696E74 		.ascii	"uint16\000"
 5153      313600
 5154              	.LASF42:
 5155 0673 496E7374 		.ascii	"InstructionDirection\000"
 5155      72756374 
 5155      696F6E44 
 5155      69726563 
 5155      74696F6E 
 5156              	.LASF34:
 5157 0688 67325F78 		.ascii	"g2_xpos\000"
 5157      706F7300 
 5158              	.LASF136:
 5159 0690 70726576 		.ascii	"previousInstruction\000"
 5159      696F7573 
 5159      496E7374 
 5159      72756374 
 5159      696F6E00 
 5160              	.LASF134:
 5161 06a4 70726576 		.ascii	"previousOrientation\000"
 5161      696F7573 
 5161      4F726965 
 5161      6E746174 
 5161      696F6E00 
 5162              	.LASF155:
 5163 06b8 69676E6F 		.ascii	"ignoreSensor\000"
 5163      72655365 
 5163      6E736F72 
 5163      00
 5164              	.LASF97:
 5165 06c5 6C656674 		.ascii	"leftStatusFlag\000"
 5165      53746174 
 5165      7573466C 
 5165      616700
 5166              	.LASF81:
 5167 06d4 63757272 		.ascii	"currentInstructionDirection\000"
 5167      656E7449 
 5167      6E737472 
 5167      75637469 
 5167      6F6E4469 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 112


 5168              	.LASF24:
 5169 06f0 726F626F 		.ascii	"robot_ypos\000"
 5169      745F7970 
 5169      6F7300
 5170              	.LASF60:
 5171 06fb 41646A75 		.ascii	"AdjustToTheLeft\000"
 5171      7374546F 
 5171      5468654C 
 5171      65667400 
 5172              	.LASF43:
 5173 070b 476F466F 		.ascii	"GoForward\000"
 5173      72776172 
 5173      6400
 5174              	.LASF40:
 5175 0715 52696768 		.ascii	"Right\000"
 5175      7400
 5176              	.LASF156:
 5177 071b 6C617374 		.ascii	"lastDirectionAfter180\000"
 5177      44697265 
 5177      6374696F 
 5177      6E416674 
 5177      65723138 
 5178              	.LASF137:
 5179 0731 6E756D53 		.ascii	"numSteps\000"
 5179      74657073 
 5179      00
 5180              	.LASF76:
 5181 073a 5370696E 		.ascii	"SpinCourseCorrection\000"
 5181      436F7572 
 5181      7365436F 
 5181      72726563 
 5181      74696F6E 
 5182              	.LASF119:
 5183 074f 666C6167 		.ascii	"flag_ts_display\000"
 5183      5F74735F 
 5183      64697370 
 5183      6C617900 
 5184              	.LASF74:
 5185 075f 6E657744 		.ascii	"newDistance\000"
 5185      69737461 
 5185      6E636500 
 5186              	.LASF9:
 5187 076b 6C6F6E67 		.ascii	"long double\000"
 5187      20646F75 
 5187      626C6500 
 5188              	.LASF11:
 5189 0777 63686172 		.ascii	"char\000"
 5189      00
 5190              	.LASF27:
 5191 077c 67305F79 		.ascii	"g0_ypos\000"
 5191      706F7300 
 5192              	.LASF67:
 5193 0784 5370696E 		.ascii	"Spin180\000"
 5193      31383000 
 5194              	.LASF8:
 5195 078c 756E7369 		.ascii	"unsigned int\000"
 5195      676E6564 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 113


 5195      20696E74 
 5195      00
 5196              	.LASF21:
 5197 0799 72737369 		.ascii	"rssi\000"
 5197      00
 5198              	.LASF22:
 5199 079e 696E6465 		.ascii	"index\000"
 5199      7800
 5200              	.LASF71:
 5201 07a4 53365F44 		.ascii	"S6_DETECTED\000"
 5201      45544543 
 5201      54454400 
 5202              	.LASF130:
 5203 07b0 666F6F64 		.ascii	"food_list\000"
 5203      5F6C6973 
 5203      7400
 5204              	.LASF38:
 5205 07ba 446F776E 		.ascii	"Down\000"
 5205      00
 5206              	.LASF141:
 5207 07bf 62756666 		.ascii	"buffer\000"
 5207      657200
 5208              	.LASF117:
 5209 07c6 666C6167 		.ascii	"flag_ts_update\000"
 5209      5F74735F 
 5209      75706461 
 5209      746500
 5210              	.LASF125:
 5211 07d5 64697370 		.ascii	"displaystring\000"
 5211      6C617973 
 5211      7472696E 
 5211      6700
 5212              	.LASF23:
 5213 07e3 726F626F 		.ascii	"robot_xpos\000"
 5213      745F7870 
 5213      6F7300
 5214              	.LASF133:
 5215 07ee 63757272 		.ascii	"currentRobotOrientation\000"
 5215      656E7452 
 5215      6F626F74 
 5215      4F726965 
 5215      6E746174 
 5216              	.LASF131:
 5217 0806 63757272 		.ascii	"currentDirection\000"
 5217      656E7444 
 5217      69726563 
 5217      74696F6E 
 5217      00
 5218              	.LASF79:
 5219 0817 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 5219      6F76656D 
 5219      656E7441 
 5219      63636F72 
 5219      64696E67 
 5220              	.LASF93:
 5221 0839 7475726E 		.ascii	"turnFinishedFlag\000"
 5221      46696E69 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 114


 5221      73686564 
 5221      466C6167 
 5221      00
 5222              	.LASF138:
 5223 084a 696E7374 		.ascii	"instructionList\000"
 5223      72756374 
 5223      696F6E4C 
 5223      69737400 
 5224              	.LASF45:
 5225 085a 77616974 		.ascii	"waitForRightTurn\000"
 5225      466F7252 
 5225      69676874 
 5225      5475726E 
 5225      00
 5226              	.LASF147:
 5227 086b 6A756E63 		.ascii	"junctionConfiguration\000"
 5227      74696F6E 
 5227      436F6E66 
 5227      69677572 
 5227      6174696F 
 5228              	.LASF135:
 5229 0881 63757272 		.ascii	"currentInstruction\000"
 5229      656E7449 
 5229      6E737472 
 5229      75637469 
 5229      6F6E00
 5230              	.LASF102:
 5231 0894 746F7461 		.ascii	"totalLineCount\000"
 5231      6C4C696E 
 5231      65436F75 
 5231      6E7400
 5232              	.LASF87:
 5233 08a3 636F756E 		.ascii	"count1\000"
 5233      743100
 5234              	.LASF72:
 5235 08aa 54494D45 		.ascii	"TIMER_FINISH\000"
 5235      525F4649 
 5235      4E495348 
 5235      00
 5236              	.LASF83:
 5237 08b7 52657365 		.ascii	"ResetSensorFlags\000"
 5237      7453656E 
 5237      736F7246 
 5237      6C616773 
 5237      00
 5238              	.LASF18:
 5239 08c8 696E7431 		.ascii	"int16\000"
 5239      3600
 5240              	.LASF161:
 5241 08ce 71756164 		.ascii	"quadCountToRPM\000"
 5241      436F756E 
 5241      74546F52 
 5241      504D00
 5242              	.LASF52:
 5243 08dd 69676E6F 		.ascii	"ignoreL\000"
 5243      72654C00 
 5244              	.LASF59:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccovKjik.s 			page 115


 5245 08e5 5475726E 		.ascii	"TurnLeft\000"
 5245      4C656674 
 5245      00
 5246              	.LASF53:
 5247 08ee 69676E6F 		.ascii	"ignoreR\000"
 5247      72655200 
 5248              	.LASF92:
 5249 08f6 7475726E 		.ascii	"turnStartedFlag\000"
 5249      53746172 
 5249      74656446 
 5249      6C616700 
 5250              	.LASF28:
 5251 0906 67305F73 		.ascii	"g0_speed\000"
 5251      70656564 
 5251      00
 5252              	.LASF110:
 5253 090f 666F7277 		.ascii	"forwardAfterTurnRIgnore\000"
 5253      61726441 
 5253      66746572 
 5253      5475726E 
 5253      5249676E 
 5254              	.LASF25:
 5255 0927 726F626F 		.ascii	"robot_orientation\000"
 5255      745F6F72 
 5255      69656E74 
 5255      6174696F 
 5255      6E00
 5256              	.LASF154:
 5257 0939 73746F70 		.ascii	"stoppedAfterTurn\000"
 5257      70656441 
 5257      66746572 
 5257      5475726E 
 5257      00
 5258              	.LASF146:
 5259 094a 666F7277 		.ascii	"forwardBuffer\000"
 5259      61726442 
 5259      75666665 
 5259      7200
 5260              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
