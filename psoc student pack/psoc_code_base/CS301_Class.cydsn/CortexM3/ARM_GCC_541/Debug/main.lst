ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentRobotOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 01       		.byte	1
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	turnFinishedFlag
 176              		.type	turnFinishedFlag, %object
 177              		.size	turnFinishedFlag, 1
 178              	turnFinishedFlag:
 179 0034 00       		.space	1
 180              		.global	forwardUntilTargetStartedFlag
 181              		.type	forwardUntilTargetStartedFlag, %object
 182              		.size	forwardUntilTargetStartedFlag, 1
 183              	forwardUntilTargetStartedFlag:
 184 0035 00       		.space	1
 185              		.global	blockSizeTotal
 186 0036 0000     		.align	2
 187              		.type	blockSizeTotal, %object
 188              		.size	blockSizeTotal, 4
 189              	blockSizeTotal:
 190 0038 00000000 		.space	4
 191              		.global	__aeabi_i2d
 192              		.global	__aeabi_dmul
 193              		.global	__aeabi_ddiv
 194              		.global	__aeabi_d2f
 195              		.global	__aeabi_fadd
 196              		.section	.text.speedTimer,"ax",%progbits
 197              		.align	2
 198              		.global	speedTimer
 199              		.thumb
 200              		.thumb_func
 201              		.type	speedTimer, %function
 202              	speedTimer:
 203              	.LFB64:
 204              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 5


  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentRobotOrientation, previousOrientation = Down;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
  34:main.c        **** void MoveToNextInstruction();
  35:main.c        **** // ----------------------------------------
  36:main.c        **** uint8 s3, s4, s5, s6 = 0;
  37:main.c        **** //* ========================================
  38:main.c        **** // Calculating Distance
  39:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  40:main.c        **** 
  41:main.c        **** uint32 totalMilliseconds = 0;
  42:main.c        **** float totalDistance = 0; // in mm
  43:main.c        **** //* ========================================
  44:main.c        **** char buffer[69];
  45:main.c        **** int quadDec2Count = 0;
  46:main.c        **** int timerInt = 0;
  47:main.c        **** int keepLedOn = 0;
  48:main.c        **** // ========================================= FLAGS
  49:main.c        **** uint32 stopBuffer = 0;
  50:main.c        **** uint8 turnFinishedFlag = 0;
  51:main.c        **** uint8 forwardUntilTargetStartedFlag = 0;
  52:main.c        **** float blockSizeTotal = 0;
  53:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  54:main.c        **** 
  55:main.c        **** CY_ISR (speedTimer) {
 205              		.loc 1 55 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 8
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 90B5     		push	{r4, r7, lr}
 210              		.cfi_def_cfa_offset 12
 211              		.cfi_offset 4, -12
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  56:main.c        ****     timerInt = 1;
 218              		.loc 1 56 0
 219 0006 344B     		ldr	r3, .L4+16
 220 0008 0122     		movs	r2, #1
 221 000a 1A60     		str	r2, [r3]
  57:main.c        ****     //quadDec_M1 used for turning macros
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 6


  58:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 222              		.loc 1 58 0
 223 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 224 0010 0346     		mov	r3, r0
 225 0012 1A46     		mov	r2, r3
 226 0014 314B     		ldr	r3, .L4+20
 227 0016 1A60     		str	r2, [r3]
  59:main.c        ****     
  60:main.c        ****     if ((currentDirection == Forward || 
 228              		.loc 1 60 0
 229 0018 314B     		ldr	r3, .L4+24
 230 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 231 001c 002B     		cmp	r3, #0
 232 001e 13D0     		beq	.L2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 233              		.loc 1 61 0 discriminator 1
 234 0020 2F4B     		ldr	r3, .L4+24
 235 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  60:main.c        ****         currentDirection == ForwardAfterTurn ||
 236              		.loc 1 60 0 discriminator 1
 237 0024 082B     		cmp	r3, #8
 238 0026 0FD0     		beq	.L2
  62:main.c        ****         currentDirection == waitForTurn || 
 239              		.loc 1 62 0
 240 0028 2D4B     		ldr	r3, .L4+24
 241 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 242              		.loc 1 61 0
 243 002c 072B     		cmp	r3, #7
 244 002e 0BD0     		beq	.L2
  63:main.c        ****         currentDirection == AdjustToTheLeft ||
 245              		.loc 1 63 0
 246 0030 2B4B     		ldr	r3, .L4+24
 247 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62:main.c        ****         currentDirection == waitForTurn || 
 248              		.loc 1 62 0
 249 0034 032B     		cmp	r3, #3
 250 0036 07D0     		beq	.L2
  64:main.c        ****         currentDirection == AdjustToTheRight ||
 251              		.loc 1 64 0
 252 0038 294B     		ldr	r3, .L4+24
 253 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  63:main.c        ****         currentDirection == AdjustToTheLeft ||
 254              		.loc 1 63 0
 255 003c 042B     		cmp	r3, #4
 256 003e 03D0     		beq	.L2
  65:main.c        ****         currentDirection == Backward) &&
 257              		.loc 1 65 0
 258 0040 274B     		ldr	r3, .L4+24
 259 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  64:main.c        ****         currentDirection == AdjustToTheRight ||
 260              		.loc 1 64 0
 261 0044 092B     		cmp	r3, #9
 262 0046 34D1     		bne	.L3
 263              	.L2:
  66:main.c        ****         quadDec2Count != 0) {
 264              		.loc 1 66 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 7


 265 0048 244B     		ldr	r3, .L4+20
 266 004a 1B68     		ldr	r3, [r3]
  65:main.c        ****         currentDirection == Backward) &&
 267              		.loc 1 65 0
 268 004c 002B     		cmp	r3, #0
 269 004e 30D0     		beq	.L3
 270              	.LBB2:
  67:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  68:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 271              		.loc 1 68 0
 272 0050 224B     		ldr	r3, .L4+20
 273 0052 1B68     		ldr	r3, [r3]
 274 0054 002B     		cmp	r3, #0
 275 0056 B8BF     		it	lt
 276 0058 5B42     		rsblt	r3, r3, #0
 277 005a 1846     		mov	r0, r3
 278 005c FFF7FEFF 		bl	__aeabi_i2d
 279 0060 19A3     		adr	r3, .L4
 280 0062 D3E90023 		ldrd	r2, [r3]
 281 0066 FFF7FEFF 		bl	__aeabi_dmul
 282 006a 0346     		mov	r3, r0
 283 006c 0C46     		mov	r4, r1
 284 006e 1846     		mov	r0, r3
 285 0070 2146     		mov	r1, r4
 286 0072 17A3     		adr	r3, .L4+8
 287 0074 D3E90023 		ldrd	r2, [r3]
 288 0078 FFF7FEFF 		bl	__aeabi_dmul
 289 007c 0346     		mov	r3, r0
 290 007e 0C46     		mov	r4, r1
 291 0080 1846     		mov	r0, r3
 292 0082 2146     		mov	r1, r4
 293 0084 4FF00002 		mov	r2, #0
 294 0088 164B     		ldr	r3, .L4+28
 295 008a FFF7FEFF 		bl	__aeabi_ddiv
 296 008e 0346     		mov	r3, r0
 297 0090 0C46     		mov	r4, r1
 298 0092 1846     		mov	r0, r3
 299 0094 2146     		mov	r1, r4
 300 0096 FFF7FEFF 		bl	__aeabi_d2f
 301 009a 0346     		mov	r3, r0
 302 009c 7B60     		str	r3, [r7, #4]	@ float
  69:main.c        ****         
  70:main.c        ****         totalDistance = totalDistance + newDistance;
 303              		.loc 1 70 0
 304 009e 124B     		ldr	r3, .L4+32
 305 00a0 1B68     		ldr	r3, [r3]	@ float
 306 00a2 7968     		ldr	r1, [r7, #4]	@ float
 307 00a4 1846     		mov	r0, r3
 308 00a6 FFF7FEFF 		bl	__aeabi_fadd
 309 00aa 0346     		mov	r3, r0
 310 00ac 1A46     		mov	r2, r3
 311 00ae 0E4B     		ldr	r3, .L4+32
 312 00b0 1A60     		str	r2, [r3]	@ float
 313              	.L3:
 314              	.LBE2:
  71:main.c        ****     }
  72:main.c        ****     
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 8


  73:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 315              		.loc 1 73 0
 316 00b2 0020     		movs	r0, #0
 317 00b4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
  74:main.c        ****     QuadDec_M2_Start(); // restart counter
 318              		.loc 1 74 0
 319 00b8 FFF7FEFF 		bl	QuadDec_M2_Start
  75:main.c        ****     
  76:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 320              		.loc 1 76 0
 321 00bc FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  77:main.c        **** }
 322              		.loc 1 77 0
 323 00c0 00BF     		nop
 324 00c2 0C37     		adds	r7, r7, #12
 325              		.cfi_def_cfa_offset 12
 326 00c4 BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 00c6 90BD     		pop	{r4, r7, pc}
 330              	.L5:
 331              		.align	3
 332              	.L4:
 333 00c8 182D4454 		.word	1413754136
 334 00cc FB210940 		.word	1074340347
 335 00d0 00000000 		.word	0
 336 00d4 00205040 		.word	1078992896
 337 00d8 00000000 		.word	timerInt
 338 00dc 00000000 		.word	quadDec2Count
 339 00e0 00000000 		.word	currentDirection
 340 00e4 00806C40 		.word	1080852480
 341 00e8 00000000 		.word	totalDistance
 342              		.cfi_endproc
 343              	.LFE64:
 344              		.size	speedTimer, .-speedTimer
 345              		.section	.text.S3_DETECTED,"ax",%progbits
 346              		.align	2
 347              		.global	S3_DETECTED
 348              		.thumb
 349              		.thumb_func
 350              		.type	S3_DETECTED, %function
 351              	S3_DETECTED:
 352              	.LFB65:
  78:main.c        **** 
  79:main.c        **** CY_ISR(S3_DETECTED) {
 353              		.loc 1 79 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0000 80B4     		push	{r7}
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 0002 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
  80:main.c        ****     // Sensor has detected WHITE
  81:main.c        ****     s3 = 1; // , Black = 0, White = 1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 9


 363              		.loc 1 81 0
 364 0004 034B     		ldr	r3, .L7
 365 0006 0122     		movs	r2, #1
 366 0008 1A70     		strb	r2, [r3]
  82:main.c        ****     //LED_Write(1u);
  83:main.c        **** }
 367              		.loc 1 83 0
 368 000a 00BF     		nop
 369 000c BD46     		mov	sp, r7
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 000e 80BC     		pop	{r7}
 373              		.cfi_restore 7
 374              		.cfi_def_cfa_offset 0
 375 0010 7047     		bx	lr
 376              	.L8:
 377 0012 00BF     		.align	2
 378              	.L7:
 379 0014 00000000 		.word	s3
 380              		.cfi_endproc
 381              	.LFE65:
 382              		.size	S3_DETECTED, .-S3_DETECTED
 383              		.section	.text.S4_DETECTED,"ax",%progbits
 384              		.align	2
 385              		.global	S4_DETECTED
 386              		.thumb
 387              		.thumb_func
 388              		.type	S4_DETECTED, %function
 389              	S4_DETECTED:
 390              	.LFB66:
  84:main.c        **** 
  85:main.c        **** CY_ISR(S4_DETECTED) {
 391              		.loc 1 85 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
  86:main.c        ****     // Sensor has detected WHITE
  87:main.c        ****     s4 = 1; // , Black = 0, White = 1
 401              		.loc 1 87 0
 402 0004 034B     		ldr	r3, .L10
 403 0006 0122     		movs	r2, #1
 404 0008 1A70     		strb	r2, [r3]
  88:main.c        ****     //LED_Write(1u);
  89:main.c        **** }
 405              		.loc 1 89 0
 406 000a 00BF     		nop
 407 000c BD46     		mov	sp, r7
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 000e 80BC     		pop	{r7}
 411              		.cfi_restore 7
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 10


 412              		.cfi_def_cfa_offset 0
 413 0010 7047     		bx	lr
 414              	.L11:
 415 0012 00BF     		.align	2
 416              	.L10:
 417 0014 00000000 		.word	s4
 418              		.cfi_endproc
 419              	.LFE66:
 420              		.size	S4_DETECTED, .-S4_DETECTED
 421              		.section	.text.S5_DETECTED,"ax",%progbits
 422              		.align	2
 423              		.global	S5_DETECTED
 424              		.thumb
 425              		.thumb_func
 426              		.type	S5_DETECTED, %function
 427              	S5_DETECTED:
 428              	.LFB67:
  90:main.c        **** 
  91:main.c        **** CY_ISR(S5_DETECTED) {
 429              		.loc 1 91 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
  92:main.c        ****     // Sensor has detected WHITE
  93:main.c        ****     s5 = 1; // , Black = 0, White = 1
 439              		.loc 1 93 0
 440 0004 034B     		ldr	r3, .L13
 441 0006 0122     		movs	r2, #1
 442 0008 1A70     		strb	r2, [r3]
  94:main.c        ****     //LED_Write(1u);
  95:main.c        **** }
 443              		.loc 1 95 0
 444 000a 00BF     		nop
 445 000c BD46     		mov	sp, r7
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 000e 80BC     		pop	{r7}
 449              		.cfi_restore 7
 450              		.cfi_def_cfa_offset 0
 451 0010 7047     		bx	lr
 452              	.L14:
 453 0012 00BF     		.align	2
 454              	.L13:
 455 0014 00000000 		.word	s5
 456              		.cfi_endproc
 457              	.LFE67:
 458              		.size	S5_DETECTED, .-S5_DETECTED
 459              		.section	.text.S6_DETECTED,"ax",%progbits
 460              		.align	2
 461              		.global	S6_DETECTED
 462              		.thumb
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 11


 463              		.thumb_func
 464              		.type	S6_DETECTED, %function
 465              	S6_DETECTED:
 466              	.LFB68:
  96:main.c        **** 
  97:main.c        **** CY_ISR(S6_DETECTED) {
 467              		.loc 1 97 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 7, -4
 475 0002 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
  98:main.c        ****     // Sensor has detected WHITE
  99:main.c        ****     s6 = 1; // , Black = 0, White = 1
 477              		.loc 1 99 0
 478 0004 034B     		ldr	r3, .L16
 479 0006 0122     		movs	r2, #1
 480 0008 1A70     		strb	r2, [r3]
 100:main.c        ****     //LED_Write(1u);
 101:main.c        **** }
 481              		.loc 1 101 0
 482 000a 00BF     		nop
 483 000c BD46     		mov	sp, r7
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 000e 80BC     		pop	{r7}
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 0010 7047     		bx	lr
 490              	.L17:
 491 0012 00BF     		.align	2
 492              	.L16:
 493 0014 00000000 		.word	s6
 494              		.cfi_endproc
 495              	.LFE68:
 496              		.size	S6_DETECTED, .-S6_DETECTED
 497              		.section	.text.TIMER_FINISH,"ax",%progbits
 498              		.align	2
 499              		.global	TIMER_FINISH
 500              		.thumb
 501              		.thumb_func
 502              		.type	TIMER_FINISH, %function
 503              	TIMER_FINISH:
 504              	.LFB69:
 102:main.c        **** 
 103:main.c        **** CY_ISR(TIMER_FINISH) {
 505              		.loc 1 103 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
 511              		.cfi_offset 7, -8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 12


 512              		.cfi_offset 14, -4
 513 0002 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 104:main.c        ****     if (currentDirection == Stop) {
 515              		.loc 1 104 0
 516 0004 0A4B     		ldr	r3, .L21
 517 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 0008 052B     		cmp	r3, #5
 519 000a 05D1     		bne	.L19
 105:main.c        ****         stopBuffer = stopBuffer + 1;
 520              		.loc 1 105 0
 521 000c 094B     		ldr	r3, .L21+4
 522 000e 1B68     		ldr	r3, [r3]
 523 0010 0133     		adds	r3, r3, #1
 524 0012 084A     		ldr	r2, .L21+4
 525 0014 1360     		str	r3, [r2]
 526 0016 02E0     		b	.L20
 527              	.L19:
 106:main.c        ****     } else {
 107:main.c        ****         stopBuffer = 0;
 528              		.loc 1 107 0
 529 0018 064B     		ldr	r3, .L21+4
 530 001a 0022     		movs	r2, #0
 531 001c 1A60     		str	r2, [r3]
 532              	.L20:
 108:main.c        ****     }
 109:main.c        ****     SetRobotMovement(); 
 533              		.loc 1 109 0
 534 001e FFF7FEFF 		bl	SetRobotMovement
 110:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 535              		.loc 1 110 0
 536 0022 FFF7FEFF 		bl	ResetSensorFlags
 111:main.c        ****     Timer_LED_ReadStatusRegister();
 537              		.loc 1 111 0
 538 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 112:main.c        **** }
 539              		.loc 1 112 0
 540 002a 00BF     		nop
 541 002c 80BD     		pop	{r7, pc}
 542              	.L22:
 543 002e 00BF     		.align	2
 544              	.L21:
 545 0030 00000000 		.word	currentDirection
 546 0034 00000000 		.word	stopBuffer
 547              		.cfi_endproc
 548              	.LFE69:
 549              		.size	TIMER_FINISH, .-TIMER_FINISH
 550              		.section	.text.main,"ax",%progbits
 551              		.align	2
 552              		.global	main
 553              		.thumb
 554              		.thumb_func
 555              		.type	main, %function
 556              	main:
 557              	.LFB70:
 113:main.c        **** 
 114:main.c        **** 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 13


 115:main.c        **** int main()
 116:main.c        **** {
 558              		.loc 1 116 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 0000 80B5     		push	{r7, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 117:main.c        **** // ----- INITIALIZATIONS ----------
 118:main.c        ****     CYGlobalIntEnable;
 568              		.loc 1 118 0
 569              		.syntax unified
 570              	@ 118 "main.c" 1
 571 0004 62B6     		CPSIE   i
 572              	@ 0 "" 2
 119:main.c        ****     ResetSensorFlags();
 573              		.loc 1 119 0
 574              		.thumb
 575              		.syntax unified
 576 0006 FFF7FEFF 		bl	ResetSensorFlags
 120:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 577              		.loc 1 120 0
 578 000a FFF7FEFF 		bl	init
 121:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 579              		.loc 1 121 0
 580 000e 1F48     		ldr	r0, .L27
 581 0010 FFF7FEFF 		bl	isr_speed_StartEx
 122:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 582              		.loc 1 122 0
 583 0014 1E48     		ldr	r0, .L27+4
 584 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 123:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 585              		.loc 1 123 0
 586 001a 1E48     		ldr	r0, .L27+8
 587 001c FFF7FEFF 		bl	S3_detected_StartEx
 124:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 588              		.loc 1 124 0
 589 0020 1D48     		ldr	r0, .L27+12
 590 0022 FFF7FEFF 		bl	S4_detected_StartEx
 125:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 591              		.loc 1 125 0
 592 0026 1D48     		ldr	r0, .L27+16
 593 0028 FFF7FEFF 		bl	S5_detected_StartEx
 126:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 594              		.loc 1 126 0
 595 002c 1C48     		ldr	r0, .L27+20
 596 002e FFF7FEFF 		bl	S6_detected_StartEx
 127:main.c        ****     Timer_LED_Start();
 597              		.loc 1 127 0
 598 0032 FFF7FEFF 		bl	Timer_LED_Start
 128:main.c        ****     instructionList = findPath(map, food_list, 0);
 599              		.loc 1 128 0
 600 0036 0022     		movs	r2, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 14


 601 0038 1A49     		ldr	r1, .L27+24
 602 003a 1B48     		ldr	r0, .L27+28
 603 003c FFF7FEFF 		bl	findPath
 604 0040 0246     		mov	r2, r0
 605 0042 1A4B     		ldr	r3, .L27+32
 606 0044 1A60     		str	r2, [r3]
 129:main.c        ****     numSteps = instructionsListLength();
 607              		.loc 1 129 0
 608 0046 FFF7FEFF 		bl	instructionsListLength
 609 004a 0346     		mov	r3, r0
 610 004c 1A46     		mov	r2, r3
 611 004e 184B     		ldr	r3, .L27+36
 612 0050 1A60     		str	r2, [r3]
 130:main.c        **** // ------USB SETUP ----------------    
 131:main.c        **** #ifdef USE_USB    
 132:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 613              		.loc 1 132 0
 614 0052 0121     		movs	r1, #1
 615 0054 0020     		movs	r0, #0
 616 0056 FFF7FEFF 		bl	USBUART_Start
 133:main.c        **** #endif        
 134:main.c        ****     RF_BT_SELECT_Write(0);
 617              		.loc 1 134 0
 618 005a 0020     		movs	r0, #0
 619 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 620              	.L26:
 135:main.c        ****     
 136:main.c        ****     //usbPutString("Initialised UART");
 137:main.c        ****     for(;;)
 138:main.c        ****     {
 139:main.c        ****         if(timerInt == 1) {
 621              		.loc 1 139 0
 622 0060 144B     		ldr	r3, .L27+40
 623 0062 1B68     		ldr	r3, [r3]
 624 0064 012B     		cmp	r3, #1
 625 0066 08D1     		bne	.L24
 140:main.c        ****             timerInt = 0;
 626              		.loc 1 140 0
 627 0068 124B     		ldr	r3, .L27+40
 628 006a 0022     		movs	r2, #0
 629 006c 1A60     		str	r2, [r3]
 141:main.c        ****             // calculate RPM of M2
 142:main.c        ****             quadCountToRPM(quadDec2Count);
 630              		.loc 1 142 0
 631 006e 124B     		ldr	r3, .L27+44
 632 0070 1B68     		ldr	r3, [r3]
 633 0072 9BB2     		uxth	r3, r3
 634 0074 1846     		mov	r0, r3
 635 0076 FFF7FEFF 		bl	quadCountToRPM
 636              	.L24:
 143:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 144:main.c        ****             //usbPutString(buffer);
 145:main.c        ****             //usbPutString(" ");
 146:main.c        ****         }
 147:main.c        ****         //handle_usb();
 148:main.c        ****         if (flag_KB_string == 1)
 637              		.loc 1 148 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 15


 638 007a 104B     		ldr	r3, .L27+48
 639 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 007e 012B     		cmp	r3, #1
 641 0080 EED1     		bne	.L26
 149:main.c        ****         {
 150:main.c        ****             //usbPutString("Total Distance: ");
 151:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 152:main.c        ****             //usbPutString(buffer);
 153:main.c        ****             flag_KB_string = 0;
 642              		.loc 1 153 0
 643 0082 0E4B     		ldr	r3, .L27+48
 644 0084 0022     		movs	r2, #0
 645 0086 1A70     		strb	r2, [r3]
 154:main.c        ****         }           
 155:main.c        ****     }
 646              		.loc 1 155 0
 647 0088 EAE7     		b	.L26
 648              	.L28:
 649 008a 00BF     		.align	2
 650              	.L27:
 651 008c 00000000 		.word	speedTimer
 652 0090 00000000 		.word	TIMER_FINISH
 653 0094 00000000 		.word	S3_DETECTED
 654 0098 00000000 		.word	S4_DETECTED
 655 009c 00000000 		.word	S5_DETECTED
 656 00a0 00000000 		.word	S6_DETECTED
 657 00a4 00000000 		.word	food_list
 658 00a8 00000000 		.word	map
 659 00ac 00000000 		.word	instructionList
 660 00b0 00000000 		.word	numSteps
 661 00b4 00000000 		.word	timerInt
 662 00b8 00000000 		.word	quadDec2Count
 663 00bc 00000000 		.word	flag_KB_string
 664              		.cfi_endproc
 665              	.LFE70:
 666              		.size	main, .-main
 667              		.global	__aeabi_fmul
 668              		.global	__aeabi_f2iz
 669              		.section	.text.quadCountToRPM,"ax",%progbits
 670              		.align	2
 671              		.global	quadCountToRPM
 672              		.thumb
 673              		.thumb_func
 674              		.type	quadCountToRPM, %function
 675              	quadCountToRPM:
 676              	.LFB71:
 156:main.c        ****     return 0;
 157:main.c        **** }
 158:main.c        **** 
 159:main.c        **** // Calculations
 160:main.c        **** //* ========================================
 161:main.c        **** int16 quadCountToRPM(uint16 count)
 162:main.c        **** {
 677              		.loc 1 162 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 16
 680              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 16


 681 0000 90B5     		push	{r4, r7, lr}
 682              		.cfi_def_cfa_offset 12
 683              		.cfi_offset 4, -12
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 85B0     		sub	sp, sp, #20
 687              		.cfi_def_cfa_offset 32
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 690 0006 0346     		mov	r3, r0
 691 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 163:main.c        ****     float cps = count/57.00;
 692              		.loc 1 163 0
 693 000a FB88     		ldrh	r3, [r7, #6]
 694 000c 1846     		mov	r0, r3
 695 000e FFF7FEFF 		bl	__aeabi_i2d
 696 0012 4FF00002 		mov	r2, #0
 697 0016 0D4B     		ldr	r3, .L31
 698 0018 FFF7FEFF 		bl	__aeabi_ddiv
 699 001c 0346     		mov	r3, r0
 700 001e 0C46     		mov	r4, r1
 701 0020 1846     		mov	r0, r3
 702 0022 2146     		mov	r1, r4
 703 0024 FFF7FEFF 		bl	__aeabi_d2f
 704 0028 0346     		mov	r3, r0
 705 002a FB60     		str	r3, [r7, #12]	@ float
 164:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 706              		.loc 1 164 0
 707 002c 0849     		ldr	r1, .L31+4
 708 002e F868     		ldr	r0, [r7, #12]	@ float
 709 0030 FFF7FEFF 		bl	__aeabi_fmul
 710 0034 0346     		mov	r3, r0
 711 0036 1846     		mov	r0, r3
 712 0038 FFF7FEFF 		bl	__aeabi_f2iz
 713 003c 0346     		mov	r3, r0
 714 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 165:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 166:main.c        ****     return rpm;
 715              		.loc 1 166 0
 716 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 167:main.c        ****     //usbPutString(buffer);
 168:main.c        ****     //usbPutString("rpm ");
 169:main.c        **** }
 717              		.loc 1 169 0
 718 0044 1846     		mov	r0, r3
 719 0046 1437     		adds	r7, r7, #20
 720              		.cfi_def_cfa_offset 12
 721 0048 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 004a 90BD     		pop	{r4, r7, pc}
 725              	.L32:
 726              		.align	2
 727              	.L31:
 728 004c 00804C40 		.word	1078755328
 729 0050 00007041 		.word	1097859072
 730              		.cfi_endproc
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 17


 731              	.LFE71:
 732              		.size	quadCountToRPM, .-quadCountToRPM
 733              		.section	.text.ResetSensorFlags,"ax",%progbits
 734              		.align	2
 735              		.global	ResetSensorFlags
 736              		.thumb
 737              		.thumb_func
 738              		.type	ResetSensorFlags, %function
 739              	ResetSensorFlags:
 740              	.LFB72:
 170:main.c        **** 
 171:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 172:main.c        **** void ResetSensorFlags() {
 741              		.loc 1 172 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 0000 80B4     		push	{r7}
 747              		.cfi_def_cfa_offset 4
 748              		.cfi_offset 7, -4
 749 0002 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 173:main.c        ****     s3 = 0;
 751              		.loc 1 173 0
 752 0004 074B     		ldr	r3, .L34
 753 0006 0022     		movs	r2, #0
 754 0008 1A70     		strb	r2, [r3]
 174:main.c        ****     s4 = 0;
 755              		.loc 1 174 0
 756 000a 074B     		ldr	r3, .L34+4
 757 000c 0022     		movs	r2, #0
 758 000e 1A70     		strb	r2, [r3]
 175:main.c        ****     s5 = 0;
 759              		.loc 1 175 0
 760 0010 064B     		ldr	r3, .L34+8
 761 0012 0022     		movs	r2, #0
 762 0014 1A70     		strb	r2, [r3]
 176:main.c        ****     s6 = 0;
 763              		.loc 1 176 0
 764 0016 064B     		ldr	r3, .L34+12
 765 0018 0022     		movs	r2, #0
 766 001a 1A70     		strb	r2, [r3]
 177:main.c        **** }
 767              		.loc 1 177 0
 768 001c 00BF     		nop
 769 001e BD46     		mov	sp, r7
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 0020 80BC     		pop	{r7}
 773              		.cfi_restore 7
 774              		.cfi_def_cfa_offset 0
 775 0022 7047     		bx	lr
 776              	.L35:
 777              		.align	2
 778              	.L34:
 779 0024 00000000 		.word	s3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 18


 780 0028 00000000 		.word	s4
 781 002c 00000000 		.word	s5
 782 0030 00000000 		.word	s6
 783              		.cfi_endproc
 784              	.LFE72:
 785              		.size	ResetSensorFlags, .-ResetSensorFlags
 786              		.global	xBlocksize
 787              		.data
 788 0045 000000   		.align	2
 789              		.type	xBlocksize, %object
 790              		.size	xBlocksize, 4
 791              	xBlocksize:
 792 0048 0000F442 		.word	1123287040
 793              		.global	yBlocksize
 794              		.align	2
 795              		.type	yBlocksize, %object
 796              		.size	yBlocksize, 4
 797              	yBlocksize:
 798 004c 0000A042 		.word	1117782016
 799              		.global	currentRow
 800              		.type	currentRow, %object
 801              		.size	currentRow, 1
 802              	currentRow:
 803 0050 01       		.byte	1
 804              		.global	currentCol
 805              		.type	currentCol, %object
 806              		.size	currentCol, 1
 807              	currentCol:
 808 0051 01       		.byte	1
 809              		.global	stoppedAfterTurn
 810              		.bss
 811              		.type	stoppedAfterTurn, %object
 812              		.size	stoppedAfterTurn, 1
 813              	stoppedAfterTurn:
 814 003c 00       		.space	1
 815              		.global	ignoreSensor
 816              		.type	ignoreSensor, %object
 817              		.size	ignoreSensor, 1
 818              	ignoreSensor:
 819 003d 00       		.space	1
 820              		.section	.text.ForwardCourseCorrection,"ax",%progbits
 821              		.align	2
 822              		.global	ForwardCourseCorrection
 823              		.thumb
 824              		.thumb_func
 825              		.type	ForwardCourseCorrection, %function
 826              	ForwardCourseCorrection:
 827              	.LFB73:
 178:main.c        **** 
 179:main.c        **** float xBlocksize = 122; // 122 mm
 180:main.c        **** float yBlocksize = 80; // 80 mm
 181:main.c        **** uint8 currentRow = 1;
 182:main.c        **** uint8 currentCol = 1;
 183:main.c        **** 
 184:main.c        **** /*enum DirectionState GetNextStep() {
 185:main.c        ****     enum DirectionState directionState;
 186:main.c        ****     // Determines robot movement and orientation to follow optimal path
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 19


 187:main.c        ****     // enum DirectionState directionState = Stop;
 188:main.c        ****     previousOrientation = currentOrientation;
 189:main.c        ****     
 190:main.c        ****     if(map[currentRow][currentCol] == 9) {
 191:main.c        ****         directionState = Stop; // reached target
 192:main.c        ****         return directionState;
 193:main.c        ****     }
 194:main.c        ****         
 195:main.c        ****     switch (previousOrientation) {
 196:main.c        ****             case Up:
 197:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 198:main.c        ****                     currentOrientation = Up; 
 199:main.c        ****                     directionState = Forward;
 200:main.c        ****                     currentRow--;// update position
 201:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 202:main.c        ****                     currentOrientation = Left;
 203:main.c        ****                     directionState = waitForLeftTurn;
 204:main.c        ****                     //currentRow--;
 205:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 206:main.c        ****                     currentOrientation = Right;
 207:main.c        ****                     directionState = waitForRightTurn;
 208:main.c        ****                     //currentRow++; // update position
 209:main.c        ****                 }
 210:main.c        ****                 break;
 211:main.c        ****             case Down:
 212:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 213:main.c        ****                     currentOrientation = Down;
 214:main.c        ****                     directionState = Forward;
 215:main.c        ****                     currentRow++;
 216:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 217:main.c        ****                     currentOrientation = Left;
 218:main.c        ****                     directionState = waitForRightTurn;
 219:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 220:main.c        ****                     currentOrientation = Right;
 221:main.c        ****                     directionState = waitForLeftTurn;
 222:main.c        ****                 }
 223:main.c        ****                 break;
 224:main.c        ****             case Left:
 225:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 226:main.c        ****                     currentOrientation = Left;
 227:main.c        ****                     directionState = Forward;
 228:main.c        ****                     currentCol--; // update position
 229:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 230:main.c        ****                     currentOrientation = Up;
 231:main.c        ****                     directionState = waitForRightTurn;
 232:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 233:main.c        ****                     currentOrientation = Down;
 234:main.c        ****                     directionState = waitForLeftTurn;
 235:main.c        ****                 }
 236:main.c        ****                 break;
 237:main.c        ****             case Right:
 238:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 239:main.c        ****                     currentOrientation = Right;
 240:main.c        ****                     directionState = Forward;
 241:main.c        ****                     currentCol++; // update position
 242:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 243:main.c        ****                     currentOrientation = Up;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 20


 244:main.c        ****                     directionState = waitForLeftTurn;
 245:main.c        ****                     //currentCol++; // update position
 246:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 247:main.c        ****                     currentOrientation = Down;
 248:main.c        ****                     directionState = waitForRightTurn;
 249:main.c        ****                     //currentCol--; // update position
 250:main.c        ****                 }
 251:main.c        ****                 break;
 252:main.c        ****             default:
 253:main.c        ****                 break;
 254:main.c        ****         }
 255:main.c        ****     
 256:main.c        ****     return directionState;
 257:main.c        **** }
 258:main.c        **** */
 259:main.c        **** uint8 stoppedAfterTurn = 0;
 260:main.c        **** uint8 ignoreSensor = 0;
 261:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 262:main.c        **** /*
 263:main.c        **** enum RobotMovement CheckSensorDirection() {
 264:main.c        ****     float blocksize;
 265:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 266:main.c        ****         blocksize = yBlocksize;
 267:main.c        ****     } else {
 268:main.c        ****         blocksize = xBlocksize;
 269:main.c        ****     }
 270:main.c        ****     //if(currentInstruction)
 271:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 272:main.c        ****     
 273:main.c        ****     if (stoppedAfterTurn == 1) {
 274:main.c        ****         if (stopBuffer <= 50) {
 275:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 276:main.c        ****             previousDirection = directionState;
 277:main.c        ****             return directionState;
 278:main.c        ****         }
 279:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 280:main.c        ****         totalDistance = 0; // reset distance
 281:main.c        ****         previousDirection = directionState;
 282:main.c        ****         stoppedAfterTurn = 0;
 283:main.c        ****         return directionState;
 284:main.c        ****     }
 285:main.c        ****     if (totalDistance >= blocksize) {
 286:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 287:main.c        ****         totalDistance = 0; // reset distance
 288:main.c        ****         previousDirection = directionState;
 289:main.c        ****         return directionState;
 290:main.c        ****     }
 291:main.c        ****     
 292:main.c        ****     // STOP BUFFER * ========================================
 293:main.c        ****     if (previousDirection == Stop) {
 294:main.c        ****         if (stopBuffer <= 50) {
 295:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 296:main.c        ****             previousDirection = directionState;
 297:main.c        ****         } else {
 298:main.c        ****             //directionState = ForwardAfterTurn;
 299:main.c        ****         }
 300:main.c        ****         return directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 21


 301:main.c        ****     }
 302:main.c        **** 
 303:main.c        ****     // TURNING * ========================================    
 304:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 305:main.c        ****         if (s3 || s4) {
 306:main.c        ****             //ignoreSensor = 0;
 307:main.c        ****             //usbPutString("Forward\n");
 308:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 309:main.c        ****             previousDirection = directionState;
 310:main.c        ****             return directionState;
 311:main.c        ****         }
 312:main.c        ****     }
 313:main.c        **** 
 314:main.c        ****     if(previousDirection == waitForRightTurn) {
 315:main.c        ****         //ignoreSensor = 0;
 316:main.c        ****         if(!s4) {
 317:main.c        ****             //usbPutString("Turn Right\n");
 318:main.c        ****             directionState = TurnRight;
 319:main.c        ****             previousDirection = directionState;
 320:main.c        ****             return directionState;
 321:main.c        ****         } else {
 322:main.c        ****             //usbPutString("Wait for Right Turn\n");
 323:main.c        ****             directionState = waitForRightTurn;
 324:main.c        ****             previousDirection = directionState;
 325:main.c        ****             return directionState;
 326:main.c        ****         }
 327:main.c        ****     }
 328:main.c        **** 
 329:main.c        ****     if(previousDirection == waitForLeftTurn) {
 330:main.c        ****         //ignoreSensor = 0;
 331:main.c        ****         if(!s3) {
 332:main.c        ****             //usbPutString("Turn Left\n");
 333:main.c        ****             directionState = TurnLeft;
 334:main.c        ****             previousDirection = directionState;
 335:main.c        ****             return directionState;
 336:main.c        ****         } else {
 337:main.c        ****             //usbPutString("Wait for Left Turn\n");
 338:main.c        ****             directionState = waitForLeftTurn;
 339:main.c        ****             previousDirection = directionState;
 340:main.c        ****             return directionState;
 341:main.c        ****         }
 342:main.c        ****     }
 343:main.c        **** 
 344:main.c        ****     if(previousDirection == TurnRight) {
 345:main.c        ****         if(s5 && s6) {
 346:main.c        ****             //usbPutString("Turn Right\n");
 347:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 348:main.c        ****             previousDirection = directionState;
 349:main.c        ****             return directionState;
 350:main.c        ****         } 
 351:main.c        ****         else if (!s5 || !s6) {
 352:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 353:main.c        ****             //usbPutString("Stop after Right Turn");
 354:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 355:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 356:main.c        ****             previousDirection = directionState;
 357:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 22


 358:main.c        ****             return directionState;
 359:main.c        ****         }
 360:main.c        ****     }    
 361:main.c        **** 
 362:main.c        ****     if(previousDirection == TurnLeft) {
 363:main.c        ****         if(s5 && s6) {
 364:main.c        ****             //usbPutString("Turn Left\n");
 365:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 366:main.c        ****             previousDirection = directionState;
 367:main.c        ****             return directionState;
 368:main.c        ****         } 
 369:main.c        ****         else if (!s5 || !s6) {
 370:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 371:main.c        ****            // usbPutString("Stop after Left Turn\n");
 372:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 373:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 374:main.c        ****             previousDirection = directionState;
 375:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 376:main.c        ****             return directionState;
 377:main.c        ****         }
 378:main.c        ****     }
 379:main.c        ****     
 380:main.c        ****     // COURSE CORRECTION * ========================================
 381:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 382:main.c        ****         //ignoreSensor = 0;
 383:main.c        ****         if(s6) {
 384:main.c        ****             //usbPutString("Adjust to the left\n");
 385:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 386:main.c        ****             previousDirection = directionState;
 387:main.c        ****             return directionState;
 388:main.c        ****         }
 389:main.c        ****         if(s5) {
 390:main.c        ****             //usbPutString("Adjust to the right\n");
 391:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 392:main.c        ****             previousDirection = directionState;
 393:main.c        ****             return directionState;
 394:main.c        ****         }
 395:main.c        ****     }
 396:main.c        ****     
 397:main.c        ****     // FORWARD * ========================================
 398:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 399:main.c        ****         //usbPutString("Forward\n");
 400:main.c        ****         directionState = Forward;
 401:main.c        ****         previousDirection = directionState;
 402:main.c        ****         return directionState;   
 403:main.c        ****     }
 404:main.c        **** 
 405:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 406:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 407:main.c        ****     if (previousDirection == Unknown) {
 408:main.c        ****         directionState = Forward;
 409:main.c        ****         previousDirection = directionState;
 410:main.c        ****         return directionState;
 411:main.c        ****     }
 412:main.c        **** 
 413:main.c        ****     // Possible reason
 414:main.c        ****     previousDirection = currentDirection;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 23


 415:main.c        ****     return previousDirection;
 416:main.c        **** }
 417:main.c        **** */
 418:main.c        **** 
 419:main.c        **** enum RobotMovement ForwardCourseCorrection();
 420:main.c        **** enum RobotMovement ForwardCourseCorrection() {
 828              		.loc 1 420 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833 0000 80B4     		push	{r7}
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 7, -4
 836 0002 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 421:main.c        ****     // if S5 and S6 are on black, move forward
 422:main.c        ****     if (!s5 && !s6) {
 838              		.loc 1 422 0
 839 0004 174B     		ldr	r3, .L43
 840 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0008 002B     		cmp	r3, #0
 842 000a 05D1     		bne	.L37
 843              		.loc 1 422 0 is_stmt 0 discriminator 1
 844 000c 164B     		ldr	r3, .L43+4
 845 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 846 0010 002B     		cmp	r3, #0
 847 0012 01D1     		bne	.L37
 423:main.c        ****         return Forward;
 848              		.loc 1 423 0 is_stmt 1
 849 0014 0023     		movs	r3, #0
 850 0016 20E0     		b	.L38
 851              	.L37:
 424:main.c        ****     }
 425:main.c        ****     
 426:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 427:main.c        ****     if (s5 && s6) {
 852              		.loc 1 427 0
 853 0018 124B     		ldr	r3, .L43
 854 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 855 001c 002B     		cmp	r3, #0
 856 001e 0FD0     		beq	.L39
 857              		.loc 1 427 0 is_stmt 0 discriminator 1
 858 0020 114B     		ldr	r3, .L43+4
 859 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 860 0024 002B     		cmp	r3, #0
 861 0026 0BD0     		beq	.L39
 428:main.c        ****         if (previousDirection == AdjustToTheLeft) {
 862              		.loc 1 428 0 is_stmt 1
 863 0028 104B     		ldr	r3, .L43+8
 864 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 865 002c 032B     		cmp	r3, #3
 866 002e 01D1     		bne	.L40
 429:main.c        ****             return AdjustToTheRight;
 867              		.loc 1 429 0
 868 0030 0423     		movs	r3, #4
 869 0032 12E0     		b	.L38
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 24


 870              	.L40:
 430:main.c        ****         }
 431:main.c        ****         if (previousDirection == AdjustToTheRight) {
 871              		.loc 1 431 0
 872 0034 0D4B     		ldr	r3, .L43+8
 873 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 874 0038 042B     		cmp	r3, #4
 875 003a 01D1     		bne	.L39
 432:main.c        ****             return AdjustToTheLeft;    
 876              		.loc 1 432 0
 877 003c 0323     		movs	r3, #3
 878 003e 0CE0     		b	.L38
 879              	.L39:
 433:main.c        ****         }
 434:main.c        ****     }
 435:main.c        **** 
 436:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 437:main.c        ****     if (s5) {
 880              		.loc 1 437 0
 881 0040 084B     		ldr	r3, .L43
 882 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 883 0044 002B     		cmp	r3, #0
 884 0046 01D0     		beq	.L41
 438:main.c        ****         return AdjustToTheRight;    
 885              		.loc 1 438 0
 886 0048 0423     		movs	r3, #4
 887 004a 06E0     		b	.L38
 888              	.L41:
 439:main.c        ****     }
 440:main.c        ****     if (s6) {
 889              		.loc 1 440 0
 890 004c 064B     		ldr	r3, .L43+4
 891 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 892 0050 002B     		cmp	r3, #0
 893 0052 01D0     		beq	.L42
 441:main.c        ****         return AdjustToTheLeft;    
 894              		.loc 1 441 0
 895 0054 0323     		movs	r3, #3
 896 0056 00E0     		b	.L38
 897              	.L42:
 442:main.c        ****     }
 443:main.c        ****    
 444:main.c        ****     // We should never actually get to this point
 445:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 446:main.c        ****     return Stop;
 898              		.loc 1 446 0
 899 0058 0523     		movs	r3, #5
 900              	.L38:
 447:main.c        **** }
 901              		.loc 1 447 0
 902 005a 1846     		mov	r0, r3
 903 005c BD46     		mov	sp, r7
 904              		.cfi_def_cfa_register 13
 905              		@ sp needed
 906 005e 80BC     		pop	{r7}
 907              		.cfi_restore 7
 908              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 25


 909 0060 7047     		bx	lr
 910              	.L44:
 911 0062 00BF     		.align	2
 912              	.L43:
 913 0064 00000000 		.word	s5
 914 0068 00000000 		.word	s6
 915 006c 00000000 		.word	previousDirection
 916              		.cfi_endproc
 917              	.LFE73:
 918              		.size	ForwardCourseCorrection, .-ForwardCourseCorrection
 919              		.global	__aeabi_fcmpge
 920              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 921              		.align	2
 922              		.global	GetMovementAccordingToInstruction
 923              		.thumb
 924              		.thumb_func
 925              		.type	GetMovementAccordingToInstruction, %function
 926              	GetMovementAccordingToInstruction:
 927              	.LFB74:
 448:main.c        **** 
 449:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 928              		.loc 1 449 0
 929              		.cfi_startproc
 930              		@ args = 0, pretend = 0, frame = 8
 931              		@ frame_needed = 1, uses_anonymous_args = 0
 932 0000 80B5     		push	{r7, lr}
 933              		.cfi_def_cfa_offset 8
 934              		.cfi_offset 7, -8
 935              		.cfi_offset 14, -4
 936 0002 82B0     		sub	sp, sp, #8
 937              		.cfi_def_cfa_offset 16
 938 0004 00AF     		add	r7, sp, #0
 939              		.cfi_def_cfa_register 7
 450:main.c        ****     float blocksize;
 451:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 940              		.loc 1 451 0
 941 0006 804B     		ldr	r3, .L79
 942 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 943 000a 002B     		cmp	r3, #0
 944 000c 03D0     		beq	.L46
 945              		.loc 1 451 0 is_stmt 0 discriminator 1
 946 000e 7E4B     		ldr	r3, .L79
 947 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 948 0012 012B     		cmp	r3, #1
 949 0014 03D1     		bne	.L47
 950              	.L46:
 452:main.c        ****         blocksize = yBlocksize;
 951              		.loc 1 452 0 is_stmt 1
 952 0016 7D4B     		ldr	r3, .L79+4
 953 0018 1B68     		ldr	r3, [r3]	@ float
 954 001a 7B60     		str	r3, [r7, #4]	@ float
 955 001c 02E0     		b	.L48
 956              	.L47:
 453:main.c        ****     } else {
 454:main.c        ****         blocksize = xBlocksize;
 957              		.loc 1 454 0
 958 001e 7C4B     		ldr	r3, .L79+8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 26


 959 0020 1B68     		ldr	r3, [r3]	@ float
 960 0022 7B60     		str	r3, [r7, #4]	@ float
 961              	.L48:
 455:main.c        ****     }
 456:main.c        ****     
 457:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 458:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 459:main.c        ****         // OR an EVENT happens in the current instruction
 460:main.c        ****         // e.g. CurrentInstruction: GoForward 
 461:main.c        ****         //      S3 on BLACK
 462:main.c        ****         //      Check Ignore Count
 463:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 464:main.c        ****     
 465:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 962              		.loc 1 465 0
 963 0024 7B4B     		ldr	r3, .L79+12
 964 0026 1B78     		ldrb	r3, [r3]
 965 0028 FB70     		strb	r3, [r7, #3]
 466:main.c        ****     
 467:main.c        ****     switch (currentInstructionDirection) {
 966              		.loc 1 467 0
 967 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 968 002c 052B     		cmp	r3, #5
 969 002e 00F2E680 		bhi	.L49
 970 0032 01A2     		adr	r2, .L51
 971 0034 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 972              		.p2align 2
 973              	.L51:
 974 0038 51000000 		.word	.L50+1
 975 003c 89000000 		.word	.L52+1
 976 0040 0B010000 		.word	.L53+1
 977 0044 FF010000 		.word	.L49+1
 978 0048 8D010000 		.word	.L54+1
 979 004c D9010000 		.word	.L55+1
 980              		.p2align 1
 981              	.L50:
 468:main.c        ****         case GoForward:
 469:main.c        ****             // if s3 or s4 go off, check ignoreCount
 470:main.c        ****             //      if ignoreCount == 0, go to next direction
 471:main.c        ****             //      return stop
 472:main.c        ****             if (!s3) {
 982              		.loc 1 472 0
 983 0050 714B     		ldr	r3, .L79+16
 984 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 985 0054 002B     		cmp	r3, #0
 986 0056 07D1     		bne	.L56
 473:main.c        ****                 if (currentInstruction.ignoreL == 0) {
 987              		.loc 1 473 0
 988 0058 6E4B     		ldr	r3, .L79+12
 989 005a 5B68     		ldr	r3, [r3, #4]
 990 005c 002B     		cmp	r3, #0
 991 005e 03D1     		bne	.L56
 474:main.c        ****                     MoveToNextInstruction();
 992              		.loc 1 474 0
 993 0060 FFF7FEFF 		bl	MoveToNextInstruction
 475:main.c        ****                     return Stop;
 994              		.loc 1 475 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 27


 995 0064 0523     		movs	r3, #5
 996 0066 CBE0     		b	.L57
 997              	.L56:
 476:main.c        ****                 }
 477:main.c        ****             }
 478:main.c        ****             
 479:main.c        ****             if (!s4) {
 998              		.loc 1 479 0
 999 0068 6C4B     		ldr	r3, .L79+20
 1000 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1001 006c 002B     		cmp	r3, #0
 1002 006e 07D1     		bne	.L58
 480:main.c        ****                 if (currentInstruction.ignoreR == 0) {
 1003              		.loc 1 480 0
 1004 0070 684B     		ldr	r3, .L79+12
 1005 0072 9B68     		ldr	r3, [r3, #8]
 1006 0074 002B     		cmp	r3, #0
 1007 0076 03D1     		bne	.L58
 481:main.c        ****                     MoveToNextInstruction();
 1008              		.loc 1 481 0
 1009 0078 FFF7FEFF 		bl	MoveToNextInstruction
 482:main.c        ****                     return Stop;
 1010              		.loc 1 482 0
 1011 007c 0523     		movs	r3, #5
 1012 007e BFE0     		b	.L57
 1013              	.L58:
 483:main.c        ****                 }
 484:main.c        ****             }
 485:main.c        ****             return ForwardCourseCorrection();
 1014              		.loc 1 485 0
 1015 0080 FFF7FEFF 		bl	ForwardCourseCorrection
 1016 0084 0346     		mov	r3, r0
 1017 0086 BBE0     		b	.L57
 1018              	.L52:
 486:main.c        ****             break;
 487:main.c        ****         case waitForLeftTurn:
 488:main.c        ****             // continue moving forward until s3 goes on black
 489:main.c        ****             // if we are turning left already
 490:main.c        ****                 // wait until s5 || s6 are on black
 491:main.c        ****                 // return stop
 492:main.c        ****             if (turnFinishedFlag) {
 1019              		.loc 1 492 0
 1020 0088 654B     		ldr	r3, .L79+24
 1021 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1022 008c 002B     		cmp	r3, #0
 1023 008e 11D0     		beq	.L59
 493:main.c        ****                 if (turnFinishedFlag) {
 1024              		.loc 1 493 0
 1025 0090 634B     		ldr	r3, .L79+24
 1026 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1027 0094 002B     		cmp	r3, #0
 1028 0096 0DD0     		beq	.L59
 494:main.c        ****                     if (s3) {
 1029              		.loc 1 494 0
 1030 0098 5F4B     		ldr	r3, .L79+16
 1031 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1032 009c 002B     		cmp	r3, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 28


 1033 009e 05D0     		beq	.L60
 495:main.c        ****                         turnFinishedFlag = 0;
 1034              		.loc 1 495 0
 1035 00a0 5F4B     		ldr	r3, .L79+24
 1036 00a2 0022     		movs	r2, #0
 1037 00a4 1A70     		strb	r2, [r3]
 496:main.c        ****                         MoveToNextInstruction();    
 1038              		.loc 1 496 0
 1039 00a6 FFF7FEFF 		bl	MoveToNextInstruction
 1040 00aa 03E0     		b	.L59
 1041              	.L60:
 497:main.c        ****                     }
 498:main.c        ****                     else {
 499:main.c        ****                         return ForwardCourseCorrection();        
 1042              		.loc 1 499 0
 1043 00ac FFF7FEFF 		bl	ForwardCourseCorrection
 1044 00b0 0346     		mov	r3, r0
 1045 00b2 A5E0     		b	.L57
 1046              	.L59:
 500:main.c        ****                     }
 501:main.c        ****                 }
 502:main.c        ****             }
 503:main.c        ****             
 504:main.c        ****             if (currentDirection == Stop) {
 1047              		.loc 1 504 0
 1048 00b4 5B4B     		ldr	r3, .L79+28
 1049 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1050 00b8 052B     		cmp	r3, #5
 1051 00ba 09D1     		bne	.L61
 505:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 506:main.c        ****                 if (stopBuffer <= 50) {
 1052              		.loc 1 506 0
 1053 00bc 5A4B     		ldr	r3, .L79+32
 1054 00be 1B68     		ldr	r3, [r3]
 1055 00c0 322B     		cmp	r3, #50
 1056 00c2 01D8     		bhi	.L62
 507:main.c        ****                     return Stop;   
 1057              		.loc 1 507 0
 1058 00c4 0523     		movs	r3, #5
 1059 00c6 9BE0     		b	.L57
 1060              	.L62:
 508:main.c        ****                 }
 509:main.c        ****                 return ForwardCourseCorrection();
 1061              		.loc 1 509 0
 1062 00c8 FFF7FEFF 		bl	ForwardCourseCorrection
 1063 00cc 0346     		mov	r3, r0
 1064 00ce 97E0     		b	.L57
 1065              	.L61:
 510:main.c        ****             }
 511:main.c        ****          
 512:main.c        ****             // if we are already turning left, then check if s5 && s6 are on black
 513:main.c        ****             if (currentDirection == TurnLeft) {
 1066              		.loc 1 513 0
 1067 00d0 544B     		ldr	r3, .L79+28
 1068 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069 00d4 022B     		cmp	r3, #2
 1070 00d6 0ED1     		bne	.L63
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 29


 514:main.c        ****                 if (!s5 && !s6) {
 1071              		.loc 1 514 0
 1072 00d8 544B     		ldr	r3, .L79+36
 1073 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1074 00dc 002B     		cmp	r3, #0
 1075 00de 08D1     		bne	.L64
 1076              		.loc 1 514 0 is_stmt 0 discriminator 1
 1077 00e0 534B     		ldr	r3, .L79+40
 1078 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 00e4 002B     		cmp	r3, #0
 1080 00e6 04D1     		bne	.L64
 515:main.c        ****                     turnFinishedFlag = 1;
 1081              		.loc 1 515 0 is_stmt 1
 1082 00e8 4D4B     		ldr	r3, .L79+24
 1083 00ea 0122     		movs	r2, #1
 1084 00ec 1A70     		strb	r2, [r3]
 516:main.c        ****                     return Stop;
 1085              		.loc 1 516 0
 1086 00ee 0523     		movs	r3, #5
 1087 00f0 86E0     		b	.L57
 1088              	.L64:
 517:main.c        ****                 }
 518:main.c        ****                 else
 519:main.c        ****                 {
 520:main.c        ****                     return TurnLeft;
 1089              		.loc 1 520 0
 1090 00f2 0223     		movs	r3, #2
 1091 00f4 84E0     		b	.L57
 1092              	.L63:
 521:main.c        ****                 }
 522:main.c        ****             }
 523:main.c        ****             
 524:main.c        ****             // If we are not already turning left then once s3 goes on BLACK, turn left
 525:main.c        ****             if (!s3) {
 1093              		.loc 1 525 0
 1094 00f6 484B     		ldr	r3, .L79+16
 1095 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1096 00fa 002B     		cmp	r3, #0
 1097 00fc 01D1     		bne	.L65
 526:main.c        ****                 return TurnLeft;
 1098              		.loc 1 526 0
 1099 00fe 0223     		movs	r3, #2
 1100 0100 7EE0     		b	.L57
 1101              	.L65:
 527:main.c        ****             }
 528:main.c        ****             
 529:main.c        ****             // Otherwise, keep going forward
 530:main.c        ****             return ForwardCourseCorrection(); 
 1102              		.loc 1 530 0
 1103 0102 FFF7FEFF 		bl	ForwardCourseCorrection
 1104 0106 0346     		mov	r3, r0
 1105 0108 7AE0     		b	.L57
 1106              	.L53:
 531:main.c        ****             break;
 532:main.c        ****         case waitForRightTurn:
 533:main.c        ****             // continue moving forward until s4 goes on black
 534:main.c        ****             // if we are turning left already
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 30


 535:main.c        ****                 // wait until s5 || s6 are on black
 536:main.c        ****                 // return stop
 537:main.c        ****             if (turnFinishedFlag) {
 1107              		.loc 1 537 0
 1108 010a 454B     		ldr	r3, .L79+24
 1109 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1110 010e 002B     		cmp	r3, #0
 1111 0110 11D0     		beq	.L66
 538:main.c        ****                 if (turnFinishedFlag) {
 1112              		.loc 1 538 0
 1113 0112 434B     		ldr	r3, .L79+24
 1114 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1115 0116 002B     		cmp	r3, #0
 1116 0118 0DD0     		beq	.L66
 539:main.c        ****                     if (s3) {
 1117              		.loc 1 539 0
 1118 011a 3F4B     		ldr	r3, .L79+16
 1119 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1120 011e 002B     		cmp	r3, #0
 1121 0120 05D0     		beq	.L67
 540:main.c        ****                         turnFinishedFlag = 0;
 1122              		.loc 1 540 0
 1123 0122 3F4B     		ldr	r3, .L79+24
 1124 0124 0022     		movs	r2, #0
 1125 0126 1A70     		strb	r2, [r3]
 541:main.c        ****                         MoveToNextInstruction();    
 1126              		.loc 1 541 0
 1127 0128 FFF7FEFF 		bl	MoveToNextInstruction
 1128 012c 03E0     		b	.L66
 1129              	.L67:
 542:main.c        ****                     }
 543:main.c        ****                     else {
 544:main.c        ****                         return ForwardCourseCorrection();        
 1130              		.loc 1 544 0
 1131 012e FFF7FEFF 		bl	ForwardCourseCorrection
 1132 0132 0346     		mov	r3, r0
 1133 0134 64E0     		b	.L57
 1134              	.L66:
 545:main.c        ****                     }
 546:main.c        ****                 }
 547:main.c        ****             }
 548:main.c        ****             
 549:main.c        ****             if (currentDirection == Stop) {
 1135              		.loc 1 549 0
 1136 0136 3B4B     		ldr	r3, .L79+28
 1137 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1138 013a 052B     		cmp	r3, #5
 1139 013c 09D1     		bne	.L68
 550:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 551:main.c        ****                 if (stopBuffer <= 50) {
 1140              		.loc 1 551 0
 1141 013e 3A4B     		ldr	r3, .L79+32
 1142 0140 1B68     		ldr	r3, [r3]
 1143 0142 322B     		cmp	r3, #50
 1144 0144 01D8     		bhi	.L69
 552:main.c        ****                     return Stop;   
 1145              		.loc 1 552 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 31


 1146 0146 0523     		movs	r3, #5
 1147 0148 5AE0     		b	.L57
 1148              	.L69:
 553:main.c        ****                 }
 554:main.c        **** 
 555:main.c        ****                 return ForwardCourseCorrection();
 1149              		.loc 1 555 0
 1150 014a FFF7FEFF 		bl	ForwardCourseCorrection
 1151 014e 0346     		mov	r3, r0
 1152 0150 56E0     		b	.L57
 1153              	.L68:
 556:main.c        ****             }
 557:main.c        ****                       
 558:main.c        ****             // if we are already turning right, then check if s5 && s6 are on black
 559:main.c        ****             if (currentDirection == TurnRight) {
 1154              		.loc 1 559 0
 1155 0152 344B     		ldr	r3, .L79+28
 1156 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1157 0156 012B     		cmp	r3, #1
 1158 0158 0ED1     		bne	.L70
 560:main.c        ****                 if (!s5 && !s6) {
 1159              		.loc 1 560 0
 1160 015a 344B     		ldr	r3, .L79+36
 1161 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1162 015e 002B     		cmp	r3, #0
 1163 0160 08D1     		bne	.L71
 1164              		.loc 1 560 0 is_stmt 0 discriminator 1
 1165 0162 334B     		ldr	r3, .L79+40
 1166 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 0166 002B     		cmp	r3, #0
 1168 0168 04D1     		bne	.L71
 561:main.c        ****                     turnFinishedFlag = 1;
 1169              		.loc 1 561 0 is_stmt 1
 1170 016a 2D4B     		ldr	r3, .L79+24
 1171 016c 0122     		movs	r2, #1
 1172 016e 1A70     		strb	r2, [r3]
 562:main.c        ****                     return Stop;
 1173              		.loc 1 562 0
 1174 0170 0523     		movs	r3, #5
 1175 0172 45E0     		b	.L57
 1176              	.L71:
 563:main.c        ****                 }
 564:main.c        ****                 else
 565:main.c        ****                 {
 566:main.c        ****                     return TurnRight;
 1177              		.loc 1 566 0
 1178 0174 0123     		movs	r3, #1
 1179 0176 43E0     		b	.L57
 1180              	.L70:
 567:main.c        ****                 }
 568:main.c        ****             }
 569:main.c        ****             
 570:main.c        ****             // If we are not already turning right then once s4 goes on BLACK, turn left
 571:main.c        ****             if (!s4) {
 1181              		.loc 1 571 0
 1182 0178 284B     		ldr	r3, .L79+20
 1183 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 32


 1184 017c 002B     		cmp	r3, #0
 1185 017e 01D1     		bne	.L72
 572:main.c        ****                 return TurnRight;
 1186              		.loc 1 572 0
 1187 0180 0123     		movs	r3, #1
 1188 0182 3DE0     		b	.L57
 1189              	.L72:
 573:main.c        ****             }
 574:main.c        ****             
 575:main.c        ****             // Otherwise, keep going forward
 576:main.c        ****             return ForwardCourseCorrection(); 
 1190              		.loc 1 576 0
 1191 0184 FFF7FEFF 		bl	ForwardCourseCorrection
 1192 0188 0346     		mov	r3, r0
 1193 018a 39E0     		b	.L57
 1194              	.L54:
 577:main.c        ****             break;
 578:main.c        ****         case ForwardUntilTarget:
 579:main.c        ****             // Reset distance on first iteration of this instruction
 580:main.c        ****             if (!forwardUntilTargetStartedFlag) {
 1195              		.loc 1 580 0
 1196 018c 294B     		ldr	r3, .L79+44
 1197 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1198 0190 002B     		cmp	r3, #0
 1199 0192 0ED1     		bne	.L73
 581:main.c        ****                 forwardUntilTargetStartedFlag = 1;
 1200              		.loc 1 581 0
 1201 0194 274B     		ldr	r3, .L79+44
 1202 0196 0122     		movs	r2, #1
 1203 0198 1A70     		strb	r2, [r3]
 582:main.c        ****                 totalDistance = 0;
 1204              		.loc 1 582 0
 1205 019a 274B     		ldr	r3, .L79+48
 1206 019c 4FF00002 		mov	r2, #0
 1207 01a0 1A60     		str	r2, [r3]	@ float
 583:main.c        ****                 // Depending on the robot orientation
 584:main.c        ****                 // Check for Row, Col that target is in
 585:main.c        ****                 // Check how many 8s lead up to nine (reset 8 count if consecutive broken otherwise
 586:main.c        ****                 // get blocksizetotal count
 587:main.c        ****                 blockSizeTotal = blocksize * 6;
 1208              		.loc 1 587 0
 1209 01a2 2649     		ldr	r1, .L79+52
 1210 01a4 7868     		ldr	r0, [r7, #4]	@ float
 1211 01a6 FFF7FEFF 		bl	__aeabi_fmul
 1212 01aa 0346     		mov	r3, r0
 1213 01ac 1A46     		mov	r2, r3
 1214 01ae 244B     		ldr	r3, .L79+56
 1215 01b0 1A60     		str	r2, [r3]	@ float
 1216              	.L73:
 588:main.c        ****             }
 589:main.c        ****             
 590:main.c        ****             // If totalDistance >= blockSizeTotal then we should be at target
 591:main.c        ****             if (totalDistance >= blockSizeTotal) {
 1217              		.loc 1 591 0
 1218 01b2 214B     		ldr	r3, .L79+48
 1219 01b4 1A68     		ldr	r2, [r3]	@ float
 1220 01b6 224B     		ldr	r3, .L79+56
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 33


 1221 01b8 1B68     		ldr	r3, [r3]	@ float
 1222 01ba 1946     		mov	r1, r3
 1223 01bc 1046     		mov	r0, r2
 1224 01be FFF7FEFF 		bl	__aeabi_fcmpge
 1225 01c2 0346     		mov	r3, r0
 1226 01c4 002B     		cmp	r3, #0
 1227 01c6 03D0     		beq	.L78
 592:main.c        ****                 // Get next instruction
 593:main.c        ****                 MoveToNextInstruction();
 1228              		.loc 1 593 0
 1229 01c8 FFF7FEFF 		bl	MoveToNextInstruction
 594:main.c        **** 
 595:main.c        ****                 
 596:main.c        ****                 return Stop;
 1230              		.loc 1 596 0
 1231 01cc 0523     		movs	r3, #5
 1232 01ce 17E0     		b	.L57
 1233              	.L78:
 597:main.c        ****             }
 598:main.c        ****             
 599:main.c        ****             return ForwardCourseCorrection();
 1234              		.loc 1 599 0
 1235 01d0 FFF7FEFF 		bl	ForwardCourseCorrection
 1236 01d4 0346     		mov	r3, r0
 1237 01d6 13E0     		b	.L57
 1238              	.L55:
 600:main.c        ****             break;
 601:main.c        ****         case StopAtTarget:
 602:main.c        ****             // Reset Forward Until Target Flags (Had to move in here to make it work)
 603:main.c        ****             // Reset flags
 604:main.c        ****             totalDistance = 0;
 1239              		.loc 1 604 0
 1240 01d8 174B     		ldr	r3, .L79+48
 1241 01da 4FF00002 		mov	r2, #0
 1242 01de 1A60     		str	r2, [r3]	@ float
 605:main.c        ****             forwardUntilTargetStartedFlag = 0;
 1243              		.loc 1 605 0
 1244 01e0 144B     		ldr	r3, .L79+44
 1245 01e2 0022     		movs	r2, #0
 1246 01e4 1A70     		strb	r2, [r3]
 606:main.c        ****             blockSizeTotal = 0;
 1247              		.loc 1 606 0
 1248 01e6 164B     		ldr	r3, .L79+56
 1249 01e8 4FF00002 		mov	r2, #0
 1250 01ec 1A60     		str	r2, [r3]	@ float
 607:main.c        ****             
 608:main.c        ****             if (stopBuffer <= 200) {
 1251              		.loc 1 608 0
 1252 01ee 0E4B     		ldr	r3, .L79+32
 1253 01f0 1B68     		ldr	r3, [r3]
 1254 01f2 C82B     		cmp	r3, #200
 1255 01f4 01D8     		bhi	.L76
 609:main.c        ****                 return Stop;    
 1256              		.loc 1 609 0
 1257 01f6 0523     		movs	r3, #5
 1258 01f8 02E0     		b	.L57
 1259              	.L76:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 34


 610:main.c        ****             }
 611:main.c        ****             return TurnRight;
 1260              		.loc 1 611 0
 1261 01fa 0123     		movs	r3, #1
 1262 01fc 00E0     		b	.L57
 1263              	.L49:
 612:main.c        ****             break;
 613:main.c        ****         default:
 614:main.c        ****             return Stop;
 1264              		.loc 1 614 0
 1265 01fe 0523     		movs	r3, #5
 1266              	.L57:
 615:main.c        ****             break;
 616:main.c        ****     }
 617:main.c        ****     return Stop;
 618:main.c        **** }
 1267              		.loc 1 618 0
 1268 0200 1846     		mov	r0, r3
 1269 0202 0837     		adds	r7, r7, #8
 1270              		.cfi_def_cfa_offset 8
 1271 0204 BD46     		mov	sp, r7
 1272              		.cfi_def_cfa_register 13
 1273              		@ sp needed
 1274 0206 80BD     		pop	{r7, pc}
 1275              	.L80:
 1276              		.align	2
 1277              	.L79:
 1278 0208 00000000 		.word	currentRobotOrientation
 1279 020c 00000000 		.word	yBlocksize
 1280 0210 00000000 		.word	xBlocksize
 1281 0214 00000000 		.word	currentInstruction
 1282 0218 00000000 		.word	s3
 1283 021c 00000000 		.word	s4
 1284 0220 00000000 		.word	turnFinishedFlag
 1285 0224 00000000 		.word	currentDirection
 1286 0228 00000000 		.word	stopBuffer
 1287 022c 00000000 		.word	s5
 1288 0230 00000000 		.word	s6
 1289 0234 00000000 		.word	forwardUntilTargetStartedFlag
 1290 0238 00000000 		.word	totalDistance
 1291 023c 0000C040 		.word	1086324736
 1292 0240 00000000 		.word	blockSizeTotal
 1293              		.cfi_endproc
 1294              	.LFE74:
 1295              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1296              		.section	.text.MoveToNextInstruction,"ax",%progbits
 1297              		.align	2
 1298              		.global	MoveToNextInstruction
 1299              		.thumb
 1300              		.thumb_func
 1301              		.type	MoveToNextInstruction, %function
 1302              	MoveToNextInstruction:
 1303              	.LFB75:
 619:main.c        ****     
 620:main.c        **** // get next instruction
 621:main.c        **** 
 622:main.c        **** void MoveToNextInstruction() {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 35


 1304              		.loc 1 622 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 1, uses_anonymous_args = 0
 1308              		@ link register save eliminated.
 1309 0000 80B4     		push	{r7}
 1310              		.cfi_def_cfa_offset 4
 1311              		.cfi_offset 7, -4
 1312 0002 00AF     		add	r7, sp, #0
 1313              		.cfi_def_cfa_register 7
 623:main.c        ****     instructionIndex++;
 1314              		.loc 1 623 0
 1315 0004 044B     		ldr	r3, .L82
 1316 0006 1B68     		ldr	r3, [r3]
 1317 0008 0133     		adds	r3, r3, #1
 1318 000a 034A     		ldr	r2, .L82
 1319 000c 1360     		str	r3, [r2]
 624:main.c        **** }
 1320              		.loc 1 624 0
 1321 000e 00BF     		nop
 1322 0010 BD46     		mov	sp, r7
 1323              		.cfi_def_cfa_register 13
 1324              		@ sp needed
 1325 0012 80BC     		pop	{r7}
 1326              		.cfi_restore 7
 1327              		.cfi_def_cfa_offset 0
 1328 0014 7047     		bx	lr
 1329              	.L83:
 1330 0016 00BF     		.align	2
 1331              	.L82:
 1332 0018 00000000 		.word	instructionIndex
 1333              		.cfi_endproc
 1334              	.LFE75:
 1335              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 1336              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 1337              		.align	2
 1338              		.global	GetInstructionAtIndex
 1339              		.thumb
 1340              		.thumb_func
 1341              		.type	GetInstructionAtIndex, %function
 1342              	GetInstructionAtIndex:
 1343              	.LFB76:
 625:main.c        **** 
 626:main.c        **** 
 627:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 1344              		.loc 1 627 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 32
 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
 1349 0000 90B4     		push	{r4, r7}
 1350              		.cfi_def_cfa_offset 8
 1351              		.cfi_offset 4, -8
 1352              		.cfi_offset 7, -4
 1353 0002 88B0     		sub	sp, sp, #32
 1354              		.cfi_def_cfa_offset 40
 1355 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 36


 1356              		.cfi_def_cfa_register 7
 1357 0006 F860     		str	r0, [r7, #12]
 1358 0008 B960     		str	r1, [r7, #8]
 1359 000a 7A60     		str	r2, [r7, #4]
 1360 000c 3B60     		str	r3, [r7]
 1361              	.LBB3:
 628:main.c        ****     Instruction nextInstruction;
 629:main.c        ****     // input is list of instructions and robot will react accordingly
 630:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 1362              		.loc 1 630 0
 1363 000e 3B68     		ldr	r3, [r7]
 1364 0010 FB61     		str	r3, [r7, #28]
 1365 0012 36E0     		b	.L85
 1366              	.L88:
 631:main.c        ****         if(instructionList[i].direction != Skip) {
 1367              		.loc 1 631 0
 1368 0014 FA69     		ldr	r2, [r7, #28]
 1369 0016 1346     		mov	r3, r2
 1370 0018 5B00     		lsls	r3, r3, #1
 1371 001a 1344     		add	r3, r3, r2
 1372 001c 9B00     		lsls	r3, r3, #2
 1373 001e 1A46     		mov	r2, r3
 1374 0020 7B68     		ldr	r3, [r7, #4]
 1375 0022 1344     		add	r3, r3, r2
 1376 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1377 0026 062B     		cmp	r3, #6
 1378 0028 26D0     		beq	.L86
 632:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 1379              		.loc 1 632 0
 1380 002a FA69     		ldr	r2, [r7, #28]
 1381 002c 1346     		mov	r3, r2
 1382 002e 5B00     		lsls	r3, r3, #1
 1383 0030 1344     		add	r3, r3, r2
 1384 0032 9B00     		lsls	r3, r3, #2
 1385 0034 1A46     		mov	r2, r3
 1386 0036 7B68     		ldr	r3, [r7, #4]
 1387 0038 1344     		add	r3, r3, r2
 1388 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1389 003c 3B74     		strb	r3, [r7, #16]
 633:main.c        ****             nextInstruction.ignoreL = instructionList[i].ignoreL;
 1390              		.loc 1 633 0
 1391 003e FA69     		ldr	r2, [r7, #28]
 1392 0040 1346     		mov	r3, r2
 1393 0042 5B00     		lsls	r3, r3, #1
 1394 0044 1344     		add	r3, r3, r2
 1395 0046 9B00     		lsls	r3, r3, #2
 1396 0048 1A46     		mov	r2, r3
 1397 004a 7B68     		ldr	r3, [r7, #4]
 1398 004c 1344     		add	r3, r3, r2
 1399 004e 5B68     		ldr	r3, [r3, #4]
 1400 0050 7B61     		str	r3, [r7, #20]
 634:main.c        ****             nextInstruction.ignoreR = instructionList[i].ignoreR;
 1401              		.loc 1 634 0
 1402 0052 FA69     		ldr	r2, [r7, #28]
 1403 0054 1346     		mov	r3, r2
 1404 0056 5B00     		lsls	r3, r3, #1
 1405 0058 1344     		add	r3, r3, r2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 37


 1406 005a 9B00     		lsls	r3, r3, #2
 1407 005c 1A46     		mov	r2, r3
 1408 005e 7B68     		ldr	r3, [r7, #4]
 1409 0060 1344     		add	r3, r3, r2
 1410 0062 9B68     		ldr	r3, [r3, #8]
 1411 0064 BB61     		str	r3, [r7, #24]
 635:main.c        ****             return nextInstruction; // return next instruction
 1412              		.loc 1 635 0
 1413 0066 FB68     		ldr	r3, [r7, #12]
 1414 0068 1C46     		mov	r4, r3
 1415 006a 07F11003 		add	r3, r7, #16
 1416 006e 93E80700 		ldmia	r3, {r0, r1, r2}
 1417 0072 84E80700 		stmia	r4, {r0, r1, r2}
 1418 0076 10E0     		b	.L84
 1419              	.L86:
 636:main.c        ****         }
 637:main.c        ****         instructionIndex = i;
 1420              		.loc 1 637 0 discriminator 2
 1421 0078 FB69     		ldr	r3, [r7, #28]
 1422 007a 3B60     		str	r3, [r7]
 630:main.c        ****         if(instructionList[i].direction != Skip) {
 1423              		.loc 1 630 0 discriminator 2
 1424 007c FB69     		ldr	r3, [r7, #28]
 1425 007e 0133     		adds	r3, r3, #1
 1426 0080 FB61     		str	r3, [r7, #28]
 1427              	.L85:
 630:main.c        ****         if(instructionList[i].direction != Skip) {
 1428              		.loc 1 630 0 is_stmt 0 discriminator 1
 1429 0082 FA69     		ldr	r2, [r7, #28]
 1430 0084 BB68     		ldr	r3, [r7, #8]
 1431 0086 9A42     		cmp	r2, r3
 1432 0088 C4DB     		blt	.L88
 1433              	.LBE3:
 638:main.c        ****     }
 639:main.c        ****     return nextInstruction;
 1434              		.loc 1 639 0 is_stmt 1
 1435 008a FB68     		ldr	r3, [r7, #12]
 1436 008c 1C46     		mov	r4, r3
 1437 008e 07F11003 		add	r3, r7, #16
 1438 0092 93E80700 		ldmia	r3, {r0, r1, r2}
 1439 0096 84E80700 		stmia	r4, {r0, r1, r2}
 1440              	.L84:
 640:main.c        **** }
 1441              		.loc 1 640 0
 1442 009a F868     		ldr	r0, [r7, #12]
 1443 009c 2037     		adds	r7, r7, #32
 1444              		.cfi_def_cfa_offset 8
 1445 009e BD46     		mov	sp, r7
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 00a0 90BC     		pop	{r4, r7}
 1449              		.cfi_restore 7
 1450              		.cfi_restore 4
 1451              		.cfi_def_cfa_offset 0
 1452 00a2 7047     		bx	lr
 1453              		.cfi_endproc
 1454              	.LFE76:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 38


 1455              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 1456              		.section	.text.SetRobotMovement,"ax",%progbits
 1457              		.align	2
 1458              		.global	SetRobotMovement
 1459              		.thumb
 1460              		.thumb_func
 1461              		.type	SetRobotMovement, %function
 1462              	SetRobotMovement:
 1463              	.LFB77:
 641:main.c        **** 
 642:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 643:main.c        **** void SetRobotMovement() {
 1464              		.loc 1 643 0
 1465              		.cfi_startproc
 1466              		@ args = 0, pretend = 0, frame = 16
 1467              		@ frame_needed = 1, uses_anonymous_args = 0
 1468 0000 90B5     		push	{r4, r7, lr}
 1469              		.cfi_def_cfa_offset 12
 1470              		.cfi_offset 4, -12
 1471              		.cfi_offset 7, -8
 1472              		.cfi_offset 14, -4
 1473 0002 85B0     		sub	sp, sp, #20
 1474              		.cfi_def_cfa_offset 32
 1475 0004 00AF     		add	r7, sp, #0
 1476              		.cfi_def_cfa_register 7
 644:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 1477              		.loc 1 644 0
 1478 0006 294B     		ldr	r3, .L105
 1479 0008 1968     		ldr	r1, [r3]
 1480 000a 294B     		ldr	r3, .L105+4
 1481 000c 1A68     		ldr	r2, [r3]
 1482 000e 294B     		ldr	r3, .L105+8
 1483 0010 1B68     		ldr	r3, [r3]
 1484 0012 294C     		ldr	r4, .L105+12
 1485 0014 3846     		mov	r0, r7
 1486 0016 FFF7FEFF 		bl	GetInstructionAtIndex
 1487 001a 3B46     		mov	r3, r7
 1488 001c 93E80700 		ldmia	r3, {r0, r1, r2}
 1489 0020 84E80700 		stmia	r4, {r0, r1, r2}
 645:main.c        ****     previousDirection = currentDirection;
 1490              		.loc 1 645 0
 1491 0024 254B     		ldr	r3, .L105+16
 1492 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1493 0028 254B     		ldr	r3, .L105+20
 1494 002a 1A70     		strb	r2, [r3]
 646:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 1495              		.loc 1 646 0
 1496 002c FFF7FEFF 		bl	GetMovementAccordingToInstruction
 1497 0030 0346     		mov	r3, r0
 1498 0032 1A46     		mov	r2, r3
 1499 0034 214B     		ldr	r3, .L105+16
 1500 0036 1A70     		strb	r2, [r3]
 647:main.c        ****     // move robot depending on sensors
 648:main.c        ****     switch (currentDirection) {
 1501              		.loc 1 648 0
 1502 0038 204B     		ldr	r3, .L105+16
 1503 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 39


 1504 003c 092B     		cmp	r3, #9
 1505 003e 30D8     		bhi	.L103
 1506 0040 01A2     		adr	r2, .L93
 1507 0042 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1508 0046 00BF     		.p2align 2
 1509              	.L93:
 1510 0048 71000000 		.word	.L92+1
 1511 004c 77000000 		.word	.L94+1
 1512 0050 7D000000 		.word	.L95+1
 1513 0054 89000000 		.word	.L96+1
 1514 0058 83000000 		.word	.L97+1
 1515 005c 8F000000 		.word	.L98+1
 1516 0060 A1000000 		.word	.L104+1
 1517 0064 A1000000 		.word	.L104+1
 1518 0068 95000000 		.word	.L101+1
 1519 006c 9B000000 		.word	.L102+1
 1520              		.p2align 1
 1521              	.L92:
 649:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 650:main.c        ****         case Forward:
 651:main.c        ****             moveForward();
 1522              		.loc 1 651 0
 1523 0070 FFF7FEFF 		bl	moveForward
 652:main.c        ****             break;
 1524              		.loc 1 652 0
 1525 0074 15E0     		b	.L91
 1526              	.L94:
 653:main.c        ****         case TurnRight:
 654:main.c        ****             turnRight();
 1527              		.loc 1 654 0
 1528 0076 FFF7FEFF 		bl	turnRight
 655:main.c        ****             break;
 1529              		.loc 1 655 0
 1530 007a 12E0     		b	.L91
 1531              	.L95:
 656:main.c        ****         case TurnLeft:
 657:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1532              		.loc 1 657 0
 1533 007c FFF7FEFF 		bl	turnLeft
 658:main.c        ****             break;
 1534              		.loc 1 658 0
 1535 0080 0FE0     		b	.L91
 1536              	.L97:
 659:main.c        ****         case AdjustToTheRight:
 660:main.c        ****             adjustRight();
 1537              		.loc 1 660 0
 1538 0082 FFF7FEFF 		bl	adjustRight
 661:main.c        ****             break;
 1539              		.loc 1 661 0
 1540 0086 0CE0     		b	.L91
 1541              	.L96:
 662:main.c        ****         case AdjustToTheLeft:
 663:main.c        ****             adjustLeft();
 1542              		.loc 1 663 0
 1543 0088 FFF7FEFF 		bl	adjustLeft
 664:main.c        ****             break;
 1544              		.loc 1 664 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 40


 1545 008c 09E0     		b	.L91
 1546              	.L98:
 665:main.c        ****         case Stop:
 666:main.c        ****             stopMoving();
 1547              		.loc 1 666 0
 1548 008e FFF7FEFF 		bl	stopMoving
 667:main.c        ****             break;
 1549              		.loc 1 667 0
 1550 0092 06E0     		b	.L91
 1551              	.L101:
 668:main.c        ****         case ForwardAfterTurn:
 669:main.c        ****             moveForward();
 1552              		.loc 1 669 0
 1553 0094 FFF7FEFF 		bl	moveForward
 670:main.c        ****             break;
 1554              		.loc 1 670 0
 1555 0098 03E0     		b	.L91
 1556              	.L102:
 671:main.c        ****         case Backward:
 672:main.c        ****             moveBackward();
 1557              		.loc 1 672 0
 1558 009a FFF7FEFF 		bl	moveBackward
 673:main.c        ****             break;
 1559              		.loc 1 673 0
 1560 009e 00E0     		b	.L91
 1561              	.L104:
 674:main.c        ****         case waitForTurn:
 675:main.c        ****             break;
 676:main.c        ****         /*case waitForLeftTurn:
 677:main.c        ****             moveForward();
 678:main.c        ****             break;
 679:main.c        ****         case waitForRightTurn:
 680:main.c        ****             moveForward();
 681:main.c        ****             break;*/
 682:main.c        ****         case Unknown:
 683:main.c        ****             // UNKNOWN CONFIGURATION
 684:main.c        ****             break;  
 1562              		.loc 1 684 0
 1563 00a0 00BF     		nop
 1564              	.L91:
 1565              	.L103:
 685:main.c        ****     }
 686:main.c        **** }...
 1566              		.loc 1 686 0
 1567 00a2 00BF     		nop
 1568 00a4 1437     		adds	r7, r7, #20
 1569              		.cfi_def_cfa_offset 12
 1570 00a6 BD46     		mov	sp, r7
 1571              		.cfi_def_cfa_register 13
 1572              		@ sp needed
 1573 00a8 90BD     		pop	{r4, r7, pc}
 1574              	.L106:
 1575 00aa 00BF     		.align	2
 1576              	.L105:
 1577 00ac 00000000 		.word	numSteps
 1578 00b0 00000000 		.word	instructionList
 1579 00b4 00000000 		.word	instructionIndex
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 41


 1580 00b8 00000000 		.word	currentInstruction
 1581 00bc 00000000 		.word	currentDirection
 1582 00c0 00000000 		.word	previousDirection
 1583              		.cfi_endproc
 1584              	.LFE77:
 1585              		.size	SetRobotMovement, .-SetRobotMovement
 1586              		.text
 1587              	.Letext0:
 1588              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1589              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 1590              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1591              		.file 5 "vars.h"
 1592              		.file 6 "pathfinding.h"
 1593              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 1594              		.file 8 "map.h"
 1595              		.section	.debug_info,"",%progbits
 1596              	.Ldebug_info0:
 1597 0000 15080000 		.4byte	0x815
 1598 0004 0400     		.2byte	0x4
 1599 0006 00000000 		.4byte	.Ldebug_abbrev0
 1600 000a 04       		.byte	0x4
 1601 000b 01       		.uleb128 0x1
 1602 000c 82000000 		.4byte	.LASF129
 1603 0010 0C       		.byte	0xc
 1604 0011 30000000 		.4byte	.LASF130
 1605 0015 3A050000 		.4byte	.LASF131
 1606 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1607 001d 00000000 		.4byte	0
 1608 0021 00000000 		.4byte	.Ldebug_line0
 1609 0025 02       		.uleb128 0x2
 1610 0026 01       		.byte	0x1
 1611 0027 06       		.byte	0x6
 1612 0028 57060000 		.4byte	.LASF0
 1613 002c 02       		.uleb128 0x2
 1614 002d 01       		.byte	0x1
 1615 002e 08       		.byte	0x8
 1616 002f C7050000 		.4byte	.LASF1
 1617 0033 02       		.uleb128 0x2
 1618 0034 02       		.byte	0x2
 1619 0035 05       		.byte	0x5
 1620 0036 8B040000 		.4byte	.LASF2
 1621 003a 02       		.uleb128 0x2
 1622 003b 02       		.byte	0x2
 1623 003c 07       		.byte	0x7
 1624 003d 6E060000 		.4byte	.LASF3
 1625 0041 03       		.uleb128 0x3
 1626 0042 55000000 		.4byte	.LASF12
 1627 0046 02       		.byte	0x2
 1628 0047 3F       		.byte	0x3f
 1629 0048 4C000000 		.4byte	0x4c
 1630 004c 02       		.uleb128 0x2
 1631 004d 04       		.byte	0x4
 1632 004e 05       		.byte	0x5
 1633 004f AD040000 		.4byte	.LASF4
 1634 0053 02       		.uleb128 0x2
 1635 0054 04       		.byte	0x4
 1636 0055 07       		.byte	0x7
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 42


 1637 0056 83050000 		.4byte	.LASF5
 1638 005a 02       		.uleb128 0x2
 1639 005b 08       		.byte	0x8
 1640 005c 05       		.byte	0x5
 1641 005d 7F030000 		.4byte	.LASF6
 1642 0061 02       		.uleb128 0x2
 1643 0062 08       		.byte	0x8
 1644 0063 07       		.byte	0x7
 1645 0064 2B020000 		.4byte	.LASF7
 1646 0068 04       		.uleb128 0x4
 1647 0069 04       		.byte	0x4
 1648 006a 05       		.byte	0x5
 1649 006b 696E7400 		.ascii	"int\000"
 1650 006f 02       		.uleb128 0x2
 1651 0070 04       		.byte	0x4
 1652 0071 07       		.byte	0x7
 1653 0072 48000000 		.4byte	.LASF8
 1654 0076 02       		.uleb128 0x2
 1655 0077 08       		.byte	0x8
 1656 0078 04       		.byte	0x4
 1657 0079 4F040000 		.4byte	.LASF9
 1658 007d 02       		.uleb128 0x2
 1659 007e 04       		.byte	0x4
 1660 007f 07       		.byte	0x7
 1661 0080 7A050000 		.4byte	.LASF10
 1662 0084 02       		.uleb128 0x2
 1663 0085 01       		.byte	0x1
 1664 0086 08       		.byte	0x8
 1665 0087 FB020000 		.4byte	.LASF11
 1666 008b 03       		.uleb128 0x3
 1667 008c A0050000 		.4byte	.LASF13
 1668 0090 03       		.byte	0x3
 1669 0091 2C       		.byte	0x2c
 1670 0092 41000000 		.4byte	0x41
 1671 0096 05       		.uleb128 0x5
 1672 0097 C4060000 		.4byte	.LASF14
 1673 009b 04       		.byte	0x4
 1674 009c E701     		.2byte	0x1e7
 1675 009e 2C000000 		.4byte	0x2c
 1676 00a2 05       		.uleb128 0x5
 1677 00a3 2A030000 		.4byte	.LASF15
 1678 00a7 04       		.byte	0x4
 1679 00a8 E801     		.2byte	0x1e8
 1680 00aa 3A000000 		.4byte	0x3a
 1681 00ae 05       		.uleb128 0x5
 1682 00af FF030000 		.4byte	.LASF16
 1683 00b3 04       		.byte	0x4
 1684 00b4 E901     		.2byte	0x1e9
 1685 00b6 53000000 		.4byte	0x53
 1686 00ba 05       		.uleb128 0x5
 1687 00bb 31030000 		.4byte	.LASF17
 1688 00bf 04       		.byte	0x4
 1689 00c0 EA01     		.2byte	0x1ea
 1690 00c2 25000000 		.4byte	0x25
 1691 00c6 05       		.uleb128 0x5
 1692 00c7 5F000000 		.4byte	.LASF18
 1693 00cb 04       		.byte	0x4
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 43


 1694 00cc EB01     		.2byte	0x1eb
 1695 00ce 33000000 		.4byte	0x33
 1696 00d2 02       		.uleb128 0x2
 1697 00d3 04       		.byte	0x4
 1698 00d4 04       		.byte	0x4
 1699 00d5 F3010000 		.4byte	.LASF19
 1700 00d9 02       		.uleb128 0x2
 1701 00da 08       		.byte	0x8
 1702 00db 04       		.byte	0x4
 1703 00dc CA060000 		.4byte	.LASF20
 1704 00e0 06       		.uleb128 0x6
 1705 00e1 21040000 		.4byte	.LASF45
 1706 00e5 20       		.byte	0x20
 1707 00e6 05       		.byte	0x5
 1708 00e7 28       		.byte	0x28
 1709 00e8 B9010000 		.4byte	0x1b9
 1710 00ec 07       		.uleb128 0x7
 1711 00ed 2B040000 		.4byte	.LASF21
 1712 00f1 05       		.byte	0x5
 1713 00f2 2A       		.byte	0x2a
 1714 00f3 BA000000 		.4byte	0xba
 1715 00f7 00       		.byte	0
 1716 00f8 07       		.uleb128 0x7
 1717 00f9 25020000 		.4byte	.LASF22
 1718 00fd 05       		.byte	0x5
 1719 00fe 2B       		.byte	0x2b
 1720 00ff 96000000 		.4byte	0x96
 1721 0103 01       		.byte	0x1
 1722 0104 07       		.uleb128 0x7
 1723 0105 A8050000 		.4byte	.LASF23
 1724 0109 05       		.byte	0x5
 1725 010a 2C       		.byte	0x2c
 1726 010b C6000000 		.4byte	0xc6
 1727 010f 02       		.byte	0x2
 1728 0110 07       		.uleb128 0x7
 1729 0111 E5020000 		.4byte	.LASF24
 1730 0115 05       		.byte	0x5
 1731 0116 2D       		.byte	0x2d
 1732 0117 C6000000 		.4byte	0xc6
 1733 011b 04       		.byte	0x4
 1734 011c 07       		.uleb128 0x7
 1735 011d 81060000 		.4byte	.LASF25
 1736 0121 05       		.byte	0x5
 1737 0122 2E       		.byte	0x2e
 1738 0123 C6000000 		.4byte	0xc6
 1739 0127 06       		.byte	0x6
 1740 0128 07       		.uleb128 0x7
 1741 0129 DC060000 		.4byte	.LASF26
 1742 012d 05       		.byte	0x5
 1743 012e 2F       		.byte	0x2f
 1744 012f C6000000 		.4byte	0xc6
 1745 0133 08       		.byte	0x8
 1746 0134 07       		.uleb128 0x7
 1747 0135 D3030000 		.4byte	.LASF27
 1748 0139 05       		.byte	0x5
 1749 013a 30       		.byte	0x30
 1750 013b C6000000 		.4byte	0xc6
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 44


 1751 013f 0A       		.byte	0xa
 1752 0140 07       		.uleb128 0x7
 1753 0141 00030000 		.4byte	.LASF28
 1754 0145 05       		.byte	0x5
 1755 0146 31       		.byte	0x31
 1756 0147 C6000000 		.4byte	0xc6
 1757 014b 0C       		.byte	0xc
 1758 014c 07       		.uleb128 0x7
 1759 014d 30040000 		.4byte	.LASF29
 1760 0151 05       		.byte	0x5
 1761 0152 32       		.byte	0x32
 1762 0153 C6000000 		.4byte	0xc6
 1763 0157 0E       		.byte	0xe
 1764 0158 07       		.uleb128 0x7
 1765 0159 8D030000 		.4byte	.LASF30
 1766 015d 05       		.byte	0x5
 1767 015e 33       		.byte	0x33
 1768 015f C6000000 		.4byte	0xc6
 1769 0163 10       		.byte	0x10
 1770 0164 07       		.uleb128 0x7
 1771 0165 21050000 		.4byte	.LASF31
 1772 0169 05       		.byte	0x5
 1773 016a 34       		.byte	0x34
 1774 016b C6000000 		.4byte	0xc6
 1775 016f 12       		.byte	0x12
 1776 0170 07       		.uleb128 0x7
 1777 0171 FC060000 		.4byte	.LASF32
 1778 0175 05       		.byte	0x5
 1779 0176 35       		.byte	0x35
 1780 0177 C6000000 		.4byte	0xc6
 1781 017b 14       		.byte	0x14
 1782 017c 07       		.uleb128 0x7
 1783 017d 41030000 		.4byte	.LASF33
 1784 0181 05       		.byte	0x5
 1785 0182 36       		.byte	0x36
 1786 0183 C6000000 		.4byte	0xc6
 1787 0187 16       		.byte	0x16
 1788 0188 07       		.uleb128 0x7
 1789 0189 2A010000 		.4byte	.LASF34
 1790 018d 05       		.byte	0x5
 1791 018e 37       		.byte	0x37
 1792 018f C6000000 		.4byte	0xc6
 1793 0193 18       		.byte	0x18
 1794 0194 07       		.uleb128 0x7
 1795 0195 E7040000 		.4byte	.LASF35
 1796 0199 05       		.byte	0x5
 1797 019a 38       		.byte	0x38
 1798 019b C6000000 		.4byte	0xc6
 1799 019f 1A       		.byte	0x1a
 1800 01a0 07       		.uleb128 0x7
 1801 01a1 CA030000 		.4byte	.LASF36
 1802 01a5 05       		.byte	0x5
 1803 01a6 39       		.byte	0x39
 1804 01a7 C6000000 		.4byte	0xc6
 1805 01ab 1C       		.byte	0x1c
 1806 01ac 07       		.uleb128 0x7
 1807 01ad D8010000 		.4byte	.LASF37
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 45


 1808 01b1 05       		.byte	0x5
 1809 01b2 3A       		.byte	0x3a
 1810 01b3 C6000000 		.4byte	0xc6
 1811 01b7 1E       		.byte	0x1e
 1812 01b8 00       		.byte	0
 1813 01b9 08       		.uleb128 0x8
 1814 01ba 1B000000 		.4byte	.LASF50
 1815 01be 01       		.byte	0x1
 1816 01bf 2C000000 		.4byte	0x2c
 1817 01c3 06       		.byte	0x6
 1818 01c4 0D       		.byte	0xd
 1819 01c5 F4010000 		.4byte	0x1f4
 1820 01c9 09       		.uleb128 0x9
 1821 01ca 41060000 		.4byte	.LASF38
 1822 01ce 00       		.byte	0
 1823 01cf 09       		.uleb128 0x9
 1824 01d0 6F030000 		.4byte	.LASF39
 1825 01d4 01       		.byte	0x1
 1826 01d5 09       		.uleb128 0x9
 1827 01d6 06040000 		.4byte	.LASF40
 1828 01da 02       		.byte	0x2
 1829 01db 09       		.uleb128 0x9
 1830 01dc B8030000 		.4byte	.LASF41
 1831 01e0 03       		.byte	0x3
 1832 01e1 09       		.uleb128 0x9
 1833 01e2 82020000 		.4byte	.LASF42
 1834 01e6 04       		.byte	0x4
 1835 01e7 09       		.uleb128 0x9
 1836 01e8 CC020000 		.4byte	.LASF43
 1837 01ec 05       		.byte	0x5
 1838 01ed 09       		.uleb128 0x9
 1839 01ee 2E060000 		.4byte	.LASF44
 1840 01f2 06       		.byte	0x6
 1841 01f3 00       		.byte	0
 1842 01f4 06       		.uleb128 0x6
 1843 01f5 42020000 		.4byte	.LASF46
 1844 01f9 0C       		.byte	0xc
 1845 01fa 06       		.byte	0x6
 1846 01fb 0E       		.byte	0xe
 1847 01fc 25020000 		.4byte	0x225
 1848 0200 07       		.uleb128 0x7
 1849 0201 00000000 		.4byte	.LASF47
 1850 0205 06       		.byte	0x6
 1851 0206 0F       		.byte	0xf
 1852 0207 B9010000 		.4byte	0x1b9
 1853 020b 00       		.byte	0
 1854 020c 07       		.uleb128 0x7
 1855 020d 05070000 		.4byte	.LASF48
 1856 0211 06       		.byte	0x6
 1857 0212 10       		.byte	0x10
 1858 0213 68000000 		.4byte	0x68
 1859 0217 04       		.byte	0x4
 1860 0218 07       		.uleb128 0x7
 1861 0219 0D070000 		.4byte	.LASF49
 1862 021d 06       		.byte	0x6
 1863 021e 11       		.byte	0x11
 1864 021f 68000000 		.4byte	0x68
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 46


 1865 0223 08       		.byte	0x8
 1866 0224 00       		.byte	0
 1867 0225 03       		.uleb128 0x3
 1868 0226 42020000 		.4byte	.LASF46
 1869 022a 06       		.byte	0x6
 1870 022b 12       		.byte	0x12
 1871 022c F4010000 		.4byte	0x1f4
 1872 0230 08       		.uleb128 0x8
 1873 0231 05050000 		.4byte	.LASF51
 1874 0235 01       		.byte	0x1
 1875 0236 2C000000 		.4byte	0x2c
 1876 023a 06       		.byte	0x6
 1877 023b 14       		.byte	0x14
 1878 023c 58020000 		.4byte	0x258
 1879 0240 0A       		.uleb128 0xa
 1880 0241 557000   		.ascii	"Up\000"
 1881 0244 00       		.byte	0
 1882 0245 09       		.uleb128 0x9
 1883 0246 16050000 		.4byte	.LASF52
 1884 024a 01       		.byte	0x1
 1885 024b 09       		.uleb128 0x9
 1886 024c 4E030000 		.4byte	.LASF53
 1887 0250 02       		.byte	0x2
 1888 0251 09       		.uleb128 0x9
 1889 0252 1B050000 		.4byte	.LASF54
 1890 0256 03       		.byte	0x3
 1891 0257 00       		.byte	0
 1892 0258 08       		.uleb128 0x8
 1893 0259 B9050000 		.4byte	.LASF55
 1894 025d 01       		.byte	0x1
 1895 025e 2C000000 		.4byte	0x2c
 1896 0262 01       		.byte	0x1
 1897 0263 18       		.byte	0x18
 1898 0264 A5020000 		.4byte	0x2a5
 1899 0268 09       		.uleb128 0x9
 1900 0269 CD040000 		.4byte	.LASF56
 1901 026d 00       		.byte	0
 1902 026e 09       		.uleb128 0x9
 1903 026f 17040000 		.4byte	.LASF57
 1904 0273 01       		.byte	0x1
 1905 0274 09       		.uleb128 0x9
 1906 0275 E5030000 		.4byte	.LASF58
 1907 0279 02       		.byte	0x2
 1908 027a 09       		.uleb128 0x9
 1909 027b AB060000 		.4byte	.LASF59
 1910 027f 03       		.byte	0x3
 1911 0280 09       		.uleb128 0x9
 1912 0281 EB050000 		.4byte	.LASF60
 1913 0285 04       		.byte	0x4
 1914 0286 09       		.uleb128 0x9
 1915 0287 FC050000 		.4byte	.LASF61
 1916 028b 05       		.byte	0x5
 1917 028c 09       		.uleb128 0x9
 1918 028d F7030000 		.4byte	.LASF62
 1919 0291 06       		.byte	0x6
 1920 0292 09       		.uleb128 0x9
 1921 0293 D9020000 		.4byte	.LASF63
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 47


 1922 0297 07       		.byte	0x7
 1923 0298 09       		.uleb128 0x9
 1924 0299 0A000000 		.4byte	.LASF64
 1925 029d 08       		.byte	0x8
 1926 029e 09       		.uleb128 0x9
 1927 029f BB060000 		.4byte	.LASF65
 1928 02a3 09       		.byte	0x9
 1929 02a4 00       		.byte	0
 1930 02a5 0B       		.uleb128 0xb
 1931 02a6 53030000 		.4byte	.LASF74
 1932 02aa 01       		.byte	0x1
 1933 02ab 37       		.byte	0x37
 1934 02ac 00000000 		.4byte	.LFB64
 1935 02b0 EC000000 		.4byte	.LFE64-.LFB64
 1936 02b4 01       		.uleb128 0x1
 1937 02b5 9C       		.byte	0x9c
 1938 02b6 D3020000 		.4byte	0x2d3
 1939 02ba 0C       		.uleb128 0xc
 1940 02bb 50000000 		.4byte	.LBB2
 1941 02bf 62000000 		.4byte	.LBE2-.LBB2
 1942 02c3 0D       		.uleb128 0xd
 1943 02c4 BE030000 		.4byte	.LASF72
 1944 02c8 01       		.byte	0x1
 1945 02c9 44       		.byte	0x44
 1946 02ca D2000000 		.4byte	0xd2
 1947 02ce 02       		.uleb128 0x2
 1948 02cf 91       		.byte	0x91
 1949 02d0 6C       		.sleb128 -20
 1950 02d1 00       		.byte	0
 1951 02d2 00       		.byte	0
 1952 02d3 0E       		.uleb128 0xe
 1953 02d4 A1040000 		.4byte	.LASF66
 1954 02d8 01       		.byte	0x1
 1955 02d9 4F       		.byte	0x4f
 1956 02da 00000000 		.4byte	.LFB65
 1957 02de 18000000 		.4byte	.LFE65-.LFB65
 1958 02e2 01       		.uleb128 0x1
 1959 02e3 9C       		.byte	0x9c
 1960 02e4 0E       		.uleb128 0xe
 1961 02e5 95040000 		.4byte	.LASF67
 1962 02e9 01       		.byte	0x1
 1963 02ea 55       		.byte	0x55
 1964 02eb 00000000 		.4byte	.LFB66
 1965 02ef 18000000 		.4byte	.LFE66-.LFB66
 1966 02f3 01       		.uleb128 0x1
 1967 02f4 9C       		.byte	0x9c
 1968 02f5 0E       		.uleb128 0xe
 1969 02f6 4B060000 		.4byte	.LASF68
 1970 02fa 01       		.byte	0x1
 1971 02fb 5B       		.byte	0x5b
 1972 02fc 00000000 		.4byte	.LFB67
 1973 0300 18000000 		.4byte	.LFE67-.LFB67
 1974 0304 01       		.uleb128 0x1
 1975 0305 9C       		.byte	0x9c
 1976 0306 0E       		.uleb128 0xe
 1977 0307 10010000 		.4byte	.LASF69
 1978 030b 01       		.byte	0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 48


 1979 030c 61       		.byte	0x61
 1980 030d 00000000 		.4byte	.LFB68
 1981 0311 18000000 		.4byte	.LFE68-.LFB68
 1982 0315 01       		.uleb128 0x1
 1983 0316 9C       		.byte	0x9c
 1984 0317 0F       		.uleb128 0xf
 1985 0318 6B020000 		.4byte	.LASF70
 1986 031c 01       		.byte	0x1
 1987 031d 67       		.byte	0x67
 1988 031e 00000000 		.4byte	.LFB69
 1989 0322 38000000 		.4byte	.LFE69-.LFB69
 1990 0326 01       		.uleb128 0x1
 1991 0327 9C       		.byte	0x9c
 1992 0328 10       		.uleb128 0x10
 1993 0329 93060000 		.4byte	.LASF71
 1994 032d 01       		.byte	0x1
 1995 032e 73       		.byte	0x73
 1996 032f 68000000 		.4byte	0x68
 1997 0333 00000000 		.4byte	.LFB70
 1998 0337 C0000000 		.4byte	.LFE70-.LFB70
 1999 033b 01       		.uleb128 0x1
 2000 033c 9C       		.byte	0x9c
 2001 033d 11       		.uleb128 0x11
 2002 033e B0020000 		.4byte	.LASF80
 2003 0342 01       		.byte	0x1
 2004 0343 A1       		.byte	0xa1
 2005 0344 C6000000 		.4byte	0xc6
 2006 0348 00000000 		.4byte	.LFB71
 2007 034c 54000000 		.4byte	.LFE71-.LFB71
 2008 0350 01       		.uleb128 0x1
 2009 0351 9C       		.byte	0x9c
 2010 0352 81030000 		.4byte	0x381
 2011 0356 12       		.uleb128 0x12
 2012 0357 1F020000 		.4byte	.LASF82
 2013 035b 01       		.byte	0x1
 2014 035c A1       		.byte	0xa1
 2015 035d A2000000 		.4byte	0xa2
 2016 0361 02       		.uleb128 0x2
 2017 0362 91       		.byte	0x91
 2018 0363 66       		.sleb128 -26
 2019 0364 13       		.uleb128 0x13
 2020 0365 63707300 		.ascii	"cps\000"
 2021 0369 01       		.byte	0x1
 2022 036a A3       		.byte	0xa3
 2023 036b D2000000 		.4byte	0xd2
 2024 036f 02       		.uleb128 0x2
 2025 0370 91       		.byte	0x91
 2026 0371 6C       		.sleb128 -20
 2027 0372 13       		.uleb128 0x13
 2028 0373 72706D00 		.ascii	"rpm\000"
 2029 0377 01       		.byte	0x1
 2030 0378 A4       		.byte	0xa4
 2031 0379 C6000000 		.4byte	0xc6
 2032 037d 02       		.uleb128 0x2
 2033 037e 91       		.byte	0x91
 2034 037f 6A       		.sleb128 -22
 2035 0380 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 49


 2036 0381 14       		.uleb128 0x14
 2037 0382 C7010000 		.4byte	.LASF78
 2038 0386 01       		.byte	0x1
 2039 0387 AC       		.byte	0xac
 2040 0388 00000000 		.4byte	.LFB72
 2041 038c 34000000 		.4byte	.LFE72-.LFB72
 2042 0390 01       		.uleb128 0x1
 2043 0391 9C       		.byte	0x9c
 2044 0392 15       		.uleb128 0x15
 2045 0393 97010000 		.4byte	.LASF73
 2046 0397 01       		.byte	0x1
 2047 0398 A401     		.2byte	0x1a4
 2048 039a 58020000 		.4byte	0x258
 2049 039e 00000000 		.4byte	.LFB73
 2050 03a2 70000000 		.4byte	.LFE73-.LFB73
 2051 03a6 01       		.uleb128 0x1
 2052 03a7 9C       		.byte	0x9c
 2053 03a8 16       		.uleb128 0x16
 2054 03a9 59010000 		.4byte	.LASF75
 2055 03ad 01       		.byte	0x1
 2056 03ae C101     		.2byte	0x1c1
 2057 03b0 58020000 		.4byte	0x258
 2058 03b4 00000000 		.4byte	.LFB74
 2059 03b8 44020000 		.4byte	.LFE74-.LFB74
 2060 03bc 01       		.uleb128 0x1
 2061 03bd 9C       		.byte	0x9c
 2062 03be E1030000 		.4byte	0x3e1
 2063 03c2 17       		.uleb128 0x17
 2064 03c3 37000000 		.4byte	.LASF76
 2065 03c7 01       		.byte	0x1
 2066 03c8 C201     		.2byte	0x1c2
 2067 03ca D2000000 		.4byte	0xd2
 2068 03ce 02       		.uleb128 0x2
 2069 03cf 91       		.byte	0x91
 2070 03d0 74       		.sleb128 -12
 2071 03d1 17       		.uleb128 0x17
 2072 03d2 F9010000 		.4byte	.LASF77
 2073 03d6 01       		.byte	0x1
 2074 03d7 D101     		.2byte	0x1d1
 2075 03d9 B9010000 		.4byte	0x1b9
 2076 03dd 02       		.uleb128 0x2
 2077 03de 91       		.byte	0x91
 2078 03df 73       		.sleb128 -13
 2079 03e0 00       		.byte	0
 2080 03e1 18       		.uleb128 0x18
 2081 03e2 EF040000 		.4byte	.LASF79
 2082 03e6 01       		.byte	0x1
 2083 03e7 6E02     		.2byte	0x26e
 2084 03e9 00000000 		.4byte	.LFB75
 2085 03ed 1C000000 		.4byte	.LFE75-.LFB75
 2086 03f1 01       		.uleb128 0x1
 2087 03f2 9C       		.byte	0x9c
 2088 03f3 19       		.uleb128 0x19
 2089 03f4 01060000 		.4byte	.LASF81
 2090 03f8 01       		.byte	0x1
 2091 03f9 7302     		.2byte	0x273
 2092 03fb 25020000 		.4byte	0x225
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 50


 2093 03ff 00000000 		.4byte	.LFB76
 2094 0403 A4000000 		.4byte	.LFE76-.LFB76
 2095 0407 01       		.uleb128 0x1
 2096 0408 9C       		.byte	0x9c
 2097 0409 61040000 		.4byte	0x461
 2098 040d 1A       		.uleb128 0x1a
 2099 040e 50010000 		.4byte	.LASF83
 2100 0412 01       		.byte	0x1
 2101 0413 7302     		.2byte	0x273
 2102 0415 68000000 		.4byte	0x68
 2103 0419 02       		.uleb128 0x2
 2104 041a 91       		.byte	0x91
 2105 041b 60       		.sleb128 -32
 2106 041c 1A       		.uleb128 0x1a
 2107 041d 09030000 		.4byte	.LASF84
 2108 0421 01       		.byte	0x1
 2109 0422 7302     		.2byte	0x273
 2110 0424 61040000 		.4byte	0x461
 2111 0428 02       		.uleb128 0x2
 2112 0429 91       		.byte	0x91
 2113 042a 5C       		.sleb128 -36
 2114 042b 1A       		.uleb128 0x1a
 2115 042c 19030000 		.4byte	.LASF85
 2116 0430 01       		.byte	0x1
 2117 0431 7302     		.2byte	0x273
 2118 0433 68000000 		.4byte	0x68
 2119 0437 02       		.uleb128 0x2
 2120 0438 91       		.byte	0x91
 2121 0439 58       		.sleb128 -40
 2122 043a 17       		.uleb128 0x17
 2123 043b 72000000 		.4byte	.LASF86
 2124 043f 01       		.byte	0x1
 2125 0440 7402     		.2byte	0x274
 2126 0442 25020000 		.4byte	0x225
 2127 0446 02       		.uleb128 0x2
 2128 0447 91       		.byte	0x91
 2129 0448 68       		.sleb128 -24
 2130 0449 0C       		.uleb128 0xc
 2131 044a 0E000000 		.4byte	.LBB3
 2132 044e 7C000000 		.4byte	.LBE3-.LBB3
 2133 0452 1B       		.uleb128 0x1b
 2134 0453 6900     		.ascii	"i\000"
 2135 0455 01       		.byte	0x1
 2136 0456 7602     		.2byte	0x276
 2137 0458 68000000 		.4byte	0x68
 2138 045c 02       		.uleb128 0x2
 2139 045d 91       		.byte	0x91
 2140 045e 74       		.sleb128 -12
 2141 045f 00       		.byte	0
 2142 0460 00       		.byte	0
 2143 0461 1C       		.uleb128 0x1c
 2144 0462 04       		.byte	0x4
 2145 0463 25020000 		.4byte	0x225
 2146 0467 1D       		.uleb128 0x1d
 2147 0468 5A020000 		.4byte	.LASF87
 2148 046c 01       		.byte	0x1
 2149 046d 8302     		.2byte	0x283
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 51


 2150 046f 00000000 		.4byte	.LFB77
 2151 0473 C4000000 		.4byte	.LFE77-.LFB77
 2152 0477 01       		.uleb128 0x1
 2153 0478 9C       		.byte	0x9c
 2154 0479 1E       		.uleb128 0x1e
 2155 047a B6040000 		.4byte	.LASF88
 2156 047e 07       		.byte	0x7
 2157 047f 1207     		.2byte	0x712
 2158 0481 85040000 		.4byte	0x485
 2159 0485 1F       		.uleb128 0x1f
 2160 0486 8B000000 		.4byte	0x8b
 2161 048a 20       		.uleb128 0x20
 2162 048b 747300   		.ascii	"ts\000"
 2163 048e 05       		.byte	0x5
 2164 048f 10       		.byte	0x10
 2165 0490 96000000 		.4byte	0x96
 2166 0494 05       		.uleb128 0x5
 2167 0495 03       		.byte	0x3
 2168 0496 00000000 		.4byte	ts
 2169 049a 21       		.uleb128 0x21
 2170 049b 17060000 		.4byte	.LASF89
 2171 049f 05       		.byte	0x5
 2172 04a0 11       		.byte	0x11
 2173 04a1 A2000000 		.4byte	0xa2
 2174 04a5 05       		.uleb128 0x5
 2175 04a6 03       		.byte	0x3
 2176 04a7 00000000 		.4byte	ts_enc
 2177 04ab 21       		.uleb128 0x21
 2178 04ac C3040000 		.4byte	.LASF90
 2179 04b0 05       		.byte	0x5
 2180 04b1 12       		.byte	0x12
 2181 04b2 A2000000 		.4byte	0xa2
 2182 04b6 05       		.uleb128 0x5
 2183 04b7 03       		.byte	0x3
 2184 04b8 00000000 		.4byte	ts_update
 2185 04bc 21       		.uleb128 0x21
 2186 04bd EE030000 		.4byte	.LASF91
 2187 04c1 05       		.byte	0x5
 2188 04c2 13       		.byte	0x13
 2189 04c3 A2000000 		.4byte	0xa2
 2190 04c7 05       		.uleb128 0x5
 2191 04c8 03       		.byte	0x3
 2192 04c9 00000000 		.4byte	ts_speed
 2193 04cd 21       		.uleb128 0x21
 2194 04ce F0020000 		.4byte	.LASF92
 2195 04d2 05       		.byte	0x5
 2196 04d3 14       		.byte	0x14
 2197 04d4 A2000000 		.4byte	0xa2
 2198 04d8 05       		.uleb128 0x5
 2199 04d9 03       		.byte	0x3
 2200 04da 00000000 		.4byte	ts_display
 2201 04de 21       		.uleb128 0x21
 2202 04df A4020000 		.4byte	.LASF93
 2203 04e3 05       		.byte	0x5
 2204 04e4 16       		.byte	0x16
 2205 04e5 96000000 		.4byte	0x96
 2206 04e9 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 52


 2207 04ea 03       		.byte	0x3
 2208 04eb 00000000 		.4byte	flag_ts_enc
 2209 04ef 21       		.uleb128 0x21
 2210 04f0 95020000 		.4byte	.LASF94
 2211 04f4 05       		.byte	0x5
 2212 04f5 17       		.byte	0x17
 2213 04f6 96000000 		.4byte	0x96
 2214 04fa 05       		.uleb128 0x5
 2215 04fb 03       		.byte	0x3
 2216 04fc 00000000 		.4byte	flag_ts_update
 2217 0500 21       		.uleb128 0x21
 2218 0501 5B040000 		.4byte	.LASF95
 2219 0505 05       		.byte	0x5
 2220 0506 18       		.byte	0x18
 2221 0507 96000000 		.4byte	0x96
 2222 050b 05       		.uleb128 0x5
 2223 050c 03       		.byte	0x3
 2224 050d 00000000 		.4byte	flag_ts_speed
 2225 0511 21       		.uleb128 0x21
 2226 0512 1E060000 		.4byte	.LASF96
 2227 0516 05       		.byte	0x5
 2228 0517 19       		.byte	0x19
 2229 0518 96000000 		.4byte	0x96
 2230 051c 05       		.uleb128 0x5
 2231 051d 03       		.byte	0x3
 2232 051e 00000000 		.4byte	flag_ts_display
 2233 0522 21       		.uleb128 0x21
 2234 0523 78040000 		.4byte	.LASF97
 2235 0527 05       		.byte	0x5
 2236 0528 1B       		.byte	0x1b
 2237 0529 96000000 		.4byte	0x96
 2238 052d 05       		.uleb128 0x5
 2239 052e 03       		.byte	0x3
 2240 052f 00000000 		.4byte	flag_rx
 2241 0533 21       		.uleb128 0x21
 2242 0534 4E020000 		.4byte	.LASF98
 2243 0538 05       		.byte	0x5
 2244 0539 1C       		.byte	0x1c
 2245 053a 96000000 		.4byte	0x96
 2246 053e 05       		.uleb128 0x5
 2247 053f 03       		.byte	0x3
 2248 0540 00000000 		.4byte	flag_packet
 2249 0544 21       		.uleb128 0x21
 2250 0545 ED060000 		.4byte	.LASF99
 2251 0549 05       		.byte	0x5
 2252 054a 1D       		.byte	0x1d
 2253 054b 96000000 		.4byte	0x96
 2254 054f 05       		.uleb128 0x5
 2255 0550 03       		.byte	0x3
 2256 0551 00000000 		.4byte	flag_KB_string
 2257 0555 21       		.uleb128 0x21
 2258 0556 69040000 		.4byte	.LASF100
 2259 055a 05       		.byte	0x5
 2260 055b 1F       		.byte	0x1f
 2261 055c 96000000 		.4byte	0x96
 2262 0560 05       		.uleb128 0x5
 2263 0561 03       		.byte	0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 53


 2264 0562 00000000 		.4byte	dataready_flag
 2265 0566 21       		.uleb128 0x21
 2266 0567 7B010000 		.4byte	.LASF101
 2267 056b 05       		.byte	0x5
 2268 056c 21       		.byte	0x21
 2269 056d 96000000 		.4byte	0x96
 2270 0571 05       		.uleb128 0x5
 2271 0572 03       		.byte	0x3
 2272 0573 00000000 		.4byte	flag_rf_transmission_active
 2273 0577 22       		.uleb128 0x22
 2274 0578 84000000 		.4byte	0x84
 2275 057c 87050000 		.4byte	0x587
 2276 0580 23       		.uleb128 0x23
 2277 0581 7D000000 		.4byte	0x7d
 2278 0585 3F       		.byte	0x3f
 2279 0586 00       		.byte	0
 2280 0587 21       		.uleb128 0x21
 2281 0588 33060000 		.4byte	.LASF102
 2282 058c 05       		.byte	0x5
 2283 058d 24       		.byte	0x24
 2284 058e 77050000 		.4byte	0x577
 2285 0592 05       		.uleb128 0x5
 2286 0593 03       		.byte	0x3
 2287 0594 00000000 		.4byte	displaystring
 2288 0598 21       		.uleb128 0x21
 2289 0599 E6050000 		.4byte	.LASF103
 2290 059d 05       		.byte	0x5
 2291 059e 25       		.byte	0x25
 2292 059f 77050000 		.4byte	0x577
 2293 05a3 05       		.uleb128 0x5
 2294 05a4 03       		.byte	0x3
 2295 05a5 00000000 		.4byte	line
 2296 05a9 21       		.uleb128 0x21
 2297 05aa B3050000 		.4byte	.LASF104
 2298 05ae 05       		.byte	0x5
 2299 05af 25       		.byte	0x25
 2300 05b0 77050000 		.4byte	0x577
 2301 05b4 05       		.uleb128 0x5
 2302 05b5 03       		.byte	0x3
 2303 05b6 00000000 		.4byte	entry
 2304 05ba 22       		.uleb128 0x22
 2305 05bb 96000000 		.4byte	0x96
 2306 05bf CA050000 		.4byte	0x5ca
 2307 05c3 23       		.uleb128 0x23
 2308 05c4 7D000000 		.4byte	0x7d
 2309 05c8 3F       		.byte	0x3f
 2310 05c9 00       		.byte	0
 2311 05ca 21       		.uleb128 0x21
 2312 05cb 15020000 		.4byte	.LASF105
 2313 05cf 05       		.byte	0x5
 2314 05d0 26       		.byte	0x26
 2315 05d1 BA050000 		.4byte	0x5ba
 2316 05d5 05       		.uleb128 0x5
 2317 05d6 03       		.byte	0x3
 2318 05d7 00000000 		.4byte	usbBuffer
 2319 05db 21       		.uleb128 0x21
 2320 05dc 65000000 		.4byte	.LASF106
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 54


 2321 05e0 05       		.byte	0x5
 2322 05e1 3C       		.byte	0x3c
 2323 05e2 E0000000 		.4byte	0xe0
 2324 05e6 05       		.uleb128 0x5
 2325 05e7 03       		.byte	0x3
 2326 05e8 00000000 		.4byte	system_state
 2327 05ec 22       		.uleb128 0x22
 2328 05ed 68000000 		.4byte	0x68
 2329 05f1 02060000 		.4byte	0x602
 2330 05f5 23       		.uleb128 0x23
 2331 05f6 7D000000 		.4byte	0x7d
 2332 05fa 0E       		.byte	0xe
 2333 05fb 23       		.uleb128 0x23
 2334 05fc 7D000000 		.4byte	0x7d
 2335 0600 12       		.byte	0x12
 2336 0601 00       		.byte	0
 2337 0602 24       		.uleb128 0x24
 2338 0603 6D617000 		.ascii	"map\000"
 2339 0607 08       		.byte	0x8
 2340 0608 04       		.byte	0x4
 2341 0609 EC050000 		.4byte	0x5ec
 2342 060d 22       		.uleb128 0x22
 2343 060e 68000000 		.4byte	0x68
 2344 0612 23060000 		.4byte	0x623
 2345 0616 23       		.uleb128 0x23
 2346 0617 7D000000 		.4byte	0x7d
 2347 061b 04       		.byte	0x4
 2348 061c 23       		.uleb128 0x23
 2349 061d 7D000000 		.4byte	0x7d
 2350 0621 01       		.byte	0x1
 2351 0622 00       		.byte	0
 2352 0623 25       		.uleb128 0x25
 2353 0624 DB030000 		.4byte	.LASF107
 2354 0628 08       		.byte	0x8
 2355 0629 05       		.byte	0x5
 2356 062a 0D060000 		.4byte	0x60d
 2357 062e 21       		.uleb128 0x21
 2358 062f 29050000 		.4byte	.LASF108
 2359 0633 01       		.byte	0x1
 2360 0634 19       		.byte	0x19
 2361 0635 58020000 		.4byte	0x258
 2362 0639 05       		.uleb128 0x5
 2363 063a 03       		.byte	0x3
 2364 063b 00000000 		.4byte	currentDirection
 2365 063f 21       		.uleb128 0x21
 2366 0640 3D040000 		.4byte	.LASF109
 2367 0644 01       		.byte	0x1
 2368 0645 19       		.byte	0x19
 2369 0646 58020000 		.4byte	0x258
 2370 064a 05       		.uleb128 0x5
 2371 064b 03       		.byte	0x3
 2372 064c 00000000 		.4byte	previousDirection
 2373 0650 21       		.uleb128 0x21
 2374 0651 AF010000 		.4byte	.LASF110
 2375 0655 01       		.byte	0x1
 2376 0656 1B       		.byte	0x1b
 2377 0657 30020000 		.4byte	0x230
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 55


 2378 065b 05       		.uleb128 0x5
 2379 065c 03       		.byte	0x3
 2380 065d 00000000 		.4byte	currentRobotOrientation
 2381 0661 21       		.uleb128 0x21
 2382 0662 A4030000 		.4byte	.LASF111
 2383 0666 01       		.byte	0x1
 2384 0667 1B       		.byte	0x1b
 2385 0668 30020000 		.4byte	0x230
 2386 066c 05       		.uleb128 0x5
 2387 066d 03       		.byte	0x3
 2388 066e 00000000 		.4byte	previousOrientation
 2389 0672 21       		.uleb128 0x21
 2390 0673 98060000 		.4byte	.LASF112
 2391 0677 01       		.byte	0x1
 2392 0678 1C       		.byte	0x1c
 2393 0679 25020000 		.4byte	0x225
 2394 067d 05       		.uleb128 0x5
 2395 067e 03       		.byte	0x3
 2396 067f 00000000 		.4byte	currentInstruction
 2397 0683 21       		.uleb128 0x21
 2398 0684 50010000 		.4byte	.LASF83
 2399 0688 01       		.byte	0x1
 2400 0689 1D       		.byte	0x1d
 2401 068a 68000000 		.4byte	0x68
 2402 068e 05       		.uleb128 0x5
 2403 068f 03       		.byte	0x3
 2404 0690 00000000 		.4byte	numSteps
 2405 0694 21       		.uleb128 0x21
 2406 0695 09030000 		.4byte	.LASF84
 2407 0699 01       		.byte	0x1
 2408 069a 1F       		.byte	0x1f
 2409 069b 61040000 		.4byte	0x461
 2410 069f 05       		.uleb128 0x5
 2411 06a0 03       		.byte	0x3
 2412 06a1 00000000 		.4byte	instructionList
 2413 06a5 21       		.uleb128 0x21
 2414 06a6 19030000 		.4byte	.LASF85
 2415 06aa 01       		.byte	0x1
 2416 06ab 20       		.byte	0x20
 2417 06ac AE000000 		.4byte	0xae
 2418 06b0 05       		.uleb128 0x5
 2419 06b1 03       		.byte	0x3
 2420 06b2 00000000 		.4byte	instructionIndex
 2421 06b6 20       		.uleb128 0x20
 2422 06b7 733300   		.ascii	"s3\000"
 2423 06ba 01       		.byte	0x1
 2424 06bb 24       		.byte	0x24
 2425 06bc 96000000 		.4byte	0x96
 2426 06c0 05       		.uleb128 0x5
 2427 06c1 03       		.byte	0x3
 2428 06c2 00000000 		.4byte	s3
 2429 06c6 20       		.uleb128 0x20
 2430 06c7 733400   		.ascii	"s4\000"
 2431 06ca 01       		.byte	0x1
 2432 06cb 24       		.byte	0x24
 2433 06cc 96000000 		.4byte	0x96
 2434 06d0 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 56


 2435 06d1 03       		.byte	0x3
 2436 06d2 00000000 		.4byte	s4
 2437 06d6 20       		.uleb128 0x20
 2438 06d7 733500   		.ascii	"s5\000"
 2439 06da 01       		.byte	0x1
 2440 06db 24       		.byte	0x24
 2441 06dc 96000000 		.4byte	0x96
 2442 06e0 05       		.uleb128 0x5
 2443 06e1 03       		.byte	0x3
 2444 06e2 00000000 		.4byte	s5
 2445 06e6 20       		.uleb128 0x20
 2446 06e7 733600   		.ascii	"s6\000"
 2447 06ea 01       		.byte	0x1
 2448 06eb 24       		.byte	0x24
 2449 06ec 96000000 		.4byte	0x96
 2450 06f0 05       		.uleb128 0x5
 2451 06f1 03       		.byte	0x3
 2452 06f2 00000000 		.4byte	s6
 2453 06f6 21       		.uleb128 0x21
 2454 06f7 D5040000 		.4byte	.LASF113
 2455 06fb 01       		.byte	0x1
 2456 06fc 29       		.byte	0x29
 2457 06fd AE000000 		.4byte	0xae
 2458 0701 05       		.uleb128 0x5
 2459 0702 03       		.byte	0x3
 2460 0703 00000000 		.4byte	totalMilliseconds
 2461 0707 21       		.uleb128 0x21
 2462 0708 1C010000 		.4byte	.LASF114
 2463 070c 01       		.byte	0x1
 2464 070d 2A       		.byte	0x2a
 2465 070e D2000000 		.4byte	0xd2
 2466 0712 05       		.uleb128 0x5
 2467 0713 03       		.byte	0x3
 2468 0714 00000000 		.4byte	totalDistance
 2469 0718 22       		.uleb128 0x22
 2470 0719 84000000 		.4byte	0x84
 2471 071d 28070000 		.4byte	0x728
 2472 0721 23       		.uleb128 0x23
 2473 0722 7D000000 		.4byte	0x7d
 2474 0726 44       		.byte	0x44
 2475 0727 00       		.byte	0
 2476 0728 21       		.uleb128 0x21
 2477 0729 41000000 		.4byte	.LASF115
 2478 072d 01       		.byte	0x1
 2479 072e 2C       		.byte	0x2c
 2480 072f 18070000 		.4byte	0x718
 2481 0733 05       		.uleb128 0x5
 2482 0734 03       		.byte	0x3
 2483 0735 00000000 		.4byte	buffer
 2484 0739 21       		.uleb128 0x21
 2485 073a E5010000 		.4byte	.LASF116
 2486 073e 01       		.byte	0x1
 2487 073f 2D       		.byte	0x2d
 2488 0740 68000000 		.4byte	0x68
 2489 0744 05       		.uleb128 0x5
 2490 0745 03       		.byte	0x3
 2491 0746 00000000 		.4byte	quadDec2Count
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 57


 2492 074a 21       		.uleb128 0x21
 2493 074b E4060000 		.4byte	.LASF117
 2494 074f 01       		.byte	0x1
 2495 0750 2E       		.byte	0x2e
 2496 0751 68000000 		.4byte	0x68
 2497 0755 05       		.uleb128 0x5
 2498 0756 03       		.byte	0x3
 2499 0757 00000000 		.4byte	timerInt
 2500 075b 21       		.uleb128 0x21
 2501 075c 78020000 		.4byte	.LASF118
 2502 0760 01       		.byte	0x1
 2503 0761 2F       		.byte	0x2f
 2504 0762 68000000 		.4byte	0x68
 2505 0766 05       		.uleb128 0x5
 2506 0767 03       		.byte	0x3
 2507 0768 00000000 		.4byte	keepLedOn
 2508 076c 21       		.uleb128 0x21
 2509 076d 95050000 		.4byte	.LASF119
 2510 0771 01       		.byte	0x1
 2511 0772 31       		.byte	0x31
 2512 0773 AE000000 		.4byte	0xae
 2513 0777 05       		.uleb128 0x5
 2514 0778 03       		.byte	0x3
 2515 0779 00000000 		.4byte	stopBuffer
 2516 077d 21       		.uleb128 0x21
 2517 077e 5E030000 		.4byte	.LASF120
 2518 0782 01       		.byte	0x1
 2519 0783 32       		.byte	0x32
 2520 0784 96000000 		.4byte	0x96
 2521 0788 05       		.uleb128 0x5
 2522 0789 03       		.byte	0x3
 2523 078a 00000000 		.4byte	turnFinishedFlag
 2524 078e 21       		.uleb128 0x21
 2525 078f 32010000 		.4byte	.LASF121
 2526 0793 01       		.byte	0x1
 2527 0794 33       		.byte	0x33
 2528 0795 96000000 		.4byte	0x96
 2529 0799 05       		.uleb128 0x5
 2530 079a 03       		.byte	0x3
 2531 079b 00000000 		.4byte	forwardUntilTargetStartedFlag
 2532 079f 21       		.uleb128 0x21
 2533 07a0 95030000 		.4byte	.LASF122
 2534 07a4 01       		.byte	0x1
 2535 07a5 34       		.byte	0x34
 2536 07a6 D2000000 		.4byte	0xd2
 2537 07aa 05       		.uleb128 0x5
 2538 07ab 03       		.byte	0x3
 2539 07ac 00000000 		.4byte	blockSizeTotal
 2540 07b0 21       		.uleb128 0x21
 2541 07b1 36030000 		.4byte	.LASF123
 2542 07b5 01       		.byte	0x1
 2543 07b6 B3       		.byte	0xb3
 2544 07b7 D2000000 		.4byte	0xd2
 2545 07bb 05       		.uleb128 0x5
 2546 07bc 03       		.byte	0x3
 2547 07bd 00000000 		.4byte	xBlocksize
 2548 07c1 21       		.uleb128 0x21
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 58


 2549 07c2 80040000 		.4byte	.LASF124
 2550 07c6 01       		.byte	0x1
 2551 07c7 B4       		.byte	0xb4
 2552 07c8 D2000000 		.4byte	0xd2
 2553 07cc 05       		.uleb128 0x5
 2554 07cd 03       		.byte	0x3
 2555 07ce 00000000 		.4byte	yBlocksize
 2556 07d2 21       		.uleb128 0x21
 2557 07d3 63060000 		.4byte	.LASF125
 2558 07d7 01       		.byte	0x1
 2559 07d8 B5       		.byte	0xb5
 2560 07d9 96000000 		.4byte	0x96
 2561 07dd 05       		.uleb128 0x5
 2562 07de 03       		.byte	0x3
 2563 07df 00000000 		.4byte	currentRow
 2564 07e3 21       		.uleb128 0x21
 2565 07e4 D1060000 		.4byte	.LASF126
 2566 07e8 01       		.byte	0x1
 2567 07e9 B6       		.byte	0xb6
 2568 07ea 96000000 		.4byte	0x96
 2569 07ee 05       		.uleb128 0x5
 2570 07ef 03       		.byte	0x3
 2571 07f0 00000000 		.4byte	currentCol
 2572 07f4 26       		.uleb128 0x26
 2573 07f5 D5050000 		.4byte	.LASF127
 2574 07f9 01       		.byte	0x1
 2575 07fa 0301     		.2byte	0x103
 2576 07fc 96000000 		.4byte	0x96
 2577 0800 05       		.uleb128 0x5
 2578 0801 03       		.byte	0x3
 2579 0802 00000000 		.4byte	stoppedAfterTurn
 2580 0806 26       		.uleb128 0x26
 2581 0807 BF020000 		.4byte	.LASF128
 2582 080b 01       		.byte	0x1
 2583 080c 0401     		.2byte	0x104
 2584 080e 96000000 		.4byte	0x96
 2585 0812 05       		.uleb128 0x5
 2586 0813 03       		.byte	0x3
 2587 0814 00000000 		.4byte	ignoreSensor
 2588 0818 00       		.byte	0
 2589              		.section	.debug_abbrev,"",%progbits
 2590              	.Ldebug_abbrev0:
 2591 0000 01       		.uleb128 0x1
 2592 0001 11       		.uleb128 0x11
 2593 0002 01       		.byte	0x1
 2594 0003 25       		.uleb128 0x25
 2595 0004 0E       		.uleb128 0xe
 2596 0005 13       		.uleb128 0x13
 2597 0006 0B       		.uleb128 0xb
 2598 0007 03       		.uleb128 0x3
 2599 0008 0E       		.uleb128 0xe
 2600 0009 1B       		.uleb128 0x1b
 2601 000a 0E       		.uleb128 0xe
 2602 000b 55       		.uleb128 0x55
 2603 000c 17       		.uleb128 0x17
 2604 000d 11       		.uleb128 0x11
 2605 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 59


 2606 000f 10       		.uleb128 0x10
 2607 0010 17       		.uleb128 0x17
 2608 0011 00       		.byte	0
 2609 0012 00       		.byte	0
 2610 0013 02       		.uleb128 0x2
 2611 0014 24       		.uleb128 0x24
 2612 0015 00       		.byte	0
 2613 0016 0B       		.uleb128 0xb
 2614 0017 0B       		.uleb128 0xb
 2615 0018 3E       		.uleb128 0x3e
 2616 0019 0B       		.uleb128 0xb
 2617 001a 03       		.uleb128 0x3
 2618 001b 0E       		.uleb128 0xe
 2619 001c 00       		.byte	0
 2620 001d 00       		.byte	0
 2621 001e 03       		.uleb128 0x3
 2622 001f 16       		.uleb128 0x16
 2623 0020 00       		.byte	0
 2624 0021 03       		.uleb128 0x3
 2625 0022 0E       		.uleb128 0xe
 2626 0023 3A       		.uleb128 0x3a
 2627 0024 0B       		.uleb128 0xb
 2628 0025 3B       		.uleb128 0x3b
 2629 0026 0B       		.uleb128 0xb
 2630 0027 49       		.uleb128 0x49
 2631 0028 13       		.uleb128 0x13
 2632 0029 00       		.byte	0
 2633 002a 00       		.byte	0
 2634 002b 04       		.uleb128 0x4
 2635 002c 24       		.uleb128 0x24
 2636 002d 00       		.byte	0
 2637 002e 0B       		.uleb128 0xb
 2638 002f 0B       		.uleb128 0xb
 2639 0030 3E       		.uleb128 0x3e
 2640 0031 0B       		.uleb128 0xb
 2641 0032 03       		.uleb128 0x3
 2642 0033 08       		.uleb128 0x8
 2643 0034 00       		.byte	0
 2644 0035 00       		.byte	0
 2645 0036 05       		.uleb128 0x5
 2646 0037 16       		.uleb128 0x16
 2647 0038 00       		.byte	0
 2648 0039 03       		.uleb128 0x3
 2649 003a 0E       		.uleb128 0xe
 2650 003b 3A       		.uleb128 0x3a
 2651 003c 0B       		.uleb128 0xb
 2652 003d 3B       		.uleb128 0x3b
 2653 003e 05       		.uleb128 0x5
 2654 003f 49       		.uleb128 0x49
 2655 0040 13       		.uleb128 0x13
 2656 0041 00       		.byte	0
 2657 0042 00       		.byte	0
 2658 0043 06       		.uleb128 0x6
 2659 0044 13       		.uleb128 0x13
 2660 0045 01       		.byte	0x1
 2661 0046 03       		.uleb128 0x3
 2662 0047 0E       		.uleb128 0xe
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 60


 2663 0048 0B       		.uleb128 0xb
 2664 0049 0B       		.uleb128 0xb
 2665 004a 3A       		.uleb128 0x3a
 2666 004b 0B       		.uleb128 0xb
 2667 004c 3B       		.uleb128 0x3b
 2668 004d 0B       		.uleb128 0xb
 2669 004e 01       		.uleb128 0x1
 2670 004f 13       		.uleb128 0x13
 2671 0050 00       		.byte	0
 2672 0051 00       		.byte	0
 2673 0052 07       		.uleb128 0x7
 2674 0053 0D       		.uleb128 0xd
 2675 0054 00       		.byte	0
 2676 0055 03       		.uleb128 0x3
 2677 0056 0E       		.uleb128 0xe
 2678 0057 3A       		.uleb128 0x3a
 2679 0058 0B       		.uleb128 0xb
 2680 0059 3B       		.uleb128 0x3b
 2681 005a 0B       		.uleb128 0xb
 2682 005b 49       		.uleb128 0x49
 2683 005c 13       		.uleb128 0x13
 2684 005d 38       		.uleb128 0x38
 2685 005e 0B       		.uleb128 0xb
 2686 005f 00       		.byte	0
 2687 0060 00       		.byte	0
 2688 0061 08       		.uleb128 0x8
 2689 0062 04       		.uleb128 0x4
 2690 0063 01       		.byte	0x1
 2691 0064 03       		.uleb128 0x3
 2692 0065 0E       		.uleb128 0xe
 2693 0066 0B       		.uleb128 0xb
 2694 0067 0B       		.uleb128 0xb
 2695 0068 49       		.uleb128 0x49
 2696 0069 13       		.uleb128 0x13
 2697 006a 3A       		.uleb128 0x3a
 2698 006b 0B       		.uleb128 0xb
 2699 006c 3B       		.uleb128 0x3b
 2700 006d 0B       		.uleb128 0xb
 2701 006e 01       		.uleb128 0x1
 2702 006f 13       		.uleb128 0x13
 2703 0070 00       		.byte	0
 2704 0071 00       		.byte	0
 2705 0072 09       		.uleb128 0x9
 2706 0073 28       		.uleb128 0x28
 2707 0074 00       		.byte	0
 2708 0075 03       		.uleb128 0x3
 2709 0076 0E       		.uleb128 0xe
 2710 0077 1C       		.uleb128 0x1c
 2711 0078 0B       		.uleb128 0xb
 2712 0079 00       		.byte	0
 2713 007a 00       		.byte	0
 2714 007b 0A       		.uleb128 0xa
 2715 007c 28       		.uleb128 0x28
 2716 007d 00       		.byte	0
 2717 007e 03       		.uleb128 0x3
 2718 007f 08       		.uleb128 0x8
 2719 0080 1C       		.uleb128 0x1c
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 61


 2720 0081 0B       		.uleb128 0xb
 2721 0082 00       		.byte	0
 2722 0083 00       		.byte	0
 2723 0084 0B       		.uleb128 0xb
 2724 0085 2E       		.uleb128 0x2e
 2725 0086 01       		.byte	0x1
 2726 0087 3F       		.uleb128 0x3f
 2727 0088 19       		.uleb128 0x19
 2728 0089 03       		.uleb128 0x3
 2729 008a 0E       		.uleb128 0xe
 2730 008b 3A       		.uleb128 0x3a
 2731 008c 0B       		.uleb128 0xb
 2732 008d 3B       		.uleb128 0x3b
 2733 008e 0B       		.uleb128 0xb
 2734 008f 27       		.uleb128 0x27
 2735 0090 19       		.uleb128 0x19
 2736 0091 11       		.uleb128 0x11
 2737 0092 01       		.uleb128 0x1
 2738 0093 12       		.uleb128 0x12
 2739 0094 06       		.uleb128 0x6
 2740 0095 40       		.uleb128 0x40
 2741 0096 18       		.uleb128 0x18
 2742 0097 9642     		.uleb128 0x2116
 2743 0099 19       		.uleb128 0x19
 2744 009a 01       		.uleb128 0x1
 2745 009b 13       		.uleb128 0x13
 2746 009c 00       		.byte	0
 2747 009d 00       		.byte	0
 2748 009e 0C       		.uleb128 0xc
 2749 009f 0B       		.uleb128 0xb
 2750 00a0 01       		.byte	0x1
 2751 00a1 11       		.uleb128 0x11
 2752 00a2 01       		.uleb128 0x1
 2753 00a3 12       		.uleb128 0x12
 2754 00a4 06       		.uleb128 0x6
 2755 00a5 00       		.byte	0
 2756 00a6 00       		.byte	0
 2757 00a7 0D       		.uleb128 0xd
 2758 00a8 34       		.uleb128 0x34
 2759 00a9 00       		.byte	0
 2760 00aa 03       		.uleb128 0x3
 2761 00ab 0E       		.uleb128 0xe
 2762 00ac 3A       		.uleb128 0x3a
 2763 00ad 0B       		.uleb128 0xb
 2764 00ae 3B       		.uleb128 0x3b
 2765 00af 0B       		.uleb128 0xb
 2766 00b0 49       		.uleb128 0x49
 2767 00b1 13       		.uleb128 0x13
 2768 00b2 02       		.uleb128 0x2
 2769 00b3 18       		.uleb128 0x18
 2770 00b4 00       		.byte	0
 2771 00b5 00       		.byte	0
 2772 00b6 0E       		.uleb128 0xe
 2773 00b7 2E       		.uleb128 0x2e
 2774 00b8 00       		.byte	0
 2775 00b9 3F       		.uleb128 0x3f
 2776 00ba 19       		.uleb128 0x19
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 62


 2777 00bb 03       		.uleb128 0x3
 2778 00bc 0E       		.uleb128 0xe
 2779 00bd 3A       		.uleb128 0x3a
 2780 00be 0B       		.uleb128 0xb
 2781 00bf 3B       		.uleb128 0x3b
 2782 00c0 0B       		.uleb128 0xb
 2783 00c1 27       		.uleb128 0x27
 2784 00c2 19       		.uleb128 0x19
 2785 00c3 11       		.uleb128 0x11
 2786 00c4 01       		.uleb128 0x1
 2787 00c5 12       		.uleb128 0x12
 2788 00c6 06       		.uleb128 0x6
 2789 00c7 40       		.uleb128 0x40
 2790 00c8 18       		.uleb128 0x18
 2791 00c9 9742     		.uleb128 0x2117
 2792 00cb 19       		.uleb128 0x19
 2793 00cc 00       		.byte	0
 2794 00cd 00       		.byte	0
 2795 00ce 0F       		.uleb128 0xf
 2796 00cf 2E       		.uleb128 0x2e
 2797 00d0 00       		.byte	0
 2798 00d1 3F       		.uleb128 0x3f
 2799 00d2 19       		.uleb128 0x19
 2800 00d3 03       		.uleb128 0x3
 2801 00d4 0E       		.uleb128 0xe
 2802 00d5 3A       		.uleb128 0x3a
 2803 00d6 0B       		.uleb128 0xb
 2804 00d7 3B       		.uleb128 0x3b
 2805 00d8 0B       		.uleb128 0xb
 2806 00d9 27       		.uleb128 0x27
 2807 00da 19       		.uleb128 0x19
 2808 00db 11       		.uleb128 0x11
 2809 00dc 01       		.uleb128 0x1
 2810 00dd 12       		.uleb128 0x12
 2811 00de 06       		.uleb128 0x6
 2812 00df 40       		.uleb128 0x40
 2813 00e0 18       		.uleb128 0x18
 2814 00e1 9642     		.uleb128 0x2116
 2815 00e3 19       		.uleb128 0x19
 2816 00e4 00       		.byte	0
 2817 00e5 00       		.byte	0
 2818 00e6 10       		.uleb128 0x10
 2819 00e7 2E       		.uleb128 0x2e
 2820 00e8 00       		.byte	0
 2821 00e9 3F       		.uleb128 0x3f
 2822 00ea 19       		.uleb128 0x19
 2823 00eb 03       		.uleb128 0x3
 2824 00ec 0E       		.uleb128 0xe
 2825 00ed 3A       		.uleb128 0x3a
 2826 00ee 0B       		.uleb128 0xb
 2827 00ef 3B       		.uleb128 0x3b
 2828 00f0 0B       		.uleb128 0xb
 2829 00f1 49       		.uleb128 0x49
 2830 00f2 13       		.uleb128 0x13
 2831 00f3 11       		.uleb128 0x11
 2832 00f4 01       		.uleb128 0x1
 2833 00f5 12       		.uleb128 0x12
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 63


 2834 00f6 06       		.uleb128 0x6
 2835 00f7 40       		.uleb128 0x40
 2836 00f8 18       		.uleb128 0x18
 2837 00f9 9642     		.uleb128 0x2116
 2838 00fb 19       		.uleb128 0x19
 2839 00fc 00       		.byte	0
 2840 00fd 00       		.byte	0
 2841 00fe 11       		.uleb128 0x11
 2842 00ff 2E       		.uleb128 0x2e
 2843 0100 01       		.byte	0x1
 2844 0101 3F       		.uleb128 0x3f
 2845 0102 19       		.uleb128 0x19
 2846 0103 03       		.uleb128 0x3
 2847 0104 0E       		.uleb128 0xe
 2848 0105 3A       		.uleb128 0x3a
 2849 0106 0B       		.uleb128 0xb
 2850 0107 3B       		.uleb128 0x3b
 2851 0108 0B       		.uleb128 0xb
 2852 0109 27       		.uleb128 0x27
 2853 010a 19       		.uleb128 0x19
 2854 010b 49       		.uleb128 0x49
 2855 010c 13       		.uleb128 0x13
 2856 010d 11       		.uleb128 0x11
 2857 010e 01       		.uleb128 0x1
 2858 010f 12       		.uleb128 0x12
 2859 0110 06       		.uleb128 0x6
 2860 0111 40       		.uleb128 0x40
 2861 0112 18       		.uleb128 0x18
 2862 0113 9642     		.uleb128 0x2116
 2863 0115 19       		.uleb128 0x19
 2864 0116 01       		.uleb128 0x1
 2865 0117 13       		.uleb128 0x13
 2866 0118 00       		.byte	0
 2867 0119 00       		.byte	0
 2868 011a 12       		.uleb128 0x12
 2869 011b 05       		.uleb128 0x5
 2870 011c 00       		.byte	0
 2871 011d 03       		.uleb128 0x3
 2872 011e 0E       		.uleb128 0xe
 2873 011f 3A       		.uleb128 0x3a
 2874 0120 0B       		.uleb128 0xb
 2875 0121 3B       		.uleb128 0x3b
 2876 0122 0B       		.uleb128 0xb
 2877 0123 49       		.uleb128 0x49
 2878 0124 13       		.uleb128 0x13
 2879 0125 02       		.uleb128 0x2
 2880 0126 18       		.uleb128 0x18
 2881 0127 00       		.byte	0
 2882 0128 00       		.byte	0
 2883 0129 13       		.uleb128 0x13
 2884 012a 34       		.uleb128 0x34
 2885 012b 00       		.byte	0
 2886 012c 03       		.uleb128 0x3
 2887 012d 08       		.uleb128 0x8
 2888 012e 3A       		.uleb128 0x3a
 2889 012f 0B       		.uleb128 0xb
 2890 0130 3B       		.uleb128 0x3b
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 64


 2891 0131 0B       		.uleb128 0xb
 2892 0132 49       		.uleb128 0x49
 2893 0133 13       		.uleb128 0x13
 2894 0134 02       		.uleb128 0x2
 2895 0135 18       		.uleb128 0x18
 2896 0136 00       		.byte	0
 2897 0137 00       		.byte	0
 2898 0138 14       		.uleb128 0x14
 2899 0139 2E       		.uleb128 0x2e
 2900 013a 00       		.byte	0
 2901 013b 3F       		.uleb128 0x3f
 2902 013c 19       		.uleb128 0x19
 2903 013d 03       		.uleb128 0x3
 2904 013e 0E       		.uleb128 0xe
 2905 013f 3A       		.uleb128 0x3a
 2906 0140 0B       		.uleb128 0xb
 2907 0141 3B       		.uleb128 0x3b
 2908 0142 0B       		.uleb128 0xb
 2909 0143 11       		.uleb128 0x11
 2910 0144 01       		.uleb128 0x1
 2911 0145 12       		.uleb128 0x12
 2912 0146 06       		.uleb128 0x6
 2913 0147 40       		.uleb128 0x40
 2914 0148 18       		.uleb128 0x18
 2915 0149 9742     		.uleb128 0x2117
 2916 014b 19       		.uleb128 0x19
 2917 014c 00       		.byte	0
 2918 014d 00       		.byte	0
 2919 014e 15       		.uleb128 0x15
 2920 014f 2E       		.uleb128 0x2e
 2921 0150 00       		.byte	0
 2922 0151 3F       		.uleb128 0x3f
 2923 0152 19       		.uleb128 0x19
 2924 0153 03       		.uleb128 0x3
 2925 0154 0E       		.uleb128 0xe
 2926 0155 3A       		.uleb128 0x3a
 2927 0156 0B       		.uleb128 0xb
 2928 0157 3B       		.uleb128 0x3b
 2929 0158 05       		.uleb128 0x5
 2930 0159 49       		.uleb128 0x49
 2931 015a 13       		.uleb128 0x13
 2932 015b 11       		.uleb128 0x11
 2933 015c 01       		.uleb128 0x1
 2934 015d 12       		.uleb128 0x12
 2935 015e 06       		.uleb128 0x6
 2936 015f 40       		.uleb128 0x40
 2937 0160 18       		.uleb128 0x18
 2938 0161 9742     		.uleb128 0x2117
 2939 0163 19       		.uleb128 0x19
 2940 0164 00       		.byte	0
 2941 0165 00       		.byte	0
 2942 0166 16       		.uleb128 0x16
 2943 0167 2E       		.uleb128 0x2e
 2944 0168 01       		.byte	0x1
 2945 0169 3F       		.uleb128 0x3f
 2946 016a 19       		.uleb128 0x19
 2947 016b 03       		.uleb128 0x3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 65


 2948 016c 0E       		.uleb128 0xe
 2949 016d 3A       		.uleb128 0x3a
 2950 016e 0B       		.uleb128 0xb
 2951 016f 3B       		.uleb128 0x3b
 2952 0170 05       		.uleb128 0x5
 2953 0171 49       		.uleb128 0x49
 2954 0172 13       		.uleb128 0x13
 2955 0173 11       		.uleb128 0x11
 2956 0174 01       		.uleb128 0x1
 2957 0175 12       		.uleb128 0x12
 2958 0176 06       		.uleb128 0x6
 2959 0177 40       		.uleb128 0x40
 2960 0178 18       		.uleb128 0x18
 2961 0179 9642     		.uleb128 0x2116
 2962 017b 19       		.uleb128 0x19
 2963 017c 01       		.uleb128 0x1
 2964 017d 13       		.uleb128 0x13
 2965 017e 00       		.byte	0
 2966 017f 00       		.byte	0
 2967 0180 17       		.uleb128 0x17
 2968 0181 34       		.uleb128 0x34
 2969 0182 00       		.byte	0
 2970 0183 03       		.uleb128 0x3
 2971 0184 0E       		.uleb128 0xe
 2972 0185 3A       		.uleb128 0x3a
 2973 0186 0B       		.uleb128 0xb
 2974 0187 3B       		.uleb128 0x3b
 2975 0188 05       		.uleb128 0x5
 2976 0189 49       		.uleb128 0x49
 2977 018a 13       		.uleb128 0x13
 2978 018b 02       		.uleb128 0x2
 2979 018c 18       		.uleb128 0x18
 2980 018d 00       		.byte	0
 2981 018e 00       		.byte	0
 2982 018f 18       		.uleb128 0x18
 2983 0190 2E       		.uleb128 0x2e
 2984 0191 00       		.byte	0
 2985 0192 3F       		.uleb128 0x3f
 2986 0193 19       		.uleb128 0x19
 2987 0194 03       		.uleb128 0x3
 2988 0195 0E       		.uleb128 0xe
 2989 0196 3A       		.uleb128 0x3a
 2990 0197 0B       		.uleb128 0xb
 2991 0198 3B       		.uleb128 0x3b
 2992 0199 05       		.uleb128 0x5
 2993 019a 11       		.uleb128 0x11
 2994 019b 01       		.uleb128 0x1
 2995 019c 12       		.uleb128 0x12
 2996 019d 06       		.uleb128 0x6
 2997 019e 40       		.uleb128 0x40
 2998 019f 18       		.uleb128 0x18
 2999 01a0 9742     		.uleb128 0x2117
 3000 01a2 19       		.uleb128 0x19
 3001 01a3 00       		.byte	0
 3002 01a4 00       		.byte	0
 3003 01a5 19       		.uleb128 0x19
 3004 01a6 2E       		.uleb128 0x2e
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 66


 3005 01a7 01       		.byte	0x1
 3006 01a8 3F       		.uleb128 0x3f
 3007 01a9 19       		.uleb128 0x19
 3008 01aa 03       		.uleb128 0x3
 3009 01ab 0E       		.uleb128 0xe
 3010 01ac 3A       		.uleb128 0x3a
 3011 01ad 0B       		.uleb128 0xb
 3012 01ae 3B       		.uleb128 0x3b
 3013 01af 05       		.uleb128 0x5
 3014 01b0 27       		.uleb128 0x27
 3015 01b1 19       		.uleb128 0x19
 3016 01b2 49       		.uleb128 0x49
 3017 01b3 13       		.uleb128 0x13
 3018 01b4 11       		.uleb128 0x11
 3019 01b5 01       		.uleb128 0x1
 3020 01b6 12       		.uleb128 0x12
 3021 01b7 06       		.uleb128 0x6
 3022 01b8 40       		.uleb128 0x40
 3023 01b9 18       		.uleb128 0x18
 3024 01ba 9742     		.uleb128 0x2117
 3025 01bc 19       		.uleb128 0x19
 3026 01bd 01       		.uleb128 0x1
 3027 01be 13       		.uleb128 0x13
 3028 01bf 00       		.byte	0
 3029 01c0 00       		.byte	0
 3030 01c1 1A       		.uleb128 0x1a
 3031 01c2 05       		.uleb128 0x5
 3032 01c3 00       		.byte	0
 3033 01c4 03       		.uleb128 0x3
 3034 01c5 0E       		.uleb128 0xe
 3035 01c6 3A       		.uleb128 0x3a
 3036 01c7 0B       		.uleb128 0xb
 3037 01c8 3B       		.uleb128 0x3b
 3038 01c9 05       		.uleb128 0x5
 3039 01ca 49       		.uleb128 0x49
 3040 01cb 13       		.uleb128 0x13
 3041 01cc 02       		.uleb128 0x2
 3042 01cd 18       		.uleb128 0x18
 3043 01ce 00       		.byte	0
 3044 01cf 00       		.byte	0
 3045 01d0 1B       		.uleb128 0x1b
 3046 01d1 34       		.uleb128 0x34
 3047 01d2 00       		.byte	0
 3048 01d3 03       		.uleb128 0x3
 3049 01d4 08       		.uleb128 0x8
 3050 01d5 3A       		.uleb128 0x3a
 3051 01d6 0B       		.uleb128 0xb
 3052 01d7 3B       		.uleb128 0x3b
 3053 01d8 05       		.uleb128 0x5
 3054 01d9 49       		.uleb128 0x49
 3055 01da 13       		.uleb128 0x13
 3056 01db 02       		.uleb128 0x2
 3057 01dc 18       		.uleb128 0x18
 3058 01dd 00       		.byte	0
 3059 01de 00       		.byte	0
 3060 01df 1C       		.uleb128 0x1c
 3061 01e0 0F       		.uleb128 0xf
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 67


 3062 01e1 00       		.byte	0
 3063 01e2 0B       		.uleb128 0xb
 3064 01e3 0B       		.uleb128 0xb
 3065 01e4 49       		.uleb128 0x49
 3066 01e5 13       		.uleb128 0x13
 3067 01e6 00       		.byte	0
 3068 01e7 00       		.byte	0
 3069 01e8 1D       		.uleb128 0x1d
 3070 01e9 2E       		.uleb128 0x2e
 3071 01ea 00       		.byte	0
 3072 01eb 3F       		.uleb128 0x3f
 3073 01ec 19       		.uleb128 0x19
 3074 01ed 03       		.uleb128 0x3
 3075 01ee 0E       		.uleb128 0xe
 3076 01ef 3A       		.uleb128 0x3a
 3077 01f0 0B       		.uleb128 0xb
 3078 01f1 3B       		.uleb128 0x3b
 3079 01f2 05       		.uleb128 0x5
 3080 01f3 11       		.uleb128 0x11
 3081 01f4 01       		.uleb128 0x1
 3082 01f5 12       		.uleb128 0x12
 3083 01f6 06       		.uleb128 0x6
 3084 01f7 40       		.uleb128 0x40
 3085 01f8 18       		.uleb128 0x18
 3086 01f9 9642     		.uleb128 0x2116
 3087 01fb 19       		.uleb128 0x19
 3088 01fc 00       		.byte	0
 3089 01fd 00       		.byte	0
 3090 01fe 1E       		.uleb128 0x1e
 3091 01ff 34       		.uleb128 0x34
 3092 0200 00       		.byte	0
 3093 0201 03       		.uleb128 0x3
 3094 0202 0E       		.uleb128 0xe
 3095 0203 3A       		.uleb128 0x3a
 3096 0204 0B       		.uleb128 0xb
 3097 0205 3B       		.uleb128 0x3b
 3098 0206 05       		.uleb128 0x5
 3099 0207 49       		.uleb128 0x49
 3100 0208 13       		.uleb128 0x13
 3101 0209 3F       		.uleb128 0x3f
 3102 020a 19       		.uleb128 0x19
 3103 020b 3C       		.uleb128 0x3c
 3104 020c 19       		.uleb128 0x19
 3105 020d 00       		.byte	0
 3106 020e 00       		.byte	0
 3107 020f 1F       		.uleb128 0x1f
 3108 0210 35       		.uleb128 0x35
 3109 0211 00       		.byte	0
 3110 0212 49       		.uleb128 0x49
 3111 0213 13       		.uleb128 0x13
 3112 0214 00       		.byte	0
 3113 0215 00       		.byte	0
 3114 0216 20       		.uleb128 0x20
 3115 0217 34       		.uleb128 0x34
 3116 0218 00       		.byte	0
 3117 0219 03       		.uleb128 0x3
 3118 021a 08       		.uleb128 0x8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 68


 3119 021b 3A       		.uleb128 0x3a
 3120 021c 0B       		.uleb128 0xb
 3121 021d 3B       		.uleb128 0x3b
 3122 021e 0B       		.uleb128 0xb
 3123 021f 49       		.uleb128 0x49
 3124 0220 13       		.uleb128 0x13
 3125 0221 3F       		.uleb128 0x3f
 3126 0222 19       		.uleb128 0x19
 3127 0223 02       		.uleb128 0x2
 3128 0224 18       		.uleb128 0x18
 3129 0225 00       		.byte	0
 3130 0226 00       		.byte	0
 3131 0227 21       		.uleb128 0x21
 3132 0228 34       		.uleb128 0x34
 3133 0229 00       		.byte	0
 3134 022a 03       		.uleb128 0x3
 3135 022b 0E       		.uleb128 0xe
 3136 022c 3A       		.uleb128 0x3a
 3137 022d 0B       		.uleb128 0xb
 3138 022e 3B       		.uleb128 0x3b
 3139 022f 0B       		.uleb128 0xb
 3140 0230 49       		.uleb128 0x49
 3141 0231 13       		.uleb128 0x13
 3142 0232 3F       		.uleb128 0x3f
 3143 0233 19       		.uleb128 0x19
 3144 0234 02       		.uleb128 0x2
 3145 0235 18       		.uleb128 0x18
 3146 0236 00       		.byte	0
 3147 0237 00       		.byte	0
 3148 0238 22       		.uleb128 0x22
 3149 0239 01       		.uleb128 0x1
 3150 023a 01       		.byte	0x1
 3151 023b 49       		.uleb128 0x49
 3152 023c 13       		.uleb128 0x13
 3153 023d 01       		.uleb128 0x1
 3154 023e 13       		.uleb128 0x13
 3155 023f 00       		.byte	0
 3156 0240 00       		.byte	0
 3157 0241 23       		.uleb128 0x23
 3158 0242 21       		.uleb128 0x21
 3159 0243 00       		.byte	0
 3160 0244 49       		.uleb128 0x49
 3161 0245 13       		.uleb128 0x13
 3162 0246 2F       		.uleb128 0x2f
 3163 0247 0B       		.uleb128 0xb
 3164 0248 00       		.byte	0
 3165 0249 00       		.byte	0
 3166 024a 24       		.uleb128 0x24
 3167 024b 34       		.uleb128 0x34
 3168 024c 00       		.byte	0
 3169 024d 03       		.uleb128 0x3
 3170 024e 08       		.uleb128 0x8
 3171 024f 3A       		.uleb128 0x3a
 3172 0250 0B       		.uleb128 0xb
 3173 0251 3B       		.uleb128 0x3b
 3174 0252 0B       		.uleb128 0xb
 3175 0253 49       		.uleb128 0x49
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 69


 3176 0254 13       		.uleb128 0x13
 3177 0255 3F       		.uleb128 0x3f
 3178 0256 19       		.uleb128 0x19
 3179 0257 3C       		.uleb128 0x3c
 3180 0258 19       		.uleb128 0x19
 3181 0259 00       		.byte	0
 3182 025a 00       		.byte	0
 3183 025b 25       		.uleb128 0x25
 3184 025c 34       		.uleb128 0x34
 3185 025d 00       		.byte	0
 3186 025e 03       		.uleb128 0x3
 3187 025f 0E       		.uleb128 0xe
 3188 0260 3A       		.uleb128 0x3a
 3189 0261 0B       		.uleb128 0xb
 3190 0262 3B       		.uleb128 0x3b
 3191 0263 0B       		.uleb128 0xb
 3192 0264 49       		.uleb128 0x49
 3193 0265 13       		.uleb128 0x13
 3194 0266 3F       		.uleb128 0x3f
 3195 0267 19       		.uleb128 0x19
 3196 0268 3C       		.uleb128 0x3c
 3197 0269 19       		.uleb128 0x19
 3198 026a 00       		.byte	0
 3199 026b 00       		.byte	0
 3200 026c 26       		.uleb128 0x26
 3201 026d 34       		.uleb128 0x34
 3202 026e 00       		.byte	0
 3203 026f 03       		.uleb128 0x3
 3204 0270 0E       		.uleb128 0xe
 3205 0271 3A       		.uleb128 0x3a
 3206 0272 0B       		.uleb128 0xb
 3207 0273 3B       		.uleb128 0x3b
 3208 0274 05       		.uleb128 0x5
 3209 0275 49       		.uleb128 0x49
 3210 0276 13       		.uleb128 0x13
 3211 0277 3F       		.uleb128 0x3f
 3212 0278 19       		.uleb128 0x19
 3213 0279 02       		.uleb128 0x2
 3214 027a 18       		.uleb128 0x18
 3215 027b 00       		.byte	0
 3216 027c 00       		.byte	0
 3217 027d 00       		.byte	0
 3218              		.section	.debug_aranges,"",%progbits
 3219 0000 84000000 		.4byte	0x84
 3220 0004 0200     		.2byte	0x2
 3221 0006 00000000 		.4byte	.Ldebug_info0
 3222 000a 04       		.byte	0x4
 3223 000b 00       		.byte	0
 3224 000c 0000     		.2byte	0
 3225 000e 0000     		.2byte	0
 3226 0010 00000000 		.4byte	.LFB64
 3227 0014 EC000000 		.4byte	.LFE64-.LFB64
 3228 0018 00000000 		.4byte	.LFB65
 3229 001c 18000000 		.4byte	.LFE65-.LFB65
 3230 0020 00000000 		.4byte	.LFB66
 3231 0024 18000000 		.4byte	.LFE66-.LFB66
 3232 0028 00000000 		.4byte	.LFB67
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 70


 3233 002c 18000000 		.4byte	.LFE67-.LFB67
 3234 0030 00000000 		.4byte	.LFB68
 3235 0034 18000000 		.4byte	.LFE68-.LFB68
 3236 0038 00000000 		.4byte	.LFB69
 3237 003c 38000000 		.4byte	.LFE69-.LFB69
 3238 0040 00000000 		.4byte	.LFB70
 3239 0044 C0000000 		.4byte	.LFE70-.LFB70
 3240 0048 00000000 		.4byte	.LFB71
 3241 004c 54000000 		.4byte	.LFE71-.LFB71
 3242 0050 00000000 		.4byte	.LFB72
 3243 0054 34000000 		.4byte	.LFE72-.LFB72
 3244 0058 00000000 		.4byte	.LFB73
 3245 005c 70000000 		.4byte	.LFE73-.LFB73
 3246 0060 00000000 		.4byte	.LFB74
 3247 0064 44020000 		.4byte	.LFE74-.LFB74
 3248 0068 00000000 		.4byte	.LFB75
 3249 006c 1C000000 		.4byte	.LFE75-.LFB75
 3250 0070 00000000 		.4byte	.LFB76
 3251 0074 A4000000 		.4byte	.LFE76-.LFB76
 3252 0078 00000000 		.4byte	.LFB77
 3253 007c C4000000 		.4byte	.LFE77-.LFB77
 3254 0080 00000000 		.4byte	0
 3255 0084 00000000 		.4byte	0
 3256              		.section	.debug_ranges,"",%progbits
 3257              	.Ldebug_ranges0:
 3258 0000 00000000 		.4byte	.LFB64
 3259 0004 EC000000 		.4byte	.LFE64
 3260 0008 00000000 		.4byte	.LFB65
 3261 000c 18000000 		.4byte	.LFE65
 3262 0010 00000000 		.4byte	.LFB66
 3263 0014 18000000 		.4byte	.LFE66
 3264 0018 00000000 		.4byte	.LFB67
 3265 001c 18000000 		.4byte	.LFE67
 3266 0020 00000000 		.4byte	.LFB68
 3267 0024 18000000 		.4byte	.LFE68
 3268 0028 00000000 		.4byte	.LFB69
 3269 002c 38000000 		.4byte	.LFE69
 3270 0030 00000000 		.4byte	.LFB70
 3271 0034 C0000000 		.4byte	.LFE70
 3272 0038 00000000 		.4byte	.LFB71
 3273 003c 54000000 		.4byte	.LFE71
 3274 0040 00000000 		.4byte	.LFB72
 3275 0044 34000000 		.4byte	.LFE72
 3276 0048 00000000 		.4byte	.LFB73
 3277 004c 70000000 		.4byte	.LFE73
 3278 0050 00000000 		.4byte	.LFB74
 3279 0054 44020000 		.4byte	.LFE74
 3280 0058 00000000 		.4byte	.LFB75
 3281 005c 1C000000 		.4byte	.LFE75
 3282 0060 00000000 		.4byte	.LFB76
 3283 0064 A4000000 		.4byte	.LFE76
 3284 0068 00000000 		.4byte	.LFB77
 3285 006c C4000000 		.4byte	.LFE77
 3286 0070 00000000 		.4byte	0
 3287 0074 00000000 		.4byte	0
 3288              		.section	.debug_line,"",%progbits
 3289              	.Ldebug_line0:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 71


 3290 0000 4D030000 		.section	.debug_str,"MS",%progbits,1
 3290      02007001 
 3290      00000201 
 3290      FB0E0D00 
 3290      01010101 
 3291              	.LASF47:
 3292 0000 64697265 		.ascii	"direction\000"
 3292      6374696F 
 3292      6E00
 3293              	.LASF64:
 3294 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3294      61726441 
 3294      66746572 
 3294      5475726E 
 3294      00
 3295              	.LASF50:
 3296 001b 496E7374 		.ascii	"InstructionDirection\000"
 3296      72756374 
 3296      696F6E44 
 3296      69726563 
 3296      74696F6E 
 3297              	.LASF130:
 3298 0030 6D61696E 		.ascii	"main.c\000"
 3298      2E6300
 3299              	.LASF76:
 3300 0037 626C6F63 		.ascii	"blocksize\000"
 3300      6B73697A 
 3300      6500
 3301              	.LASF115:
 3302 0041 62756666 		.ascii	"buffer\000"
 3302      657200
 3303              	.LASF8:
 3304 0048 756E7369 		.ascii	"unsigned int\000"
 3304      676E6564 
 3304      20696E74 
 3304      00
 3305              	.LASF12:
 3306 0055 5F5F696E 		.ascii	"__int32_t\000"
 3306      7433325F 
 3306      7400
 3307              	.LASF18:
 3308 005f 696E7431 		.ascii	"int16\000"
 3308      3600
 3309              	.LASF106:
 3310 0065 73797374 		.ascii	"system_state\000"
 3310      656D5F73 
 3310      74617465 
 3310      00
 3311              	.LASF86:
 3312 0072 6E657874 		.ascii	"nextInstruction\000"
 3312      496E7374 
 3312      72756374 
 3312      696F6E00 
 3313              	.LASF129:
 3314 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3314      43313120 
 3314      352E342E 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 72


 3314      31203230 
 3314      31363036 
 3315 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3315      20726576 
 3315      6973696F 
 3315      6E203233 
 3315      37373135 
 3316 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3316      66756E63 
 3316      74696F6E 
 3316      2D736563 
 3316      74696F6E 
 3317              	.LASF69:
 3318 0110 53365F44 		.ascii	"S6_DETECTED\000"
 3318      45544543 
 3318      54454400 
 3319              	.LASF114:
 3320 011c 746F7461 		.ascii	"totalDistance\000"
 3320      6C446973 
 3320      74616E63 
 3320      6500
 3321              	.LASF34:
 3322 012a 67325F78 		.ascii	"g2_xpos\000"
 3322      706F7300 
 3323              	.LASF121:
 3324 0132 666F7277 		.ascii	"forwardUntilTargetStartedFlag\000"
 3324      61726455 
 3324      6E74696C 
 3324      54617267 
 3324      65745374 
 3325              	.LASF83:
 3326 0150 6E756D53 		.ascii	"numSteps\000"
 3326      74657073 
 3326      00
 3327              	.LASF75:
 3328 0159 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 3328      6F76656D 
 3328      656E7441 
 3328      63636F72 
 3328      64696E67 
 3329              	.LASF101:
 3330 017b 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3330      5F72665F 
 3330      7472616E 
 3330      736D6973 
 3330      73696F6E 
 3331              	.LASF73:
 3332 0197 466F7277 		.ascii	"ForwardCourseCorrection\000"
 3332      61726443 
 3332      6F757273 
 3332      65436F72 
 3332      72656374 
 3333              	.LASF110:
 3334 01af 63757272 		.ascii	"currentRobotOrientation\000"
 3334      656E7452 
 3334      6F626F74 
 3334      4F726965 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 73


 3334      6E746174 
 3335              	.LASF78:
 3336 01c7 52657365 		.ascii	"ResetSensorFlags\000"
 3336      7453656E 
 3336      736F7246 
 3336      6C616773 
 3336      00
 3337              	.LASF37:
 3338 01d8 67325F64 		.ascii	"g2_direction\000"
 3338      69726563 
 3338      74696F6E 
 3338      00
 3339              	.LASF116:
 3340 01e5 71756164 		.ascii	"quadDec2Count\000"
 3340      44656332 
 3340      436F756E 
 3340      7400
 3341              	.LASF19:
 3342 01f3 666C6F61 		.ascii	"float\000"
 3342      7400
 3343              	.LASF77:
 3344 01f9 63757272 		.ascii	"currentInstructionDirection\000"
 3344      656E7449 
 3344      6E737472 
 3344      75637469 
 3344      6F6E4469 
 3345              	.LASF105:
 3346 0215 75736242 		.ascii	"usbBuffer\000"
 3346      75666665 
 3346      7200
 3347              	.LASF82:
 3348 021f 636F756E 		.ascii	"count\000"
 3348      7400
 3349              	.LASF22:
 3350 0225 696E6465 		.ascii	"index\000"
 3350      7800
 3351              	.LASF7:
 3352 022b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3352      206C6F6E 
 3352      6720756E 
 3352      7369676E 
 3352      65642069 
 3353              	.LASF46:
 3354 0242 496E7374 		.ascii	"Instruction\000"
 3354      72756374 
 3354      696F6E00 
 3355              	.LASF98:
 3356 024e 666C6167 		.ascii	"flag_packet\000"
 3356      5F706163 
 3356      6B657400 
 3357              	.LASF87:
 3358 025a 53657452 		.ascii	"SetRobotMovement\000"
 3358      6F626F74 
 3358      4D6F7665 
 3358      6D656E74 
 3358      00
 3359              	.LASF70:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 74


 3360 026b 54494D45 		.ascii	"TIMER_FINISH\000"
 3360      525F4649 
 3360      4E495348 
 3360      00
 3361              	.LASF118:
 3362 0278 6B656570 		.ascii	"keepLedOn\000"
 3362      4C65644F 
 3362      6E00
 3363              	.LASF42:
 3364 0282 466F7277 		.ascii	"ForwardUntilTarget\000"
 3364      61726455 
 3364      6E74696C 
 3364      54617267 
 3364      657400
 3365              	.LASF94:
 3366 0295 666C6167 		.ascii	"flag_ts_update\000"
 3366      5F74735F 
 3366      75706461 
 3366      746500
 3367              	.LASF93:
 3368 02a4 666C6167 		.ascii	"flag_ts_enc\000"
 3368      5F74735F 
 3368      656E6300 
 3369              	.LASF80:
 3370 02b0 71756164 		.ascii	"quadCountToRPM\000"
 3370      436F756E 
 3370      74546F52 
 3370      504D00
 3371              	.LASF128:
 3372 02bf 69676E6F 		.ascii	"ignoreSensor\000"
 3372      72655365 
 3372      6E736F72 
 3372      00
 3373              	.LASF43:
 3374 02cc 53746F70 		.ascii	"StopAtTarget\000"
 3374      41745461 
 3374      72676574 
 3374      00
 3375              	.LASF63:
 3376 02d9 77616974 		.ascii	"waitForTurn\000"
 3376      466F7254 
 3376      75726E00 
 3377              	.LASF24:
 3378 02e5 726F626F 		.ascii	"robot_ypos\000"
 3378      745F7970 
 3378      6F7300
 3379              	.LASF92:
 3380 02f0 74735F64 		.ascii	"ts_display\000"
 3380      6973706C 
 3380      617900
 3381              	.LASF11:
 3382 02fb 63686172 		.ascii	"char\000"
 3382      00
 3383              	.LASF28:
 3384 0300 67305F73 		.ascii	"g0_speed\000"
 3384      70656564 
 3384      00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 75


 3385              	.LASF84:
 3386 0309 696E7374 		.ascii	"instructionList\000"
 3386      72756374 
 3386      696F6E4C 
 3386      69737400 
 3387              	.LASF85:
 3388 0319 696E7374 		.ascii	"instructionIndex\000"
 3388      72756374 
 3388      696F6E49 
 3388      6E646578 
 3388      00
 3389              	.LASF15:
 3390 032a 75696E74 		.ascii	"uint16\000"
 3390      313600
 3391              	.LASF17:
 3392 0331 696E7438 		.ascii	"int8\000"
 3392      00
 3393              	.LASF123:
 3394 0336 78426C6F 		.ascii	"xBlocksize\000"
 3394      636B7369 
 3394      7A6500
 3395              	.LASF33:
 3396 0341 67315F64 		.ascii	"g1_direction\000"
 3396      69726563 
 3396      74696F6E 
 3396      00
 3397              	.LASF53:
 3398 034e 4C656674 		.ascii	"Left\000"
 3398      00
 3399              	.LASF74:
 3400 0353 73706565 		.ascii	"speedTimer\000"
 3400      6454696D 
 3400      657200
 3401              	.LASF120:
 3402 035e 7475726E 		.ascii	"turnFinishedFlag\000"
 3402      46696E69 
 3402      73686564 
 3402      466C6167 
 3402      00
 3403              	.LASF39:
 3404 036f 77616974 		.ascii	"waitForLeftTurn\000"
 3404      466F724C 
 3404      65667454 
 3404      75726E00 
 3405              	.LASF6:
 3406 037f 6C6F6E67 		.ascii	"long long int\000"
 3406      206C6F6E 
 3406      6720696E 
 3406      7400
 3407              	.LASF30:
 3408 038d 67315F78 		.ascii	"g1_xpos\000"
 3408      706F7300 
 3409              	.LASF122:
 3410 0395 626C6F63 		.ascii	"blockSizeTotal\000"
 3410      6B53697A 
 3410      65546F74 
 3410      616C00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 76


 3411              	.LASF111:
 3412 03a4 70726576 		.ascii	"previousOrientation\000"
 3412      696F7573 
 3412      4F726965 
 3412      6E746174 
 3412      696F6E00 
 3413              	.LASF41:
 3414 03b8 75547572 		.ascii	"uTurn\000"
 3414      6E00
 3415              	.LASF72:
 3416 03be 6E657744 		.ascii	"newDistance\000"
 3416      69737461 
 3416      6E636500 
 3417              	.LASF36:
 3418 03ca 67325F73 		.ascii	"g2_speed\000"
 3418      70656564 
 3418      00
 3419              	.LASF27:
 3420 03d3 67305F79 		.ascii	"g0_ypos\000"
 3420      706F7300 
 3421              	.LASF107:
 3422 03db 666F6F64 		.ascii	"food_list\000"
 3422      5F6C6973 
 3422      7400
 3423              	.LASF58:
 3424 03e5 5475726E 		.ascii	"TurnLeft\000"
 3424      4C656674 
 3424      00
 3425              	.LASF91:
 3426 03ee 74735F73 		.ascii	"ts_speed\000"
 3426      70656564 
 3426      00
 3427              	.LASF62:
 3428 03f7 556E6B6E 		.ascii	"Unknown\000"
 3428      6F776E00 
 3429              	.LASF16:
 3430 03ff 75696E74 		.ascii	"uint32\000"
 3430      333200
 3431              	.LASF40:
 3432 0406 77616974 		.ascii	"waitForRightTurn\000"
 3432      466F7252 
 3432      69676874 
 3432      5475726E 
 3432      00
 3433              	.LASF57:
 3434 0417 5475726E 		.ascii	"TurnRight\000"
 3434      52696768 
 3434      7400
 3435              	.LASF45:
 3436 0421 64617461 		.ascii	"data_main\000"
 3436      5F6D6169 
 3436      6E00
 3437              	.LASF21:
 3438 042b 72737369 		.ascii	"rssi\000"
 3438      00
 3439              	.LASF29:
 3440 0430 67305F64 		.ascii	"g0_direction\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 77


 3440      69726563 
 3440      74696F6E 
 3440      00
 3441              	.LASF109:
 3442 043d 70726576 		.ascii	"previousDirection\000"
 3442      696F7573 
 3442      44697265 
 3442      6374696F 
 3442      6E00
 3443              	.LASF9:
 3444 044f 6C6F6E67 		.ascii	"long double\000"
 3444      20646F75 
 3444      626C6500 
 3445              	.LASF95:
 3446 045b 666C6167 		.ascii	"flag_ts_speed\000"
 3446      5F74735F 
 3446      73706565 
 3446      6400
 3447              	.LASF100:
 3448 0469 64617461 		.ascii	"dataready_flag\000"
 3448      72656164 
 3448      795F666C 
 3448      616700
 3449              	.LASF97:
 3450 0478 666C6167 		.ascii	"flag_rx\000"
 3450      5F727800 
 3451              	.LASF124:
 3452 0480 79426C6F 		.ascii	"yBlocksize\000"
 3452      636B7369 
 3452      7A6500
 3453              	.LASF2:
 3454 048b 73686F72 		.ascii	"short int\000"
 3454      7420696E 
 3454      7400
 3455              	.LASF67:
 3456 0495 53345F44 		.ascii	"S4_DETECTED\000"
 3456      45544543 
 3456      54454400 
 3457              	.LASF66:
 3458 04a1 53335F44 		.ascii	"S3_DETECTED\000"
 3458      45544543 
 3458      54454400 
 3459              	.LASF4:
 3460 04ad 6C6F6E67 		.ascii	"long int\000"
 3460      20696E74 
 3460      00
 3461              	.LASF88:
 3462 04b6 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3462      52784275 
 3462      66666572 
 3462      00
 3463              	.LASF90:
 3464 04c3 74735F75 		.ascii	"ts_update\000"
 3464      70646174 
 3464      6500
 3465              	.LASF56:
 3466 04cd 466F7277 		.ascii	"Forward\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 78


 3466      61726400 
 3467              	.LASF113:
 3468 04d5 746F7461 		.ascii	"totalMilliseconds\000"
 3468      6C4D696C 
 3468      6C697365 
 3468      636F6E64 
 3468      7300
 3469              	.LASF35:
 3470 04e7 67325F79 		.ascii	"g2_ypos\000"
 3470      706F7300 
 3471              	.LASF79:
 3472 04ef 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 3472      546F4E65 
 3472      7874496E 
 3472      73747275 
 3472      6374696F 
 3473              	.LASF51:
 3474 0505 4F726965 		.ascii	"OrientationState\000"
 3474      6E746174 
 3474      696F6E53 
 3474      74617465 
 3474      00
 3475              	.LASF52:
 3476 0516 446F776E 		.ascii	"Down\000"
 3476      00
 3477              	.LASF54:
 3478 051b 52696768 		.ascii	"Right\000"
 3478      7400
 3479              	.LASF31:
 3480 0521 67315F79 		.ascii	"g1_ypos\000"
 3480      706F7300 
 3481              	.LASF108:
 3482 0529 63757272 		.ascii	"currentDirection\000"
 3482      656E7444 
 3482      69726563 
 3482      74696F6E 
 3482      00
 3483              	.LASF131:
 3484 053a 483A5C33 		.ascii	"H:\\301-Robot\\psoc student pack\\psoc_code_base\\C"
 3484      30312D52 
 3484      6F626F74 
 3484      5C70736F 
 3484      63207374 
 3485 0569 53333031 		.ascii	"S301_Class.cydsn\000"
 3485      5F436C61 
 3485      73732E63 
 3485      7964736E 
 3485      00
 3486              	.LASF10:
 3487 057a 73697A65 		.ascii	"sizetype\000"
 3487      74797065 
 3487      00
 3488              	.LASF5:
 3489 0583 6C6F6E67 		.ascii	"long unsigned int\000"
 3489      20756E73 
 3489      69676E65 
 3489      6420696E 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 79


 3489      7400
 3490              	.LASF119:
 3491 0595 73746F70 		.ascii	"stopBuffer\000"
 3491      42756666 
 3491      657200
 3492              	.LASF13:
 3493 05a0 696E7433 		.ascii	"int32_t\000"
 3493      325F7400 
 3494              	.LASF23:
 3495 05a8 726F626F 		.ascii	"robot_xpos\000"
 3495      745F7870 
 3495      6F7300
 3496              	.LASF104:
 3497 05b3 656E7472 		.ascii	"entry\000"
 3497      7900
 3498              	.LASF55:
 3499 05b9 526F626F 		.ascii	"RobotMovement\000"
 3499      744D6F76 
 3499      656D656E 
 3499      7400
 3500              	.LASF1:
 3501 05c7 756E7369 		.ascii	"unsigned char\000"
 3501      676E6564 
 3501      20636861 
 3501      7200
 3502              	.LASF127:
 3503 05d5 73746F70 		.ascii	"stoppedAfterTurn\000"
 3503      70656441 
 3503      66746572 
 3503      5475726E 
 3503      00
 3504              	.LASF103:
 3505 05e6 6C696E65 		.ascii	"line\000"
 3505      00
 3506              	.LASF60:
 3507 05eb 41646A75 		.ascii	"AdjustToTheRight\000"
 3507      7374546F 
 3507      54686552 
 3507      69676874 
 3507      00
 3508              	.LASF61:
 3509 05fc 53746F70 		.ascii	"Stop\000"
 3509      00
 3510              	.LASF81:
 3511 0601 47657449 		.ascii	"GetInstructionAtIndex\000"
 3511      6E737472 
 3511      75637469 
 3511      6F6E4174 
 3511      496E6465 
 3512              	.LASF89:
 3513 0617 74735F65 		.ascii	"ts_enc\000"
 3513      6E6300
 3514              	.LASF96:
 3515 061e 666C6167 		.ascii	"flag_ts_display\000"
 3515      5F74735F 
 3515      64697370 
 3515      6C617900 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 80


 3516              	.LASF44:
 3517 062e 536B6970 		.ascii	"Skip\000"
 3517      00
 3518              	.LASF102:
 3519 0633 64697370 		.ascii	"displaystring\000"
 3519      6C617973 
 3519      7472696E 
 3519      6700
 3520              	.LASF38:
 3521 0641 476F466F 		.ascii	"GoForward\000"
 3521      72776172 
 3521      6400
 3522              	.LASF68:
 3523 064b 53355F44 		.ascii	"S5_DETECTED\000"
 3523      45544543 
 3523      54454400 
 3524              	.LASF0:
 3525 0657 7369676E 		.ascii	"signed char\000"
 3525      65642063 
 3525      68617200 
 3526              	.LASF125:
 3527 0663 63757272 		.ascii	"currentRow\000"
 3527      656E7452 
 3527      6F7700
 3528              	.LASF3:
 3529 066e 73686F72 		.ascii	"short unsigned int\000"
 3529      7420756E 
 3529      7369676E 
 3529      65642069 
 3529      6E7400
 3530              	.LASF25:
 3531 0681 726F626F 		.ascii	"robot_orientation\000"
 3531      745F6F72 
 3531      69656E74 
 3531      6174696F 
 3531      6E00
 3532              	.LASF71:
 3533 0693 6D61696E 		.ascii	"main\000"
 3533      00
 3534              	.LASF112:
 3535 0698 63757272 		.ascii	"currentInstruction\000"
 3535      656E7449 
 3535      6E737472 
 3535      75637469 
 3535      6F6E00
 3536              	.LASF59:
 3537 06ab 41646A75 		.ascii	"AdjustToTheLeft\000"
 3537      7374546F 
 3537      5468654C 
 3537      65667400 
 3538              	.LASF65:
 3539 06bb 4261636B 		.ascii	"Backward\000"
 3539      77617264 
 3539      00
 3540              	.LASF14:
 3541 06c4 75696E74 		.ascii	"uint8\000"
 3541      3800
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccLzCj1a.s 			page 81


 3542              	.LASF20:
 3543 06ca 646F7562 		.ascii	"double\000"
 3543      6C6500
 3544              	.LASF126:
 3545 06d1 63757272 		.ascii	"currentCol\000"
 3545      656E7443 
 3545      6F6C00
 3546              	.LASF26:
 3547 06dc 67305F78 		.ascii	"g0_xpos\000"
 3547      706F7300 
 3548              	.LASF117:
 3549 06e4 74696D65 		.ascii	"timerInt\000"
 3549      72496E74 
 3549      00
 3550              	.LASF99:
 3551 06ed 666C6167 		.ascii	"flag_KB_string\000"
 3551      5F4B425F 
 3551      73747269 
 3551      6E6700
 3552              	.LASF32:
 3553 06fc 67315F73 		.ascii	"g1_speed\000"
 3553      70656564 
 3553      00
 3554              	.LASF48:
 3555 0705 69676E6F 		.ascii	"ignoreL\000"
 3555      72654C00 
 3556              	.LASF49:
 3557 070d 69676E6F 		.ascii	"ignoreR\000"
 3557      72655200 
 3558              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
