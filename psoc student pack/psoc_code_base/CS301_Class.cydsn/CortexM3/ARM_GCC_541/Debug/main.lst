ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentRobotOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 01       		.byte	1
 120              		.comm	currentInstruction,16,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	turnStartedFlag
 176              		.type	turnStartedFlag, %object
 177              		.size	turnStartedFlag, 1
 178              	turnStartedFlag:
 179 0034 00       		.space	1
 180              		.global	turnFinishedFlag
 181              		.type	turnFinishedFlag, %object
 182              		.size	turnFinishedFlag, 1
 183              	turnFinishedFlag:
 184 0035 00       		.space	1
 185              		.global	forwardUntilTargetStartedFlag
 186              		.type	forwardUntilTargetStartedFlag, %object
 187              		.size	forwardUntilTargetStartedFlag, 1
 188              	forwardUntilTargetStartedFlag:
 189 0036 00       		.space	1
 190              		.global	uTurnStartedFlag
 191              		.type	uTurnStartedFlag, %object
 192              		.size	uTurnStartedFlag, 1
 193              	uTurnStartedFlag:
 194 0037 00       		.space	1
 195              		.global	uTurnFinishedFlag
 196              		.type	uTurnFinishedFlag, %object
 197              		.size	uTurnFinishedFlag, 1
 198              	uTurnFinishedFlag:
 199 0038 00       		.space	1
 200              		.global	junctionConfiguration
 201 0039 000000   		.align	2
 202              		.type	junctionConfiguration, %object
 203              		.size	junctionConfiguration, 4
 204              	junctionConfiguration:
 205 003c 00000000 		.space	4
 206              		.global	blockSizeTotal
 207              		.align	2
 208              		.type	blockSizeTotal, %object
 209              		.size	blockSizeTotal, 4
 210              	blockSizeTotal:
 211 0040 00000000 		.space	4
 212              		.global	__aeabi_i2d
 213              		.global	__aeabi_dmul
 214              		.global	__aeabi_ddiv
 215              		.global	__aeabi_d2f
 216              		.global	__aeabi_fadd
 217              		.section	.text.speedTimer,"ax",%progbits
 218              		.align	2
 219              		.global	speedTimer
 220              		.thumb
 221              		.thumb_func
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 5


 222              		.type	speedTimer, %function
 223              	speedTimer:
 224              	.LFB64:
 225              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentRobotOrientation, previousOrientation = Down;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
  34:main.c        **** float CalculateDistanceToTravel(float blockSize);
  35:main.c        **** void MoveToNextInstruction();
  36:main.c        **** // ----------------------------------------
  37:main.c        **** uint8 s3, s4, s5, s6 = 0;
  38:main.c        **** //* ========================================
  39:main.c        **** // Calculating Distance
  40:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  41:main.c        **** 
  42:main.c        **** uint32 totalMilliseconds = 0;
  43:main.c        **** float totalDistance = 0; // in mm
  44:main.c        **** //* ========================================
  45:main.c        **** char buffer[69];
  46:main.c        **** int quadDec2Count = 0;
  47:main.c        **** int timerInt = 0;
  48:main.c        **** int keepLedOn = 0;
  49:main.c        **** // ========================================= FLAGS
  50:main.c        **** uint32 stopBuffer = 0;
  51:main.c        **** 
  52:main.c        **** uint8 turnStartedFlag = 0;
  53:main.c        **** uint8 turnFinishedFlag = 0;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 6


  54:main.c        **** 
  55:main.c        **** uint8 forwardUntilTargetStartedFlag = 0;
  56:main.c        **** uint8 uTurnStartedFlag = 0;
  57:main.c        **** uint8 uTurnFinishedFlag = 0;
  58:main.c        **** 
  59:main.c        **** uint8 junctionConfiguration[4] = {0};
  60:main.c        **** 
  61:main.c        **** float blockSizeTotal = 0;
  62:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  63:main.c        **** 
  64:main.c        **** CY_ISR (speedTimer) {
 226              		.loc 1 64 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 8
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 90B5     		push	{r4, r7, lr}
 231              		.cfi_def_cfa_offset 12
 232              		.cfi_offset 4, -12
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
 235 0002 83B0     		sub	sp, sp, #12
 236              		.cfi_def_cfa_offset 24
 237 0004 00AF     		add	r7, sp, #0
 238              		.cfi_def_cfa_register 7
  65:main.c        ****     timerInt = 1;
 239              		.loc 1 65 0
 240 0006 344B     		ldr	r3, .L4+16
 241 0008 0122     		movs	r2, #1
 242 000a 1A60     		str	r2, [r3]
  66:main.c        ****     //quadDec_M1 used for turning macros
  67:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 243              		.loc 1 67 0
 244 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 245 0010 0346     		mov	r3, r0
 246 0012 1A46     		mov	r2, r3
 247 0014 314B     		ldr	r3, .L4+20
 248 0016 1A60     		str	r2, [r3]
  68:main.c        ****     
  69:main.c        ****     if ((currentDirection == Forward || 
 249              		.loc 1 69 0
 250 0018 314B     		ldr	r3, .L4+24
 251 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 001c 002B     		cmp	r3, #0
 253 001e 13D0     		beq	.L2
  70:main.c        ****         currentDirection == ForwardAfterTurn ||
 254              		.loc 1 70 0 discriminator 1
 255 0020 2F4B     		ldr	r3, .L4+24
 256 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  69:main.c        ****         currentDirection == ForwardAfterTurn ||
 257              		.loc 1 69 0 discriminator 1
 258 0024 082B     		cmp	r3, #8
 259 0026 0FD0     		beq	.L2
  71:main.c        ****         currentDirection == waitForTurn || 
 260              		.loc 1 71 0
 261 0028 2D4B     		ldr	r3, .L4+24
 262 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  70:main.c        ****         currentDirection == ForwardAfterTurn ||
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 7


 263              		.loc 1 70 0
 264 002c 072B     		cmp	r3, #7
 265 002e 0BD0     		beq	.L2
  72:main.c        ****         currentDirection == AdjustToTheLeft ||
 266              		.loc 1 72 0
 267 0030 2B4B     		ldr	r3, .L4+24
 268 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  71:main.c        ****         currentDirection == waitForTurn || 
 269              		.loc 1 71 0
 270 0034 032B     		cmp	r3, #3
 271 0036 07D0     		beq	.L2
  73:main.c        ****         currentDirection == AdjustToTheRight ||
 272              		.loc 1 73 0
 273 0038 294B     		ldr	r3, .L4+24
 274 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  72:main.c        ****         currentDirection == AdjustToTheLeft ||
 275              		.loc 1 72 0
 276 003c 042B     		cmp	r3, #4
 277 003e 03D0     		beq	.L2
  74:main.c        ****         currentDirection == Backward) &&
 278              		.loc 1 74 0
 279 0040 274B     		ldr	r3, .L4+24
 280 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  73:main.c        ****         currentDirection == AdjustToTheRight ||
 281              		.loc 1 73 0
 282 0044 092B     		cmp	r3, #9
 283 0046 34D1     		bne	.L3
 284              	.L2:
  75:main.c        ****         quadDec2Count != 0) {
 285              		.loc 1 75 0
 286 0048 244B     		ldr	r3, .L4+20
 287 004a 1B68     		ldr	r3, [r3]
  74:main.c        ****         currentDirection == Backward) &&
 288              		.loc 1 74 0
 289 004c 002B     		cmp	r3, #0
 290 004e 30D0     		beq	.L3
 291              	.LBB2:
  76:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  77:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 292              		.loc 1 77 0
 293 0050 224B     		ldr	r3, .L4+20
 294 0052 1B68     		ldr	r3, [r3]
 295 0054 002B     		cmp	r3, #0
 296 0056 B8BF     		it	lt
 297 0058 5B42     		rsblt	r3, r3, #0
 298 005a 1846     		mov	r0, r3
 299 005c FFF7FEFF 		bl	__aeabi_i2d
 300 0060 19A3     		adr	r3, .L4
 301 0062 D3E90023 		ldrd	r2, [r3]
 302 0066 FFF7FEFF 		bl	__aeabi_dmul
 303 006a 0346     		mov	r3, r0
 304 006c 0C46     		mov	r4, r1
 305 006e 1846     		mov	r0, r3
 306 0070 2146     		mov	r1, r4
 307 0072 17A3     		adr	r3, .L4+8
 308 0074 D3E90023 		ldrd	r2, [r3]
 309 0078 FFF7FEFF 		bl	__aeabi_dmul
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 8


 310 007c 0346     		mov	r3, r0
 311 007e 0C46     		mov	r4, r1
 312 0080 1846     		mov	r0, r3
 313 0082 2146     		mov	r1, r4
 314 0084 4FF00002 		mov	r2, #0
 315 0088 164B     		ldr	r3, .L4+28
 316 008a FFF7FEFF 		bl	__aeabi_ddiv
 317 008e 0346     		mov	r3, r0
 318 0090 0C46     		mov	r4, r1
 319 0092 1846     		mov	r0, r3
 320 0094 2146     		mov	r1, r4
 321 0096 FFF7FEFF 		bl	__aeabi_d2f
 322 009a 0346     		mov	r3, r0
 323 009c 7B60     		str	r3, [r7, #4]	@ float
  78:main.c        ****         
  79:main.c        ****         totalDistance = totalDistance + newDistance;
 324              		.loc 1 79 0
 325 009e 124B     		ldr	r3, .L4+32
 326 00a0 1B68     		ldr	r3, [r3]	@ float
 327 00a2 7968     		ldr	r1, [r7, #4]	@ float
 328 00a4 1846     		mov	r0, r3
 329 00a6 FFF7FEFF 		bl	__aeabi_fadd
 330 00aa 0346     		mov	r3, r0
 331 00ac 1A46     		mov	r2, r3
 332 00ae 0E4B     		ldr	r3, .L4+32
 333 00b0 1A60     		str	r2, [r3]	@ float
 334              	.L3:
 335              	.LBE2:
  80:main.c        ****     }
  81:main.c        ****     
  82:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 336              		.loc 1 82 0
 337 00b2 0020     		movs	r0, #0
 338 00b4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
  83:main.c        ****     QuadDec_M2_Start(); // restart counter
 339              		.loc 1 83 0
 340 00b8 FFF7FEFF 		bl	QuadDec_M2_Start
  84:main.c        ****     
  85:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 341              		.loc 1 85 0
 342 00bc FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  86:main.c        **** }
 343              		.loc 1 86 0
 344 00c0 00BF     		nop
 345 00c2 0C37     		adds	r7, r7, #12
 346              		.cfi_def_cfa_offset 12
 347 00c4 BD46     		mov	sp, r7
 348              		.cfi_def_cfa_register 13
 349              		@ sp needed
 350 00c6 90BD     		pop	{r4, r7, pc}
 351              	.L5:
 352              		.align	3
 353              	.L4:
 354 00c8 182D4454 		.word	1413754136
 355 00cc FB210940 		.word	1074340347
 356 00d0 00000000 		.word	0
 357 00d4 00205040 		.word	1078992896
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 9


 358 00d8 00000000 		.word	timerInt
 359 00dc 00000000 		.word	quadDec2Count
 360 00e0 00000000 		.word	currentDirection
 361 00e4 00806C40 		.word	1080852480
 362 00e8 00000000 		.word	totalDistance
 363              		.cfi_endproc
 364              	.LFE64:
 365              		.size	speedTimer, .-speedTimer
 366              		.section	.text.S3_DETECTED,"ax",%progbits
 367              		.align	2
 368              		.global	S3_DETECTED
 369              		.thumb
 370              		.thumb_func
 371              		.type	S3_DETECTED, %function
 372              	S3_DETECTED:
 373              	.LFB65:
  87:main.c        **** 
  88:main.c        **** CY_ISR(S3_DETECTED) {
 374              		.loc 1 88 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 0
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378              		@ link register save eliminated.
 379 0000 80B4     		push	{r7}
 380              		.cfi_def_cfa_offset 4
 381              		.cfi_offset 7, -4
 382 0002 00AF     		add	r7, sp, #0
 383              		.cfi_def_cfa_register 7
  89:main.c        ****     // Sensor has detected WHITE
  90:main.c        ****     s3 = 1; // , Black = 0, White = 1
 384              		.loc 1 90 0
 385 0004 034B     		ldr	r3, .L7
 386 0006 0122     		movs	r2, #1
 387 0008 1A70     		strb	r2, [r3]
  91:main.c        ****     //LED_Write(1u);
  92:main.c        **** }
 388              		.loc 1 92 0
 389 000a 00BF     		nop
 390 000c BD46     		mov	sp, r7
 391              		.cfi_def_cfa_register 13
 392              		@ sp needed
 393 000e 80BC     		pop	{r7}
 394              		.cfi_restore 7
 395              		.cfi_def_cfa_offset 0
 396 0010 7047     		bx	lr
 397              	.L8:
 398 0012 00BF     		.align	2
 399              	.L7:
 400 0014 00000000 		.word	s3
 401              		.cfi_endproc
 402              	.LFE65:
 403              		.size	S3_DETECTED, .-S3_DETECTED
 404              		.section	.text.S4_DETECTED,"ax",%progbits
 405              		.align	2
 406              		.global	S4_DETECTED
 407              		.thumb
 408              		.thumb_func
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 10


 409              		.type	S4_DETECTED, %function
 410              	S4_DETECTED:
 411              	.LFB66:
  93:main.c        **** 
  94:main.c        **** CY_ISR(S4_DETECTED) {
 412              		.loc 1 94 0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 0
 415              		@ frame_needed = 1, uses_anonymous_args = 0
 416              		@ link register save eliminated.
 417 0000 80B4     		push	{r7}
 418              		.cfi_def_cfa_offset 4
 419              		.cfi_offset 7, -4
 420 0002 00AF     		add	r7, sp, #0
 421              		.cfi_def_cfa_register 7
  95:main.c        ****     // Sensor has detected WHITE
  96:main.c        ****     s4 = 1; // , Black = 0, White = 1
 422              		.loc 1 96 0
 423 0004 034B     		ldr	r3, .L10
 424 0006 0122     		movs	r2, #1
 425 0008 1A70     		strb	r2, [r3]
  97:main.c        ****     //LED_Write(1u);
  98:main.c        **** }
 426              		.loc 1 98 0
 427 000a 00BF     		nop
 428 000c BD46     		mov	sp, r7
 429              		.cfi_def_cfa_register 13
 430              		@ sp needed
 431 000e 80BC     		pop	{r7}
 432              		.cfi_restore 7
 433              		.cfi_def_cfa_offset 0
 434 0010 7047     		bx	lr
 435              	.L11:
 436 0012 00BF     		.align	2
 437              	.L10:
 438 0014 00000000 		.word	s4
 439              		.cfi_endproc
 440              	.LFE66:
 441              		.size	S4_DETECTED, .-S4_DETECTED
 442              		.section	.text.S5_DETECTED,"ax",%progbits
 443              		.align	2
 444              		.global	S5_DETECTED
 445              		.thumb
 446              		.thumb_func
 447              		.type	S5_DETECTED, %function
 448              	S5_DETECTED:
 449              	.LFB67:
  99:main.c        **** 
 100:main.c        **** CY_ISR(S5_DETECTED) {
 450              		.loc 1 100 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 1, uses_anonymous_args = 0
 454              		@ link register save eliminated.
 455 0000 80B4     		push	{r7}
 456              		.cfi_def_cfa_offset 4
 457              		.cfi_offset 7, -4
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 11


 458 0002 00AF     		add	r7, sp, #0
 459              		.cfi_def_cfa_register 7
 101:main.c        ****     // Sensor has detected WHITE
 102:main.c        ****     s5 = 1; // , Black = 0, White = 1
 460              		.loc 1 102 0
 461 0004 034B     		ldr	r3, .L13
 462 0006 0122     		movs	r2, #1
 463 0008 1A70     		strb	r2, [r3]
 103:main.c        ****     //LED_Write(1u);
 104:main.c        **** }
 464              		.loc 1 104 0
 465 000a 00BF     		nop
 466 000c BD46     		mov	sp, r7
 467              		.cfi_def_cfa_register 13
 468              		@ sp needed
 469 000e 80BC     		pop	{r7}
 470              		.cfi_restore 7
 471              		.cfi_def_cfa_offset 0
 472 0010 7047     		bx	lr
 473              	.L14:
 474 0012 00BF     		.align	2
 475              	.L13:
 476 0014 00000000 		.word	s5
 477              		.cfi_endproc
 478              	.LFE67:
 479              		.size	S5_DETECTED, .-S5_DETECTED
 480              		.section	.text.S6_DETECTED,"ax",%progbits
 481              		.align	2
 482              		.global	S6_DETECTED
 483              		.thumb
 484              		.thumb_func
 485              		.type	S6_DETECTED, %function
 486              	S6_DETECTED:
 487              	.LFB68:
 105:main.c        **** 
 106:main.c        **** CY_ISR(S6_DETECTED) {
 488              		.loc 1 106 0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 1, uses_anonymous_args = 0
 492              		@ link register save eliminated.
 493 0000 80B4     		push	{r7}
 494              		.cfi_def_cfa_offset 4
 495              		.cfi_offset 7, -4
 496 0002 00AF     		add	r7, sp, #0
 497              		.cfi_def_cfa_register 7
 107:main.c        ****     // Sensor has detected WHITE
 108:main.c        ****     s6 = 1; // , Black = 0, White = 1
 498              		.loc 1 108 0
 499 0004 034B     		ldr	r3, .L16
 500 0006 0122     		movs	r2, #1
 501 0008 1A70     		strb	r2, [r3]
 109:main.c        ****     //LED_Write(1u);
 110:main.c        **** }
 502              		.loc 1 110 0
 503 000a 00BF     		nop
 504 000c BD46     		mov	sp, r7
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 12


 505              		.cfi_def_cfa_register 13
 506              		@ sp needed
 507 000e 80BC     		pop	{r7}
 508              		.cfi_restore 7
 509              		.cfi_def_cfa_offset 0
 510 0010 7047     		bx	lr
 511              	.L17:
 512 0012 00BF     		.align	2
 513              	.L16:
 514 0014 00000000 		.word	s6
 515              		.cfi_endproc
 516              	.LFE68:
 517              		.size	S6_DETECTED, .-S6_DETECTED
 518              		.section	.text.TIMER_FINISH,"ax",%progbits
 519              		.align	2
 520              		.global	TIMER_FINISH
 521              		.thumb
 522              		.thumb_func
 523              		.type	TIMER_FINISH, %function
 524              	TIMER_FINISH:
 525              	.LFB69:
 111:main.c        **** 
 112:main.c        **** CY_ISR(TIMER_FINISH) {
 526              		.loc 1 112 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 0
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530 0000 80B5     		push	{r7, lr}
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 7, -8
 533              		.cfi_offset 14, -4
 534 0002 00AF     		add	r7, sp, #0
 535              		.cfi_def_cfa_register 7
 113:main.c        ****     if (currentDirection == Stop) {
 536              		.loc 1 113 0
 537 0004 0A4B     		ldr	r3, .L21
 538 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 539 0008 052B     		cmp	r3, #5
 540 000a 05D1     		bne	.L19
 114:main.c        ****         stopBuffer = stopBuffer + 1;
 541              		.loc 1 114 0
 542 000c 094B     		ldr	r3, .L21+4
 543 000e 1B68     		ldr	r3, [r3]
 544 0010 0133     		adds	r3, r3, #1
 545 0012 084A     		ldr	r2, .L21+4
 546 0014 1360     		str	r3, [r2]
 547 0016 02E0     		b	.L20
 548              	.L19:
 115:main.c        ****     } else {
 116:main.c        ****         stopBuffer = 0;
 549              		.loc 1 116 0
 550 0018 064B     		ldr	r3, .L21+4
 551 001a 0022     		movs	r2, #0
 552 001c 1A60     		str	r2, [r3]
 553              	.L20:
 117:main.c        ****     }
 118:main.c        ****     SetRobotMovement(); 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 13


 554              		.loc 1 118 0
 555 001e FFF7FEFF 		bl	SetRobotMovement
 119:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 556              		.loc 1 119 0
 557 0022 FFF7FEFF 		bl	ResetSensorFlags
 120:main.c        ****     Timer_LED_ReadStatusRegister();
 558              		.loc 1 120 0
 559 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 121:main.c        **** }
 560              		.loc 1 121 0
 561 002a 00BF     		nop
 562 002c 80BD     		pop	{r7, pc}
 563              	.L22:
 564 002e 00BF     		.align	2
 565              	.L21:
 566 0030 00000000 		.word	currentDirection
 567 0034 00000000 		.word	stopBuffer
 568              		.cfi_endproc
 569              	.LFE69:
 570              		.size	TIMER_FINISH, .-TIMER_FINISH
 571              		.section	.text.main,"ax",%progbits
 572              		.align	2
 573              		.global	main
 574              		.thumb
 575              		.thumb_func
 576              		.type	main, %function
 577              	main:
 578              	.LFB70:
 122:main.c        **** 
 123:main.c        **** 
 124:main.c        **** int main()
 125:main.c        **** {
 579              		.loc 1 125 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 0
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583 0000 80B5     		push	{r7, lr}
 584              		.cfi_def_cfa_offset 8
 585              		.cfi_offset 7, -8
 586              		.cfi_offset 14, -4
 587 0002 00AF     		add	r7, sp, #0
 588              		.cfi_def_cfa_register 7
 126:main.c        **** // ----- INITIALIZATIONS ----------
 127:main.c        ****     CYGlobalIntEnable;
 589              		.loc 1 127 0
 590              		.syntax unified
 591              	@ 127 "main.c" 1
 592 0004 62B6     		CPSIE   i
 593              	@ 0 "" 2
 128:main.c        ****     ResetSensorFlags();
 594              		.loc 1 128 0
 595              		.thumb
 596              		.syntax unified
 597 0006 FFF7FEFF 		bl	ResetSensorFlags
 129:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 598              		.loc 1 129 0
 599 000a FFF7FEFF 		bl	init
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 14


 130:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 600              		.loc 1 130 0
 601 000e 1F48     		ldr	r0, .L27
 602 0010 FFF7FEFF 		bl	isr_speed_StartEx
 131:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 603              		.loc 1 131 0
 604 0014 1E48     		ldr	r0, .L27+4
 605 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 132:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 606              		.loc 1 132 0
 607 001a 1E48     		ldr	r0, .L27+8
 608 001c FFF7FEFF 		bl	S3_detected_StartEx
 133:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 609              		.loc 1 133 0
 610 0020 1D48     		ldr	r0, .L27+12
 611 0022 FFF7FEFF 		bl	S4_detected_StartEx
 134:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 612              		.loc 1 134 0
 613 0026 1D48     		ldr	r0, .L27+16
 614 0028 FFF7FEFF 		bl	S5_detected_StartEx
 135:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 615              		.loc 1 135 0
 616 002c 1C48     		ldr	r0, .L27+20
 617 002e FFF7FEFF 		bl	S6_detected_StartEx
 136:main.c        ****     Timer_LED_Start();
 618              		.loc 1 136 0
 619 0032 FFF7FEFF 		bl	Timer_LED_Start
 137:main.c        ****     instructionList = findPath(map, food_list, 0);
 620              		.loc 1 137 0
 621 0036 0022     		movs	r2, #0
 622 0038 1A49     		ldr	r1, .L27+24
 623 003a 1B48     		ldr	r0, .L27+28
 624 003c FFF7FEFF 		bl	findPath
 625 0040 0246     		mov	r2, r0
 626 0042 1A4B     		ldr	r3, .L27+32
 627 0044 1A60     		str	r2, [r3]
 138:main.c        ****     numSteps = instructionsListLength();
 628              		.loc 1 138 0
 629 0046 FFF7FEFF 		bl	instructionsListLength
 630 004a 0346     		mov	r3, r0
 631 004c 1A46     		mov	r2, r3
 632 004e 184B     		ldr	r3, .L27+36
 633 0050 1A60     		str	r2, [r3]
 139:main.c        **** // ------USB SETUP ----------------    
 140:main.c        **** #ifdef USE_USB    
 141:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 634              		.loc 1 141 0
 635 0052 0121     		movs	r1, #1
 636 0054 0020     		movs	r0, #0
 637 0056 FFF7FEFF 		bl	USBUART_Start
 142:main.c        **** #endif        
 143:main.c        ****     RF_BT_SELECT_Write(0);
 638              		.loc 1 143 0
 639 005a 0020     		movs	r0, #0
 640 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 641              	.L26:
 144:main.c        ****     
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 15


 145:main.c        ****     //usbPutString("Initialised UART");
 146:main.c        ****     for(;;)
 147:main.c        ****     {
 148:main.c        ****         if(timerInt == 1) {
 642              		.loc 1 148 0
 643 0060 144B     		ldr	r3, .L27+40
 644 0062 1B68     		ldr	r3, [r3]
 645 0064 012B     		cmp	r3, #1
 646 0066 08D1     		bne	.L24
 149:main.c        ****             timerInt = 0;
 647              		.loc 1 149 0
 648 0068 124B     		ldr	r3, .L27+40
 649 006a 0022     		movs	r2, #0
 650 006c 1A60     		str	r2, [r3]
 150:main.c        ****             // calculate RPM of M2
 151:main.c        ****             quadCountToRPM(quadDec2Count);
 651              		.loc 1 151 0
 652 006e 124B     		ldr	r3, .L27+44
 653 0070 1B68     		ldr	r3, [r3]
 654 0072 9BB2     		uxth	r3, r3
 655 0074 1846     		mov	r0, r3
 656 0076 FFF7FEFF 		bl	quadCountToRPM
 657              	.L24:
 152:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 153:main.c        ****             //usbPutString(buffer);
 154:main.c        ****             //usbPutString(" ");
 155:main.c        ****         }
 156:main.c        ****         //handle_usb();
 157:main.c        ****         if (flag_KB_string == 1)
 658              		.loc 1 157 0
 659 007a 104B     		ldr	r3, .L27+48
 660 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 661 007e 012B     		cmp	r3, #1
 662 0080 EED1     		bne	.L26
 158:main.c        ****         {
 159:main.c        ****             //usbPutString("Total Distance: ");
 160:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 161:main.c        ****             //usbPutString(buffer);
 162:main.c        ****             flag_KB_string = 0;
 663              		.loc 1 162 0
 664 0082 0E4B     		ldr	r3, .L27+48
 665 0084 0022     		movs	r2, #0
 666 0086 1A70     		strb	r2, [r3]
 163:main.c        ****         }           
 164:main.c        ****     }
 667              		.loc 1 164 0
 668 0088 EAE7     		b	.L26
 669              	.L28:
 670 008a 00BF     		.align	2
 671              	.L27:
 672 008c 00000000 		.word	speedTimer
 673 0090 00000000 		.word	TIMER_FINISH
 674 0094 00000000 		.word	S3_DETECTED
 675 0098 00000000 		.word	S4_DETECTED
 676 009c 00000000 		.word	S5_DETECTED
 677 00a0 00000000 		.word	S6_DETECTED
 678 00a4 00000000 		.word	food_list
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 16


 679 00a8 00000000 		.word	map
 680 00ac 00000000 		.word	instructionList
 681 00b0 00000000 		.word	numSteps
 682 00b4 00000000 		.word	timerInt
 683 00b8 00000000 		.word	quadDec2Count
 684 00bc 00000000 		.word	flag_KB_string
 685              		.cfi_endproc
 686              	.LFE70:
 687              		.size	main, .-main
 688              		.global	__aeabi_fmul
 689              		.global	__aeabi_f2iz
 690              		.section	.text.quadCountToRPM,"ax",%progbits
 691              		.align	2
 692              		.global	quadCountToRPM
 693              		.thumb
 694              		.thumb_func
 695              		.type	quadCountToRPM, %function
 696              	quadCountToRPM:
 697              	.LFB71:
 165:main.c        ****     return 0;
 166:main.c        **** }
 167:main.c        **** 
 168:main.c        **** // Calculations
 169:main.c        **** //* ========================================
 170:main.c        **** int16 quadCountToRPM(uint16 count)
 171:main.c        **** {
 698              		.loc 1 171 0
 699              		.cfi_startproc
 700              		@ args = 0, pretend = 0, frame = 16
 701              		@ frame_needed = 1, uses_anonymous_args = 0
 702 0000 90B5     		push	{r4, r7, lr}
 703              		.cfi_def_cfa_offset 12
 704              		.cfi_offset 4, -12
 705              		.cfi_offset 7, -8
 706              		.cfi_offset 14, -4
 707 0002 85B0     		sub	sp, sp, #20
 708              		.cfi_def_cfa_offset 32
 709 0004 00AF     		add	r7, sp, #0
 710              		.cfi_def_cfa_register 7
 711 0006 0346     		mov	r3, r0
 712 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 172:main.c        ****     float cps = count/57.00;
 713              		.loc 1 172 0
 714 000a FB88     		ldrh	r3, [r7, #6]
 715 000c 1846     		mov	r0, r3
 716 000e FFF7FEFF 		bl	__aeabi_i2d
 717 0012 4FF00002 		mov	r2, #0
 718 0016 0D4B     		ldr	r3, .L31
 719 0018 FFF7FEFF 		bl	__aeabi_ddiv
 720 001c 0346     		mov	r3, r0
 721 001e 0C46     		mov	r4, r1
 722 0020 1846     		mov	r0, r3
 723 0022 2146     		mov	r1, r4
 724 0024 FFF7FEFF 		bl	__aeabi_d2f
 725 0028 0346     		mov	r3, r0
 726 002a FB60     		str	r3, [r7, #12]	@ float
 173:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 17


 727              		.loc 1 173 0
 728 002c 0849     		ldr	r1, .L31+4
 729 002e F868     		ldr	r0, [r7, #12]	@ float
 730 0030 FFF7FEFF 		bl	__aeabi_fmul
 731 0034 0346     		mov	r3, r0
 732 0036 1846     		mov	r0, r3
 733 0038 FFF7FEFF 		bl	__aeabi_f2iz
 734 003c 0346     		mov	r3, r0
 735 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 174:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 175:main.c        ****     return rpm;
 736              		.loc 1 175 0
 737 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 176:main.c        ****     //usbPutString(buffer);
 177:main.c        ****     //usbPutString("rpm ");
 178:main.c        **** }
 738              		.loc 1 178 0
 739 0044 1846     		mov	r0, r3
 740 0046 1437     		adds	r7, r7, #20
 741              		.cfi_def_cfa_offset 12
 742 0048 BD46     		mov	sp, r7
 743              		.cfi_def_cfa_register 13
 744              		@ sp needed
 745 004a 90BD     		pop	{r4, r7, pc}
 746              	.L32:
 747              		.align	2
 748              	.L31:
 749 004c 00804C40 		.word	1078755328
 750 0050 00007041 		.word	1097859072
 751              		.cfi_endproc
 752              	.LFE71:
 753              		.size	quadCountToRPM, .-quadCountToRPM
 754              		.section	.text.ResetSensorFlags,"ax",%progbits
 755              		.align	2
 756              		.global	ResetSensorFlags
 757              		.thumb
 758              		.thumb_func
 759              		.type	ResetSensorFlags, %function
 760              	ResetSensorFlags:
 761              	.LFB72:
 179:main.c        **** 
 180:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 181:main.c        **** void ResetSensorFlags() {
 762              		.loc 1 181 0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 1, uses_anonymous_args = 0
 766              		@ link register save eliminated.
 767 0000 80B4     		push	{r7}
 768              		.cfi_def_cfa_offset 4
 769              		.cfi_offset 7, -4
 770 0002 00AF     		add	r7, sp, #0
 771              		.cfi_def_cfa_register 7
 182:main.c        ****     s3 = 0;
 772              		.loc 1 182 0
 773 0004 074B     		ldr	r3, .L34
 774 0006 0022     		movs	r2, #0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 18


 775 0008 1A70     		strb	r2, [r3]
 183:main.c        ****     s4 = 0;
 776              		.loc 1 183 0
 777 000a 074B     		ldr	r3, .L34+4
 778 000c 0022     		movs	r2, #0
 779 000e 1A70     		strb	r2, [r3]
 184:main.c        ****     s5 = 0;
 780              		.loc 1 184 0
 781 0010 064B     		ldr	r3, .L34+8
 782 0012 0022     		movs	r2, #0
 783 0014 1A70     		strb	r2, [r3]
 185:main.c        ****     s6 = 0;
 784              		.loc 1 185 0
 785 0016 064B     		ldr	r3, .L34+12
 786 0018 0022     		movs	r2, #0
 787 001a 1A70     		strb	r2, [r3]
 186:main.c        **** }
 788              		.loc 1 186 0
 789 001c 00BF     		nop
 790 001e BD46     		mov	sp, r7
 791              		.cfi_def_cfa_register 13
 792              		@ sp needed
 793 0020 80BC     		pop	{r7}
 794              		.cfi_restore 7
 795              		.cfi_def_cfa_offset 0
 796 0022 7047     		bx	lr
 797              	.L35:
 798              		.align	2
 799              	.L34:
 800 0024 00000000 		.word	s3
 801 0028 00000000 		.word	s4
 802 002c 00000000 		.word	s5
 803 0030 00000000 		.word	s6
 804              		.cfi_endproc
 805              	.LFE72:
 806              		.size	ResetSensorFlags, .-ResetSensorFlags
 807              		.global	xBlocksize
 808              		.data
 809 0045 000000   		.align	2
 810              		.type	xBlocksize, %object
 811              		.size	xBlocksize, 4
 812              	xBlocksize:
 813 0048 0000F442 		.word	1123287040
 814              		.global	yBlocksize
 815              		.align	2
 816              		.type	yBlocksize, %object
 817              		.size	yBlocksize, 4
 818              	yBlocksize:
 819 004c 0000A042 		.word	1117782016
 820              		.global	currentRow
 821              		.type	currentRow, %object
 822              		.size	currentRow, 1
 823              	currentRow:
 824 0050 01       		.byte	1
 825              		.global	currentCol
 826              		.type	currentCol, %object
 827              		.size	currentCol, 1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 19


 828              	currentCol:
 829 0051 01       		.byte	1
 830              		.global	stoppedAfterTurn
 831              		.bss
 832              		.type	stoppedAfterTurn, %object
 833              		.size	stoppedAfterTurn, 1
 834              	stoppedAfterTurn:
 835 0044 00       		.space	1
 836              		.global	ignoreSensor
 837              		.type	ignoreSensor, %object
 838              		.size	ignoreSensor, 1
 839              	ignoreSensor:
 840 0045 00       		.space	1
 841              		.section	.text.ForwardCourseCorrection,"ax",%progbits
 842              		.align	2
 843              		.global	ForwardCourseCorrection
 844              		.thumb
 845              		.thumb_func
 846              		.type	ForwardCourseCorrection, %function
 847              	ForwardCourseCorrection:
 848              	.LFB73:
 187:main.c        **** 
 188:main.c        **** float xBlocksize = 122; // 122 mm
 189:main.c        **** float yBlocksize = 80; // 80 mm
 190:main.c        **** uint8 currentRow = 1;
 191:main.c        **** uint8 currentCol = 1;
 192:main.c        **** 
 193:main.c        **** /*enum DirectionState GetNextStep() {
 194:main.c        ****     enum DirectionState directionState;
 195:main.c        ****     // Determines robot movement and orientation to follow optimal path
 196:main.c        ****     // enum DirectionState directionState = Stop;
 197:main.c        ****     previousOrientation = currentOrientation;
 198:main.c        ****     
 199:main.c        ****     if(map[currentRow][currentCol] == 9) {
 200:main.c        ****         directionState = Stop; // reached target
 201:main.c        ****         return directionState;
 202:main.c        ****     }
 203:main.c        ****         
 204:main.c        ****     switch (previousOrientation) {
 205:main.c        ****             case Up:
 206:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 207:main.c        ****                     currentOrientation = Up; 
 208:main.c        ****                     directionState = Forward;
 209:main.c        ****                     currentRow--;// update position
 210:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 211:main.c        ****                     currentOrientation = Left;
 212:main.c        ****                     directionState = waitForLeftTurn;
 213:main.c        ****                     //currentRow--;
 214:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 215:main.c        ****                     currentOrientation = Right;
 216:main.c        ****                     directionState = waitForRightTurn;
 217:main.c        ****                     //currentRow++; // update position
 218:main.c        ****                 }
 219:main.c        ****                 break;
 220:main.c        ****             case Down:
 221:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 222:main.c        ****                     currentOrientation = Down;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 20


 223:main.c        ****                     directionState = Forward;
 224:main.c        ****                     currentRow++;
 225:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 226:main.c        ****                     currentOrientation = Left;
 227:main.c        ****                     directionState = waitForRightTurn;
 228:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 229:main.c        ****                     currentOrientation = Right;
 230:main.c        ****                     directionState = waitForLeftTurn;
 231:main.c        ****                 }
 232:main.c        ****                 break;
 233:main.c        ****             case Left:
 234:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 235:main.c        ****                     currentOrientation = Left;
 236:main.c        ****                     directionState = Forward;
 237:main.c        ****                     currentCol--; // update position
 238:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 239:main.c        ****                     currentOrientation = Up;
 240:main.c        ****                     directionState = waitForRightTurn;
 241:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 242:main.c        ****                     currentOrientation = Down;
 243:main.c        ****                     directionState = waitForLeftTurn;
 244:main.c        ****                 }
 245:main.c        ****                 break;
 246:main.c        ****             case Right:
 247:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 248:main.c        ****                     currentOrientation = Right;
 249:main.c        ****                     directionState = Forward;
 250:main.c        ****                     currentCol++; // update position
 251:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 252:main.c        ****                     currentOrientation = Up;
 253:main.c        ****                     directionState = waitForLeftTurn;
 254:main.c        ****                     //currentCol++; // update position
 255:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 256:main.c        ****                     currentOrientation = Down;
 257:main.c        ****                     directionState = waitForRightTurn;
 258:main.c        ****                     //currentCol--; // update position
 259:main.c        ****                 }
 260:main.c        ****                 break;
 261:main.c        ****             default:
 262:main.c        ****                 break;
 263:main.c        ****         }
 264:main.c        ****     
 265:main.c        ****     return directionState;
 266:main.c        **** }
 267:main.c        **** */
 268:main.c        **** uint8 stoppedAfterTurn = 0;
 269:main.c        **** uint8 ignoreSensor = 0;
 270:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 271:main.c        **** /*
 272:main.c        **** enum RobotMovement CheckSensorDirection() {
 273:main.c        ****     float blocksize;
 274:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 275:main.c        ****         blocksize = yBlocksize;
 276:main.c        ****     } else {
 277:main.c        ****         blocksize = xBlocksize;
 278:main.c        ****     }
 279:main.c        ****     //if(currentInstruction)
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 21


 280:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 281:main.c        ****     
 282:main.c        ****     if (stoppedAfterTurn == 1) {
 283:main.c        ****         if (stopBuffer <= 50) {
 284:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 285:main.c        ****             previousDirection = directionState;
 286:main.c        ****             return directionState;
 287:main.c        ****         }
 288:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 289:main.c        ****         totalDistance = 0; // reset distance
 290:main.c        ****         previousDirection = directionState;
 291:main.c        ****         stoppedAfterTurn = 0;
 292:main.c        ****         return directionState;
 293:main.c        ****     }
 294:main.c        ****     if (totalDistance >= blocksize) {
 295:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 296:main.c        ****         totalDistance = 0; // reset distance
 297:main.c        ****         previousDirection = directionState;
 298:main.c        ****         return directionState;
 299:main.c        ****     }
 300:main.c        ****     
 301:main.c        ****     // STOP BUFFER * ========================================
 302:main.c        ****     if (previousDirection == Stop) {
 303:main.c        ****         if (stopBuffer <= 50) {
 304:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 305:main.c        ****             previousDirection = directionState;
 306:main.c        ****         } else {
 307:main.c        ****             //directionState = ForwardAfterTurn;
 308:main.c        ****         }
 309:main.c        ****         return directionState;
 310:main.c        ****     }
 311:main.c        **** 
 312:main.c        ****     // TURNING * ========================================    
 313:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 314:main.c        ****         if (s3 || s4) {
 315:main.c        ****             //ignoreSensor = 0;
 316:main.c        ****             //usbPutString("Forward\n");
 317:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 318:main.c        ****             previousDirection = directionState;
 319:main.c        ****             return directionState;
 320:main.c        ****         }
 321:main.c        ****     }
 322:main.c        **** 
 323:main.c        ****     if(previousDirection == waitForRightTurn) {
 324:main.c        ****         //ignoreSensor = 0;
 325:main.c        ****         if(!s4) {
 326:main.c        ****             //usbPutString("Turn Right\n");
 327:main.c        ****             directionState = TurnRight;
 328:main.c        ****             previousDirection = directionState;
 329:main.c        ****             return directionState;
 330:main.c        ****         } else {
 331:main.c        ****             //usbPutString("Wait for Right Turn\n");
 332:main.c        ****             directionState = waitForRightTurn;
 333:main.c        ****             previousDirection = directionState;
 334:main.c        ****             return directionState;
 335:main.c        ****         }
 336:main.c        ****     }
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 22


 337:main.c        **** 
 338:main.c        ****     if(previousDirection == waitForLeftTurn) {
 339:main.c        ****         //ignoreSensor = 0;
 340:main.c        ****         if(!s3) {
 341:main.c        ****             //usbPutString("Turn Left\n");
 342:main.c        ****             directionState = TurnLeft;
 343:main.c        ****             previousDirection = directionState;
 344:main.c        ****             return directionState;
 345:main.c        ****         } else {
 346:main.c        ****             //usbPutString("Wait for Left Turn\n");
 347:main.c        ****             directionState = waitForLeftTurn;
 348:main.c        ****             previousDirection = directionState;
 349:main.c        ****             return directionState;
 350:main.c        ****         }
 351:main.c        ****     }
 352:main.c        **** 
 353:main.c        ****     if(previousDirection == TurnRight) {
 354:main.c        ****         if(s5 && s6) {
 355:main.c        ****             //usbPutString("Turn Right\n");
 356:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 357:main.c        ****             previousDirection = directionState;
 358:main.c        ****             return directionState;
 359:main.c        ****         } 
 360:main.c        ****         else if (!s5 || !s6) {
 361:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 362:main.c        ****             //usbPutString("Stop after Right Turn");
 363:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 364:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 365:main.c        ****             previousDirection = directionState;
 366:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 367:main.c        ****             return directionState;
 368:main.c        ****         }
 369:main.c        ****     }    
 370:main.c        **** 
 371:main.c        ****     if(previousDirection == TurnLeft) {
 372:main.c        ****         if(s5 && s6) {
 373:main.c        ****             //usbPutString("Turn Left\n");
 374:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 375:main.c        ****             previousDirection = directionState;
 376:main.c        ****             return directionState;
 377:main.c        ****         } 
 378:main.c        ****         else if (!s5 || !s6) {
 379:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 380:main.c        ****            // usbPutString("Stop after Left Turn\n");
 381:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 382:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 383:main.c        ****             previousDirection = directionState;
 384:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 385:main.c        ****             return directionState;
 386:main.c        ****         }
 387:main.c        ****     }
 388:main.c        ****     
 389:main.c        ****     // COURSE CORRECTION * ========================================
 390:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 391:main.c        ****         //ignoreSensor = 0;
 392:main.c        ****         if(s6) {
 393:main.c        ****             //usbPutString("Adjust to the left\n");
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 23


 394:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 395:main.c        ****             previousDirection = directionState;
 396:main.c        ****             return directionState;
 397:main.c        ****         }
 398:main.c        ****         if(s5) {
 399:main.c        ****             //usbPutString("Adjust to the right\n");
 400:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 401:main.c        ****             previousDirection = directionState;
 402:main.c        ****             return directionState;
 403:main.c        ****         }
 404:main.c        ****     }
 405:main.c        ****     
 406:main.c        ****     // FORWARD * ========================================
 407:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 408:main.c        ****         //usbPutString("Forward\n");
 409:main.c        ****         directionState = Forward;
 410:main.c        ****         previousDirection = directionState;
 411:main.c        ****         return directionState;   
 412:main.c        ****     }
 413:main.c        **** 
 414:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 415:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 416:main.c        ****     if (previousDirection == Unknown) {
 417:main.c        ****         directionState = Forward;
 418:main.c        ****         previousDirection = directionState;
 419:main.c        ****         return directionState;
 420:main.c        ****     }
 421:main.c        **** 
 422:main.c        ****     // Possible reason
 423:main.c        ****     previousDirection = currentDirection;
 424:main.c        ****     return previousDirection;
 425:main.c        **** }
 426:main.c        **** */
 427:main.c        **** 
 428:main.c        **** enum RobotMovement ForwardCourseCorrection();
 429:main.c        **** enum RobotMovement ForwardCourseCorrection() {
 849              		.loc 1 429 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853              		@ link register save eliminated.
 854 0000 80B4     		push	{r7}
 855              		.cfi_def_cfa_offset 4
 856              		.cfi_offset 7, -4
 857 0002 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 430:main.c        ****     // if S5 and S6 are on black, move forward
 431:main.c        ****     if (!s5 && !s6) {
 859              		.loc 1 431 0
 860 0004 1C4B     		ldr	r3, .L44
 861 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 862 0008 002B     		cmp	r3, #0
 863 000a 0FD1     		bne	.L37
 864              		.loc 1 431 0 is_stmt 0 discriminator 1
 865 000c 1B4B     		ldr	r3, .L44+4
 866 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 867 0010 002B     		cmp	r3, #0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 24


 868 0012 0BD1     		bne	.L37
 432:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 869              		.loc 1 432 0 is_stmt 1
 870 0014 1A4B     		ldr	r3, .L44+8
 871 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 872 0018 032B     		cmp	r3, #3
 873 001a 01D0     		beq	.L38
 433:main.c        ****             return AdjustToTheLeft;
 874              		.loc 1 433 0
 875 001c 0323     		movs	r3, #3
 876 001e 26E0     		b	.L39
 877              	.L38:
 434:main.c        ****         }
 435:main.c        ****         if (previousDirection != AdjustToTheRight) {
 878              		.loc 1 435 0
 879 0020 174B     		ldr	r3, .L44+8
 880 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 881 0024 042B     		cmp	r3, #4
 882 0026 01D0     		beq	.L37
 436:main.c        ****             return AdjustToTheRight;    
 883              		.loc 1 436 0
 884 0028 0423     		movs	r3, #4
 885 002a 20E0     		b	.L39
 886              	.L37:
 437:main.c        ****         }
 438:main.c        ****     }
 439:main.c        ****     
 440:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 441:main.c        ****     if (s5 && s6) {
 887              		.loc 1 441 0
 888 002c 124B     		ldr	r3, .L44
 889 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 890 0030 002B     		cmp	r3, #0
 891 0032 0FD0     		beq	.L40
 892              		.loc 1 441 0 is_stmt 0 discriminator 1
 893 0034 114B     		ldr	r3, .L44+4
 894 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 895 0038 002B     		cmp	r3, #0
 896 003a 0BD0     		beq	.L40
 442:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 897              		.loc 1 442 0 is_stmt 1
 898 003c 104B     		ldr	r3, .L44+8
 899 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 900 0040 032B     		cmp	r3, #3
 901 0042 01D0     		beq	.L41
 443:main.c        ****             return AdjustToTheLeft;
 902              		.loc 1 443 0
 903 0044 0323     		movs	r3, #3
 904 0046 12E0     		b	.L39
 905              	.L41:
 444:main.c        ****         }
 445:main.c        ****         if (previousDirection != AdjustToTheRight) {
 906              		.loc 1 445 0
 907 0048 0D4B     		ldr	r3, .L44+8
 908 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 909 004c 042B     		cmp	r3, #4
 910 004e 01D0     		beq	.L40
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 25


 446:main.c        ****             return AdjustToTheRight;    
 911              		.loc 1 446 0
 912 0050 0423     		movs	r3, #4
 913 0052 0CE0     		b	.L39
 914              	.L40:
 447:main.c        ****         }
 448:main.c        ****     }
 449:main.c        **** 
 450:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 451:main.c        ****     if (s5) {
 915              		.loc 1 451 0
 916 0054 084B     		ldr	r3, .L44
 917 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 918 0058 002B     		cmp	r3, #0
 919 005a 01D0     		beq	.L42
 452:main.c        ****         return AdjustToTheRight;    
 920              		.loc 1 452 0
 921 005c 0423     		movs	r3, #4
 922 005e 06E0     		b	.L39
 923              	.L42:
 453:main.c        ****     }
 454:main.c        ****     if (s6) {
 924              		.loc 1 454 0
 925 0060 064B     		ldr	r3, .L44+4
 926 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 927 0064 002B     		cmp	r3, #0
 928 0066 01D0     		beq	.L43
 455:main.c        ****         return AdjustToTheLeft;    
 929              		.loc 1 455 0
 930 0068 0323     		movs	r3, #3
 931 006a 00E0     		b	.L39
 932              	.L43:
 456:main.c        ****     }
 457:main.c        ****    
 458:main.c        ****     // We should never actually get to this point
 459:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 460:main.c        ****     return Stop;
 933              		.loc 1 460 0
 934 006c 0523     		movs	r3, #5
 935              	.L39:
 461:main.c        **** }
 936              		.loc 1 461 0
 937 006e 1846     		mov	r0, r3
 938 0070 BD46     		mov	sp, r7
 939              		.cfi_def_cfa_register 13
 940              		@ sp needed
 941 0072 80BC     		pop	{r7}
 942              		.cfi_restore 7
 943              		.cfi_def_cfa_offset 0
 944 0074 7047     		bx	lr
 945              	.L45:
 946 0076 00BF     		.align	2
 947              	.L44:
 948 0078 00000000 		.word	s5
 949 007c 00000000 		.word	s6
 950 0080 00000000 		.word	previousDirection
 951              		.cfi_endproc
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 26


 952              	.LFE73:
 953              		.size	ForwardCourseCorrection, .-ForwardCourseCorrection
 954              		.global	spinCourseCorrectionStarted
 955              		.bss
 956              		.type	spinCourseCorrectionStarted, %object
 957              		.size	spinCourseCorrectionStarted, 1
 958              	spinCourseCorrectionStarted:
 959 0046 00       		.space	1
 960              		.global	lastDirectionAfter180
 961              		.data
 962              		.type	lastDirectionAfter180, %object
 963              		.size	lastDirectionAfter180, 1
 964              	lastDirectionAfter180:
 965 0052 06       		.byte	6
 966              		.global	currentIgnoreL
 967              		.bss
 968 0047 00       		.align	2
 969              		.type	currentIgnoreL, %object
 970              		.size	currentIgnoreL, 4
 971              	currentIgnoreL:
 972 0048 00000000 		.space	4
 973              		.global	currentIgnoreR
 974              		.data
 975 0053 00       		.align	2
 976              		.type	currentIgnoreR, %object
 977              		.size	currentIgnoreR, 4
 978              	currentIgnoreR:
 979 0054 03000000 		.word	3
 980              		.section	.text.SpinCourseCorrection,"ax",%progbits
 981              		.align	2
 982              		.global	SpinCourseCorrection
 983              		.thumb
 984              		.thumb_func
 985              		.type	SpinCourseCorrection, %function
 986              	SpinCourseCorrection:
 987              	.LFB74:
 462:main.c        **** 
 463:main.c        **** enum RobotMovement SpinCourseCorrection();
 464:main.c        **** 
 465:main.c        **** uint8 spinCourseCorrectionStarted = 0;
 466:main.c        **** enum RobotMovement lastDirectionAfter180 = Unknown;
 467:main.c        **** int currentIgnoreL = 0;
 468:main.c        **** int currentIgnoreR = 3;
 469:main.c        **** enum RobotMovement SpinCourseCorrection() {
 988              		.loc 1 469 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 0
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992              		@ link register save eliminated.
 993 0000 80B4     		push	{r7}
 994              		.cfi_def_cfa_offset 4
 995              		.cfi_offset 7, -4
 996 0002 00AF     		add	r7, sp, #0
 997              		.cfi_def_cfa_register 7
 470:main.c        ****     // Set first iteration flag.
 471:main.c        ****     if (!spinCourseCorrectionStarted) {
 998              		.loc 1 471 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 27


 999 0004 1E4B     		ldr	r3, .L54
 1000 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1001 0008 002B     		cmp	r3, #0
 1002 000a 06D1     		bne	.L47
 472:main.c        ****         spinCourseCorrectionStarted = 1;    
 1003              		.loc 1 472 0
 1004 000c 1C4B     		ldr	r3, .L54
 1005 000e 0122     		movs	r2, #1
 1006 0010 1A70     		strb	r2, [r3]
 473:main.c        ****         lastDirectionAfter180 = currentDirection;
 1007              		.loc 1 473 0
 1008 0012 1C4B     		ldr	r3, .L54+4
 1009 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1010 0016 1C4B     		ldr	r3, .L54+8
 1011 0018 1A70     		strb	r2, [r3]
 1012              	.L47:
 474:main.c        ****     }
 475:main.c        ****     
 476:main.c        ****     // if S5 and S6 are on black, stop
 477:main.c        ****     if (!s5 && !s6) {
 1013              		.loc 1 477 0
 1014 001a 1C4B     		ldr	r3, .L54+12
 1015 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1016 001e 002B     		cmp	r3, #0
 1017 0020 08D1     		bne	.L48
 1018              		.loc 1 477 0 is_stmt 0 discriminator 1
 1019 0022 1B4B     		ldr	r3, .L54+16
 1020 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1021 0026 002B     		cmp	r3, #0
 1022 0028 04D1     		bne	.L48
 478:main.c        ****         spinCourseCorrectionStarted = 0;
 1023              		.loc 1 478 0 is_stmt 1
 1024 002a 154B     		ldr	r3, .L54
 1025 002c 0022     		movs	r2, #0
 1026 002e 1A70     		strb	r2, [r3]
 479:main.c        ****         return Backward;
 1027              		.loc 1 479 0
 1028 0030 0923     		movs	r3, #9
 1029 0032 20E0     		b	.L49
 1030              	.L48:
 480:main.c        ****     }
 481:main.c        ****     
 482:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 483:main.c        ****     if (s5 && s6) {
 1031              		.loc 1 483 0
 1032 0034 154B     		ldr	r3, .L54+12
 1033 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1034 0038 002B     		cmp	r3, #0
 1035 003a 0FD0     		beq	.L50
 1036              		.loc 1 483 0 is_stmt 0 discriminator 1
 1037 003c 144B     		ldr	r3, .L54+16
 1038 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1039 0040 002B     		cmp	r3, #0
 1040 0042 0BD0     		beq	.L50
 484:main.c        ****         if (lastDirectionAfter180 != TurnLeft) {
 1041              		.loc 1 484 0 is_stmt 1
 1042 0044 104B     		ldr	r3, .L54+8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 28


 1043 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1044 0048 022B     		cmp	r3, #2
 1045 004a 01D0     		beq	.L51
 485:main.c        ****             return Forward;
 1046              		.loc 1 485 0
 1047 004c 0023     		movs	r3, #0
 1048 004e 12E0     		b	.L49
 1049              	.L51:
 486:main.c        ****         }
 487:main.c        ****         if (lastDirectionAfter180 != TurnRight) {
 1050              		.loc 1 487 0
 1051 0050 0D4B     		ldr	r3, .L54+8
 1052 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1053 0054 012B     		cmp	r3, #1
 1054 0056 01D0     		beq	.L50
 488:main.c        ****             return Forward;    
 1055              		.loc 1 488 0
 1056 0058 0023     		movs	r3, #0
 1057 005a 0CE0     		b	.L49
 1058              	.L50:
 489:main.c        ****         }
 490:main.c        ****     }
 491:main.c        **** 
 492:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 493:main.c        ****     if (s5) {
 1059              		.loc 1 493 0
 1060 005c 0B4B     		ldr	r3, .L54+12
 1061 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1062 0060 002B     		cmp	r3, #0
 1063 0062 01D0     		beq	.L52
 494:main.c        ****         return TurnRight;    
 1064              		.loc 1 494 0
 1065 0064 0123     		movs	r3, #1
 1066 0066 06E0     		b	.L49
 1067              	.L52:
 495:main.c        ****     }
 496:main.c        ****     if (s6) {
 1068              		.loc 1 496 0
 1069 0068 094B     		ldr	r3, .L54+16
 1070 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1071 006c 002B     		cmp	r3, #0
 1072 006e 01D0     		beq	.L53
 497:main.c        ****         return TurnLeft;    
 1073              		.loc 1 497 0
 1074 0070 0223     		movs	r3, #2
 1075 0072 00E0     		b	.L49
 1076              	.L53:
 498:main.c        ****     }
 499:main.c        ****    
 500:main.c        ****     // We should never actually get to this point
 501:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 502:main.c        ****     return Stop;
 1077              		.loc 1 502 0
 1078 0074 0523     		movs	r3, #5
 1079              	.L49:
 503:main.c        **** }
 1080              		.loc 1 503 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 29


 1081 0076 1846     		mov	r0, r3
 1082 0078 BD46     		mov	sp, r7
 1083              		.cfi_def_cfa_register 13
 1084              		@ sp needed
 1085 007a 80BC     		pop	{r7}
 1086              		.cfi_restore 7
 1087              		.cfi_def_cfa_offset 0
 1088 007c 7047     		bx	lr
 1089              	.L55:
 1090 007e 00BF     		.align	2
 1091              	.L54:
 1092 0080 00000000 		.word	spinCourseCorrectionStarted
 1093 0084 00000000 		.word	currentDirection
 1094 0088 00000000 		.word	lastDirectionAfter180
 1095 008c 00000000 		.word	s5
 1096 0090 00000000 		.word	s6
 1097              		.cfi_endproc
 1098              	.LFE74:
 1099              		.size	SpinCourseCorrection, .-SpinCourseCorrection
 1100              		.global	leftWingFlag
 1101              		.bss
 1102              		.align	2
 1103              		.type	leftWingFlag, %object
 1104              		.size	leftWingFlag, 4
 1105              	leftWingFlag:
 1106 004c 00000000 		.space	4
 1107              		.global	rightWingFlag
 1108              		.align	2
 1109              		.type	rightWingFlag, %object
 1110              		.size	rightWingFlag, 4
 1111              	rightWingFlag:
 1112 0050 00000000 		.space	4
 1113              		.global	__aeabi_fcmpge
 1114              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 1115              		.align	2
 1116              		.global	GetMovementAccordingToInstruction
 1117              		.thumb
 1118              		.thumb_func
 1119              		.type	GetMovementAccordingToInstruction, %function
 1120              	GetMovementAccordingToInstruction:
 1121              	.LFB75:
 504:main.c        **** 
 505:main.c        **** int leftWingFlag = 0;
 506:main.c        **** int rightWingFlag = 0;
 507:main.c        **** 
 508:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 1122              		.loc 1 508 0
 1123              		.cfi_startproc
 1124              		@ args = 0, pretend = 0, frame = 8
 1125              		@ frame_needed = 1, uses_anonymous_args = 0
 1126 0000 80B5     		push	{r7, lr}
 1127              		.cfi_def_cfa_offset 8
 1128              		.cfi_offset 7, -8
 1129              		.cfi_offset 14, -4
 1130 0002 82B0     		sub	sp, sp, #8
 1131              		.cfi_def_cfa_offset 16
 1132 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 30


 1133              		.cfi_def_cfa_register 7
 509:main.c        ****     float blocksize;
 510:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 1134              		.loc 1 510 0
 1135 0006 9C4B     		ldr	r3, .L96
 1136 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1137 000a 002B     		cmp	r3, #0
 1138 000c 03D0     		beq	.L57
 1139              		.loc 1 510 0 is_stmt 0 discriminator 1
 1140 000e 9A4B     		ldr	r3, .L96
 1141 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1142 0012 012B     		cmp	r3, #1
 1143 0014 03D1     		bne	.L58
 1144              	.L57:
 511:main.c        ****         blocksize = yBlocksize;
 1145              		.loc 1 511 0 is_stmt 1
 1146 0016 994B     		ldr	r3, .L96+4
 1147 0018 1B68     		ldr	r3, [r3]	@ float
 1148 001a 7B60     		str	r3, [r7, #4]	@ float
 1149 001c 02E0     		b	.L59
 1150              	.L58:
 512:main.c        ****     } else {
 513:main.c        ****         blocksize = xBlocksize;
 1151              		.loc 1 513 0
 1152 001e 984B     		ldr	r3, .L96+8
 1153 0020 1B68     		ldr	r3, [r3]	@ float
 1154 0022 7B60     		str	r3, [r7, #4]	@ float
 1155              	.L59:
 514:main.c        ****     }
 515:main.c        ****     
 516:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 517:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 518:main.c        ****         // OR an EVENT happens in the current instruction
 519:main.c        ****         // e.g. CurrentInstruction: GoForward 
 520:main.c        ****         //      S3 on BLACK
 521:main.c        ****         //      Check Ignore Count
 522:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 523:main.c        ****     
 524:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 1156              		.loc 1 524 0
 1157 0024 974B     		ldr	r3, .L96+12
 1158 0026 1B78     		ldrb	r3, [r3]
 1159 0028 FB70     		strb	r3, [r7, #3]
 525:main.c        ****     
 526:main.c        ****     switch (currentInstructionDirection) {
 1160              		.loc 1 526 0
 1161 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1162 002c 052B     		cmp	r3, #5
 1163 002e 00F21D81 		bhi	.L60
 1164 0032 01A2     		adr	r2, .L62
 1165 0034 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1166              		.p2align 2
 1167              	.L62:
 1168 0038 51000000 		.word	.L61+1
 1169 003c CF000000 		.word	.L63+1
 1170 0040 85010000 		.word	.L64+1
 1171 0044 3F020000 		.word	.L65+1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 31


 1172 0048 89010000 		.word	.L66+1
 1173 004c 19020000 		.word	.L67+1
 1174              		.p2align 1
 1175              	.L61:
 527:main.c        ****         case GoForward:
 528:main.c        ****         if(currentDirection == Stop) {
 1176              		.loc 1 528 0
 1177 0050 8D4B     		ldr	r3, .L96+16
 1178 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1179 0054 052B     		cmp	r3, #5
 1180 0056 08D1     		bne	.L68
 529:main.c        ****             if(stopBuffer <= 50) {
 1181              		.loc 1 529 0
 1182 0058 8C4B     		ldr	r3, .L96+20
 1183 005a 1B68     		ldr	r3, [r3]
 1184 005c 322B     		cmp	r3, #50
 1185 005e 01D8     		bhi	.L69
 530:main.c        ****                 return Stop;
 1186              		.loc 1 530 0
 1187 0060 0523     		movs	r3, #5
 1188 0062 04E1     		b	.L70
 1189              	.L69:
 531:main.c        ****             } else {
 532:main.c        ****                 stopBuffer = 60;
 1190              		.loc 1 532 0
 1191 0064 894B     		ldr	r3, .L96+20
 1192 0066 3C22     		movs	r2, #60
 1193 0068 1A60     		str	r2, [r3]
 1194              	.L68:
 533:main.c        ****             }
 534:main.c        ****         }
 535:main.c        ****             if (s3) {
 1195              		.loc 1 535 0
 1196 006a 894B     		ldr	r3, .L96+24
 1197 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1198 006e 002B     		cmp	r3, #0
 1199 0070 02D0     		beq	.L71
 536:main.c        ****                 leftWingFlag = 0;    
 1200              		.loc 1 536 0
 1201 0072 884B     		ldr	r3, .L96+28
 1202 0074 0022     		movs	r2, #0
 1203 0076 1A60     		str	r2, [r3]
 1204              	.L71:
 537:main.c        ****             }
 538:main.c        ****             
 539:main.c        ****             if (s4) {
 1205              		.loc 1 539 0
 1206 0078 874B     		ldr	r3, .L96+32
 1207 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 007c 002B     		cmp	r3, #0
 1209 007e 02D0     		beq	.L72
 540:main.c        ****                 rightWingFlag = 0;    
 1210              		.loc 1 540 0
 1211 0080 864B     		ldr	r3, .L96+36
 1212 0082 0022     		movs	r2, #0
 1213 0084 1A60     		str	r2, [r3]
 1214              	.L72:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 32


 541:main.c        ****             }
 542:main.c        **** 
 543:main.c        ****             if (!s3) {
 1215              		.loc 1 543 0
 1216 0086 824B     		ldr	r3, .L96+24
 1217 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1218 008a 002B     		cmp	r3, #0
 1219 008c 13D1     		bne	.L73
 544:main.c        ****                 if (!leftWingFlag) {
 1220              		.loc 1 544 0
 1221 008e 814B     		ldr	r3, .L96+28
 1222 0090 1B68     		ldr	r3, [r3]
 1223 0092 002B     		cmp	r3, #0
 1224 0094 0FD1     		bne	.L73
 545:main.c        ****                     // do ignore decrement and ignore check
 546:main.c        ****                     currentIgnoreL = currentIgnoreL - 1;
 1225              		.loc 1 546 0
 1226 0096 824B     		ldr	r3, .L96+40
 1227 0098 1B68     		ldr	r3, [r3]
 1228 009a 013B     		subs	r3, r3, #1
 1229 009c 804A     		ldr	r2, .L96+40
 1230 009e 1360     		str	r3, [r2]
 547:main.c        ****                     if (currentIgnoreL <= 1) {
 1231              		.loc 1 547 0
 1232 00a0 7F4B     		ldr	r3, .L96+40
 1233 00a2 1B68     		ldr	r3, [r3]
 1234 00a4 012B     		cmp	r3, #1
 1235 00a6 01DC     		bgt	.L74
 548:main.c        ****                         MoveToNextInstruction();
 1236              		.loc 1 548 0
 1237 00a8 FFF7FEFF 		bl	MoveToNextInstruction
 1238              	.L74:
 549:main.c        ****                     }
 550:main.c        ****                     leftWingFlag = 1;
 1239              		.loc 1 550 0
 1240 00ac 794B     		ldr	r3, .L96+28
 1241 00ae 0122     		movs	r2, #1
 1242 00b0 1A60     		str	r2, [r3]
 551:main.c        ****                     return Stop;
 1243              		.loc 1 551 0
 1244 00b2 0523     		movs	r3, #5
 1245 00b4 DBE0     		b	.L70
 1246              	.L73:
 552:main.c        ****                 }
 553:main.c        ****             }
 554:main.c        ****             if (!s4) {
 1247              		.loc 1 554 0
 1248 00b6 784B     		ldr	r3, .L96+32
 1249 00b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1250 00ba 002B     		cmp	r3, #0
 1251 00bc 03D1     		bne	.L75
 555:main.c        ****                 MoveToNextInstruction();
 1252              		.loc 1 555 0
 1253 00be FFF7FEFF 		bl	MoveToNextInstruction
 556:main.c        ****                 return Stop;
 1254              		.loc 1 556 0
 1255 00c2 0523     		movs	r3, #5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 33


 1256 00c4 D3E0     		b	.L70
 1257              	.L75:
 557:main.c        ****             }
 558:main.c        ****             
 559:main.c        ****             return ForwardCourseCorrection();
 1258              		.loc 1 559 0
 1259 00c6 FFF7FEFF 		bl	ForwardCourseCorrection
 1260 00ca 0346     		mov	r3, r0
 1261 00cc CFE0     		b	.L70
 1262              	.L63:
 560:main.c        ****             break;
 561:main.c        ****         case waitForLeftTurn:
 562:main.c        ****             // continue moving forward until s3 goes on black
 563:main.c        ****             // if we are turning left already
 564:main.c        ****                 // wait until s5 || s6 are on black
 565:main.c        ****                 // return stop
 566:main.c        **** 
 567:main.c        ****             if (turnFinishedFlag) {
 1263              		.loc 1 567 0
 1264 00ce 754B     		ldr	r3, .L96+44
 1265 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1266 00d2 002B     		cmp	r3, #0
 1267 00d4 0DD0     		beq	.L76
 568:main.c        ****                 if (s3) {
 1268              		.loc 1 568 0
 1269 00d6 6E4B     		ldr	r3, .L96+24
 1270 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1271 00da 002B     		cmp	r3, #0
 1272 00dc 05D0     		beq	.L77
 569:main.c        ****                     turnFinishedFlag = 0;
 1273              		.loc 1 569 0
 1274 00de 714B     		ldr	r3, .L96+44
 1275 00e0 0022     		movs	r2, #0
 1276 00e2 1A70     		strb	r2, [r3]
 570:main.c        ****                     MoveToNextInstruction();    
 1277              		.loc 1 570 0
 1278 00e4 FFF7FEFF 		bl	MoveToNextInstruction
 1279 00e8 03E0     		b	.L76
 1280              	.L77:
 571:main.c        ****                 }
 572:main.c        ****                 else {
 573:main.c        ****                     return ForwardCourseCorrection();        
 1281              		.loc 1 573 0
 1282 00ea FFF7FEFF 		bl	ForwardCourseCorrection
 1283 00ee 0346     		mov	r3, r0
 1284 00f0 BDE0     		b	.L70
 1285              	.L76:
 574:main.c        ****                 }
 575:main.c        ****             }
 576:main.c        ****             
 577:main.c        ****             
 578:main.c        ****             if (currentDirection == Stop) {
 1286              		.loc 1 578 0
 1287 00f2 654B     		ldr	r3, .L96+16
 1288 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1289 00f6 052B     		cmp	r3, #5
 1290 00f8 09D1     		bne	.L78
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 34


 579:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 580:main.c        ****                 if (stopBuffer <= 50) {
 1291              		.loc 1 580 0
 1292 00fa 644B     		ldr	r3, .L96+20
 1293 00fc 1B68     		ldr	r3, [r3]
 1294 00fe 322B     		cmp	r3, #50
 1295 0100 01D8     		bhi	.L79
 581:main.c        ****                     return Stop;   
 1296              		.loc 1 581 0
 1297 0102 0523     		movs	r3, #5
 1298 0104 B3E0     		b	.L70
 1299              	.L79:
 582:main.c        ****                 }
 583:main.c        ****                 return ForwardCourseCorrection();
 1300              		.loc 1 583 0
 1301 0106 FFF7FEFF 		bl	ForwardCourseCorrection
 1302 010a 0346     		mov	r3, r0
 1303 010c AFE0     		b	.L70
 1304              	.L78:
 584:main.c        ****             }
 585:main.c        ****          
 586:main.c        ****             // if we are already turning left, then check if s5 && s6 are on black
 587:main.c        ****             if (currentDirection == TurnLeft) {
 1305              		.loc 1 587 0
 1306 010e 5E4B     		ldr	r3, .L96+16
 1307 0110 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1308 0112 022B     		cmp	r3, #2
 1309 0114 29D1     		bne	.L80
 588:main.c        ****                 // If turn started and we are still on black, continue turning
 589:main.c        ****                 // Otherwise, if all sensors are on white, turnStartedFlag = 0;
 590:main.c        ****                 if (turnStartedFlag) {
 1310              		.loc 1 590 0
 1311 0116 644B     		ldr	r3, .L96+48
 1312 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1313 011a 002B     		cmp	r3, #0
 1314 011c 0ED0     		beq	.L81
 591:main.c        ****                     if (s3 && (s5 && s6)) {
 1315              		.loc 1 591 0
 1316 011e 5C4B     		ldr	r3, .L96+24
 1317 0120 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1318 0122 002B     		cmp	r3, #0
 1319 0124 0AD0     		beq	.L81
 1320              		.loc 1 591 0 is_stmt 0 discriminator 1
 1321 0126 614B     		ldr	r3, .L96+52
 1322 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1323 012a 002B     		cmp	r3, #0
 1324 012c 06D0     		beq	.L81
 1325              		.loc 1 591 0 discriminator 2
 1326 012e 604B     		ldr	r3, .L96+56
 1327 0130 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1328 0132 002B     		cmp	r3, #0
 1329 0134 02D0     		beq	.L81
 592:main.c        ****                         turnStartedFlag = 0;
 1330              		.loc 1 592 0 is_stmt 1
 1331 0136 5C4B     		ldr	r3, .L96+48
 1332 0138 0022     		movs	r2, #0
 1333 013a 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 35


 1334              	.L81:
 593:main.c        ****                     }
 594:main.c        ****                 }
 595:main.c        ****                 if (!turnStartedFlag && !s3 && (!s5 && !s6)) {
 1335              		.loc 1 595 0
 1336 013c 5A4B     		ldr	r3, .L96+48
 1337 013e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1338 0140 002B     		cmp	r3, #0
 1339 0142 10D1     		bne	.L82
 1340              		.loc 1 595 0 is_stmt 0 discriminator 1
 1341 0144 524B     		ldr	r3, .L96+24
 1342 0146 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1343 0148 002B     		cmp	r3, #0
 1344 014a 0CD1     		bne	.L82
 1345              		.loc 1 595 0 discriminator 2
 1346 014c 574B     		ldr	r3, .L96+52
 1347 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1348 0150 002B     		cmp	r3, #0
 1349 0152 08D1     		bne	.L82
 1350              		.loc 1 595 0 discriminator 3
 1351 0154 564B     		ldr	r3, .L96+56
 1352 0156 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1353 0158 002B     		cmp	r3, #0
 1354 015a 04D1     		bne	.L82
 596:main.c        ****                     turnFinishedFlag = 1;
 1355              		.loc 1 596 0 is_stmt 1
 1356 015c 514B     		ldr	r3, .L96+44
 1357 015e 0122     		movs	r2, #1
 1358 0160 1A70     		strb	r2, [r3]
 597:main.c        ****                     return Stop;
 1359              		.loc 1 597 0
 1360 0162 0523     		movs	r3, #5
 1361 0164 83E0     		b	.L70
 1362              	.L82:
 598:main.c        ****                 }
 599:main.c        ****                 else
 600:main.c        ****                 {
 601:main.c        ****                     return TurnLeft;
 1363              		.loc 1 601 0
 1364 0166 0223     		movs	r3, #2
 1365 0168 81E0     		b	.L70
 1366              	.L80:
 602:main.c        ****                 }
 603:main.c        ****             }
 604:main.c        ****             
 605:main.c        ****             // If we are not already turning left then once s3 goes on BLACK, turn left
 606:main.c        ****             if (!s3) {
 1367              		.loc 1 606 0
 1368 016a 494B     		ldr	r3, .L96+24
 1369 016c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1370 016e 002B     		cmp	r3, #0
 1371 0170 04D1     		bne	.L83
 607:main.c        ****                 turnStartedFlag = 1;
 1372              		.loc 1 607 0
 1373 0172 4D4B     		ldr	r3, .L96+48
 1374 0174 0122     		movs	r2, #1
 1375 0176 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 36


 608:main.c        ****                 return TurnLeft;
 1376              		.loc 1 608 0
 1377 0178 0223     		movs	r3, #2
 1378 017a 78E0     		b	.L70
 1379              	.L83:
 609:main.c        ****             }
 610:main.c        ****             
 611:main.c        ****             // Otherwise, keep going forward
 612:main.c        ****             return ForwardCourseCorrection(); 
 1380              		.loc 1 612 0
 1381 017c FFF7FEFF 		bl	ForwardCourseCorrection
 1382 0180 0346     		mov	r3, r0
 1383 0182 74E0     		b	.L70
 1384              	.L64:
 613:main.c        ****             break;
 614:main.c        ****         case waitForRightTurn:
 615:main.c        ****             // continue moving forward until s4 goes on black
 616:main.c        ****             // if we are turning left already
 617:main.c        ****                 // wait until s5 || s6 are on black
 618:main.c        ****                 // return stop
 619:main.c        ****             return Backward;
 1385              		.loc 1 619 0
 1386 0184 0923     		movs	r3, #9
 1387 0186 72E0     		b	.L70
 1388              	.L66:
 620:main.c        **** 
 621:main.c        ****             if (turnFinishedFlag) {
 622:main.c        ****                 if (s4) {
 623:main.c        ****                     turnFinishedFlag = 0;
 624:main.c        ****                     MoveToNextInstruction();    
 625:main.c        ****                 }
 626:main.c        ****                 else {
 627:main.c        ****                     return ForwardCourseCorrection();        
 628:main.c        ****                 }
 629:main.c        ****             }
 630:main.c        ****             
 631:main.c        ****             
 632:main.c        ****             if (currentDirection == Stop) {
 633:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 634:main.c        ****                 if (stopBuffer <= 50) {
 635:main.c        ****                     return Stop;   
 636:main.c        ****                 }
 637:main.c        **** 
 638:main.c        ****                 return ForwardCourseCorrection();
 639:main.c        ****             }
 640:main.c        ****                       
 641:main.c        ****             // if we are already turning right, then check if s5 && s6 are on black
 642:main.c        ****             if (currentDirection == TurnRight) {
 643:main.c        ****                 // If turn started and we are still on black, continue turning
 644:main.c        ****                 // Otherwise, if all sensors are on white, turnStartedFlag = 0;
 645:main.c        ****                 if (turnStartedFlag) {
 646:main.c        ****                     if (s4 && (s5 && s6)) {
 647:main.c        ****                         turnStartedFlag = 0;
 648:main.c        ****                     }
 649:main.c        ****                 }
 650:main.c        ****                 if (!turnStartedFlag && !s4 && (!s5 && !s6)) {
 651:main.c        ****                     turnFinishedFlag = 1;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 37


 652:main.c        ****                     return Stop;
 653:main.c        ****                 }
 654:main.c        ****                 else
 655:main.c        ****                 {
 656:main.c        ****                     return TurnRight;
 657:main.c        ****                 }
 658:main.c        ****             }
 659:main.c        ****             
 660:main.c        ****             // If we are not already turning right then once s4 goes on BLACK, turn left
 661:main.c        ****             if (!s4) {
 662:main.c        ****                 turnStartedFlag = 1;
 663:main.c        ****                 return TurnRight;
 664:main.c        ****             }
 665:main.c        ****             
 666:main.c        ****             // Otherwise, keep going forward
 667:main.c        ****             return ForwardCourseCorrection(); 
 668:main.c        ****             break;
 669:main.c        ****         case ForwardUntilTarget:
 670:main.c        ****             // Reset distance on first iteration of this instruction
 671:main.c        ****             if (!forwardUntilTargetStartedFlag) {
 1389              		.loc 1 671 0
 1390 0188 4A4B     		ldr	r3, .L96+60
 1391 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1392 018c 002B     		cmp	r3, #0
 1393 018e 0ED1     		bne	.L84
 672:main.c        ****                 forwardUntilTargetStartedFlag = 1;
 1394              		.loc 1 672 0
 1395 0190 484B     		ldr	r3, .L96+60
 1396 0192 0122     		movs	r2, #1
 1397 0194 1A70     		strb	r2, [r3]
 673:main.c        ****                 totalDistance = 0;
 1398              		.loc 1 673 0
 1399 0196 484B     		ldr	r3, .L96+64
 1400 0198 4FF00002 		mov	r2, #0
 1401 019c 1A60     		str	r2, [r3]	@ float
 674:main.c        **** 
 675:main.c        ****                 blockSizeTotal = blocksize * 3;
 1402              		.loc 1 675 0
 1403 019e 4749     		ldr	r1, .L96+68
 1404 01a0 7868     		ldr	r0, [r7, #4]	@ float
 1405 01a2 FFF7FEFF 		bl	__aeabi_fmul
 1406 01a6 0346     		mov	r3, r0
 1407 01a8 1A46     		mov	r2, r3
 1408 01aa 454B     		ldr	r3, .L96+72
 1409 01ac 1A60     		str	r2, [r3]	@ float
 1410              	.L84:
 676:main.c        ****             }
 677:main.c        ****             
 678:main.c        ****             if (!s3) {
 1411              		.loc 1 678 0
 1412 01ae 384B     		ldr	r3, .L96+24
 1413 01b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1414 01b2 002B     		cmp	r3, #0
 1415 01b4 0CD1     		bne	.L85
 679:main.c        ****                 if (currentInstruction.ignoreL <= 0) {
 1416              		.loc 1 679 0
 1417 01b6 334B     		ldr	r3, .L96+12
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 38


 1418 01b8 5B68     		ldr	r3, [r3, #4]
 1419 01ba 002B     		cmp	r3, #0
 1420 01bc 03DC     		bgt	.L86
 680:main.c        ****                     MoveToNextInstruction();
 1421              		.loc 1 680 0
 1422 01be FFF7FEFF 		bl	MoveToNextInstruction
 681:main.c        ****                     return Stop;
 1423              		.loc 1 681 0
 1424 01c2 0523     		movs	r3, #5
 1425 01c4 53E0     		b	.L70
 1426              	.L86:
 682:main.c        ****                 }
 683:main.c        ****                 currentInstruction.ignoreL--;
 1427              		.loc 1 683 0
 1428 01c6 2F4B     		ldr	r3, .L96+12
 1429 01c8 5B68     		ldr	r3, [r3, #4]
 1430 01ca 013B     		subs	r3, r3, #1
 1431 01cc 2D4A     		ldr	r2, .L96+12
 1432 01ce 5360     		str	r3, [r2, #4]
 1433              	.L85:
 684:main.c        ****             }
 685:main.c        ****             
 686:main.c        ****             if (!s4) {
 1434              		.loc 1 686 0
 1435 01d0 314B     		ldr	r3, .L96+32
 1436 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1437 01d4 002B     		cmp	r3, #0
 1438 01d6 0CD1     		bne	.L87
 687:main.c        ****                 if (currentInstruction.ignoreR <= 0) {
 1439              		.loc 1 687 0
 1440 01d8 2A4B     		ldr	r3, .L96+12
 1441 01da 9B68     		ldr	r3, [r3, #8]
 1442 01dc 002B     		cmp	r3, #0
 1443 01de 03DC     		bgt	.L88
 688:main.c        ****                     MoveToNextInstruction();
 1444              		.loc 1 688 0
 1445 01e0 FFF7FEFF 		bl	MoveToNextInstruction
 689:main.c        ****                     return Stop;
 1446              		.loc 1 689 0
 1447 01e4 0523     		movs	r3, #5
 1448 01e6 42E0     		b	.L70
 1449              	.L88:
 690:main.c        ****                 }
 691:main.c        ****                 currentInstruction.ignoreR--;
 1450              		.loc 1 691 0
 1451 01e8 264B     		ldr	r3, .L96+12
 1452 01ea 9B68     		ldr	r3, [r3, #8]
 1453 01ec 013B     		subs	r3, r3, #1
 1454 01ee 254A     		ldr	r2, .L96+12
 1455 01f0 9360     		str	r3, [r2, #8]
 1456              	.L87:
 692:main.c        ****             }
 693:main.c        ****             
 694:main.c        ****             // If totalDistance >= blockSizeTotal then we should be at target
 695:main.c        ****             if (totalDistance >= blockSizeTotal) {
 1457              		.loc 1 695 0
 1458 01f2 314B     		ldr	r3, .L96+64
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 39


 1459 01f4 1A68     		ldr	r2, [r3]	@ float
 1460 01f6 324B     		ldr	r3, .L96+72
 1461 01f8 1B68     		ldr	r3, [r3]	@ float
 1462 01fa 1946     		mov	r1, r3
 1463 01fc 1046     		mov	r0, r2
 1464 01fe FFF7FEFF 		bl	__aeabi_fcmpge
 1465 0202 0346     		mov	r3, r0
 1466 0204 002B     		cmp	r3, #0
 1467 0206 03D0     		beq	.L95
 696:main.c        ****                 // Get next instruction
 697:main.c        ****                 MoveToNextInstruction();
 1468              		.loc 1 697 0
 1469 0208 FFF7FEFF 		bl	MoveToNextInstruction
 698:main.c        **** 
 699:main.c        ****                 
 700:main.c        ****                 return Stop;
 1470              		.loc 1 700 0
 1471 020c 0523     		movs	r3, #5
 1472 020e 2EE0     		b	.L70
 1473              	.L95:
 701:main.c        ****             }
 702:main.c        ****             
 703:main.c        ****             return ForwardCourseCorrection();
 1474              		.loc 1 703 0
 1475 0210 FFF7FEFF 		bl	ForwardCourseCorrection
 1476 0214 0346     		mov	r3, r0
 1477 0216 2AE0     		b	.L70
 1478              	.L67:
 704:main.c        ****             break;
 705:main.c        ****         case StopAtTarget:
 706:main.c        ****             // Reset Forward Until Target Flags (Had to move in here to make it work)
 707:main.c        ****             // Reset flags
 708:main.c        ****             totalDistance = 0;
 1479              		.loc 1 708 0
 1480 0218 274B     		ldr	r3, .L96+64
 1481 021a 4FF00002 		mov	r2, #0
 1482 021e 1A60     		str	r2, [r3]	@ float
 709:main.c        ****             forwardUntilTargetStartedFlag = 0;
 1483              		.loc 1 709 0
 1484 0220 244B     		ldr	r3, .L96+60
 1485 0222 0022     		movs	r2, #0
 1486 0224 1A70     		strb	r2, [r3]
 710:main.c        ****             blockSizeTotal = 0;
 1487              		.loc 1 710 0
 1488 0226 264B     		ldr	r3, .L96+72
 1489 0228 4FF00002 		mov	r2, #0
 1490 022c 1A60     		str	r2, [r3]	@ float
 711:main.c        ****             
 712:main.c        ****             if (stopBuffer <= 200) {
 1491              		.loc 1 712 0
 1492 022e 174B     		ldr	r3, .L96+20
 1493 0230 1B68     		ldr	r3, [r3]
 1494 0232 C82B     		cmp	r3, #200
 1495 0234 01D8     		bhi	.L91
 713:main.c        ****                 return Stop;    
 1496              		.loc 1 713 0
 1497 0236 0523     		movs	r3, #5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 40


 1498 0238 19E0     		b	.L70
 1499              	.L91:
 714:main.c        ****             }
 715:main.c        ****             return TurnRight;
 1500              		.loc 1 715 0
 1501 023a 0123     		movs	r3, #1
 1502 023c 17E0     		b	.L70
 1503              	.L65:
 716:main.c        ****             break;
 717:main.c        ****         case uTurn:
 718:main.c        ****             if (stopBuffer <= 200) {
 1504              		.loc 1 718 0
 1505 023e 134B     		ldr	r3, .L96+20
 1506 0240 1B68     		ldr	r3, [r3]
 1507 0242 C82B     		cmp	r3, #200
 1508 0244 01D8     		bhi	.L92
 719:main.c        ****                 return Stop;    
 1509              		.loc 1 719 0
 1510 0246 0523     		movs	r3, #5
 1511 0248 11E0     		b	.L70
 1512              	.L92:
 720:main.c        ****             }
 721:main.c        ****             
 722:main.c        ****             if (!uTurnStartedFlag) {
 1513              		.loc 1 722 0
 1514 024a 1E4B     		ldr	r3, .L96+76
 1515 024c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1516 024e 002B     		cmp	r3, #0
 1517 0250 04D1     		bne	.L93
 723:main.c        ****                 uTurnStartedFlag = 1;
 1518              		.loc 1 723 0
 1519 0252 1C4B     		ldr	r3, .L96+76
 1520 0254 0122     		movs	r2, #1
 1521 0256 1A70     		strb	r2, [r3]
 724:main.c        ****                 return Spin180;
 1522              		.loc 1 724 0
 1523 0258 0A23     		movs	r3, #10
 1524 025a 08E0     		b	.L70
 1525              	.L93:
 725:main.c        ****             } else {
 726:main.c        ****                 uTurnStartedFlag = 0;
 1526              		.loc 1 726 0
 1527 025c 194B     		ldr	r3, .L96+76
 1528 025e 0022     		movs	r2, #0
 1529 0260 1A70     		strb	r2, [r3]
 727:main.c        ****                 stopBuffer = 0;
 1530              		.loc 1 727 0
 1531 0262 0A4B     		ldr	r3, .L96+20
 1532 0264 0022     		movs	r2, #0
 1533 0266 1A60     		str	r2, [r3]
 728:main.c        ****                 return Stop;
 1534              		.loc 1 728 0
 1535 0268 0523     		movs	r3, #5
 1536 026a 00E0     		b	.L70
 1537              	.L60:
 729:main.c        ****                 /*
 730:main.c        ****                 // After 180, if we are not on black, then we course correct
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 41


 731:main.c        ****                 if (!s5 && !s6) {
 732:main.c        ****                     uTurnFinishedFlag = 1;    
 733:main.c        ****                 }
 734:main.c        ****                 
 735:main.c        ****                 if (!uTurnFinishedFlag) {
 736:main.c        ****                     return SpinCourseCorrection();    
 737:main.c        ****                 }
 738:main.c        ****                 
 739:main.c        ****                 if (uTurnFinishedFlag) {
 740:main.c        ****                     // GetNextInstruction
 741:main.c        ****                     uTurnFinishedFlag = 0;
 742:main.c        ****                     uTurnStartedFlag = 0;
 743:main.c        ****                     return Backward;    
 744:main.c        ****                 }*/
 745:main.c        ****                 return Backward;
 746:main.c        ****             }
 747:main.c        ****             break;
 748:main.c        ****         default:
 749:main.c        ****             return Stop;
 1538              		.loc 1 749 0
 1539 026c 0523     		movs	r3, #5
 1540              	.L70:
 750:main.c        ****             break;
 751:main.c        ****     }
 752:main.c        ****     return Stop;
 753:main.c        **** }
 1541              		.loc 1 753 0
 1542 026e 1846     		mov	r0, r3
 1543 0270 0837     		adds	r7, r7, #8
 1544              		.cfi_def_cfa_offset 8
 1545 0272 BD46     		mov	sp, r7
 1546              		.cfi_def_cfa_register 13
 1547              		@ sp needed
 1548 0274 80BD     		pop	{r7, pc}
 1549              	.L97:
 1550 0276 00BF     		.align	2
 1551              	.L96:
 1552 0278 00000000 		.word	currentRobotOrientation
 1553 027c 00000000 		.word	yBlocksize
 1554 0280 00000000 		.word	xBlocksize
 1555 0284 00000000 		.word	currentInstruction
 1556 0288 00000000 		.word	currentDirection
 1557 028c 00000000 		.word	stopBuffer
 1558 0290 00000000 		.word	s3
 1559 0294 00000000 		.word	leftWingFlag
 1560 0298 00000000 		.word	s4
 1561 029c 00000000 		.word	rightWingFlag
 1562 02a0 00000000 		.word	currentIgnoreL
 1563 02a4 00000000 		.word	turnFinishedFlag
 1564 02a8 00000000 		.word	turnStartedFlag
 1565 02ac 00000000 		.word	s5
 1566 02b0 00000000 		.word	s6
 1567 02b4 00000000 		.word	forwardUntilTargetStartedFlag
 1568 02b8 00000000 		.word	totalDistance
 1569 02bc 00004040 		.word	1077936128
 1570 02c0 00000000 		.word	blockSizeTotal
 1571 02c4 00000000 		.word	uTurnStartedFlag
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 42


 1572              		.cfi_endproc
 1573              	.LFE75:
 1574              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1575              		.global	__aeabi_i2f
 1576              		.section	.text.CalculateDistanceToTravel,"ax",%progbits
 1577              		.align	2
 1578              		.global	CalculateDistanceToTravel
 1579              		.thumb
 1580              		.thumb_func
 1581              		.type	CalculateDistanceToTravel, %function
 1582              	CalculateDistanceToTravel:
 1583              	.LFB76:
 754:main.c        **** 
 755:main.c        **** // Calculate total blocksize to travel until target
 756:main.c        **** float CalculateDistanceToTravel(float blockSize) {
 1584              		.loc 1 756 0
 1585              		.cfi_startproc
 1586              		@ args = 0, pretend = 0, frame = 40
 1587              		@ frame_needed = 1, uses_anonymous_args = 0
 1588 0000 80B5     		push	{r7, lr}
 1589              		.cfi_def_cfa_offset 8
 1590              		.cfi_offset 7, -8
 1591              		.cfi_offset 14, -4
 1592 0002 8AB0     		sub	sp, sp, #40
 1593              		.cfi_def_cfa_offset 48
 1594 0004 00AF     		add	r7, sp, #0
 1595              		.cfi_def_cfa_register 7
 1596 0006 7860     		str	r0, [r7, #4]	@ float
 757:main.c        ****     float totalBlockSize;
 758:main.c        ****     
 759:main.c        ****     // Check for Row, Col that target is 
 760:main.c        ****     int targetRow = food_list[0][0];
 1597              		.loc 1 760 0
 1598 0008 9D4B     		ldr	r3, .L143
 1599 000a 1B68     		ldr	r3, [r3]
 1600 000c 3B61     		str	r3, [r7, #16]
 761:main.c        ****     int targetCol = food_list[0][1];
 1601              		.loc 1 761 0
 1602 000e 9C4B     		ldr	r3, .L143
 1603 0010 5B68     		ldr	r3, [r3, #4]
 1604 0012 FB60     		str	r3, [r7, #12]
 762:main.c        ****     
 763:main.c        ****     int pathCount = 0;
 1605              		.loc 1 763 0
 1606 0014 0023     		movs	r3, #0
 1607 0016 7B62     		str	r3, [r7, #36]
 764:main.c        ****     
 765:main.c        ****     // Depending on the robot orientation
 766:main.c        ****     // count++ if row, col is 8
 767:main.c        ****     // count reset if row, col is 1 or 0
 768:main.c        ****     // save count if row, col is 9
 769:main.c        ****     switch (currentRobotOrientation) {
 1608              		.loc 1 769 0
 1609 0018 9A4B     		ldr	r3, .L143+4
 1610 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1611 001c 032B     		cmp	r3, #3
 1612 001e 00F21F81 		bhi	.L99
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 43


 1613 0022 01A2     		adr	r2, .L101
 1614 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1615              		.p2align 2
 1616              	.L101:
 1617 0028 39000000 		.word	.L100+1
 1618 002c C3000000 		.word	.L102+1
 1619 0030 4D010000 		.word	.L103+1
 1620 0034 D7010000 		.word	.L104+1
 1621              		.p2align 1
 1622              	.L100:
 1623              	.LBB3:
 770:main.c        ****         case Up:
 771:main.c        ****             // Column
 772:main.c        ****             // Start from Bottom (since we're facing up)
 773:main.c        ****             for (int i = MAX_ROWS; i >= 0; i--) {
 1624              		.loc 1 773 0
 1625 0038 0F23     		movs	r3, #15
 1626 003a 3B62     		str	r3, [r7, #32]
 1627 003c 3BE0     		b	.L105
 1628              	.L111:
 774:main.c        ****                 if (map[i][targetCol] == 9) {
 1629              		.loc 1 774 0
 1630 003e 9249     		ldr	r1, .L143+8
 1631 0040 3A6A     		ldr	r2, [r7, #32]
 1632 0042 1346     		mov	r3, r2
 1633 0044 DB00     		lsls	r3, r3, #3
 1634 0046 1344     		add	r3, r3, r2
 1635 0048 5B00     		lsls	r3, r3, #1
 1636 004a 1344     		add	r3, r3, r2
 1637 004c FA68     		ldr	r2, [r7, #12]
 1638 004e 1344     		add	r3, r3, r2
 1639 0050 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1640 0054 092B     		cmp	r3, #9
 1641 0056 32D0     		beq	.L138
 775:main.c        ****                     break;    
 776:main.c        ****                 }
 777:main.c        ****                 if (map[i][targetCol] == 8) {
 1642              		.loc 1 777 0
 1643 0058 8B49     		ldr	r1, .L143+8
 1644 005a 3A6A     		ldr	r2, [r7, #32]
 1645 005c 1346     		mov	r3, r2
 1646 005e DB00     		lsls	r3, r3, #3
 1647 0060 1344     		add	r3, r3, r2
 1648 0062 5B00     		lsls	r3, r3, #1
 1649 0064 1344     		add	r3, r3, r2
 1650 0066 FA68     		ldr	r2, [r7, #12]
 1651 0068 1344     		add	r3, r3, r2
 1652 006a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1653 006e 082B     		cmp	r3, #8
 1654 0070 02D1     		bne	.L108
 778:main.c        ****                     pathCount++;    
 1655              		.loc 1 778 0
 1656 0072 7B6A     		ldr	r3, [r7, #36]
 1657 0074 0133     		adds	r3, r3, #1
 1658 0076 7B62     		str	r3, [r7, #36]
 1659              	.L108:
 779:main.c        ****                 }
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 44


 780:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1660              		.loc 1 780 0
 1661 0078 8349     		ldr	r1, .L143+8
 1662 007a 3A6A     		ldr	r2, [r7, #32]
 1663 007c 1346     		mov	r3, r2
 1664 007e DB00     		lsls	r3, r3, #3
 1665 0080 1344     		add	r3, r3, r2
 1666 0082 5B00     		lsls	r3, r3, #1
 1667 0084 1344     		add	r3, r3, r2
 1668 0086 FA68     		ldr	r2, [r7, #12]
 1669 0088 1344     		add	r3, r3, r2
 1670 008a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1671 008e 002B     		cmp	r3, #0
 1672 0090 0CD0     		beq	.L109
 1673              		.loc 1 780 0 is_stmt 0 discriminator 1
 1674 0092 7D49     		ldr	r1, .L143+8
 1675 0094 3A6A     		ldr	r2, [r7, #32]
 1676 0096 1346     		mov	r3, r2
 1677 0098 DB00     		lsls	r3, r3, #3
 1678 009a 1344     		add	r3, r3, r2
 1679 009c 5B00     		lsls	r3, r3, #1
 1680 009e 1344     		add	r3, r3, r2
 1681 00a0 FA68     		ldr	r2, [r7, #12]
 1682 00a2 1344     		add	r3, r3, r2
 1683 00a4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1684 00a8 012B     		cmp	r3, #1
 1685 00aa 01D1     		bne	.L110
 1686              	.L109:
 781:main.c        ****                     pathCount = 0;
 1687              		.loc 1 781 0 is_stmt 1
 1688 00ac 0023     		movs	r3, #0
 1689 00ae 7B62     		str	r3, [r7, #36]
 1690              	.L110:
 773:main.c        ****                 if (map[i][targetCol] == 9) {
 1691              		.loc 1 773 0 discriminator 2
 1692 00b0 3B6A     		ldr	r3, [r7, #32]
 1693 00b2 013B     		subs	r3, r3, #1
 1694 00b4 3B62     		str	r3, [r7, #32]
 1695              	.L105:
 773:main.c        ****                 if (map[i][targetCol] == 9) {
 1696              		.loc 1 773 0 is_stmt 0 discriminator 1
 1697 00b6 3B6A     		ldr	r3, [r7, #32]
 1698 00b8 002B     		cmp	r3, #0
 1699 00ba C0DA     		bge	.L111
 1700              	.LBE3:
 782:main.c        ****                 }
 783:main.c        ****             }
 784:main.c        ****             break;
 1701              		.loc 1 784 0 is_stmt 1
 1702 00bc D0E0     		b	.L99
 1703              	.L138:
 1704              	.LBB4:
 775:main.c        ****                 }
 1705              		.loc 1 775 0
 1706 00be 00BF     		nop
 1707              	.LBE4:
 1708              		.loc 1 784 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 45


 1709 00c0 CEE0     		b	.L99
 1710              	.L102:
 1711              	.LBB5:
 785:main.c        ****         case Down:
 786:main.c        ****             // Target Column, Check Row
 787:main.c        ****             // Start from Top
 788:main.c        ****             for (int i = 0; i < MAX_ROWS; i++) {
 1712              		.loc 1 788 0
 1713 00c2 0023     		movs	r3, #0
 1714 00c4 FB61     		str	r3, [r7, #28]
 1715 00c6 3BE0     		b	.L112
 1716              	.L118:
 789:main.c        ****                 if (map[i][targetCol] == 9) {
 1717              		.loc 1 789 0
 1718 00c8 6F49     		ldr	r1, .L143+8
 1719 00ca FA69     		ldr	r2, [r7, #28]
 1720 00cc 1346     		mov	r3, r2
 1721 00ce DB00     		lsls	r3, r3, #3
 1722 00d0 1344     		add	r3, r3, r2
 1723 00d2 5B00     		lsls	r3, r3, #1
 1724 00d4 1344     		add	r3, r3, r2
 1725 00d6 FA68     		ldr	r2, [r7, #12]
 1726 00d8 1344     		add	r3, r3, r2
 1727 00da 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1728 00de 092B     		cmp	r3, #9
 1729 00e0 32D0     		beq	.L139
 790:main.c        ****                     break;    
 791:main.c        ****                 }
 792:main.c        ****                 if (map[i][targetCol] == 8) {
 1730              		.loc 1 792 0
 1731 00e2 6949     		ldr	r1, .L143+8
 1732 00e4 FA69     		ldr	r2, [r7, #28]
 1733 00e6 1346     		mov	r3, r2
 1734 00e8 DB00     		lsls	r3, r3, #3
 1735 00ea 1344     		add	r3, r3, r2
 1736 00ec 5B00     		lsls	r3, r3, #1
 1737 00ee 1344     		add	r3, r3, r2
 1738 00f0 FA68     		ldr	r2, [r7, #12]
 1739 00f2 1344     		add	r3, r3, r2
 1740 00f4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1741 00f8 082B     		cmp	r3, #8
 1742 00fa 02D1     		bne	.L115
 793:main.c        ****                     pathCount++;    
 1743              		.loc 1 793 0
 1744 00fc 7B6A     		ldr	r3, [r7, #36]
 1745 00fe 0133     		adds	r3, r3, #1
 1746 0100 7B62     		str	r3, [r7, #36]
 1747              	.L115:
 794:main.c        ****                 }
 795:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1748              		.loc 1 795 0
 1749 0102 6149     		ldr	r1, .L143+8
 1750 0104 FA69     		ldr	r2, [r7, #28]
 1751 0106 1346     		mov	r3, r2
 1752 0108 DB00     		lsls	r3, r3, #3
 1753 010a 1344     		add	r3, r3, r2
 1754 010c 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 46


 1755 010e 1344     		add	r3, r3, r2
 1756 0110 FA68     		ldr	r2, [r7, #12]
 1757 0112 1344     		add	r3, r3, r2
 1758 0114 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1759 0118 002B     		cmp	r3, #0
 1760 011a 0CD0     		beq	.L116
 1761              		.loc 1 795 0 is_stmt 0 discriminator 1
 1762 011c 5A49     		ldr	r1, .L143+8
 1763 011e FA69     		ldr	r2, [r7, #28]
 1764 0120 1346     		mov	r3, r2
 1765 0122 DB00     		lsls	r3, r3, #3
 1766 0124 1344     		add	r3, r3, r2
 1767 0126 5B00     		lsls	r3, r3, #1
 1768 0128 1344     		add	r3, r3, r2
 1769 012a FA68     		ldr	r2, [r7, #12]
 1770 012c 1344     		add	r3, r3, r2
 1771 012e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1772 0132 012B     		cmp	r3, #1
 1773 0134 01D1     		bne	.L117
 1774              	.L116:
 796:main.c        ****                     pathCount = 0;
 1775              		.loc 1 796 0 is_stmt 1
 1776 0136 0023     		movs	r3, #0
 1777 0138 7B62     		str	r3, [r7, #36]
 1778              	.L117:
 788:main.c        ****                 if (map[i][targetCol] == 9) {
 1779              		.loc 1 788 0 discriminator 2
 1780 013a FB69     		ldr	r3, [r7, #28]
 1781 013c 0133     		adds	r3, r3, #1
 1782 013e FB61     		str	r3, [r7, #28]
 1783              	.L112:
 788:main.c        ****                 if (map[i][targetCol] == 9) {
 1784              		.loc 1 788 0 is_stmt 0 discriminator 1
 1785 0140 FB69     		ldr	r3, [r7, #28]
 1786 0142 0E2B     		cmp	r3, #14
 1787 0144 C0DD     		ble	.L118
 1788              	.LBE5:
 797:main.c        ****                 }
 798:main.c        ****             }
 799:main.c        ****             break;
 1789              		.loc 1 799 0 is_stmt 1
 1790 0146 8BE0     		b	.L99
 1791              	.L139:
 1792              	.LBB6:
 790:main.c        ****                 }
 1793              		.loc 1 790 0
 1794 0148 00BF     		nop
 1795              	.LBE6:
 1796              		.loc 1 799 0
 1797 014a 89E0     		b	.L99
 1798              	.L103:
 1799              	.LBB7:
 800:main.c        ****         case Left:
 801:main.c        ****             // Target Row, Check Col
 802:main.c        ****             // Start from Right
 803:main.c        ****             for (int i = MAX_COLS; i >= 0; i--) {
 1800              		.loc 1 803 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 47


 1801 014c 1323     		movs	r3, #19
 1802 014e BB61     		str	r3, [r7, #24]
 1803 0150 3BE0     		b	.L119
 1804              	.L125:
 804:main.c        ****                 if (map[targetRow][i] == 9) {
 1805              		.loc 1 804 0
 1806 0152 4D49     		ldr	r1, .L143+8
 1807 0154 3A69     		ldr	r2, [r7, #16]
 1808 0156 1346     		mov	r3, r2
 1809 0158 DB00     		lsls	r3, r3, #3
 1810 015a 1344     		add	r3, r3, r2
 1811 015c 5B00     		lsls	r3, r3, #1
 1812 015e 1344     		add	r3, r3, r2
 1813 0160 BA69     		ldr	r2, [r7, #24]
 1814 0162 1344     		add	r3, r3, r2
 1815 0164 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1816 0168 092B     		cmp	r3, #9
 1817 016a 32D0     		beq	.L140
 805:main.c        ****                     break;    
 806:main.c        ****                 }
 807:main.c        ****                 if (map[targetRow][i] == 8) {
 1818              		.loc 1 807 0
 1819 016c 4649     		ldr	r1, .L143+8
 1820 016e 3A69     		ldr	r2, [r7, #16]
 1821 0170 1346     		mov	r3, r2
 1822 0172 DB00     		lsls	r3, r3, #3
 1823 0174 1344     		add	r3, r3, r2
 1824 0176 5B00     		lsls	r3, r3, #1
 1825 0178 1344     		add	r3, r3, r2
 1826 017a BA69     		ldr	r2, [r7, #24]
 1827 017c 1344     		add	r3, r3, r2
 1828 017e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1829 0182 082B     		cmp	r3, #8
 1830 0184 02D1     		bne	.L122
 808:main.c        ****                     pathCount++;    
 1831              		.loc 1 808 0
 1832 0186 7B6A     		ldr	r3, [r7, #36]
 1833 0188 0133     		adds	r3, r3, #1
 1834 018a 7B62     		str	r3, [r7, #36]
 1835              	.L122:
 809:main.c        ****                 }
 810:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1836              		.loc 1 810 0
 1837 018c 3E49     		ldr	r1, .L143+8
 1838 018e 3A69     		ldr	r2, [r7, #16]
 1839 0190 1346     		mov	r3, r2
 1840 0192 DB00     		lsls	r3, r3, #3
 1841 0194 1344     		add	r3, r3, r2
 1842 0196 5B00     		lsls	r3, r3, #1
 1843 0198 1344     		add	r3, r3, r2
 1844 019a BA69     		ldr	r2, [r7, #24]
 1845 019c 1344     		add	r3, r3, r2
 1846 019e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1847 01a2 002B     		cmp	r3, #0
 1848 01a4 0CD0     		beq	.L123
 1849              		.loc 1 810 0 is_stmt 0 discriminator 1
 1850 01a6 3849     		ldr	r1, .L143+8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 48


 1851 01a8 BA69     		ldr	r2, [r7, #24]
 1852 01aa 1346     		mov	r3, r2
 1853 01ac DB00     		lsls	r3, r3, #3
 1854 01ae 1344     		add	r3, r3, r2
 1855 01b0 5B00     		lsls	r3, r3, #1
 1856 01b2 1344     		add	r3, r3, r2
 1857 01b4 FA68     		ldr	r2, [r7, #12]
 1858 01b6 1344     		add	r3, r3, r2
 1859 01b8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1860 01bc 012B     		cmp	r3, #1
 1861 01be 01D1     		bne	.L124
 1862              	.L123:
 811:main.c        ****                     pathCount = 0;
 1863              		.loc 1 811 0 is_stmt 1
 1864 01c0 0023     		movs	r3, #0
 1865 01c2 7B62     		str	r3, [r7, #36]
 1866              	.L124:
 803:main.c        ****                 if (map[targetRow][i] == 9) {
 1867              		.loc 1 803 0 discriminator 2
 1868 01c4 BB69     		ldr	r3, [r7, #24]
 1869 01c6 013B     		subs	r3, r3, #1
 1870 01c8 BB61     		str	r3, [r7, #24]
 1871              	.L119:
 803:main.c        ****                 if (map[targetRow][i] == 9) {
 1872              		.loc 1 803 0 is_stmt 0 discriminator 1
 1873 01ca BB69     		ldr	r3, [r7, #24]
 1874 01cc 002B     		cmp	r3, #0
 1875 01ce C0DA     		bge	.L125
 1876              	.LBE7:
 812:main.c        ****                 }
 813:main.c        ****             }
 814:main.c        ****             break;
 1877              		.loc 1 814 0 is_stmt 1
 1878 01d0 46E0     		b	.L99
 1879              	.L140:
 1880              	.LBB8:
 805:main.c        ****                 }
 1881              		.loc 1 805 0
 1882 01d2 00BF     		nop
 1883              	.LBE8:
 1884              		.loc 1 814 0
 1885 01d4 44E0     		b	.L99
 1886              	.L104:
 1887              	.LBB9:
 815:main.c        ****         
 816:main.c        ****         case Right:
 817:main.c        ****             // Target Row, Check Col
 818:main.c        ****             // Start from Left
 819:main.c        ****             for (int i = 0; i < MAX_COLS; i++) {
 1888              		.loc 1 819 0
 1889 01d6 0023     		movs	r3, #0
 1890 01d8 7B61     		str	r3, [r7, #20]
 1891 01da 3BE0     		b	.L126
 1892              	.L132:
 820:main.c        ****                 if (map[targetRow][i] == 9) {
 1893              		.loc 1 820 0
 1894 01dc 2A49     		ldr	r1, .L143+8
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 49


 1895 01de 3A69     		ldr	r2, [r7, #16]
 1896 01e0 1346     		mov	r3, r2
 1897 01e2 DB00     		lsls	r3, r3, #3
 1898 01e4 1344     		add	r3, r3, r2
 1899 01e6 5B00     		lsls	r3, r3, #1
 1900 01e8 1344     		add	r3, r3, r2
 1901 01ea 7A69     		ldr	r2, [r7, #20]
 1902 01ec 1344     		add	r3, r3, r2
 1903 01ee 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1904 01f2 092B     		cmp	r3, #9
 1905 01f4 32D0     		beq	.L141
 821:main.c        ****                     break;    
 822:main.c        ****                 }
 823:main.c        ****                 if (map[targetRow][i] == 8) {
 1906              		.loc 1 823 0
 1907 01f6 2449     		ldr	r1, .L143+8
 1908 01f8 3A69     		ldr	r2, [r7, #16]
 1909 01fa 1346     		mov	r3, r2
 1910 01fc DB00     		lsls	r3, r3, #3
 1911 01fe 1344     		add	r3, r3, r2
 1912 0200 5B00     		lsls	r3, r3, #1
 1913 0202 1344     		add	r3, r3, r2
 1914 0204 7A69     		ldr	r2, [r7, #20]
 1915 0206 1344     		add	r3, r3, r2
 1916 0208 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1917 020c 082B     		cmp	r3, #8
 1918 020e 02D1     		bne	.L129
 824:main.c        ****                     pathCount++;    
 1919              		.loc 1 824 0
 1920 0210 7B6A     		ldr	r3, [r7, #36]
 1921 0212 0133     		adds	r3, r3, #1
 1922 0214 7B62     		str	r3, [r7, #36]
 1923              	.L129:
 825:main.c        ****                 }
 826:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1924              		.loc 1 826 0
 1925 0216 1C49     		ldr	r1, .L143+8
 1926 0218 3A69     		ldr	r2, [r7, #16]
 1927 021a 1346     		mov	r3, r2
 1928 021c DB00     		lsls	r3, r3, #3
 1929 021e 1344     		add	r3, r3, r2
 1930 0220 5B00     		lsls	r3, r3, #1
 1931 0222 1344     		add	r3, r3, r2
 1932 0224 7A69     		ldr	r2, [r7, #20]
 1933 0226 1344     		add	r3, r3, r2
 1934 0228 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1935 022c 002B     		cmp	r3, #0
 1936 022e 0CD0     		beq	.L130
 1937              		.loc 1 826 0 is_stmt 0 discriminator 1
 1938 0230 1549     		ldr	r1, .L143+8
 1939 0232 7A69     		ldr	r2, [r7, #20]
 1940 0234 1346     		mov	r3, r2
 1941 0236 DB00     		lsls	r3, r3, #3
 1942 0238 1344     		add	r3, r3, r2
 1943 023a 5B00     		lsls	r3, r3, #1
 1944 023c 1344     		add	r3, r3, r2
 1945 023e FA68     		ldr	r2, [r7, #12]
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 50


 1946 0240 1344     		add	r3, r3, r2
 1947 0242 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1948 0246 012B     		cmp	r3, #1
 1949 0248 01D1     		bne	.L131
 1950              	.L130:
 827:main.c        ****                     pathCount = 0;
 1951              		.loc 1 827 0 is_stmt 1
 1952 024a 0023     		movs	r3, #0
 1953 024c 7B62     		str	r3, [r7, #36]
 1954              	.L131:
 819:main.c        ****                 if (map[targetRow][i] == 9) {
 1955              		.loc 1 819 0 discriminator 2
 1956 024e 7B69     		ldr	r3, [r7, #20]
 1957 0250 0133     		adds	r3, r3, #1
 1958 0252 7B61     		str	r3, [r7, #20]
 1959              	.L126:
 819:main.c        ****                 if (map[targetRow][i] == 9) {
 1960              		.loc 1 819 0 is_stmt 0 discriminator 1
 1961 0254 7B69     		ldr	r3, [r7, #20]
 1962 0256 122B     		cmp	r3, #18
 1963 0258 C0DD     		ble	.L132
 1964              	.LBE9:
 828:main.c        ****                 }
 829:main.c        **** 
 830:main.c        ****             }
 831:main.c        ****             break;
 1965              		.loc 1 831 0 is_stmt 1
 1966 025a 00E0     		b	.L142
 1967              	.L141:
 1968              	.LBB10:
 821:main.c        ****                 }
 1969              		.loc 1 821 0
 1970 025c 00BF     		nop
 1971              	.L142:
 1972              	.LBE10:
 1973              		.loc 1 831 0
 1974 025e 00BF     		nop
 1975              	.L99:
 832:main.c        ****         
 833:main.c        ****     }
 834:main.c        ****     totalBlockSize = blockSize * pathCount;
 1976              		.loc 1 834 0
 1977 0260 786A     		ldr	r0, [r7, #36]
 1978 0262 FFF7FEFF 		bl	__aeabi_i2f
 1979 0266 0346     		mov	r3, r0
 1980 0268 7968     		ldr	r1, [r7, #4]	@ float
 1981 026a 1846     		mov	r0, r3
 1982 026c FFF7FEFF 		bl	__aeabi_fmul
 1983 0270 0346     		mov	r3, r0
 1984 0272 BB60     		str	r3, [r7, #8]	@ float
 835:main.c        ****     return totalBlockSize;
 1985              		.loc 1 835 0
 1986 0274 BB68     		ldr	r3, [r7, #8]	@ float
 836:main.c        **** }
 1987              		.loc 1 836 0
 1988 0276 1846     		mov	r0, r3
 1989 0278 2837     		adds	r7, r7, #40
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 51


 1990              		.cfi_def_cfa_offset 8
 1991 027a BD46     		mov	sp, r7
 1992              		.cfi_def_cfa_register 13
 1993              		@ sp needed
 1994 027c 80BD     		pop	{r7, pc}
 1995              	.L144:
 1996 027e 00BF     		.align	2
 1997              	.L143:
 1998 0280 00000000 		.word	food_list
 1999 0284 00000000 		.word	currentRobotOrientation
 2000 0288 00000000 		.word	map
 2001              		.cfi_endproc
 2002              	.LFE76:
 2003              		.size	CalculateDistanceToTravel, .-CalculateDistanceToTravel
 2004              		.section	.text.MoveToNextInstruction,"ax",%progbits
 2005              		.align	2
 2006              		.global	MoveToNextInstruction
 2007              		.thumb
 2008              		.thumb_func
 2009              		.type	MoveToNextInstruction, %function
 2010              	MoveToNextInstruction:
 2011              	.LFB77:
 837:main.c        **** 
 838:main.c        **** // get next instruction
 839:main.c        **** void MoveToNextInstruction() {
 2012              		.loc 1 839 0
 2013              		.cfi_startproc
 2014              		@ args = 0, pretend = 0, frame = 0
 2015              		@ frame_needed = 1, uses_anonymous_args = 0
 2016              		@ link register save eliminated.
 2017 0000 80B4     		push	{r7}
 2018              		.cfi_def_cfa_offset 4
 2019              		.cfi_offset 7, -4
 2020 0002 00AF     		add	r7, sp, #0
 2021              		.cfi_def_cfa_register 7
 840:main.c        ****     instructionIndex++;
 2022              		.loc 1 840 0
 2023 0004 044B     		ldr	r3, .L146
 2024 0006 1B68     		ldr	r3, [r3]
 2025 0008 0133     		adds	r3, r3, #1
 2026 000a 034A     		ldr	r2, .L146
 2027 000c 1360     		str	r3, [r2]
 841:main.c        **** }
 2028              		.loc 1 841 0
 2029 000e 00BF     		nop
 2030 0010 BD46     		mov	sp, r7
 2031              		.cfi_def_cfa_register 13
 2032              		@ sp needed
 2033 0012 80BC     		pop	{r7}
 2034              		.cfi_restore 7
 2035              		.cfi_def_cfa_offset 0
 2036 0014 7047     		bx	lr
 2037              	.L147:
 2038 0016 00BF     		.align	2
 2039              	.L146:
 2040 0018 00000000 		.word	instructionIndex
 2041              		.cfi_endproc
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 52


 2042              	.LFE77:
 2043              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 2044              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 2045              		.align	2
 2046              		.global	GetInstructionAtIndex
 2047              		.thumb
 2048              		.thumb_func
 2049              		.type	GetInstructionAtIndex, %function
 2050              	GetInstructionAtIndex:
 2051              	.LFB78:
 842:main.c        **** 
 843:main.c        **** 
 844:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 2052              		.loc 1 844 0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 40
 2055              		@ frame_needed = 1, uses_anonymous_args = 0
 2056              		@ link register save eliminated.
 2057 0000 90B4     		push	{r4, r7}
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 4, -8
 2060              		.cfi_offset 7, -4
 2061 0002 8AB0     		sub	sp, sp, #40
 2062              		.cfi_def_cfa_offset 48
 2063 0004 00AF     		add	r7, sp, #0
 2064              		.cfi_def_cfa_register 7
 2065 0006 F860     		str	r0, [r7, #12]
 2066 0008 B960     		str	r1, [r7, #8]
 2067 000a 7A60     		str	r2, [r7, #4]
 2068 000c 3B60     		str	r3, [r7]
 2069              	.LBB11:
 845:main.c        ****     Instruction nextInstruction;
 846:main.c        ****     // input is list of instructions and robot will react accordingly
 847:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 2070              		.loc 1 847 0
 2071 000e 3B68     		ldr	r3, [r7]
 2072 0010 7B62     		str	r3, [r7, #36]
 2073 0012 20E0     		b	.L149
 2074              	.L152:
 848:main.c        ****         if(instructionList[i].direction != Skip) {
 2075              		.loc 1 848 0
 2076 0014 7B6A     		ldr	r3, [r7, #36]
 2077 0016 1B01     		lsls	r3, r3, #4
 2078 0018 7A68     		ldr	r2, [r7, #4]
 2079 001a 1344     		add	r3, r3, r2
 2080 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2081 001e 062B     		cmp	r3, #6
 2082 0020 14D0     		beq	.L150
 849:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 2083              		.loc 1 849 0
 2084 0022 7B6A     		ldr	r3, [r7, #36]
 2085 0024 1B01     		lsls	r3, r3, #4
 2086 0026 7A68     		ldr	r2, [r7, #4]
 2087 0028 1344     		add	r3, r3, r2
 2088 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2089 002c 3B75     		strb	r3, [r7, #20]
 850:main.c        ****             //currentIgnoreL = instructionList[i].ignoreL;
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 53


 851:main.c        ****             //currentIgnoreR = instructionList[i].ignoreR;
 852:main.c        ****             nextInstruction.expectedOrientation = instructionList[i].expectedOrientation;
 2090              		.loc 1 852 0
 2091 002e 7B6A     		ldr	r3, [r7, #36]
 2092 0030 1B01     		lsls	r3, r3, #4
 2093 0032 7A68     		ldr	r2, [r7, #4]
 2094 0034 1344     		add	r3, r3, r2
 2095 0036 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 2096 0038 87F82030 		strb	r3, [r7, #32]
 853:main.c        ****             return nextInstruction; // return next instruction
 2097              		.loc 1 853 0
 2098 003c FB68     		ldr	r3, [r7, #12]
 2099 003e 1C46     		mov	r4, r3
 2100 0040 07F11403 		add	r3, r7, #20
 2101 0044 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2102 0046 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2103 004a 0FE0     		b	.L148
 2104              	.L150:
 854:main.c        ****         }
 855:main.c        ****         instructionIndex = i;
 2105              		.loc 1 855 0 discriminator 2
 2106 004c 7B6A     		ldr	r3, [r7, #36]
 2107 004e 3B60     		str	r3, [r7]
 847:main.c        ****         if(instructionList[i].direction != Skip) {
 2108              		.loc 1 847 0 discriminator 2
 2109 0050 7B6A     		ldr	r3, [r7, #36]
 2110 0052 0133     		adds	r3, r3, #1
 2111 0054 7B62     		str	r3, [r7, #36]
 2112              	.L149:
 847:main.c        ****         if(instructionList[i].direction != Skip) {
 2113              		.loc 1 847 0 is_stmt 0 discriminator 1
 2114 0056 7A6A     		ldr	r2, [r7, #36]
 2115 0058 BB68     		ldr	r3, [r7, #8]
 2116 005a 9A42     		cmp	r2, r3
 2117 005c DADB     		blt	.L152
 2118              	.LBE11:
 856:main.c        ****     }
 857:main.c        ****     return nextInstruction;
 2119              		.loc 1 857 0 is_stmt 1
 2120 005e FB68     		ldr	r3, [r7, #12]
 2121 0060 1C46     		mov	r4, r3
 2122 0062 07F11403 		add	r3, r7, #20
 2123 0066 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2124 0068 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 2125              	.L148:
 858:main.c        **** }
 2126              		.loc 1 858 0
 2127 006c F868     		ldr	r0, [r7, #12]
 2128 006e 2837     		adds	r7, r7, #40
 2129              		.cfi_def_cfa_offset 8
 2130 0070 BD46     		mov	sp, r7
 2131              		.cfi_def_cfa_register 13
 2132              		@ sp needed
 2133 0072 90BC     		pop	{r4, r7}
 2134              		.cfi_restore 7
 2135              		.cfi_restore 4
 2136              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 54


 2137 0074 7047     		bx	lr
 2138              		.cfi_endproc
 2139              	.LFE78:
 2140              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 2141 0076 00BF     		.section	.text.SetRobotMovement,"ax",%progbits
 2142              		.align	2
 2143              		.global	SetRobotMovement
 2144              		.thumb
 2145              		.thumb_func
 2146              		.type	SetRobotMovement, %function
 2147              	SetRobotMovement:
 2148              	.LFB79:
 859:main.c        **** 
 860:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 861:main.c        **** void SetRobotMovement() {
 2149              		.loc 1 861 0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 16
 2152              		@ frame_needed = 1, uses_anonymous_args = 0
 2153 0000 90B5     		push	{r4, r7, lr}
 2154              		.cfi_def_cfa_offset 12
 2155              		.cfi_offset 4, -12
 2156              		.cfi_offset 7, -8
 2157              		.cfi_offset 14, -4
 2158 0002 85B0     		sub	sp, sp, #20
 2159              		.cfi_def_cfa_offset 32
 2160 0004 00AF     		add	r7, sp, #0
 2161              		.cfi_def_cfa_register 7
 862:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 2162              		.loc 1 862 0
 2163 0006 2A4B     		ldr	r3, .L170
 2164 0008 1968     		ldr	r1, [r3]
 2165 000a 2A4B     		ldr	r3, .L170+4
 2166 000c 1A68     		ldr	r2, [r3]
 2167 000e 2A4B     		ldr	r3, .L170+8
 2168 0010 1B68     		ldr	r3, [r3]
 2169 0012 2A4C     		ldr	r4, .L170+12
 2170 0014 3846     		mov	r0, r7
 2171 0016 FFF7FEFF 		bl	GetInstructionAtIndex
 2172 001a 3B46     		mov	r3, r7
 2173 001c 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 2174 001e 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 863:main.c        ****     previousDirection = currentDirection;
 2175              		.loc 1 863 0
 2176 0022 274B     		ldr	r3, .L170+16
 2177 0024 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2178 0026 274B     		ldr	r3, .L170+20
 2179 0028 1A70     		strb	r2, [r3]
 864:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 2180              		.loc 1 864 0
 2181 002a FFF7FEFF 		bl	GetMovementAccordingToInstruction
 2182 002e 0346     		mov	r3, r0
 2183 0030 1A46     		mov	r2, r3
 2184 0032 234B     		ldr	r3, .L170+16
 2185 0034 1A70     		strb	r2, [r3]
 865:main.c        ****     // move robot depending on sensors
 866:main.c        ****     switch (currentDirection) {
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 55


 2186              		.loc 1 866 0
 2187 0036 224B     		ldr	r3, .L170+16
 2188 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2189 003a 0A2B     		cmp	r3, #10
 2190 003c 34D8     		bhi	.L168
 2191 003e 01A2     		adr	r2, .L157
 2192 0040 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2193              		.p2align 2
 2194              	.L157:
 2195 0044 71000000 		.word	.L156+1
 2196 0048 77000000 		.word	.L158+1
 2197 004c 7D000000 		.word	.L159+1
 2198 0050 89000000 		.word	.L160+1
 2199 0054 83000000 		.word	.L161+1
 2200 0058 8F000000 		.word	.L162+1
 2201 005c A7000000 		.word	.L169+1
 2202 0060 A7000000 		.word	.L169+1
 2203 0064 95000000 		.word	.L165+1
 2204 0068 9B000000 		.word	.L166+1
 2205 006c A1000000 		.word	.L167+1
 2206              		.p2align 1
 2207              	.L156:
 867:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 868:main.c        ****         case Forward:
 869:main.c        ****             moveForward();
 2208              		.loc 1 869 0
 2209 0070 FFF7FEFF 		bl	moveForward
 870:main.c        ****             break;
 2210              		.loc 1 870 0
 2211 0074 18E0     		b	.L155
 2212              	.L158:
 871:main.c        ****         case TurnRight:
 872:main.c        ****             turnRight();
 2213              		.loc 1 872 0
 2214 0076 FFF7FEFF 		bl	turnRight
 873:main.c        ****             break;
 2215              		.loc 1 873 0
 2216 007a 15E0     		b	.L155
 2217              	.L159:
 874:main.c        ****         case TurnLeft:
 875:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 2218              		.loc 1 875 0
 2219 007c FFF7FEFF 		bl	turnLeft
 876:main.c        ****             break;
 2220              		.loc 1 876 0
 2221 0080 12E0     		b	.L155
 2222              	.L161:
 877:main.c        ****         case AdjustToTheRight:
 878:main.c        ****             adjustRight();
 2223              		.loc 1 878 0
 2224 0082 FFF7FEFF 		bl	adjustRight
 879:main.c        ****             break;
 2225              		.loc 1 879 0
 2226 0086 0FE0     		b	.L155
 2227              	.L160:
 880:main.c        ****         case AdjustToTheLeft:
 881:main.c        ****             adjustLeft();
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 56


 2228              		.loc 1 881 0
 2229 0088 FFF7FEFF 		bl	adjustLeft
 882:main.c        ****             break;
 2230              		.loc 1 882 0
 2231 008c 0CE0     		b	.L155
 2232              	.L162:
 883:main.c        ****         case Stop:
 884:main.c        ****             stopMoving();
 2233              		.loc 1 884 0
 2234 008e FFF7FEFF 		bl	stopMoving
 885:main.c        ****             break;
 2235              		.loc 1 885 0
 2236 0092 09E0     		b	.L155
 2237              	.L165:
 886:main.c        ****         case ForwardAfterTurn:
 887:main.c        ****             moveForward();
 2238              		.loc 1 887 0
 2239 0094 FFF7FEFF 		bl	moveForward
 888:main.c        ****             break;
 2240              		.loc 1 888 0
 2241 0098 06E0     		b	.L155
 2242              	.L166:
 889:main.c        ****         case Backward:
 890:main.c        ****             moveBackward();
 2243              		.loc 1 890 0
 2244 009a FFF7FEFF 		bl	moveBackward
 891:main.c        ****             break;
 2245              		.loc 1 891 0
 2246 009e 03E0     		b	.L155
 2247              	.L167:
 892:main.c        ****         case waitForTurn:
 893:main.c        ****             break;
 894:main.c        ****         case Spin180:
 895:main.c        ****             RotateClockwise180Degrees();
 2248              		.loc 1 895 0
 2249 00a0 FFF7FEFF 		bl	RotateClockwise180Degrees
 896:main.c        ****             break;
 2250              		.loc 1 896 0
 2251 00a4 00E0     		b	.L155
 2252              	.L169:
 897:main.c        ****         /*case waitForLeftTurn:
 898:main.c        ****             moveForward();
 899:main.c        ****             break;
 900:main.c        ****         case waitForRightTurn:
 901:main.c        ****             moveForward();
 902:main.c        ****             break;*/
 903:main.c        ****         case Unknown:
 904:main.c        ****             // UNKNOWN CONFIGURATION
 905:main.c        ****             break;  
 2253              		.loc 1 905 0
 2254 00a6 00BF     		nop
 2255              	.L155:
 2256              	.L168:
 906:main.c        ****     }
 907:main.c        **** }...
 2257              		.loc 1 907 0
 2258 00a8 00BF     		nop
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 57


 2259 00aa 1437     		adds	r7, r7, #20
 2260              		.cfi_def_cfa_offset 12
 2261 00ac BD46     		mov	sp, r7
 2262              		.cfi_def_cfa_register 13
 2263              		@ sp needed
 2264 00ae 90BD     		pop	{r4, r7, pc}
 2265              	.L171:
 2266              		.align	2
 2267              	.L170:
 2268 00b0 00000000 		.word	numSteps
 2269 00b4 00000000 		.word	instructionList
 2270 00b8 00000000 		.word	instructionIndex
 2271 00bc 00000000 		.word	currentInstruction
 2272 00c0 00000000 		.word	currentDirection
 2273 00c4 00000000 		.word	previousDirection
 2274              		.cfi_endproc
 2275              	.LFE79:
 2276              		.size	SetRobotMovement, .-SetRobotMovement
 2277              		.text
 2278              	.Letext0:
 2279              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2280              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2281              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2282              		.file 5 "vars.h"
 2283              		.file 6 "pathfinding.h"
 2284              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2285              		.file 8 "map.h"
 2286              		.section	.debug_info,"",%progbits
 2287              	.Ldebug_info0:
 2288 0000 BB090000 		.4byte	0x9bb
 2289 0004 0400     		.2byte	0x4
 2290 0006 00000000 		.4byte	.Ldebug_abbrev0
 2291 000a 04       		.byte	0x4
 2292 000b 01       		.uleb128 0x1
 2293 000c A0000000 		.4byte	.LASF148
 2294 0010 0C       		.byte	0xc
 2295 0011 30000000 		.4byte	.LASF149
 2296 0015 6A030000 		.4byte	.LASF150
 2297 0019 60000000 		.4byte	.Ldebug_ranges0+0x60
 2298 001d 00000000 		.4byte	0
 2299 0021 00000000 		.4byte	.Ldebug_line0
 2300 0025 02       		.uleb128 0x2
 2301 0026 01       		.byte	0x1
 2302 0027 06       		.byte	0x6
 2303 0028 8F070000 		.4byte	.LASF0
 2304 002c 02       		.uleb128 0x2
 2305 002d 01       		.byte	0x1
 2306 002e 08       		.byte	0x8
 2307 002f C7060000 		.4byte	.LASF1
 2308 0033 02       		.uleb128 0x2
 2309 0034 02       		.byte	0x2
 2310 0035 05       		.byte	0x5
 2311 0036 9E050000 		.4byte	.LASF2
 2312 003a 02       		.uleb128 0x2
 2313 003b 02       		.byte	0x2
 2314 003c 07       		.byte	0x7
 2315 003d A6070000 		.4byte	.LASF3
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 58


 2316 0041 03       		.uleb128 0x3
 2317 0042 65000000 		.4byte	.LASF12
 2318 0046 02       		.byte	0x2
 2319 0047 3F       		.byte	0x3f
 2320 0048 4C000000 		.4byte	0x4c
 2321 004c 02       		.uleb128 0x2
 2322 004d 04       		.byte	0x4
 2323 004e 05       		.byte	0x5
 2324 004f B4050000 		.4byte	.LASF4
 2325 0053 02       		.uleb128 0x2
 2326 0054 04       		.byte	0x4
 2327 0055 07       		.byte	0x7
 2328 0056 71060000 		.4byte	.LASF5
 2329 005a 02       		.uleb128 0x2
 2330 005b 08       		.byte	0x8
 2331 005c 05       		.byte	0x5
 2332 005d 4B040000 		.4byte	.LASF6
 2333 0061 02       		.uleb128 0x2
 2334 0062 08       		.byte	0x8
 2335 0063 07       		.byte	0x7
 2336 0064 99020000 		.4byte	.LASF7
 2337 0068 04       		.uleb128 0x4
 2338 0069 04       		.byte	0x4
 2339 006a 05       		.byte	0x5
 2340 006b 696E7400 		.ascii	"int\000"
 2341 006f 02       		.uleb128 0x2
 2342 0070 04       		.byte	0x4
 2343 0071 07       		.byte	0x7
 2344 0072 58000000 		.4byte	.LASF8
 2345 0076 02       		.uleb128 0x2
 2346 0077 08       		.byte	0x8
 2347 0078 04       		.byte	0x4
 2348 0079 62050000 		.4byte	.LASF9
 2349 007d 02       		.uleb128 0x2
 2350 007e 04       		.byte	0x4
 2351 007f 07       		.byte	0x7
 2352 0080 68060000 		.4byte	.LASF10
 2353 0084 02       		.uleb128 0x2
 2354 0085 01       		.byte	0x1
 2355 0086 08       		.byte	0x8
 2356 0087 65030000 		.4byte	.LASF11
 2357 008b 03       		.uleb128 0x3
 2358 008c A0060000 		.4byte	.LASF13
 2359 0090 03       		.byte	0x3
 2360 0091 2C       		.byte	0x2c
 2361 0092 41000000 		.4byte	0x41
 2362 0096 05       		.uleb128 0x5
 2363 0097 FC070000 		.4byte	.LASF14
 2364 009b 04       		.byte	0x4
 2365 009c E701     		.2byte	0x1e7
 2366 009e 2C000000 		.4byte	0x2c
 2367 00a2 05       		.uleb128 0x5
 2368 00a3 E5030000 		.4byte	.LASF15
 2369 00a7 04       		.byte	0x4
 2370 00a8 E801     		.2byte	0x1e8
 2371 00aa 3A000000 		.4byte	0x3a
 2372 00ae 05       		.uleb128 0x5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 59


 2373 00af FD040000 		.4byte	.LASF16
 2374 00b3 04       		.byte	0x4
 2375 00b4 E901     		.2byte	0x1e9
 2376 00b6 53000000 		.4byte	0x53
 2377 00ba 05       		.uleb128 0x5
 2378 00bb EC030000 		.4byte	.LASF17
 2379 00bf 04       		.byte	0x4
 2380 00c0 EA01     		.2byte	0x1ea
 2381 00c2 25000000 		.4byte	0x25
 2382 00c6 05       		.uleb128 0x5
 2383 00c7 6F000000 		.4byte	.LASF18
 2384 00cb 04       		.byte	0x4
 2385 00cc EB01     		.2byte	0x1eb
 2386 00ce 33000000 		.4byte	0x33
 2387 00d2 02       		.uleb128 0x2
 2388 00d3 04       		.byte	0x4
 2389 00d4 04       		.byte	0x4
 2390 00d5 61020000 		.4byte	.LASF19
 2391 00d9 02       		.uleb128 0x2
 2392 00da 08       		.byte	0x8
 2393 00db 04       		.byte	0x4
 2394 00dc 02080000 		.4byte	.LASF20
 2395 00e0 06       		.uleb128 0x6
 2396 00e1 96000000 		.4byte	0x96
 2397 00e5 F0000000 		.4byte	0xf0
 2398 00e9 07       		.uleb128 0x7
 2399 00ea 7D000000 		.4byte	0x7d
 2400 00ee 03       		.byte	0x3
 2401 00ef 00       		.byte	0
 2402 00f0 08       		.uleb128 0x8
 2403 00f1 1F050000 		.4byte	.LASF50
 2404 00f5 20       		.byte	0x20
 2405 00f6 05       		.byte	0x5
 2406 00f7 28       		.byte	0x28
 2407 00f8 C9010000 		.4byte	0x1c9
 2408 00fc 09       		.uleb128 0x9
 2409 00fd 29050000 		.4byte	.LASF21
 2410 0101 05       		.byte	0x5
 2411 0102 2A       		.byte	0x2a
 2412 0103 BA000000 		.4byte	0xba
 2413 0107 00       		.byte	0
 2414 0108 09       		.uleb128 0x9
 2415 0109 93020000 		.4byte	.LASF22
 2416 010d 05       		.byte	0x5
 2417 010e 2B       		.byte	0x2b
 2418 010f 96000000 		.4byte	0x96
 2419 0113 01       		.byte	0x1
 2420 0114 09       		.uleb128 0x9
 2421 0115 A8060000 		.4byte	.LASF23
 2422 0119 05       		.byte	0x5
 2423 011a 2C       		.byte	0x2c
 2424 011b C6000000 		.4byte	0xc6
 2425 011f 02       		.byte	0x2
 2426 0120 09       		.uleb128 0x9
 2427 0121 4F030000 		.4byte	.LASF24
 2428 0125 05       		.byte	0x5
 2429 0126 2D       		.byte	0x2d
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 60


 2430 0127 C6000000 		.4byte	0xc6
 2431 012b 04       		.byte	0x4
 2432 012c 09       		.uleb128 0x9
 2433 012d B9070000 		.4byte	.LASF25
 2434 0131 05       		.byte	0x5
 2435 0132 2E       		.byte	0x2e
 2436 0133 C6000000 		.4byte	0xc6
 2437 0137 06       		.byte	0x6
 2438 0138 09       		.uleb128 0x9
 2439 0139 23080000 		.4byte	.LASF26
 2440 013d 05       		.byte	0x5
 2441 013e 2F       		.byte	0x2f
 2442 013f C6000000 		.4byte	0xc6
 2443 0143 08       		.byte	0x8
 2444 0144 09       		.uleb128 0x9
 2445 0145 BB040000 		.4byte	.LASF27
 2446 0149 05       		.byte	0x5
 2447 014a 30       		.byte	0x30
 2448 014b C6000000 		.4byte	0xc6
 2449 014f 0A       		.byte	0xa
 2450 0150 09       		.uleb128 0x9
 2451 0151 BB030000 		.4byte	.LASF28
 2452 0155 05       		.byte	0x5
 2453 0156 31       		.byte	0x31
 2454 0157 C6000000 		.4byte	0xc6
 2455 015b 0C       		.byte	0xc
 2456 015c 09       		.uleb128 0x9
 2457 015d 2E050000 		.4byte	.LASF29
 2458 0161 05       		.byte	0x5
 2459 0162 32       		.byte	0x32
 2460 0163 C6000000 		.4byte	0xc6
 2461 0167 0E       		.byte	0xe
 2462 0168 09       		.uleb128 0x9
 2463 0169 59040000 		.4byte	.LASF30
 2464 016d 05       		.byte	0x5
 2465 016e 33       		.byte	0x33
 2466 016f C6000000 		.4byte	0xc6
 2467 0173 10       		.byte	0x10
 2468 0174 09       		.uleb128 0x9
 2469 0175 28060000 		.4byte	.LASF31
 2470 0179 05       		.byte	0x5
 2471 017a 34       		.byte	0x34
 2472 017b C6000000 		.4byte	0xc6
 2473 017f 12       		.byte	0x12
 2474 0180 09       		.uleb128 0x9
 2475 0181 43080000 		.4byte	.LASF32
 2476 0185 05       		.byte	0x5
 2477 0186 35       		.byte	0x35
 2478 0187 C6000000 		.4byte	0xc6
 2479 018b 14       		.byte	0x14
 2480 018c 09       		.uleb128 0x9
 2481 018d FC030000 		.4byte	.LASF33
 2482 0191 05       		.byte	0x5
 2483 0192 36       		.byte	0x36
 2484 0193 C6000000 		.4byte	0xc6
 2485 0197 16       		.byte	0x16
 2486 0198 09       		.uleb128 0x9
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 61


 2487 0199 84010000 		.4byte	.LASF34
 2488 019d 05       		.byte	0x5
 2489 019e 37       		.byte	0x37
 2490 019f C6000000 		.4byte	0xc6
 2491 01a3 18       		.byte	0x18
 2492 01a4 09       		.uleb128 0x9
 2493 01a5 EE050000 		.4byte	.LASF35
 2494 01a9 05       		.byte	0x5
 2495 01aa 38       		.byte	0x38
 2496 01ab C6000000 		.4byte	0xc6
 2497 01af 1A       		.byte	0x1a
 2498 01b0 09       		.uleb128 0x9
 2499 01b1 B2040000 		.4byte	.LASF36
 2500 01b5 05       		.byte	0x5
 2501 01b6 39       		.byte	0x39
 2502 01b7 C6000000 		.4byte	0xc6
 2503 01bb 1C       		.byte	0x1c
 2504 01bc 09       		.uleb128 0x9
 2505 01bd 3C020000 		.4byte	.LASF37
 2506 01c1 05       		.byte	0x5
 2507 01c2 3A       		.byte	0x3a
 2508 01c3 C6000000 		.4byte	0xc6
 2509 01c7 1E       		.byte	0x1e
 2510 01c8 00       		.byte	0
 2511 01c9 0A       		.uleb128 0xa
 2512 01ca 0C060000 		.4byte	.LASF41
 2513 01ce 01       		.byte	0x1
 2514 01cf 2C000000 		.4byte	0x2c
 2515 01d3 06       		.byte	0x6
 2516 01d4 0D       		.byte	0xd
 2517 01d5 F1010000 		.4byte	0x1f1
 2518 01d9 0B       		.uleb128 0xb
 2519 01da 557000   		.ascii	"Up\000"
 2520 01dd 00       		.byte	0
 2521 01de 0C       		.uleb128 0xc
 2522 01df 1D060000 		.4byte	.LASF38
 2523 01e3 01       		.byte	0x1
 2524 01e4 0C       		.uleb128 0xc
 2525 01e5 F0020000 		.4byte	.LASF39
 2526 01e9 02       		.byte	0x2
 2527 01ea 0C       		.uleb128 0xc
 2528 01eb 22060000 		.4byte	.LASF40
 2529 01ef 03       		.byte	0x3
 2530 01f0 00       		.byte	0
 2531 01f1 0A       		.uleb128 0xa
 2532 01f2 1B000000 		.4byte	.LASF42
 2533 01f6 01       		.byte	0x1
 2534 01f7 2C000000 		.4byte	0x2c
 2535 01fb 06       		.byte	0x6
 2536 01fc 0E       		.byte	0xe
 2537 01fd 2C020000 		.4byte	0x22c
 2538 0201 0C       		.uleb128 0xc
 2539 0202 79070000 		.4byte	.LASF43
 2540 0206 00       		.byte	0
 2541 0207 0C       		.uleb128 0xc
 2542 0208 3B040000 		.4byte	.LASF44
 2543 020c 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 62


 2544 020d 0C       		.uleb128 0xc
 2545 020e 04050000 		.4byte	.LASF45
 2546 0212 02       		.byte	0x2
 2547 0213 0C       		.uleb128 0xc
 2548 0214 84040000 		.4byte	.LASF46
 2549 0218 03       		.byte	0x3
 2550 0219 0C       		.uleb128 0xc
 2551 021a 2E010000 		.4byte	.LASF47
 2552 021e 04       		.byte	0x4
 2553 021f 0C       		.uleb128 0xc
 2554 0220 36030000 		.4byte	.LASF48
 2555 0224 05       		.byte	0x5
 2556 0225 0C       		.uleb128 0xc
 2557 0226 66070000 		.4byte	.LASF49
 2558 022a 06       		.byte	0x6
 2559 022b 00       		.byte	0
 2560 022c 08       		.uleb128 0x8
 2561 022d B0020000 		.4byte	.LASF51
 2562 0231 10       		.byte	0x10
 2563 0232 06       		.byte	0x6
 2564 0233 10       		.byte	0x10
 2565 0234 69020000 		.4byte	0x269
 2566 0238 09       		.uleb128 0x9
 2567 0239 00000000 		.4byte	.LASF52
 2568 023d 06       		.byte	0x6
 2569 023e 11       		.byte	0x11
 2570 023f F1010000 		.4byte	0x1f1
 2571 0243 00       		.byte	0
 2572 0244 09       		.uleb128 0x9
 2573 0245 4C080000 		.4byte	.LASF53
 2574 0249 06       		.byte	0x6
 2575 024a 12       		.byte	0x12
 2576 024b 68000000 		.4byte	0x68
 2577 024f 04       		.byte	0x4
 2578 0250 09       		.uleb128 0x9
 2579 0251 54080000 		.4byte	.LASF54
 2580 0255 06       		.byte	0x6
 2581 0256 13       		.byte	0x13
 2582 0257 68000000 		.4byte	0x68
 2583 025b 08       		.byte	0x8
 2584 025c 09       		.uleb128 0x9
 2585 025d 41010000 		.4byte	.LASF55
 2586 0261 06       		.byte	0x6
 2587 0262 14       		.byte	0x14
 2588 0263 C9010000 		.4byte	0x1c9
 2589 0267 0C       		.byte	0xc
 2590 0268 00       		.byte	0
 2591 0269 03       		.uleb128 0x3
 2592 026a B0020000 		.4byte	.LASF51
 2593 026e 06       		.byte	0x6
 2594 026f 15       		.byte	0x15
 2595 0270 2C020000 		.4byte	0x22c
 2596 0274 0A       		.uleb128 0xa
 2597 0275 B9060000 		.4byte	.LASF56
 2598 0279 01       		.byte	0x1
 2599 027a 2C000000 		.4byte	0x2c
 2600 027e 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 63


 2601 027f 18       		.byte	0x18
 2602 0280 C7020000 		.4byte	0x2c7
 2603 0284 0C       		.uleb128 0xc
 2604 0285 D4050000 		.4byte	.LASF57
 2605 0289 00       		.byte	0
 2606 028a 0C       		.uleb128 0xc
 2607 028b 15050000 		.4byte	.LASF58
 2608 028f 01       		.byte	0x1
 2609 0290 0C       		.uleb128 0xc
 2610 0291 CD040000 		.4byte	.LASF59
 2611 0295 02       		.byte	0x2
 2612 0296 0C       		.uleb128 0xc
 2613 0297 E3070000 		.4byte	.LASF60
 2614 029b 03       		.byte	0x3
 2615 029c 0C       		.uleb128 0xc
 2616 029d 05070000 		.4byte	.LASF61
 2617 02a1 04       		.byte	0x4
 2618 02a2 0C       		.uleb128 0xc
 2619 02a3 16070000 		.4byte	.LASF62
 2620 02a7 05       		.byte	0x5
 2621 02a8 0C       		.uleb128 0xc
 2622 02a9 F5040000 		.4byte	.LASF63
 2623 02ad 06       		.byte	0x6
 2624 02ae 0C       		.uleb128 0xc
 2625 02af 43030000 		.4byte	.LASF64
 2626 02b3 07       		.byte	0x7
 2627 02b4 0C       		.uleb128 0xc
 2628 02b5 0A000000 		.4byte	.LASF65
 2629 02b9 08       		.byte	0x8
 2630 02ba 0C       		.uleb128 0xc
 2631 02bb F3070000 		.4byte	.LASF66
 2632 02bf 09       		.byte	0x9
 2633 02c0 0C       		.uleb128 0xc
 2634 02c1 5A050000 		.4byte	.LASF67
 2635 02c5 0A       		.byte	0xa
 2636 02c6 00       		.byte	0
 2637 02c7 0D       		.uleb128 0xd
 2638 02c8 15040000 		.4byte	.LASF77
 2639 02cc 01       		.byte	0x1
 2640 02cd 40       		.byte	0x40
 2641 02ce 00000000 		.4byte	.LFB64
 2642 02d2 EC000000 		.4byte	.LFE64-.LFB64
 2643 02d6 01       		.uleb128 0x1
 2644 02d7 9C       		.byte	0x9c
 2645 02d8 F5020000 		.4byte	0x2f5
 2646 02dc 0E       		.uleb128 0xe
 2647 02dd 50000000 		.4byte	.LBB2
 2648 02e1 62000000 		.4byte	.LBE2-.LBB2
 2649 02e5 0F       		.uleb128 0xf
 2650 02e6 A6040000 		.4byte	.LASF74
 2651 02ea 01       		.byte	0x1
 2652 02eb 4D       		.byte	0x4d
 2653 02ec D2000000 		.4byte	0xd2
 2654 02f0 02       		.uleb128 0x2
 2655 02f1 91       		.byte	0x91
 2656 02f2 6C       		.sleb128 -20
 2657 02f3 00       		.byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 64


 2658 02f4 00       		.byte	0
 2659 02f5 10       		.uleb128 0x10
 2660 02f6 09040000 		.4byte	.LASF68
 2661 02fa 01       		.byte	0x1
 2662 02fb 58       		.byte	0x58
 2663 02fc 00000000 		.4byte	.LFB65
 2664 0300 18000000 		.4byte	.LFE65-.LFB65
 2665 0304 01       		.uleb128 0x1
 2666 0305 9C       		.byte	0x9c
 2667 0306 10       		.uleb128 0x10
 2668 0307 A8050000 		.4byte	.LASF69
 2669 030b 01       		.byte	0x1
 2670 030c 5E       		.byte	0x5e
 2671 030d 00000000 		.4byte	.LFB66
 2672 0311 18000000 		.4byte	.LFE66-.LFB66
 2673 0315 01       		.uleb128 0x1
 2674 0316 9C       		.byte	0x9c
 2675 0317 10       		.uleb128 0x10
 2676 0318 83070000 		.4byte	.LASF70
 2677 031c 01       		.byte	0x1
 2678 031d 64       		.byte	0x64
 2679 031e 00000000 		.4byte	.LFB67
 2680 0322 18000000 		.4byte	.LFE67-.LFB67
 2681 0326 01       		.uleb128 0x1
 2682 0327 9C       		.byte	0x9c
 2683 0328 10       		.uleb128 0x10
 2684 0329 6A010000 		.4byte	.LASF71
 2685 032d 01       		.byte	0x1
 2686 032e 6A       		.byte	0x6a
 2687 032f 00000000 		.4byte	.LFB68
 2688 0333 18000000 		.4byte	.LFE68-.LFB68
 2689 0337 01       		.uleb128 0x1
 2690 0338 9C       		.byte	0x9c
 2691 0339 11       		.uleb128 0x11
 2692 033a D9020000 		.4byte	.LASF72
 2693 033e 01       		.byte	0x1
 2694 033f 70       		.byte	0x70
 2695 0340 00000000 		.4byte	.LFB69
 2696 0344 38000000 		.4byte	.LFE69-.LFB69
 2697 0348 01       		.uleb128 0x1
 2698 0349 9C       		.byte	0x9c
 2699 034a 12       		.uleb128 0x12
 2700 034b CB070000 		.4byte	.LASF73
 2701 034f 01       		.byte	0x1
 2702 0350 7C       		.byte	0x7c
 2703 0351 68000000 		.4byte	0x68
 2704 0355 00000000 		.4byte	.LFB70
 2705 0359 C0000000 		.4byte	.LFE70-.LFB70
 2706 035d 01       		.uleb128 0x1
 2707 035e 9C       		.byte	0x9c
 2708 035f 13       		.uleb128 0x13
 2709 0360 10030000 		.4byte	.LASF81
 2710 0364 01       		.byte	0x1
 2711 0365 AA       		.byte	0xaa
 2712 0366 C6000000 		.4byte	0xc6
 2713 036a 00000000 		.4byte	.LFB71
 2714 036e 54000000 		.4byte	.LFE71-.LFB71
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 65


 2715 0372 01       		.uleb128 0x1
 2716 0373 9C       		.byte	0x9c
 2717 0374 A3030000 		.4byte	0x3a3
 2718 0378 14       		.uleb128 0x14
 2719 0379 8D020000 		.4byte	.LASF83
 2720 037d 01       		.byte	0x1
 2721 037e AA       		.byte	0xaa
 2722 037f A2000000 		.4byte	0xa2
 2723 0383 02       		.uleb128 0x2
 2724 0384 91       		.byte	0x91
 2725 0385 66       		.sleb128 -26
 2726 0386 15       		.uleb128 0x15
 2727 0387 63707300 		.ascii	"cps\000"
 2728 038b 01       		.byte	0x1
 2729 038c AC       		.byte	0xac
 2730 038d D2000000 		.4byte	0xd2
 2731 0391 02       		.uleb128 0x2
 2732 0392 91       		.byte	0x91
 2733 0393 6C       		.sleb128 -20
 2734 0394 15       		.uleb128 0x15
 2735 0395 72706D00 		.ascii	"rpm\000"
 2736 0399 01       		.byte	0x1
 2737 039a AD       		.byte	0xad
 2738 039b C6000000 		.4byte	0xc6
 2739 039f 02       		.uleb128 0x2
 2740 03a0 91       		.byte	0x91
 2741 03a1 6A       		.sleb128 -22
 2742 03a2 00       		.byte	0
 2743 03a3 16       		.uleb128 0x16
 2744 03a4 2B020000 		.4byte	.LASF89
 2745 03a8 01       		.byte	0x1
 2746 03a9 B5       		.byte	0xb5
 2747 03aa 00000000 		.4byte	.LFB72
 2748 03ae 34000000 		.4byte	.LFE72-.LFB72
 2749 03b2 01       		.uleb128 0x1
 2750 03b3 9C       		.byte	0x9c
 2751 03b4 17       		.uleb128 0x17
 2752 03b5 FB010000 		.4byte	.LASF75
 2753 03b9 01       		.byte	0x1
 2754 03ba AD01     		.2byte	0x1ad
 2755 03bc 74020000 		.4byte	0x274
 2756 03c0 00000000 		.4byte	.LFB73
 2757 03c4 84000000 		.4byte	.LFE73-.LFB73
 2758 03c8 01       		.uleb128 0x1
 2759 03c9 9C       		.byte	0x9c
 2760 03ca 17       		.uleb128 0x17
 2761 03cb 55010000 		.4byte	.LASF76
 2762 03cf 01       		.byte	0x1
 2763 03d0 D501     		.2byte	0x1d5
 2764 03d2 74020000 		.4byte	0x274
 2765 03d6 00000000 		.4byte	.LFB74
 2766 03da 94000000 		.4byte	.LFE74-.LFB74
 2767 03de 01       		.uleb128 0x1
 2768 03df 9C       		.byte	0x9c
 2769 03e0 18       		.uleb128 0x18
 2770 03e1 BD010000 		.4byte	.LASF78
 2771 03e5 01       		.byte	0x1
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 66


 2772 03e6 FC01     		.2byte	0x1fc
 2773 03e8 74020000 		.4byte	0x274
 2774 03ec 00000000 		.4byte	.LFB75
 2775 03f0 C8020000 		.4byte	.LFE75-.LFB75
 2776 03f4 01       		.uleb128 0x1
 2777 03f5 9C       		.byte	0x9c
 2778 03f6 19040000 		.4byte	0x419
 2779 03fa 19       		.uleb128 0x19
 2780 03fb 47000000 		.4byte	.LASF79
 2781 03ff 01       		.byte	0x1
 2782 0400 FD01     		.2byte	0x1fd
 2783 0402 D2000000 		.4byte	0xd2
 2784 0406 02       		.uleb128 0x2
 2785 0407 91       		.byte	0x91
 2786 0408 74       		.sleb128 -12
 2787 0409 19       		.uleb128 0x19
 2788 040a 67020000 		.4byte	.LASF80
 2789 040e 01       		.byte	0x1
 2790 040f 0C02     		.2byte	0x20c
 2791 0411 F1010000 		.4byte	0x1f1
 2792 0415 02       		.uleb128 0x2
 2793 0416 91       		.byte	0x91
 2794 0417 73       		.sleb128 -13
 2795 0418 00       		.byte	0
 2796 0419 1A       		.uleb128 0x1a
 2797 041a EB060000 		.4byte	.LASF82
 2798 041e 01       		.byte	0x1
 2799 041f F402     		.2byte	0x2f4
 2800 0421 D2000000 		.4byte	0xd2
 2801 0425 00000000 		.4byte	.LFB76
 2802 0429 8C020000 		.4byte	.LFE76-.LFB76
 2803 042d 01       		.uleb128 0x1
 2804 042e 9C       		.byte	0x9c
 2805 042f D7040000 		.4byte	0x4d7
 2806 0433 1B       		.uleb128 0x1b
 2807 0434 1F030000 		.4byte	.LASF84
 2808 0438 01       		.byte	0x1
 2809 0439 F402     		.2byte	0x2f4
 2810 043b D2000000 		.4byte	0xd2
 2811 043f 02       		.uleb128 0x2
 2812 0440 91       		.byte	0x91
 2813 0441 54       		.sleb128 -44
 2814 0442 19       		.uleb128 0x19
 2815 0443 14080000 		.4byte	.LASF85
 2816 0447 01       		.byte	0x1
 2817 0448 F502     		.2byte	0x2f5
 2818 044a D2000000 		.4byte	0xd2
 2819 044e 02       		.uleb128 0x2
 2820 044f 91       		.byte	0x91
 2821 0450 58       		.sleb128 -40
 2822 0451 19       		.uleb128 0x19
 2823 0452 B3010000 		.4byte	.LASF86
 2824 0456 01       		.byte	0x1
 2825 0457 F802     		.2byte	0x2f8
 2826 0459 68000000 		.4byte	0x68
 2827 045d 02       		.uleb128 0x2
 2828 045e 91       		.byte	0x91
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 67


 2829 045f 60       		.sleb128 -32
 2830 0460 19       		.uleb128 0x19
 2831 0461 49020000 		.4byte	.LASF87
 2832 0465 01       		.byte	0x1
 2833 0466 F902     		.2byte	0x2f9
 2834 0468 68000000 		.4byte	0x68
 2835 046c 02       		.uleb128 0x2
 2836 046d 91       		.byte	0x91
 2837 046e 5C       		.sleb128 -36
 2838 046f 19       		.uleb128 0x19
 2839 0470 20040000 		.4byte	.LASF88
 2840 0474 01       		.byte	0x1
 2841 0475 FB02     		.2byte	0x2fb
 2842 0477 68000000 		.4byte	0x68
 2843 047b 02       		.uleb128 0x2
 2844 047c 91       		.byte	0x91
 2845 047d 74       		.sleb128 -12
 2846 047e 1C       		.uleb128 0x1c
 2847 047f 00000000 		.4byte	.Ldebug_ranges0+0
 2848 0483 95040000 		.4byte	0x495
 2849 0487 1D       		.uleb128 0x1d
 2850 0488 6900     		.ascii	"i\000"
 2851 048a 01       		.byte	0x1
 2852 048b 0503     		.2byte	0x305
 2853 048d 68000000 		.4byte	0x68
 2854 0491 02       		.uleb128 0x2
 2855 0492 91       		.byte	0x91
 2856 0493 70       		.sleb128 -16
 2857 0494 00       		.byte	0
 2858 0495 1C       		.uleb128 0x1c
 2859 0496 18000000 		.4byte	.Ldebug_ranges0+0x18
 2860 049a AC040000 		.4byte	0x4ac
 2861 049e 1D       		.uleb128 0x1d
 2862 049f 6900     		.ascii	"i\000"
 2863 04a1 01       		.byte	0x1
 2864 04a2 1403     		.2byte	0x314
 2865 04a4 68000000 		.4byte	0x68
 2866 04a8 02       		.uleb128 0x2
 2867 04a9 91       		.byte	0x91
 2868 04aa 6C       		.sleb128 -20
 2869 04ab 00       		.byte	0
 2870 04ac 1C       		.uleb128 0x1c
 2871 04ad 30000000 		.4byte	.Ldebug_ranges0+0x30
 2872 04b1 C3040000 		.4byte	0x4c3
 2873 04b5 1D       		.uleb128 0x1d
 2874 04b6 6900     		.ascii	"i\000"
 2875 04b8 01       		.byte	0x1
 2876 04b9 2303     		.2byte	0x323
 2877 04bb 68000000 		.4byte	0x68
 2878 04bf 02       		.uleb128 0x2
 2879 04c0 91       		.byte	0x91
 2880 04c1 68       		.sleb128 -24
 2881 04c2 00       		.byte	0
 2882 04c3 1E       		.uleb128 0x1e
 2883 04c4 48000000 		.4byte	.Ldebug_ranges0+0x48
 2884 04c8 1D       		.uleb128 0x1d
 2885 04c9 6900     		.ascii	"i\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 68


 2886 04cb 01       		.byte	0x1
 2887 04cc 3303     		.2byte	0x333
 2888 04ce 68000000 		.4byte	0x68
 2889 04d2 02       		.uleb128 0x2
 2890 04d3 91       		.byte	0x91
 2891 04d4 64       		.sleb128 -28
 2892 04d5 00       		.byte	0
 2893 04d6 00       		.byte	0
 2894 04d7 1F       		.uleb128 0x1f
 2895 04d8 F6050000 		.4byte	.LASF90
 2896 04dc 01       		.byte	0x1
 2897 04dd 4703     		.2byte	0x347
 2898 04df 00000000 		.4byte	.LFB77
 2899 04e3 1C000000 		.4byte	.LFE77-.LFB77
 2900 04e7 01       		.uleb128 0x1
 2901 04e8 9C       		.byte	0x9c
 2902 04e9 20       		.uleb128 0x20
 2903 04ea 1B070000 		.4byte	.LASF91
 2904 04ee 01       		.byte	0x1
 2905 04ef 4C03     		.2byte	0x34c
 2906 04f1 69020000 		.4byte	0x269
 2907 04f5 00000000 		.4byte	.LFB78
 2908 04f9 76000000 		.4byte	.LFE78-.LFB78
 2909 04fd 01       		.uleb128 0x1
 2910 04fe 9C       		.byte	0x9c
 2911 04ff 57050000 		.4byte	0x557
 2912 0503 1B       		.uleb128 0x1b
 2913 0504 AA010000 		.4byte	.LASF92
 2914 0508 01       		.byte	0x1
 2915 0509 4C03     		.2byte	0x34c
 2916 050b 68000000 		.4byte	0x68
 2917 050f 02       		.uleb128 0x2
 2918 0510 91       		.byte	0x91
 2919 0511 58       		.sleb128 -40
 2920 0512 1B       		.uleb128 0x1b
 2921 0513 C4030000 		.4byte	.LASF93
 2922 0517 01       		.byte	0x1
 2923 0518 4C03     		.2byte	0x34c
 2924 051a 57050000 		.4byte	0x557
 2925 051e 02       		.uleb128 0x2
 2926 051f 91       		.byte	0x91
 2927 0520 54       		.sleb128 -44
 2928 0521 1B       		.uleb128 0x1b
 2929 0522 D4030000 		.4byte	.LASF94
 2930 0526 01       		.byte	0x1
 2931 0527 4C03     		.2byte	0x34c
 2932 0529 68000000 		.4byte	0x68
 2933 052d 02       		.uleb128 0x2
 2934 052e 91       		.byte	0x91
 2935 052f 50       		.sleb128 -48
 2936 0530 19       		.uleb128 0x19
 2937 0531 90000000 		.4byte	.LASF95
 2938 0535 01       		.byte	0x1
 2939 0536 4D03     		.2byte	0x34d
 2940 0538 69020000 		.4byte	0x269
 2941 053c 02       		.uleb128 0x2
 2942 053d 91       		.byte	0x91
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 69


 2943 053e 64       		.sleb128 -28
 2944 053f 0E       		.uleb128 0xe
 2945 0540 0E000000 		.4byte	.LBB11
 2946 0544 50000000 		.4byte	.LBE11-.LBB11
 2947 0548 1D       		.uleb128 0x1d
 2948 0549 6900     		.ascii	"i\000"
 2949 054b 01       		.byte	0x1
 2950 054c 4F03     		.2byte	0x34f
 2951 054e 68000000 		.4byte	0x68
 2952 0552 02       		.uleb128 0x2
 2953 0553 91       		.byte	0x91
 2954 0554 74       		.sleb128 -12
 2955 0555 00       		.byte	0
 2956 0556 00       		.byte	0
 2957 0557 21       		.uleb128 0x21
 2958 0558 04       		.byte	0x4
 2959 0559 69020000 		.4byte	0x269
 2960 055d 22       		.uleb128 0x22
 2961 055e C8020000 		.4byte	.LASF96
 2962 0562 01       		.byte	0x1
 2963 0563 5D03     		.2byte	0x35d
 2964 0565 00000000 		.4byte	.LFB79
 2965 0569 C8000000 		.4byte	.LFE79-.LFB79
 2966 056d 01       		.uleb128 0x1
 2967 056e 9C       		.byte	0x9c
 2968 056f 23       		.uleb128 0x23
 2969 0570 BD050000 		.4byte	.LASF97
 2970 0574 07       		.byte	0x7
 2971 0575 1207     		.2byte	0x712
 2972 0577 7B050000 		.4byte	0x57b
 2973 057b 24       		.uleb128 0x24
 2974 057c 8B000000 		.4byte	0x8b
 2975 0580 25       		.uleb128 0x25
 2976 0581 747300   		.ascii	"ts\000"
 2977 0584 05       		.byte	0x5
 2978 0585 10       		.byte	0x10
 2979 0586 96000000 		.4byte	0x96
 2980 058a 05       		.uleb128 0x5
 2981 058b 03       		.byte	0x3
 2982 058c 00000000 		.4byte	ts
 2983 0590 26       		.uleb128 0x26
 2984 0591 31070000 		.4byte	.LASF98
 2985 0595 05       		.byte	0x5
 2986 0596 11       		.byte	0x11
 2987 0597 A2000000 		.4byte	0xa2
 2988 059b 05       		.uleb128 0x5
 2989 059c 03       		.byte	0x3
 2990 059d 00000000 		.4byte	ts_enc
 2991 05a1 26       		.uleb128 0x26
 2992 05a2 CA050000 		.4byte	.LASF99
 2993 05a6 05       		.byte	0x5
 2994 05a7 12       		.byte	0x12
 2995 05a8 A2000000 		.4byte	0xa2
 2996 05ac 05       		.uleb128 0x5
 2997 05ad 03       		.byte	0x3
 2998 05ae 00000000 		.4byte	ts_update
 2999 05b2 26       		.uleb128 0x26
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 70


 3000 05b3 D6040000 		.4byte	.LASF100
 3001 05b7 05       		.byte	0x5
 3002 05b8 13       		.byte	0x13
 3003 05b9 A2000000 		.4byte	0xa2
 3004 05bd 05       		.uleb128 0x5
 3005 05be 03       		.byte	0x3
 3006 05bf 00000000 		.4byte	ts_speed
 3007 05c3 26       		.uleb128 0x26
 3008 05c4 5A030000 		.4byte	.LASF101
 3009 05c8 05       		.byte	0x5
 3010 05c9 14       		.byte	0x14
 3011 05ca A2000000 		.4byte	0xa2
 3012 05ce 05       		.uleb128 0x5
 3013 05cf 03       		.byte	0x3
 3014 05d0 00000000 		.4byte	ts_display
 3015 05d4 26       		.uleb128 0x26
 3016 05d5 04030000 		.4byte	.LASF102
 3017 05d9 05       		.byte	0x5
 3018 05da 16       		.byte	0x16
 3019 05db 96000000 		.4byte	0x96
 3020 05df 05       		.uleb128 0x5
 3021 05e0 03       		.byte	0x3
 3022 05e1 00000000 		.4byte	flag_ts_enc
 3023 05e5 26       		.uleb128 0x26
 3024 05e6 F5020000 		.4byte	.LASF103
 3025 05ea 05       		.byte	0x5
 3026 05eb 17       		.byte	0x17
 3027 05ec 96000000 		.4byte	0x96
 3028 05f0 05       		.uleb128 0x5
 3029 05f1 03       		.byte	0x3
 3030 05f2 00000000 		.4byte	flag_ts_update
 3031 05f6 26       		.uleb128 0x26
 3032 05f7 6E050000 		.4byte	.LASF104
 3033 05fb 05       		.byte	0x5
 3034 05fc 18       		.byte	0x18
 3035 05fd 96000000 		.4byte	0x96
 3036 0601 05       		.uleb128 0x5
 3037 0602 03       		.byte	0x3
 3038 0603 00000000 		.4byte	flag_ts_speed
 3039 0607 26       		.uleb128 0x26
 3040 0608 38070000 		.4byte	.LASF105
 3041 060c 05       		.byte	0x5
 3042 060d 19       		.byte	0x19
 3043 060e 96000000 		.4byte	0x96
 3044 0612 05       		.uleb128 0x5
 3045 0613 03       		.byte	0x3
 3046 0614 00000000 		.4byte	flag_ts_display
 3047 0618 26       		.uleb128 0x26
 3048 0619 8B050000 		.4byte	.LASF106
 3049 061d 05       		.byte	0x5
 3050 061e 1B       		.byte	0x1b
 3051 061f 96000000 		.4byte	0x96
 3052 0623 05       		.uleb128 0x5
 3053 0624 03       		.byte	0x3
 3054 0625 00000000 		.4byte	flag_rx
 3055 0629 26       		.uleb128 0x26
 3056 062a BC020000 		.4byte	.LASF107
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 71


 3057 062e 05       		.byte	0x5
 3058 062f 1C       		.byte	0x1c
 3059 0630 96000000 		.4byte	0x96
 3060 0634 05       		.uleb128 0x5
 3061 0635 03       		.byte	0x3
 3062 0636 00000000 		.4byte	flag_packet
 3063 063a 26       		.uleb128 0x26
 3064 063b 34080000 		.4byte	.LASF108
 3065 063f 05       		.byte	0x5
 3066 0640 1D       		.byte	0x1d
 3067 0641 96000000 		.4byte	0x96
 3068 0645 05       		.uleb128 0x5
 3069 0646 03       		.byte	0x3
 3070 0647 00000000 		.4byte	flag_KB_string
 3071 064b 26       		.uleb128 0x26
 3072 064c 7C050000 		.4byte	.LASF109
 3073 0650 05       		.byte	0x5
 3074 0651 1F       		.byte	0x1f
 3075 0652 96000000 		.4byte	0x96
 3076 0656 05       		.uleb128 0x5
 3077 0657 03       		.byte	0x3
 3078 0658 00000000 		.4byte	dataready_flag
 3079 065c 26       		.uleb128 0x26
 3080 065d DF010000 		.4byte	.LASF110
 3081 0661 05       		.byte	0x5
 3082 0662 21       		.byte	0x21
 3083 0663 96000000 		.4byte	0x96
 3084 0667 05       		.uleb128 0x5
 3085 0668 03       		.byte	0x3
 3086 0669 00000000 		.4byte	flag_rf_transmission_active
 3087 066d 06       		.uleb128 0x6
 3088 066e 84000000 		.4byte	0x84
 3089 0672 7D060000 		.4byte	0x67d
 3090 0676 07       		.uleb128 0x7
 3091 0677 7D000000 		.4byte	0x7d
 3092 067b 3F       		.byte	0x3f
 3093 067c 00       		.byte	0
 3094 067d 26       		.uleb128 0x26
 3095 067e 6B070000 		.4byte	.LASF111
 3096 0682 05       		.byte	0x5
 3097 0683 24       		.byte	0x24
 3098 0684 6D060000 		.4byte	0x66d
 3099 0688 05       		.uleb128 0x5
 3100 0689 03       		.byte	0x3
 3101 068a 00000000 		.4byte	displaystring
 3102 068e 26       		.uleb128 0x26
 3103 068f E6060000 		.4byte	.LASF112
 3104 0693 05       		.byte	0x5
 3105 0694 25       		.byte	0x25
 3106 0695 6D060000 		.4byte	0x66d
 3107 0699 05       		.uleb128 0x5
 3108 069a 03       		.byte	0x3
 3109 069b 00000000 		.4byte	line
 3110 069f 26       		.uleb128 0x26
 3111 06a0 B3060000 		.4byte	.LASF113
 3112 06a4 05       		.byte	0x5
 3113 06a5 25       		.byte	0x25
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 72


 3114 06a6 6D060000 		.4byte	0x66d
 3115 06aa 05       		.uleb128 0x5
 3116 06ab 03       		.byte	0x3
 3117 06ac 00000000 		.4byte	entry
 3118 06b0 06       		.uleb128 0x6
 3119 06b1 96000000 		.4byte	0x96
 3120 06b5 C0060000 		.4byte	0x6c0
 3121 06b9 07       		.uleb128 0x7
 3122 06ba 7D000000 		.4byte	0x7d
 3123 06be 3F       		.byte	0x3f
 3124 06bf 00       		.byte	0
 3125 06c0 26       		.uleb128 0x26
 3126 06c1 83020000 		.4byte	.LASF114
 3127 06c5 05       		.byte	0x5
 3128 06c6 26       		.byte	0x26
 3129 06c7 B0060000 		.4byte	0x6b0
 3130 06cb 05       		.uleb128 0x5
 3131 06cc 03       		.byte	0x3
 3132 06cd 00000000 		.4byte	usbBuffer
 3133 06d1 26       		.uleb128 0x26
 3134 06d2 75000000 		.4byte	.LASF115
 3135 06d6 05       		.byte	0x5
 3136 06d7 3C       		.byte	0x3c
 3137 06d8 F0000000 		.4byte	0xf0
 3138 06dc 05       		.uleb128 0x5
 3139 06dd 03       		.byte	0x3
 3140 06de 00000000 		.4byte	system_state
 3141 06e2 06       		.uleb128 0x6
 3142 06e3 68000000 		.4byte	0x68
 3143 06e7 F8060000 		.4byte	0x6f8
 3144 06eb 07       		.uleb128 0x7
 3145 06ec 7D000000 		.4byte	0x7d
 3146 06f0 0E       		.byte	0xe
 3147 06f1 07       		.uleb128 0x7
 3148 06f2 7D000000 		.4byte	0x7d
 3149 06f6 12       		.byte	0x12
 3150 06f7 00       		.byte	0
 3151 06f8 27       		.uleb128 0x27
 3152 06f9 6D617000 		.ascii	"map\000"
 3153 06fd 08       		.byte	0x8
 3154 06fe 04       		.byte	0x4
 3155 06ff E2060000 		.4byte	0x6e2
 3156 0703 06       		.uleb128 0x6
 3157 0704 68000000 		.4byte	0x68
 3158 0708 19070000 		.4byte	0x719
 3159 070c 07       		.uleb128 0x7
 3160 070d 7D000000 		.4byte	0x7d
 3161 0711 04       		.byte	0x4
 3162 0712 07       		.uleb128 0x7
 3163 0713 7D000000 		.4byte	0x7d
 3164 0717 01       		.byte	0x1
 3165 0718 00       		.byte	0
 3166 0719 28       		.uleb128 0x28
 3167 071a C3040000 		.4byte	.LASF116
 3168 071e 08       		.byte	0x8
 3169 071f 05       		.byte	0x5
 3170 0720 03070000 		.4byte	0x703
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 73


 3171 0724 26       		.uleb128 0x26
 3172 0725 30060000 		.4byte	.LASF117
 3173 0729 01       		.byte	0x1
 3174 072a 19       		.byte	0x19
 3175 072b 74020000 		.4byte	0x274
 3176 072f 05       		.uleb128 0x5
 3177 0730 03       		.byte	0x3
 3178 0731 00000000 		.4byte	currentDirection
 3179 0735 26       		.uleb128 0x26
 3180 0736 3B050000 		.4byte	.LASF118
 3181 073a 01       		.byte	0x1
 3182 073b 19       		.byte	0x19
 3183 073c 74020000 		.4byte	0x274
 3184 0740 05       		.uleb128 0x5
 3185 0741 03       		.byte	0x3
 3186 0742 00000000 		.4byte	previousDirection
 3187 0746 26       		.uleb128 0x26
 3188 0747 13020000 		.4byte	.LASF119
 3189 074b 01       		.byte	0x1
 3190 074c 1B       		.byte	0x1b
 3191 074d C9010000 		.4byte	0x1c9
 3192 0751 05       		.uleb128 0x5
 3193 0752 03       		.byte	0x3
 3194 0753 00000000 		.4byte	currentRobotOrientation
 3195 0757 26       		.uleb128 0x26
 3196 0758 70040000 		.4byte	.LASF120
 3197 075c 01       		.byte	0x1
 3198 075d 1B       		.byte	0x1b
 3199 075e C9010000 		.4byte	0x1c9
 3200 0762 05       		.uleb128 0x5
 3201 0763 03       		.byte	0x3
 3202 0764 00000000 		.4byte	previousOrientation
 3203 0768 26       		.uleb128 0x26
 3204 0769 D0070000 		.4byte	.LASF121
 3205 076d 01       		.byte	0x1
 3206 076e 1C       		.byte	0x1c
 3207 076f 69020000 		.4byte	0x269
 3208 0773 05       		.uleb128 0x5
 3209 0774 03       		.byte	0x3
 3210 0775 00000000 		.4byte	currentInstruction
 3211 0779 26       		.uleb128 0x26
 3212 077a AA010000 		.4byte	.LASF92
 3213 077e 01       		.byte	0x1
 3214 077f 1D       		.byte	0x1d
 3215 0780 68000000 		.4byte	0x68
 3216 0784 05       		.uleb128 0x5
 3217 0785 03       		.byte	0x3
 3218 0786 00000000 		.4byte	numSteps
 3219 078a 26       		.uleb128 0x26
 3220 078b C4030000 		.4byte	.LASF93
 3221 078f 01       		.byte	0x1
 3222 0790 1F       		.byte	0x1f
 3223 0791 57050000 		.4byte	0x557
 3224 0795 05       		.uleb128 0x5
 3225 0796 03       		.byte	0x3
 3226 0797 00000000 		.4byte	instructionList
 3227 079b 26       		.uleb128 0x26
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 74


 3228 079c D4030000 		.4byte	.LASF94
 3229 07a0 01       		.byte	0x1
 3230 07a1 20       		.byte	0x20
 3231 07a2 AE000000 		.4byte	0xae
 3232 07a6 05       		.uleb128 0x5
 3233 07a7 03       		.byte	0x3
 3234 07a8 00000000 		.4byte	instructionIndex
 3235 07ac 25       		.uleb128 0x25
 3236 07ad 733300   		.ascii	"s3\000"
 3237 07b0 01       		.byte	0x1
 3238 07b1 25       		.byte	0x25
 3239 07b2 96000000 		.4byte	0x96
 3240 07b6 05       		.uleb128 0x5
 3241 07b7 03       		.byte	0x3
 3242 07b8 00000000 		.4byte	s3
 3243 07bc 25       		.uleb128 0x25
 3244 07bd 733400   		.ascii	"s4\000"
 3245 07c0 01       		.byte	0x1
 3246 07c1 25       		.byte	0x25
 3247 07c2 96000000 		.4byte	0x96
 3248 07c6 05       		.uleb128 0x5
 3249 07c7 03       		.byte	0x3
 3250 07c8 00000000 		.4byte	s4
 3251 07cc 25       		.uleb128 0x25
 3252 07cd 733500   		.ascii	"s5\000"
 3253 07d0 01       		.byte	0x1
 3254 07d1 25       		.byte	0x25
 3255 07d2 96000000 		.4byte	0x96
 3256 07d6 05       		.uleb128 0x5
 3257 07d7 03       		.byte	0x3
 3258 07d8 00000000 		.4byte	s5
 3259 07dc 25       		.uleb128 0x25
 3260 07dd 733600   		.ascii	"s6\000"
 3261 07e0 01       		.byte	0x1
 3262 07e1 25       		.byte	0x25
 3263 07e2 96000000 		.4byte	0x96
 3264 07e6 05       		.uleb128 0x5
 3265 07e7 03       		.byte	0x3
 3266 07e8 00000000 		.4byte	s6
 3267 07ec 26       		.uleb128 0x26
 3268 07ed DC050000 		.4byte	.LASF122
 3269 07f1 01       		.byte	0x1
 3270 07f2 2A       		.byte	0x2a
 3271 07f3 AE000000 		.4byte	0xae
 3272 07f7 05       		.uleb128 0x5
 3273 07f8 03       		.byte	0x3
 3274 07f9 00000000 		.4byte	totalMilliseconds
 3275 07fd 26       		.uleb128 0x26
 3276 07fe 76010000 		.4byte	.LASF123
 3277 0802 01       		.byte	0x1
 3278 0803 2B       		.byte	0x2b
 3279 0804 D2000000 		.4byte	0xd2
 3280 0808 05       		.uleb128 0x5
 3281 0809 03       		.byte	0x3
 3282 080a 00000000 		.4byte	totalDistance
 3283 080e 06       		.uleb128 0x6
 3284 080f 84000000 		.4byte	0x84
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 75


 3285 0813 1E080000 		.4byte	0x81e
 3286 0817 07       		.uleb128 0x7
 3287 0818 7D000000 		.4byte	0x7d
 3288 081c 44       		.byte	0x44
 3289 081d 00       		.byte	0
 3290 081e 26       		.uleb128 0x26
 3291 081f 51000000 		.4byte	.LASF124
 3292 0823 01       		.byte	0x1
 3293 0824 2D       		.byte	0x2d
 3294 0825 0E080000 		.4byte	0x80e
 3295 0829 05       		.uleb128 0x5
 3296 082a 03       		.byte	0x3
 3297 082b 00000000 		.4byte	buffer
 3298 082f 26       		.uleb128 0x26
 3299 0830 53020000 		.4byte	.LASF125
 3300 0834 01       		.byte	0x1
 3301 0835 2E       		.byte	0x2e
 3302 0836 68000000 		.4byte	0x68
 3303 083a 05       		.uleb128 0x5
 3304 083b 03       		.byte	0x3
 3305 083c 00000000 		.4byte	quadDec2Count
 3306 0840 26       		.uleb128 0x26
 3307 0841 2B080000 		.4byte	.LASF126
 3308 0845 01       		.byte	0x1
 3309 0846 2F       		.byte	0x2f
 3310 0847 68000000 		.4byte	0x68
 3311 084b 05       		.uleb128 0x5
 3312 084c 03       		.byte	0x3
 3313 084d 00000000 		.4byte	timerInt
 3314 0851 26       		.uleb128 0x26
 3315 0852 E6020000 		.4byte	.LASF127
 3316 0856 01       		.byte	0x1
 3317 0857 30       		.byte	0x30
 3318 0858 68000000 		.4byte	0x68
 3319 085c 05       		.uleb128 0x5
 3320 085d 03       		.byte	0x3
 3321 085e 00000000 		.4byte	keepLedOn
 3322 0862 26       		.uleb128 0x26
 3323 0863 83060000 		.4byte	.LASF128
 3324 0867 01       		.byte	0x1
 3325 0868 32       		.byte	0x32
 3326 0869 AE000000 		.4byte	0xae
 3327 086d 05       		.uleb128 0x5
 3328 086e 03       		.byte	0x3
 3329 086f 00000000 		.4byte	stopBuffer
 3330 0873 26       		.uleb128 0x26
 3331 0874 37000000 		.4byte	.LASF129
 3332 0878 01       		.byte	0x1
 3333 0879 34       		.byte	0x34
 3334 087a 96000000 		.4byte	0x96
 3335 087e 05       		.uleb128 0x5
 3336 087f 03       		.byte	0x3
 3337 0880 00000000 		.4byte	turnStartedFlag
 3338 0884 26       		.uleb128 0x26
 3339 0885 2A040000 		.4byte	.LASF130
 3340 0889 01       		.byte	0x1
 3341 088a 35       		.byte	0x35
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 76


 3342 088b 96000000 		.4byte	0x96
 3343 088f 05       		.uleb128 0x5
 3344 0890 03       		.byte	0x3
 3345 0891 00000000 		.4byte	turnFinishedFlag
 3346 0895 26       		.uleb128 0x26
 3347 0896 8C010000 		.4byte	.LASF131
 3348 089a 01       		.byte	0x1
 3349 089b 37       		.byte	0x37
 3350 089c 96000000 		.4byte	0x96
 3351 08a0 05       		.uleb128 0x5
 3352 08a1 03       		.byte	0x3
 3353 08a2 00000000 		.4byte	forwardUntilTargetStartedFlag
 3354 08a6 26       		.uleb128 0x26
 3355 08a7 41060000 		.4byte	.LASF132
 3356 08ab 01       		.byte	0x1
 3357 08ac 38       		.byte	0x38
 3358 08ad 96000000 		.4byte	0x96
 3359 08b1 05       		.uleb128 0x5
 3360 08b2 03       		.byte	0x3
 3361 08b3 00000000 		.4byte	uTurnStartedFlag
 3362 08b7 26       		.uleb128 0x26
 3363 08b8 8E060000 		.4byte	.LASF133
 3364 08bc 01       		.byte	0x1
 3365 08bd 39       		.byte	0x39
 3366 08be 96000000 		.4byte	0x96
 3367 08c2 05       		.uleb128 0x5
 3368 08c3 03       		.byte	0x3
 3369 08c4 00000000 		.4byte	uTurnFinishedFlag
 3370 08c8 26       		.uleb128 0x26
 3371 08c9 DF040000 		.4byte	.LASF134
 3372 08cd 01       		.byte	0x1
 3373 08ce 3B       		.byte	0x3b
 3374 08cf E0000000 		.4byte	0xe0
 3375 08d3 05       		.uleb128 0x5
 3376 08d4 03       		.byte	0x3
 3377 08d5 00000000 		.4byte	junctionConfiguration
 3378 08d9 26       		.uleb128 0x26
 3379 08da 61040000 		.4byte	.LASF135
 3380 08de 01       		.byte	0x1
 3381 08df 3D       		.byte	0x3d
 3382 08e0 D2000000 		.4byte	0xd2
 3383 08e4 05       		.uleb128 0x5
 3384 08e5 03       		.byte	0x3
 3385 08e6 00000000 		.4byte	blockSizeTotal
 3386 08ea 26       		.uleb128 0x26
 3387 08eb F1030000 		.4byte	.LASF136
 3388 08ef 01       		.byte	0x1
 3389 08f0 BC       		.byte	0xbc
 3390 08f1 D2000000 		.4byte	0xd2
 3391 08f5 05       		.uleb128 0x5
 3392 08f6 03       		.byte	0x3
 3393 08f7 00000000 		.4byte	xBlocksize
 3394 08fb 26       		.uleb128 0x26
 3395 08fc 93050000 		.4byte	.LASF137
 3396 0900 01       		.byte	0x1
 3397 0901 BD       		.byte	0xbd
 3398 0902 D2000000 		.4byte	0xd2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 77


 3399 0906 05       		.uleb128 0x5
 3400 0907 03       		.byte	0x3
 3401 0908 00000000 		.4byte	yBlocksize
 3402 090c 26       		.uleb128 0x26
 3403 090d 9B070000 		.4byte	.LASF138
 3404 0911 01       		.byte	0x1
 3405 0912 BE       		.byte	0xbe
 3406 0913 96000000 		.4byte	0x96
 3407 0917 05       		.uleb128 0x5
 3408 0918 03       		.byte	0x3
 3409 0919 00000000 		.4byte	currentRow
 3410 091d 26       		.uleb128 0x26
 3411 091e 09080000 		.4byte	.LASF139
 3412 0922 01       		.byte	0x1
 3413 0923 BF       		.byte	0xbf
 3414 0924 96000000 		.4byte	0x96
 3415 0928 05       		.uleb128 0x5
 3416 0929 03       		.byte	0x3
 3417 092a 00000000 		.4byte	currentCol
 3418 092e 29       		.uleb128 0x29
 3419 092f D5060000 		.4byte	.LASF140
 3420 0933 01       		.byte	0x1
 3421 0934 0C01     		.2byte	0x10c
 3422 0936 96000000 		.4byte	0x96
 3423 093a 05       		.uleb128 0x5
 3424 093b 03       		.byte	0x3
 3425 093c 00000000 		.4byte	stoppedAfterTurn
 3426 0940 29       		.uleb128 0x29
 3427 0941 29030000 		.4byte	.LASF141
 3428 0945 01       		.byte	0x1
 3429 0946 0D01     		.2byte	0x10d
 3430 0948 96000000 		.4byte	0x96
 3431 094c 05       		.uleb128 0x5
 3432 094d 03       		.byte	0x3
 3433 094e 00000000 		.4byte	ignoreSensor
 3434 0952 29       		.uleb128 0x29
 3435 0953 8A040000 		.4byte	.LASF142
 3436 0957 01       		.byte	0x1
 3437 0958 D101     		.2byte	0x1d1
 3438 095a 96000000 		.4byte	0x96
 3439 095e 05       		.uleb128 0x5
 3440 095f 03       		.byte	0x3
 3441 0960 00000000 		.4byte	spinCourseCorrectionStarted
 3442 0964 29       		.uleb128 0x29
 3443 0965 52060000 		.4byte	.LASF143
 3444 0969 01       		.byte	0x1
 3445 096a D201     		.2byte	0x1d2
 3446 096c 74020000 		.4byte	0x274
 3447 0970 05       		.uleb128 0x5
 3448 0971 03       		.byte	0x3
 3449 0972 00000000 		.4byte	lastDirectionAfter180
 3450 0976 29       		.uleb128 0x29
 3451 0977 48070000 		.4byte	.LASF144
 3452 097b 01       		.byte	0x1
 3453 097c D301     		.2byte	0x1d3
 3454 097e 68000000 		.4byte	0x68
 3455 0982 05       		.uleb128 0x5
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 78


 3456 0983 03       		.byte	0x3
 3457 0984 00000000 		.4byte	currentIgnoreL
 3458 0988 29       		.uleb128 0x29
 3459 0989 57070000 		.4byte	.LASF145
 3460 098d 01       		.byte	0x1
 3461 098e D401     		.2byte	0x1d4
 3462 0990 68000000 		.4byte	0x68
 3463 0994 05       		.uleb128 0x5
 3464 0995 03       		.byte	0x3
 3465 0996 00000000 		.4byte	currentIgnoreR
 3466 099a 29       		.uleb128 0x29
 3467 099b 4D050000 		.4byte	.LASF146
 3468 099f 01       		.byte	0x1
 3469 09a0 F901     		.2byte	0x1f9
 3470 09a2 68000000 		.4byte	0x68
 3471 09a6 05       		.uleb128 0x5
 3472 09a7 03       		.byte	0x3
 3473 09a8 00000000 		.4byte	leftWingFlag
 3474 09ac 29       		.uleb128 0x29
 3475 09ad 82000000 		.4byte	.LASF147
 3476 09b1 01       		.byte	0x1
 3477 09b2 FA01     		.2byte	0x1fa
 3478 09b4 68000000 		.4byte	0x68
 3479 09b8 05       		.uleb128 0x5
 3480 09b9 03       		.byte	0x3
 3481 09ba 00000000 		.4byte	rightWingFlag
 3482 09be 00       		.byte	0
 3483              		.section	.debug_abbrev,"",%progbits
 3484              	.Ldebug_abbrev0:
 3485 0000 01       		.uleb128 0x1
 3486 0001 11       		.uleb128 0x11
 3487 0002 01       		.byte	0x1
 3488 0003 25       		.uleb128 0x25
 3489 0004 0E       		.uleb128 0xe
 3490 0005 13       		.uleb128 0x13
 3491 0006 0B       		.uleb128 0xb
 3492 0007 03       		.uleb128 0x3
 3493 0008 0E       		.uleb128 0xe
 3494 0009 1B       		.uleb128 0x1b
 3495 000a 0E       		.uleb128 0xe
 3496 000b 55       		.uleb128 0x55
 3497 000c 17       		.uleb128 0x17
 3498 000d 11       		.uleb128 0x11
 3499 000e 01       		.uleb128 0x1
 3500 000f 10       		.uleb128 0x10
 3501 0010 17       		.uleb128 0x17
 3502 0011 00       		.byte	0
 3503 0012 00       		.byte	0
 3504 0013 02       		.uleb128 0x2
 3505 0014 24       		.uleb128 0x24
 3506 0015 00       		.byte	0
 3507 0016 0B       		.uleb128 0xb
 3508 0017 0B       		.uleb128 0xb
 3509 0018 3E       		.uleb128 0x3e
 3510 0019 0B       		.uleb128 0xb
 3511 001a 03       		.uleb128 0x3
 3512 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 79


 3513 001c 00       		.byte	0
 3514 001d 00       		.byte	0
 3515 001e 03       		.uleb128 0x3
 3516 001f 16       		.uleb128 0x16
 3517 0020 00       		.byte	0
 3518 0021 03       		.uleb128 0x3
 3519 0022 0E       		.uleb128 0xe
 3520 0023 3A       		.uleb128 0x3a
 3521 0024 0B       		.uleb128 0xb
 3522 0025 3B       		.uleb128 0x3b
 3523 0026 0B       		.uleb128 0xb
 3524 0027 49       		.uleb128 0x49
 3525 0028 13       		.uleb128 0x13
 3526 0029 00       		.byte	0
 3527 002a 00       		.byte	0
 3528 002b 04       		.uleb128 0x4
 3529 002c 24       		.uleb128 0x24
 3530 002d 00       		.byte	0
 3531 002e 0B       		.uleb128 0xb
 3532 002f 0B       		.uleb128 0xb
 3533 0030 3E       		.uleb128 0x3e
 3534 0031 0B       		.uleb128 0xb
 3535 0032 03       		.uleb128 0x3
 3536 0033 08       		.uleb128 0x8
 3537 0034 00       		.byte	0
 3538 0035 00       		.byte	0
 3539 0036 05       		.uleb128 0x5
 3540 0037 16       		.uleb128 0x16
 3541 0038 00       		.byte	0
 3542 0039 03       		.uleb128 0x3
 3543 003a 0E       		.uleb128 0xe
 3544 003b 3A       		.uleb128 0x3a
 3545 003c 0B       		.uleb128 0xb
 3546 003d 3B       		.uleb128 0x3b
 3547 003e 05       		.uleb128 0x5
 3548 003f 49       		.uleb128 0x49
 3549 0040 13       		.uleb128 0x13
 3550 0041 00       		.byte	0
 3551 0042 00       		.byte	0
 3552 0043 06       		.uleb128 0x6
 3553 0044 01       		.uleb128 0x1
 3554 0045 01       		.byte	0x1
 3555 0046 49       		.uleb128 0x49
 3556 0047 13       		.uleb128 0x13
 3557 0048 01       		.uleb128 0x1
 3558 0049 13       		.uleb128 0x13
 3559 004a 00       		.byte	0
 3560 004b 00       		.byte	0
 3561 004c 07       		.uleb128 0x7
 3562 004d 21       		.uleb128 0x21
 3563 004e 00       		.byte	0
 3564 004f 49       		.uleb128 0x49
 3565 0050 13       		.uleb128 0x13
 3566 0051 2F       		.uleb128 0x2f
 3567 0052 0B       		.uleb128 0xb
 3568 0053 00       		.byte	0
 3569 0054 00       		.byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 80


 3570 0055 08       		.uleb128 0x8
 3571 0056 13       		.uleb128 0x13
 3572 0057 01       		.byte	0x1
 3573 0058 03       		.uleb128 0x3
 3574 0059 0E       		.uleb128 0xe
 3575 005a 0B       		.uleb128 0xb
 3576 005b 0B       		.uleb128 0xb
 3577 005c 3A       		.uleb128 0x3a
 3578 005d 0B       		.uleb128 0xb
 3579 005e 3B       		.uleb128 0x3b
 3580 005f 0B       		.uleb128 0xb
 3581 0060 01       		.uleb128 0x1
 3582 0061 13       		.uleb128 0x13
 3583 0062 00       		.byte	0
 3584 0063 00       		.byte	0
 3585 0064 09       		.uleb128 0x9
 3586 0065 0D       		.uleb128 0xd
 3587 0066 00       		.byte	0
 3588 0067 03       		.uleb128 0x3
 3589 0068 0E       		.uleb128 0xe
 3590 0069 3A       		.uleb128 0x3a
 3591 006a 0B       		.uleb128 0xb
 3592 006b 3B       		.uleb128 0x3b
 3593 006c 0B       		.uleb128 0xb
 3594 006d 49       		.uleb128 0x49
 3595 006e 13       		.uleb128 0x13
 3596 006f 38       		.uleb128 0x38
 3597 0070 0B       		.uleb128 0xb
 3598 0071 00       		.byte	0
 3599 0072 00       		.byte	0
 3600 0073 0A       		.uleb128 0xa
 3601 0074 04       		.uleb128 0x4
 3602 0075 01       		.byte	0x1
 3603 0076 03       		.uleb128 0x3
 3604 0077 0E       		.uleb128 0xe
 3605 0078 0B       		.uleb128 0xb
 3606 0079 0B       		.uleb128 0xb
 3607 007a 49       		.uleb128 0x49
 3608 007b 13       		.uleb128 0x13
 3609 007c 3A       		.uleb128 0x3a
 3610 007d 0B       		.uleb128 0xb
 3611 007e 3B       		.uleb128 0x3b
 3612 007f 0B       		.uleb128 0xb
 3613 0080 01       		.uleb128 0x1
 3614 0081 13       		.uleb128 0x13
 3615 0082 00       		.byte	0
 3616 0083 00       		.byte	0
 3617 0084 0B       		.uleb128 0xb
 3618 0085 28       		.uleb128 0x28
 3619 0086 00       		.byte	0
 3620 0087 03       		.uleb128 0x3
 3621 0088 08       		.uleb128 0x8
 3622 0089 1C       		.uleb128 0x1c
 3623 008a 0B       		.uleb128 0xb
 3624 008b 00       		.byte	0
 3625 008c 00       		.byte	0
 3626 008d 0C       		.uleb128 0xc
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 81


 3627 008e 28       		.uleb128 0x28
 3628 008f 00       		.byte	0
 3629 0090 03       		.uleb128 0x3
 3630 0091 0E       		.uleb128 0xe
 3631 0092 1C       		.uleb128 0x1c
 3632 0093 0B       		.uleb128 0xb
 3633 0094 00       		.byte	0
 3634 0095 00       		.byte	0
 3635 0096 0D       		.uleb128 0xd
 3636 0097 2E       		.uleb128 0x2e
 3637 0098 01       		.byte	0x1
 3638 0099 3F       		.uleb128 0x3f
 3639 009a 19       		.uleb128 0x19
 3640 009b 03       		.uleb128 0x3
 3641 009c 0E       		.uleb128 0xe
 3642 009d 3A       		.uleb128 0x3a
 3643 009e 0B       		.uleb128 0xb
 3644 009f 3B       		.uleb128 0x3b
 3645 00a0 0B       		.uleb128 0xb
 3646 00a1 27       		.uleb128 0x27
 3647 00a2 19       		.uleb128 0x19
 3648 00a3 11       		.uleb128 0x11
 3649 00a4 01       		.uleb128 0x1
 3650 00a5 12       		.uleb128 0x12
 3651 00a6 06       		.uleb128 0x6
 3652 00a7 40       		.uleb128 0x40
 3653 00a8 18       		.uleb128 0x18
 3654 00a9 9642     		.uleb128 0x2116
 3655 00ab 19       		.uleb128 0x19
 3656 00ac 01       		.uleb128 0x1
 3657 00ad 13       		.uleb128 0x13
 3658 00ae 00       		.byte	0
 3659 00af 00       		.byte	0
 3660 00b0 0E       		.uleb128 0xe
 3661 00b1 0B       		.uleb128 0xb
 3662 00b2 01       		.byte	0x1
 3663 00b3 11       		.uleb128 0x11
 3664 00b4 01       		.uleb128 0x1
 3665 00b5 12       		.uleb128 0x12
 3666 00b6 06       		.uleb128 0x6
 3667 00b7 00       		.byte	0
 3668 00b8 00       		.byte	0
 3669 00b9 0F       		.uleb128 0xf
 3670 00ba 34       		.uleb128 0x34
 3671 00bb 00       		.byte	0
 3672 00bc 03       		.uleb128 0x3
 3673 00bd 0E       		.uleb128 0xe
 3674 00be 3A       		.uleb128 0x3a
 3675 00bf 0B       		.uleb128 0xb
 3676 00c0 3B       		.uleb128 0x3b
 3677 00c1 0B       		.uleb128 0xb
 3678 00c2 49       		.uleb128 0x49
 3679 00c3 13       		.uleb128 0x13
 3680 00c4 02       		.uleb128 0x2
 3681 00c5 18       		.uleb128 0x18
 3682 00c6 00       		.byte	0
 3683 00c7 00       		.byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 82


 3684 00c8 10       		.uleb128 0x10
 3685 00c9 2E       		.uleb128 0x2e
 3686 00ca 00       		.byte	0
 3687 00cb 3F       		.uleb128 0x3f
 3688 00cc 19       		.uleb128 0x19
 3689 00cd 03       		.uleb128 0x3
 3690 00ce 0E       		.uleb128 0xe
 3691 00cf 3A       		.uleb128 0x3a
 3692 00d0 0B       		.uleb128 0xb
 3693 00d1 3B       		.uleb128 0x3b
 3694 00d2 0B       		.uleb128 0xb
 3695 00d3 27       		.uleb128 0x27
 3696 00d4 19       		.uleb128 0x19
 3697 00d5 11       		.uleb128 0x11
 3698 00d6 01       		.uleb128 0x1
 3699 00d7 12       		.uleb128 0x12
 3700 00d8 06       		.uleb128 0x6
 3701 00d9 40       		.uleb128 0x40
 3702 00da 18       		.uleb128 0x18
 3703 00db 9742     		.uleb128 0x2117
 3704 00dd 19       		.uleb128 0x19
 3705 00de 00       		.byte	0
 3706 00df 00       		.byte	0
 3707 00e0 11       		.uleb128 0x11
 3708 00e1 2E       		.uleb128 0x2e
 3709 00e2 00       		.byte	0
 3710 00e3 3F       		.uleb128 0x3f
 3711 00e4 19       		.uleb128 0x19
 3712 00e5 03       		.uleb128 0x3
 3713 00e6 0E       		.uleb128 0xe
 3714 00e7 3A       		.uleb128 0x3a
 3715 00e8 0B       		.uleb128 0xb
 3716 00e9 3B       		.uleb128 0x3b
 3717 00ea 0B       		.uleb128 0xb
 3718 00eb 27       		.uleb128 0x27
 3719 00ec 19       		.uleb128 0x19
 3720 00ed 11       		.uleb128 0x11
 3721 00ee 01       		.uleb128 0x1
 3722 00ef 12       		.uleb128 0x12
 3723 00f0 06       		.uleb128 0x6
 3724 00f1 40       		.uleb128 0x40
 3725 00f2 18       		.uleb128 0x18
 3726 00f3 9642     		.uleb128 0x2116
 3727 00f5 19       		.uleb128 0x19
 3728 00f6 00       		.byte	0
 3729 00f7 00       		.byte	0
 3730 00f8 12       		.uleb128 0x12
 3731 00f9 2E       		.uleb128 0x2e
 3732 00fa 00       		.byte	0
 3733 00fb 3F       		.uleb128 0x3f
 3734 00fc 19       		.uleb128 0x19
 3735 00fd 03       		.uleb128 0x3
 3736 00fe 0E       		.uleb128 0xe
 3737 00ff 3A       		.uleb128 0x3a
 3738 0100 0B       		.uleb128 0xb
 3739 0101 3B       		.uleb128 0x3b
 3740 0102 0B       		.uleb128 0xb
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 83


 3741 0103 49       		.uleb128 0x49
 3742 0104 13       		.uleb128 0x13
 3743 0105 11       		.uleb128 0x11
 3744 0106 01       		.uleb128 0x1
 3745 0107 12       		.uleb128 0x12
 3746 0108 06       		.uleb128 0x6
 3747 0109 40       		.uleb128 0x40
 3748 010a 18       		.uleb128 0x18
 3749 010b 9642     		.uleb128 0x2116
 3750 010d 19       		.uleb128 0x19
 3751 010e 00       		.byte	0
 3752 010f 00       		.byte	0
 3753 0110 13       		.uleb128 0x13
 3754 0111 2E       		.uleb128 0x2e
 3755 0112 01       		.byte	0x1
 3756 0113 3F       		.uleb128 0x3f
 3757 0114 19       		.uleb128 0x19
 3758 0115 03       		.uleb128 0x3
 3759 0116 0E       		.uleb128 0xe
 3760 0117 3A       		.uleb128 0x3a
 3761 0118 0B       		.uleb128 0xb
 3762 0119 3B       		.uleb128 0x3b
 3763 011a 0B       		.uleb128 0xb
 3764 011b 27       		.uleb128 0x27
 3765 011c 19       		.uleb128 0x19
 3766 011d 49       		.uleb128 0x49
 3767 011e 13       		.uleb128 0x13
 3768 011f 11       		.uleb128 0x11
 3769 0120 01       		.uleb128 0x1
 3770 0121 12       		.uleb128 0x12
 3771 0122 06       		.uleb128 0x6
 3772 0123 40       		.uleb128 0x40
 3773 0124 18       		.uleb128 0x18
 3774 0125 9642     		.uleb128 0x2116
 3775 0127 19       		.uleb128 0x19
 3776 0128 01       		.uleb128 0x1
 3777 0129 13       		.uleb128 0x13
 3778 012a 00       		.byte	0
 3779 012b 00       		.byte	0
 3780 012c 14       		.uleb128 0x14
 3781 012d 05       		.uleb128 0x5
 3782 012e 00       		.byte	0
 3783 012f 03       		.uleb128 0x3
 3784 0130 0E       		.uleb128 0xe
 3785 0131 3A       		.uleb128 0x3a
 3786 0132 0B       		.uleb128 0xb
 3787 0133 3B       		.uleb128 0x3b
 3788 0134 0B       		.uleb128 0xb
 3789 0135 49       		.uleb128 0x49
 3790 0136 13       		.uleb128 0x13
 3791 0137 02       		.uleb128 0x2
 3792 0138 18       		.uleb128 0x18
 3793 0139 00       		.byte	0
 3794 013a 00       		.byte	0
 3795 013b 15       		.uleb128 0x15
 3796 013c 34       		.uleb128 0x34
 3797 013d 00       		.byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 84


 3798 013e 03       		.uleb128 0x3
 3799 013f 08       		.uleb128 0x8
 3800 0140 3A       		.uleb128 0x3a
 3801 0141 0B       		.uleb128 0xb
 3802 0142 3B       		.uleb128 0x3b
 3803 0143 0B       		.uleb128 0xb
 3804 0144 49       		.uleb128 0x49
 3805 0145 13       		.uleb128 0x13
 3806 0146 02       		.uleb128 0x2
 3807 0147 18       		.uleb128 0x18
 3808 0148 00       		.byte	0
 3809 0149 00       		.byte	0
 3810 014a 16       		.uleb128 0x16
 3811 014b 2E       		.uleb128 0x2e
 3812 014c 00       		.byte	0
 3813 014d 3F       		.uleb128 0x3f
 3814 014e 19       		.uleb128 0x19
 3815 014f 03       		.uleb128 0x3
 3816 0150 0E       		.uleb128 0xe
 3817 0151 3A       		.uleb128 0x3a
 3818 0152 0B       		.uleb128 0xb
 3819 0153 3B       		.uleb128 0x3b
 3820 0154 0B       		.uleb128 0xb
 3821 0155 11       		.uleb128 0x11
 3822 0156 01       		.uleb128 0x1
 3823 0157 12       		.uleb128 0x12
 3824 0158 06       		.uleb128 0x6
 3825 0159 40       		.uleb128 0x40
 3826 015a 18       		.uleb128 0x18
 3827 015b 9742     		.uleb128 0x2117
 3828 015d 19       		.uleb128 0x19
 3829 015e 00       		.byte	0
 3830 015f 00       		.byte	0
 3831 0160 17       		.uleb128 0x17
 3832 0161 2E       		.uleb128 0x2e
 3833 0162 00       		.byte	0
 3834 0163 3F       		.uleb128 0x3f
 3835 0164 19       		.uleb128 0x19
 3836 0165 03       		.uleb128 0x3
 3837 0166 0E       		.uleb128 0xe
 3838 0167 3A       		.uleb128 0x3a
 3839 0168 0B       		.uleb128 0xb
 3840 0169 3B       		.uleb128 0x3b
 3841 016a 05       		.uleb128 0x5
 3842 016b 49       		.uleb128 0x49
 3843 016c 13       		.uleb128 0x13
 3844 016d 11       		.uleb128 0x11
 3845 016e 01       		.uleb128 0x1
 3846 016f 12       		.uleb128 0x12
 3847 0170 06       		.uleb128 0x6
 3848 0171 40       		.uleb128 0x40
 3849 0172 18       		.uleb128 0x18
 3850 0173 9742     		.uleb128 0x2117
 3851 0175 19       		.uleb128 0x19
 3852 0176 00       		.byte	0
 3853 0177 00       		.byte	0
 3854 0178 18       		.uleb128 0x18
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 85


 3855 0179 2E       		.uleb128 0x2e
 3856 017a 01       		.byte	0x1
 3857 017b 3F       		.uleb128 0x3f
 3858 017c 19       		.uleb128 0x19
 3859 017d 03       		.uleb128 0x3
 3860 017e 0E       		.uleb128 0xe
 3861 017f 3A       		.uleb128 0x3a
 3862 0180 0B       		.uleb128 0xb
 3863 0181 3B       		.uleb128 0x3b
 3864 0182 05       		.uleb128 0x5
 3865 0183 49       		.uleb128 0x49
 3866 0184 13       		.uleb128 0x13
 3867 0185 11       		.uleb128 0x11
 3868 0186 01       		.uleb128 0x1
 3869 0187 12       		.uleb128 0x12
 3870 0188 06       		.uleb128 0x6
 3871 0189 40       		.uleb128 0x40
 3872 018a 18       		.uleb128 0x18
 3873 018b 9642     		.uleb128 0x2116
 3874 018d 19       		.uleb128 0x19
 3875 018e 01       		.uleb128 0x1
 3876 018f 13       		.uleb128 0x13
 3877 0190 00       		.byte	0
 3878 0191 00       		.byte	0
 3879 0192 19       		.uleb128 0x19
 3880 0193 34       		.uleb128 0x34
 3881 0194 00       		.byte	0
 3882 0195 03       		.uleb128 0x3
 3883 0196 0E       		.uleb128 0xe
 3884 0197 3A       		.uleb128 0x3a
 3885 0198 0B       		.uleb128 0xb
 3886 0199 3B       		.uleb128 0x3b
 3887 019a 05       		.uleb128 0x5
 3888 019b 49       		.uleb128 0x49
 3889 019c 13       		.uleb128 0x13
 3890 019d 02       		.uleb128 0x2
 3891 019e 18       		.uleb128 0x18
 3892 019f 00       		.byte	0
 3893 01a0 00       		.byte	0
 3894 01a1 1A       		.uleb128 0x1a
 3895 01a2 2E       		.uleb128 0x2e
 3896 01a3 01       		.byte	0x1
 3897 01a4 3F       		.uleb128 0x3f
 3898 01a5 19       		.uleb128 0x19
 3899 01a6 03       		.uleb128 0x3
 3900 01a7 0E       		.uleb128 0xe
 3901 01a8 3A       		.uleb128 0x3a
 3902 01a9 0B       		.uleb128 0xb
 3903 01aa 3B       		.uleb128 0x3b
 3904 01ab 05       		.uleb128 0x5
 3905 01ac 27       		.uleb128 0x27
 3906 01ad 19       		.uleb128 0x19
 3907 01ae 49       		.uleb128 0x49
 3908 01af 13       		.uleb128 0x13
 3909 01b0 11       		.uleb128 0x11
 3910 01b1 01       		.uleb128 0x1
 3911 01b2 12       		.uleb128 0x12
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 86


 3912 01b3 06       		.uleb128 0x6
 3913 01b4 40       		.uleb128 0x40
 3914 01b5 18       		.uleb128 0x18
 3915 01b6 9642     		.uleb128 0x2116
 3916 01b8 19       		.uleb128 0x19
 3917 01b9 01       		.uleb128 0x1
 3918 01ba 13       		.uleb128 0x13
 3919 01bb 00       		.byte	0
 3920 01bc 00       		.byte	0
 3921 01bd 1B       		.uleb128 0x1b
 3922 01be 05       		.uleb128 0x5
 3923 01bf 00       		.byte	0
 3924 01c0 03       		.uleb128 0x3
 3925 01c1 0E       		.uleb128 0xe
 3926 01c2 3A       		.uleb128 0x3a
 3927 01c3 0B       		.uleb128 0xb
 3928 01c4 3B       		.uleb128 0x3b
 3929 01c5 05       		.uleb128 0x5
 3930 01c6 49       		.uleb128 0x49
 3931 01c7 13       		.uleb128 0x13
 3932 01c8 02       		.uleb128 0x2
 3933 01c9 18       		.uleb128 0x18
 3934 01ca 00       		.byte	0
 3935 01cb 00       		.byte	0
 3936 01cc 1C       		.uleb128 0x1c
 3937 01cd 0B       		.uleb128 0xb
 3938 01ce 01       		.byte	0x1
 3939 01cf 55       		.uleb128 0x55
 3940 01d0 17       		.uleb128 0x17
 3941 01d1 01       		.uleb128 0x1
 3942 01d2 13       		.uleb128 0x13
 3943 01d3 00       		.byte	0
 3944 01d4 00       		.byte	0
 3945 01d5 1D       		.uleb128 0x1d
 3946 01d6 34       		.uleb128 0x34
 3947 01d7 00       		.byte	0
 3948 01d8 03       		.uleb128 0x3
 3949 01d9 08       		.uleb128 0x8
 3950 01da 3A       		.uleb128 0x3a
 3951 01db 0B       		.uleb128 0xb
 3952 01dc 3B       		.uleb128 0x3b
 3953 01dd 05       		.uleb128 0x5
 3954 01de 49       		.uleb128 0x49
 3955 01df 13       		.uleb128 0x13
 3956 01e0 02       		.uleb128 0x2
 3957 01e1 18       		.uleb128 0x18
 3958 01e2 00       		.byte	0
 3959 01e3 00       		.byte	0
 3960 01e4 1E       		.uleb128 0x1e
 3961 01e5 0B       		.uleb128 0xb
 3962 01e6 01       		.byte	0x1
 3963 01e7 55       		.uleb128 0x55
 3964 01e8 17       		.uleb128 0x17
 3965 01e9 00       		.byte	0
 3966 01ea 00       		.byte	0
 3967 01eb 1F       		.uleb128 0x1f
 3968 01ec 2E       		.uleb128 0x2e
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 87


 3969 01ed 00       		.byte	0
 3970 01ee 3F       		.uleb128 0x3f
 3971 01ef 19       		.uleb128 0x19
 3972 01f0 03       		.uleb128 0x3
 3973 01f1 0E       		.uleb128 0xe
 3974 01f2 3A       		.uleb128 0x3a
 3975 01f3 0B       		.uleb128 0xb
 3976 01f4 3B       		.uleb128 0x3b
 3977 01f5 05       		.uleb128 0x5
 3978 01f6 11       		.uleb128 0x11
 3979 01f7 01       		.uleb128 0x1
 3980 01f8 12       		.uleb128 0x12
 3981 01f9 06       		.uleb128 0x6
 3982 01fa 40       		.uleb128 0x40
 3983 01fb 18       		.uleb128 0x18
 3984 01fc 9742     		.uleb128 0x2117
 3985 01fe 19       		.uleb128 0x19
 3986 01ff 00       		.byte	0
 3987 0200 00       		.byte	0
 3988 0201 20       		.uleb128 0x20
 3989 0202 2E       		.uleb128 0x2e
 3990 0203 01       		.byte	0x1
 3991 0204 3F       		.uleb128 0x3f
 3992 0205 19       		.uleb128 0x19
 3993 0206 03       		.uleb128 0x3
 3994 0207 0E       		.uleb128 0xe
 3995 0208 3A       		.uleb128 0x3a
 3996 0209 0B       		.uleb128 0xb
 3997 020a 3B       		.uleb128 0x3b
 3998 020b 05       		.uleb128 0x5
 3999 020c 27       		.uleb128 0x27
 4000 020d 19       		.uleb128 0x19
 4001 020e 49       		.uleb128 0x49
 4002 020f 13       		.uleb128 0x13
 4003 0210 11       		.uleb128 0x11
 4004 0211 01       		.uleb128 0x1
 4005 0212 12       		.uleb128 0x12
 4006 0213 06       		.uleb128 0x6
 4007 0214 40       		.uleb128 0x40
 4008 0215 18       		.uleb128 0x18
 4009 0216 9742     		.uleb128 0x2117
 4010 0218 19       		.uleb128 0x19
 4011 0219 01       		.uleb128 0x1
 4012 021a 13       		.uleb128 0x13
 4013 021b 00       		.byte	0
 4014 021c 00       		.byte	0
 4015 021d 21       		.uleb128 0x21
 4016 021e 0F       		.uleb128 0xf
 4017 021f 00       		.byte	0
 4018 0220 0B       		.uleb128 0xb
 4019 0221 0B       		.uleb128 0xb
 4020 0222 49       		.uleb128 0x49
 4021 0223 13       		.uleb128 0x13
 4022 0224 00       		.byte	0
 4023 0225 00       		.byte	0
 4024 0226 22       		.uleb128 0x22
 4025 0227 2E       		.uleb128 0x2e
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 88


 4026 0228 00       		.byte	0
 4027 0229 3F       		.uleb128 0x3f
 4028 022a 19       		.uleb128 0x19
 4029 022b 03       		.uleb128 0x3
 4030 022c 0E       		.uleb128 0xe
 4031 022d 3A       		.uleb128 0x3a
 4032 022e 0B       		.uleb128 0xb
 4033 022f 3B       		.uleb128 0x3b
 4034 0230 05       		.uleb128 0x5
 4035 0231 11       		.uleb128 0x11
 4036 0232 01       		.uleb128 0x1
 4037 0233 12       		.uleb128 0x12
 4038 0234 06       		.uleb128 0x6
 4039 0235 40       		.uleb128 0x40
 4040 0236 18       		.uleb128 0x18
 4041 0237 9642     		.uleb128 0x2116
 4042 0239 19       		.uleb128 0x19
 4043 023a 00       		.byte	0
 4044 023b 00       		.byte	0
 4045 023c 23       		.uleb128 0x23
 4046 023d 34       		.uleb128 0x34
 4047 023e 00       		.byte	0
 4048 023f 03       		.uleb128 0x3
 4049 0240 0E       		.uleb128 0xe
 4050 0241 3A       		.uleb128 0x3a
 4051 0242 0B       		.uleb128 0xb
 4052 0243 3B       		.uleb128 0x3b
 4053 0244 05       		.uleb128 0x5
 4054 0245 49       		.uleb128 0x49
 4055 0246 13       		.uleb128 0x13
 4056 0247 3F       		.uleb128 0x3f
 4057 0248 19       		.uleb128 0x19
 4058 0249 3C       		.uleb128 0x3c
 4059 024a 19       		.uleb128 0x19
 4060 024b 00       		.byte	0
 4061 024c 00       		.byte	0
 4062 024d 24       		.uleb128 0x24
 4063 024e 35       		.uleb128 0x35
 4064 024f 00       		.byte	0
 4065 0250 49       		.uleb128 0x49
 4066 0251 13       		.uleb128 0x13
 4067 0252 00       		.byte	0
 4068 0253 00       		.byte	0
 4069 0254 25       		.uleb128 0x25
 4070 0255 34       		.uleb128 0x34
 4071 0256 00       		.byte	0
 4072 0257 03       		.uleb128 0x3
 4073 0258 08       		.uleb128 0x8
 4074 0259 3A       		.uleb128 0x3a
 4075 025a 0B       		.uleb128 0xb
 4076 025b 3B       		.uleb128 0x3b
 4077 025c 0B       		.uleb128 0xb
 4078 025d 49       		.uleb128 0x49
 4079 025e 13       		.uleb128 0x13
 4080 025f 3F       		.uleb128 0x3f
 4081 0260 19       		.uleb128 0x19
 4082 0261 02       		.uleb128 0x2
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 89


 4083 0262 18       		.uleb128 0x18
 4084 0263 00       		.byte	0
 4085 0264 00       		.byte	0
 4086 0265 26       		.uleb128 0x26
 4087 0266 34       		.uleb128 0x34
 4088 0267 00       		.byte	0
 4089 0268 03       		.uleb128 0x3
 4090 0269 0E       		.uleb128 0xe
 4091 026a 3A       		.uleb128 0x3a
 4092 026b 0B       		.uleb128 0xb
 4093 026c 3B       		.uleb128 0x3b
 4094 026d 0B       		.uleb128 0xb
 4095 026e 49       		.uleb128 0x49
 4096 026f 13       		.uleb128 0x13
 4097 0270 3F       		.uleb128 0x3f
 4098 0271 19       		.uleb128 0x19
 4099 0272 02       		.uleb128 0x2
 4100 0273 18       		.uleb128 0x18
 4101 0274 00       		.byte	0
 4102 0275 00       		.byte	0
 4103 0276 27       		.uleb128 0x27
 4104 0277 34       		.uleb128 0x34
 4105 0278 00       		.byte	0
 4106 0279 03       		.uleb128 0x3
 4107 027a 08       		.uleb128 0x8
 4108 027b 3A       		.uleb128 0x3a
 4109 027c 0B       		.uleb128 0xb
 4110 027d 3B       		.uleb128 0x3b
 4111 027e 0B       		.uleb128 0xb
 4112 027f 49       		.uleb128 0x49
 4113 0280 13       		.uleb128 0x13
 4114 0281 3F       		.uleb128 0x3f
 4115 0282 19       		.uleb128 0x19
 4116 0283 3C       		.uleb128 0x3c
 4117 0284 19       		.uleb128 0x19
 4118 0285 00       		.byte	0
 4119 0286 00       		.byte	0
 4120 0287 28       		.uleb128 0x28
 4121 0288 34       		.uleb128 0x34
 4122 0289 00       		.byte	0
 4123 028a 03       		.uleb128 0x3
 4124 028b 0E       		.uleb128 0xe
 4125 028c 3A       		.uleb128 0x3a
 4126 028d 0B       		.uleb128 0xb
 4127 028e 3B       		.uleb128 0x3b
 4128 028f 0B       		.uleb128 0xb
 4129 0290 49       		.uleb128 0x49
 4130 0291 13       		.uleb128 0x13
 4131 0292 3F       		.uleb128 0x3f
 4132 0293 19       		.uleb128 0x19
 4133 0294 3C       		.uleb128 0x3c
 4134 0295 19       		.uleb128 0x19
 4135 0296 00       		.byte	0
 4136 0297 00       		.byte	0
 4137 0298 29       		.uleb128 0x29
 4138 0299 34       		.uleb128 0x34
 4139 029a 00       		.byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 90


 4140 029b 03       		.uleb128 0x3
 4141 029c 0E       		.uleb128 0xe
 4142 029d 3A       		.uleb128 0x3a
 4143 029e 0B       		.uleb128 0xb
 4144 029f 3B       		.uleb128 0x3b
 4145 02a0 05       		.uleb128 0x5
 4146 02a1 49       		.uleb128 0x49
 4147 02a2 13       		.uleb128 0x13
 4148 02a3 3F       		.uleb128 0x3f
 4149 02a4 19       		.uleb128 0x19
 4150 02a5 02       		.uleb128 0x2
 4151 02a6 18       		.uleb128 0x18
 4152 02a7 00       		.byte	0
 4153 02a8 00       		.byte	0
 4154 02a9 00       		.byte	0
 4155              		.section	.debug_aranges,"",%progbits
 4156 0000 94000000 		.4byte	0x94
 4157 0004 0200     		.2byte	0x2
 4158 0006 00000000 		.4byte	.Ldebug_info0
 4159 000a 04       		.byte	0x4
 4160 000b 00       		.byte	0
 4161 000c 0000     		.2byte	0
 4162 000e 0000     		.2byte	0
 4163 0010 00000000 		.4byte	.LFB64
 4164 0014 EC000000 		.4byte	.LFE64-.LFB64
 4165 0018 00000000 		.4byte	.LFB65
 4166 001c 18000000 		.4byte	.LFE65-.LFB65
 4167 0020 00000000 		.4byte	.LFB66
 4168 0024 18000000 		.4byte	.LFE66-.LFB66
 4169 0028 00000000 		.4byte	.LFB67
 4170 002c 18000000 		.4byte	.LFE67-.LFB67
 4171 0030 00000000 		.4byte	.LFB68
 4172 0034 18000000 		.4byte	.LFE68-.LFB68
 4173 0038 00000000 		.4byte	.LFB69
 4174 003c 38000000 		.4byte	.LFE69-.LFB69
 4175 0040 00000000 		.4byte	.LFB70
 4176 0044 C0000000 		.4byte	.LFE70-.LFB70
 4177 0048 00000000 		.4byte	.LFB71
 4178 004c 54000000 		.4byte	.LFE71-.LFB71
 4179 0050 00000000 		.4byte	.LFB72
 4180 0054 34000000 		.4byte	.LFE72-.LFB72
 4181 0058 00000000 		.4byte	.LFB73
 4182 005c 84000000 		.4byte	.LFE73-.LFB73
 4183 0060 00000000 		.4byte	.LFB74
 4184 0064 94000000 		.4byte	.LFE74-.LFB74
 4185 0068 00000000 		.4byte	.LFB75
 4186 006c C8020000 		.4byte	.LFE75-.LFB75
 4187 0070 00000000 		.4byte	.LFB76
 4188 0074 8C020000 		.4byte	.LFE76-.LFB76
 4189 0078 00000000 		.4byte	.LFB77
 4190 007c 1C000000 		.4byte	.LFE77-.LFB77
 4191 0080 00000000 		.4byte	.LFB78
 4192 0084 76000000 		.4byte	.LFE78-.LFB78
 4193 0088 00000000 		.4byte	.LFB79
 4194 008c C8000000 		.4byte	.LFE79-.LFB79
 4195 0090 00000000 		.4byte	0
 4196 0094 00000000 		.4byte	0
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 91


 4197              		.section	.debug_ranges,"",%progbits
 4198              	.Ldebug_ranges0:
 4199 0000 38000000 		.4byte	.LBB3
 4200 0004 BC000000 		.4byte	.LBE3
 4201 0008 BE000000 		.4byte	.LBB4
 4202 000c C0000000 		.4byte	.LBE4
 4203 0010 00000000 		.4byte	0
 4204 0014 00000000 		.4byte	0
 4205 0018 C2000000 		.4byte	.LBB5
 4206 001c 46010000 		.4byte	.LBE5
 4207 0020 48010000 		.4byte	.LBB6
 4208 0024 4A010000 		.4byte	.LBE6
 4209 0028 00000000 		.4byte	0
 4210 002c 00000000 		.4byte	0
 4211 0030 4C010000 		.4byte	.LBB7
 4212 0034 D0010000 		.4byte	.LBE7
 4213 0038 D2010000 		.4byte	.LBB8
 4214 003c D4010000 		.4byte	.LBE8
 4215 0040 00000000 		.4byte	0
 4216 0044 00000000 		.4byte	0
 4217 0048 D6010000 		.4byte	.LBB9
 4218 004c 5A020000 		.4byte	.LBE9
 4219 0050 5C020000 		.4byte	.LBB10
 4220 0054 5E020000 		.4byte	.LBE10
 4221 0058 00000000 		.4byte	0
 4222 005c 00000000 		.4byte	0
 4223 0060 00000000 		.4byte	.LFB64
 4224 0064 EC000000 		.4byte	.LFE64
 4225 0068 00000000 		.4byte	.LFB65
 4226 006c 18000000 		.4byte	.LFE65
 4227 0070 00000000 		.4byte	.LFB66
 4228 0074 18000000 		.4byte	.LFE66
 4229 0078 00000000 		.4byte	.LFB67
 4230 007c 18000000 		.4byte	.LFE67
 4231 0080 00000000 		.4byte	.LFB68
 4232 0084 18000000 		.4byte	.LFE68
 4233 0088 00000000 		.4byte	.LFB69
 4234 008c 38000000 		.4byte	.LFE69
 4235 0090 00000000 		.4byte	.LFB70
 4236 0094 C0000000 		.4byte	.LFE70
 4237 0098 00000000 		.4byte	.LFB71
 4238 009c 54000000 		.4byte	.LFE71
 4239 00a0 00000000 		.4byte	.LFB72
 4240 00a4 34000000 		.4byte	.LFE72
 4241 00a8 00000000 		.4byte	.LFB73
 4242 00ac 84000000 		.4byte	.LFE73
 4243 00b0 00000000 		.4byte	.LFB74
 4244 00b4 94000000 		.4byte	.LFE74
 4245 00b8 00000000 		.4byte	.LFB75
 4246 00bc C8020000 		.4byte	.LFE75
 4247 00c0 00000000 		.4byte	.LFB76
 4248 00c4 8C020000 		.4byte	.LFE76
 4249 00c8 00000000 		.4byte	.LFB77
 4250 00cc 1C000000 		.4byte	.LFE77
 4251 00d0 00000000 		.4byte	.LFB78
 4252 00d4 76000000 		.4byte	.LFE78
 4253 00d8 00000000 		.4byte	.LFB79
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 92


 4254 00dc C8000000 		.4byte	.LFE79
 4255 00e0 00000000 		.4byte	0
 4256 00e4 00000000 		.4byte	0
 4257              		.section	.debug_line,"",%progbits
 4258              	.Ldebug_line0:
 4259 0000 49040000 		.section	.debug_str,"MS",%progbits,1
 4259      02007001 
 4259      00000201 
 4259      FB0E0D00 
 4259      01010101 
 4260              	.LASF52:
 4261 0000 64697265 		.ascii	"direction\000"
 4261      6374696F 
 4261      6E00
 4262              	.LASF65:
 4263 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 4263      61726441 
 4263      66746572 
 4263      5475726E 
 4263      00
 4264              	.LASF42:
 4265 001b 496E7374 		.ascii	"InstructionDirection\000"
 4265      72756374 
 4265      696F6E44 
 4265      69726563 
 4265      74696F6E 
 4266              	.LASF149:
 4267 0030 6D61696E 		.ascii	"main.c\000"
 4267      2E6300
 4268              	.LASF129:
 4269 0037 7475726E 		.ascii	"turnStartedFlag\000"
 4269      53746172 
 4269      74656446 
 4269      6C616700 
 4270              	.LASF79:
 4271 0047 626C6F63 		.ascii	"blocksize\000"
 4271      6B73697A 
 4271      6500
 4272              	.LASF124:
 4273 0051 62756666 		.ascii	"buffer\000"
 4273      657200
 4274              	.LASF8:
 4275 0058 756E7369 		.ascii	"unsigned int\000"
 4275      676E6564 
 4275      20696E74 
 4275      00
 4276              	.LASF12:
 4277 0065 5F5F696E 		.ascii	"__int32_t\000"
 4277      7433325F 
 4277      7400
 4278              	.LASF18:
 4279 006f 696E7431 		.ascii	"int16\000"
 4279      3600
 4280              	.LASF115:
 4281 0075 73797374 		.ascii	"system_state\000"
 4281      656D5F73 
 4281      74617465 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 93


 4281      00
 4282              	.LASF147:
 4283 0082 72696768 		.ascii	"rightWingFlag\000"
 4283      7457696E 
 4283      67466C61 
 4283      6700
 4284              	.LASF95:
 4285 0090 6E657874 		.ascii	"nextInstruction\000"
 4285      496E7374 
 4285      72756374 
 4285      696F6E00 
 4286              	.LASF148:
 4287 00a0 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 4287      43313120 
 4287      352E342E 
 4287      31203230 
 4287      31363036 
 4288 00d3 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 4288      20726576 
 4288      6973696F 
 4288      6E203233 
 4288      37373135 
 4289 0106 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4289      66756E63 
 4289      74696F6E 
 4289      2D736563 
 4289      74696F6E 
 4290              	.LASF47:
 4291 012e 466F7277 		.ascii	"ForwardUntilTarget\000"
 4291      61726455 
 4291      6E74696C 
 4291      54617267 
 4291      657400
 4292              	.LASF55:
 4293 0141 65787065 		.ascii	"expectedOrientation\000"
 4293      63746564 
 4293      4F726965 
 4293      6E746174 
 4293      696F6E00 
 4294              	.LASF76:
 4295 0155 5370696E 		.ascii	"SpinCourseCorrection\000"
 4295      436F7572 
 4295      7365436F 
 4295      72726563 
 4295      74696F6E 
 4296              	.LASF71:
 4297 016a 53365F44 		.ascii	"S6_DETECTED\000"
 4297      45544543 
 4297      54454400 
 4298              	.LASF123:
 4299 0176 746F7461 		.ascii	"totalDistance\000"
 4299      6C446973 
 4299      74616E63 
 4299      6500
 4300              	.LASF34:
 4301 0184 67325F78 		.ascii	"g2_xpos\000"
 4301      706F7300 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 94


 4302              	.LASF131:
 4303 018c 666F7277 		.ascii	"forwardUntilTargetStartedFlag\000"
 4303      61726455 
 4303      6E74696C 
 4303      54617267 
 4303      65745374 
 4304              	.LASF92:
 4305 01aa 6E756D53 		.ascii	"numSteps\000"
 4305      74657073 
 4305      00
 4306              	.LASF86:
 4307 01b3 74617267 		.ascii	"targetRow\000"
 4307      6574526F 
 4307      7700
 4308              	.LASF78:
 4309 01bd 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 4309      6F76656D 
 4309      656E7441 
 4309      63636F72 
 4309      64696E67 
 4310              	.LASF110:
 4311 01df 666C6167 		.ascii	"flag_rf_transmission_active\000"
 4311      5F72665F 
 4311      7472616E 
 4311      736D6973 
 4311      73696F6E 
 4312              	.LASF75:
 4313 01fb 466F7277 		.ascii	"ForwardCourseCorrection\000"
 4313      61726443 
 4313      6F757273 
 4313      65436F72 
 4313      72656374 
 4314              	.LASF119:
 4315 0213 63757272 		.ascii	"currentRobotOrientation\000"
 4315      656E7452 
 4315      6F626F74 
 4315      4F726965 
 4315      6E746174 
 4316              	.LASF89:
 4317 022b 52657365 		.ascii	"ResetSensorFlags\000"
 4317      7453656E 
 4317      736F7246 
 4317      6C616773 
 4317      00
 4318              	.LASF37:
 4319 023c 67325F64 		.ascii	"g2_direction\000"
 4319      69726563 
 4319      74696F6E 
 4319      00
 4320              	.LASF87:
 4321 0249 74617267 		.ascii	"targetCol\000"
 4321      6574436F 
 4321      6C00
 4322              	.LASF125:
 4323 0253 71756164 		.ascii	"quadDec2Count\000"
 4323      44656332 
 4323      436F756E 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 95


 4323      7400
 4324              	.LASF19:
 4325 0261 666C6F61 		.ascii	"float\000"
 4325      7400
 4326              	.LASF80:
 4327 0267 63757272 		.ascii	"currentInstructionDirection\000"
 4327      656E7449 
 4327      6E737472 
 4327      75637469 
 4327      6F6E4469 
 4328              	.LASF114:
 4329 0283 75736242 		.ascii	"usbBuffer\000"
 4329      75666665 
 4329      7200
 4330              	.LASF83:
 4331 028d 636F756E 		.ascii	"count\000"
 4331      7400
 4332              	.LASF22:
 4333 0293 696E6465 		.ascii	"index\000"
 4333      7800
 4334              	.LASF7:
 4335 0299 6C6F6E67 		.ascii	"long long unsigned int\000"
 4335      206C6F6E 
 4335      6720756E 
 4335      7369676E 
 4335      65642069 
 4336              	.LASF51:
 4337 02b0 496E7374 		.ascii	"Instruction\000"
 4337      72756374 
 4337      696F6E00 
 4338              	.LASF107:
 4339 02bc 666C6167 		.ascii	"flag_packet\000"
 4339      5F706163 
 4339      6B657400 
 4340              	.LASF96:
 4341 02c8 53657452 		.ascii	"SetRobotMovement\000"
 4341      6F626F74 
 4341      4D6F7665 
 4341      6D656E74 
 4341      00
 4342              	.LASF72:
 4343 02d9 54494D45 		.ascii	"TIMER_FINISH\000"
 4343      525F4649 
 4343      4E495348 
 4343      00
 4344              	.LASF127:
 4345 02e6 6B656570 		.ascii	"keepLedOn\000"
 4345      4C65644F 
 4345      6E00
 4346              	.LASF39:
 4347 02f0 4C656674 		.ascii	"Left\000"
 4347      00
 4348              	.LASF103:
 4349 02f5 666C6167 		.ascii	"flag_ts_update\000"
 4349      5F74735F 
 4349      75706461 
 4349      746500
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 96


 4350              	.LASF102:
 4351 0304 666C6167 		.ascii	"flag_ts_enc\000"
 4351      5F74735F 
 4351      656E6300 
 4352              	.LASF81:
 4353 0310 71756164 		.ascii	"quadCountToRPM\000"
 4353      436F756E 
 4353      74546F52 
 4353      504D00
 4354              	.LASF84:
 4355 031f 626C6F63 		.ascii	"blockSize\000"
 4355      6B53697A 
 4355      6500
 4356              	.LASF141:
 4357 0329 69676E6F 		.ascii	"ignoreSensor\000"
 4357      72655365 
 4357      6E736F72 
 4357      00
 4358              	.LASF48:
 4359 0336 53746F70 		.ascii	"StopAtTarget\000"
 4359      41745461 
 4359      72676574 
 4359      00
 4360              	.LASF64:
 4361 0343 77616974 		.ascii	"waitForTurn\000"
 4361      466F7254 
 4361      75726E00 
 4362              	.LASF24:
 4363 034f 726F626F 		.ascii	"robot_ypos\000"
 4363      745F7970 
 4363      6F7300
 4364              	.LASF101:
 4365 035a 74735F64 		.ascii	"ts_display\000"
 4365      6973706C 
 4365      617900
 4366              	.LASF11:
 4367 0365 63686172 		.ascii	"char\000"
 4367      00
 4368              	.LASF150:
 4369 036a 483A5C44 		.ascii	"H:\\Documents\\GitHub\\301-Robot\\psoc student pack"
 4369      6F63756D 
 4369      656E7473 
 4369      5C476974 
 4369      4875625C 
 4370 0399 5C70736F 		.ascii	"\\psoc_code_base\\CS301_Class.cydsn\000"
 4370      635F636F 
 4370      64655F62 
 4370      6173655C 
 4370      43533330 
 4371              	.LASF28:
 4372 03bb 67305F73 		.ascii	"g0_speed\000"
 4372      70656564 
 4372      00
 4373              	.LASF93:
 4374 03c4 696E7374 		.ascii	"instructionList\000"
 4374      72756374 
 4374      696F6E4C 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 97


 4374      69737400 
 4375              	.LASF94:
 4376 03d4 696E7374 		.ascii	"instructionIndex\000"
 4376      72756374 
 4376      696F6E49 
 4376      6E646578 
 4376      00
 4377              	.LASF15:
 4378 03e5 75696E74 		.ascii	"uint16\000"
 4378      313600
 4379              	.LASF17:
 4380 03ec 696E7438 		.ascii	"int8\000"
 4380      00
 4381              	.LASF136:
 4382 03f1 78426C6F 		.ascii	"xBlocksize\000"
 4382      636B7369 
 4382      7A6500
 4383              	.LASF33:
 4384 03fc 67315F64 		.ascii	"g1_direction\000"
 4384      69726563 
 4384      74696F6E 
 4384      00
 4385              	.LASF68:
 4386 0409 53335F44 		.ascii	"S3_DETECTED\000"
 4386      45544543 
 4386      54454400 
 4387              	.LASF77:
 4388 0415 73706565 		.ascii	"speedTimer\000"
 4388      6454696D 
 4388      657200
 4389              	.LASF88:
 4390 0420 70617468 		.ascii	"pathCount\000"
 4390      436F756E 
 4390      7400
 4391              	.LASF130:
 4392 042a 7475726E 		.ascii	"turnFinishedFlag\000"
 4392      46696E69 
 4392      73686564 
 4392      466C6167 
 4392      00
 4393              	.LASF44:
 4394 043b 77616974 		.ascii	"waitForLeftTurn\000"
 4394      466F724C 
 4394      65667454 
 4394      75726E00 
 4395              	.LASF6:
 4396 044b 6C6F6E67 		.ascii	"long long int\000"
 4396      206C6F6E 
 4396      6720696E 
 4396      7400
 4397              	.LASF30:
 4398 0459 67315F78 		.ascii	"g1_xpos\000"
 4398      706F7300 
 4399              	.LASF135:
 4400 0461 626C6F63 		.ascii	"blockSizeTotal\000"
 4400      6B53697A 
 4400      65546F74 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 98


 4400      616C00
 4401              	.LASF120:
 4402 0470 70726576 		.ascii	"previousOrientation\000"
 4402      696F7573 
 4402      4F726965 
 4402      6E746174 
 4402      696F6E00 
 4403              	.LASF46:
 4404 0484 75547572 		.ascii	"uTurn\000"
 4404      6E00
 4405              	.LASF142:
 4406 048a 7370696E 		.ascii	"spinCourseCorrectionStarted\000"
 4406      436F7572 
 4406      7365436F 
 4406      72726563 
 4406      74696F6E 
 4407              	.LASF74:
 4408 04a6 6E657744 		.ascii	"newDistance\000"
 4408      69737461 
 4408      6E636500 
 4409              	.LASF36:
 4410 04b2 67325F73 		.ascii	"g2_speed\000"
 4410      70656564 
 4410      00
 4411              	.LASF27:
 4412 04bb 67305F79 		.ascii	"g0_ypos\000"
 4412      706F7300 
 4413              	.LASF116:
 4414 04c3 666F6F64 		.ascii	"food_list\000"
 4414      5F6C6973 
 4414      7400
 4415              	.LASF59:
 4416 04cd 5475726E 		.ascii	"TurnLeft\000"
 4416      4C656674 
 4416      00
 4417              	.LASF100:
 4418 04d6 74735F73 		.ascii	"ts_speed\000"
 4418      70656564 
 4418      00
 4419              	.LASF134:
 4420 04df 6A756E63 		.ascii	"junctionConfiguration\000"
 4420      74696F6E 
 4420      436F6E66 
 4420      69677572 
 4420      6174696F 
 4421              	.LASF63:
 4422 04f5 556E6B6E 		.ascii	"Unknown\000"
 4422      6F776E00 
 4423              	.LASF16:
 4424 04fd 75696E74 		.ascii	"uint32\000"
 4424      333200
 4425              	.LASF45:
 4426 0504 77616974 		.ascii	"waitForRightTurn\000"
 4426      466F7252 
 4426      69676874 
 4426      5475726E 
 4426      00
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 99


 4427              	.LASF58:
 4428 0515 5475726E 		.ascii	"TurnRight\000"
 4428      52696768 
 4428      7400
 4429              	.LASF50:
 4430 051f 64617461 		.ascii	"data_main\000"
 4430      5F6D6169 
 4430      6E00
 4431              	.LASF21:
 4432 0529 72737369 		.ascii	"rssi\000"
 4432      00
 4433              	.LASF29:
 4434 052e 67305F64 		.ascii	"g0_direction\000"
 4434      69726563 
 4434      74696F6E 
 4434      00
 4435              	.LASF118:
 4436 053b 70726576 		.ascii	"previousDirection\000"
 4436      696F7573 
 4436      44697265 
 4436      6374696F 
 4436      6E00
 4437              	.LASF146:
 4438 054d 6C656674 		.ascii	"leftWingFlag\000"
 4438      57696E67 
 4438      466C6167 
 4438      00
 4439              	.LASF67:
 4440 055a 5370696E 		.ascii	"Spin180\000"
 4440      31383000 
 4441              	.LASF9:
 4442 0562 6C6F6E67 		.ascii	"long double\000"
 4442      20646F75 
 4442      626C6500 
 4443              	.LASF104:
 4444 056e 666C6167 		.ascii	"flag_ts_speed\000"
 4444      5F74735F 
 4444      73706565 
 4444      6400
 4445              	.LASF109:
 4446 057c 64617461 		.ascii	"dataready_flag\000"
 4446      72656164 
 4446      795F666C 
 4446      616700
 4447              	.LASF106:
 4448 058b 666C6167 		.ascii	"flag_rx\000"
 4448      5F727800 
 4449              	.LASF137:
 4450 0593 79426C6F 		.ascii	"yBlocksize\000"
 4450      636B7369 
 4450      7A6500
 4451              	.LASF2:
 4452 059e 73686F72 		.ascii	"short int\000"
 4452      7420696E 
 4452      7400
 4453              	.LASF69:
 4454 05a8 53345F44 		.ascii	"S4_DETECTED\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 100


 4454      45544543 
 4454      54454400 
 4455              	.LASF4:
 4456 05b4 6C6F6E67 		.ascii	"long int\000"
 4456      20696E74 
 4456      00
 4457              	.LASF97:
 4458 05bd 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4458      52784275 
 4458      66666572 
 4458      00
 4459              	.LASF99:
 4460 05ca 74735F75 		.ascii	"ts_update\000"
 4460      70646174 
 4460      6500
 4461              	.LASF57:
 4462 05d4 466F7277 		.ascii	"Forward\000"
 4462      61726400 
 4463              	.LASF122:
 4464 05dc 746F7461 		.ascii	"totalMilliseconds\000"
 4464      6C4D696C 
 4464      6C697365 
 4464      636F6E64 
 4464      7300
 4465              	.LASF35:
 4466 05ee 67325F79 		.ascii	"g2_ypos\000"
 4466      706F7300 
 4467              	.LASF90:
 4468 05f6 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 4468      546F4E65 
 4468      7874496E 
 4468      73747275 
 4468      6374696F 
 4469              	.LASF41:
 4470 060c 4F726965 		.ascii	"OrientationState\000"
 4470      6E746174 
 4470      696F6E53 
 4470      74617465 
 4470      00
 4471              	.LASF38:
 4472 061d 446F776E 		.ascii	"Down\000"
 4472      00
 4473              	.LASF40:
 4474 0622 52696768 		.ascii	"Right\000"
 4474      7400
 4475              	.LASF31:
 4476 0628 67315F79 		.ascii	"g1_ypos\000"
 4476      706F7300 
 4477              	.LASF117:
 4478 0630 63757272 		.ascii	"currentDirection\000"
 4478      656E7444 
 4478      69726563 
 4478      74696F6E 
 4478      00
 4479              	.LASF132:
 4480 0641 75547572 		.ascii	"uTurnStartedFlag\000"
 4480      6E537461 
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 101


 4480      72746564 
 4480      466C6167 
 4480      00
 4481              	.LASF143:
 4482 0652 6C617374 		.ascii	"lastDirectionAfter180\000"
 4482      44697265 
 4482      6374696F 
 4482      6E416674 
 4482      65723138 
 4483              	.LASF10:
 4484 0668 73697A65 		.ascii	"sizetype\000"
 4484      74797065 
 4484      00
 4485              	.LASF5:
 4486 0671 6C6F6E67 		.ascii	"long unsigned int\000"
 4486      20756E73 
 4486      69676E65 
 4486      6420696E 
 4486      7400
 4487              	.LASF128:
 4488 0683 73746F70 		.ascii	"stopBuffer\000"
 4488      42756666 
 4488      657200
 4489              	.LASF133:
 4490 068e 75547572 		.ascii	"uTurnFinishedFlag\000"
 4490      6E46696E 
 4490      69736865 
 4490      64466C61 
 4490      6700
 4491              	.LASF13:
 4492 06a0 696E7433 		.ascii	"int32_t\000"
 4492      325F7400 
 4493              	.LASF23:
 4494 06a8 726F626F 		.ascii	"robot_xpos\000"
 4494      745F7870 
 4494      6F7300
 4495              	.LASF113:
 4496 06b3 656E7472 		.ascii	"entry\000"
 4496      7900
 4497              	.LASF56:
 4498 06b9 526F626F 		.ascii	"RobotMovement\000"
 4498      744D6F76 
 4498      656D656E 
 4498      7400
 4499              	.LASF1:
 4500 06c7 756E7369 		.ascii	"unsigned char\000"
 4500      676E6564 
 4500      20636861 
 4500      7200
 4501              	.LASF140:
 4502 06d5 73746F70 		.ascii	"stoppedAfterTurn\000"
 4502      70656441 
 4502      66746572 
 4502      5475726E 
 4502      00
 4503              	.LASF112:
 4504 06e6 6C696E65 		.ascii	"line\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 102


 4504      00
 4505              	.LASF82:
 4506 06eb 43616C63 		.ascii	"CalculateDistanceToTravel\000"
 4506      756C6174 
 4506      65446973 
 4506      74616E63 
 4506      65546F54 
 4507              	.LASF61:
 4508 0705 41646A75 		.ascii	"AdjustToTheRight\000"
 4508      7374546F 
 4508      54686552 
 4508      69676874 
 4508      00
 4509              	.LASF62:
 4510 0716 53746F70 		.ascii	"Stop\000"
 4510      00
 4511              	.LASF91:
 4512 071b 47657449 		.ascii	"GetInstructionAtIndex\000"
 4512      6E737472 
 4512      75637469 
 4512      6F6E4174 
 4512      496E6465 
 4513              	.LASF98:
 4514 0731 74735F65 		.ascii	"ts_enc\000"
 4514      6E6300
 4515              	.LASF105:
 4516 0738 666C6167 		.ascii	"flag_ts_display\000"
 4516      5F74735F 
 4516      64697370 
 4516      6C617900 
 4517              	.LASF144:
 4518 0748 63757272 		.ascii	"currentIgnoreL\000"
 4518      656E7449 
 4518      676E6F72 
 4518      654C00
 4519              	.LASF145:
 4520 0757 63757272 		.ascii	"currentIgnoreR\000"
 4520      656E7449 
 4520      676E6F72 
 4520      655200
 4521              	.LASF49:
 4522 0766 536B6970 		.ascii	"Skip\000"
 4522      00
 4523              	.LASF111:
 4524 076b 64697370 		.ascii	"displaystring\000"
 4524      6C617973 
 4524      7472696E 
 4524      6700
 4525              	.LASF43:
 4526 0779 476F466F 		.ascii	"GoForward\000"
 4526      72776172 
 4526      6400
 4527              	.LASF70:
 4528 0783 53355F44 		.ascii	"S5_DETECTED\000"
 4528      45544543 
 4528      54454400 
 4529              	.LASF0:
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 103


 4530 078f 7369676E 		.ascii	"signed char\000"
 4530      65642063 
 4530      68617200 
 4531              	.LASF138:
 4532 079b 63757272 		.ascii	"currentRow\000"
 4532      656E7452 
 4532      6F7700
 4533              	.LASF3:
 4534 07a6 73686F72 		.ascii	"short unsigned int\000"
 4534      7420756E 
 4534      7369676E 
 4534      65642069 
 4534      6E7400
 4535              	.LASF25:
 4536 07b9 726F626F 		.ascii	"robot_orientation\000"
 4536      745F6F72 
 4536      69656E74 
 4536      6174696F 
 4536      6E00
 4537              	.LASF73:
 4538 07cb 6D61696E 		.ascii	"main\000"
 4538      00
 4539              	.LASF121:
 4540 07d0 63757272 		.ascii	"currentInstruction\000"
 4540      656E7449 
 4540      6E737472 
 4540      75637469 
 4540      6F6E00
 4541              	.LASF60:
 4542 07e3 41646A75 		.ascii	"AdjustToTheLeft\000"
 4542      7374546F 
 4542      5468654C 
 4542      65667400 
 4543              	.LASF66:
 4544 07f3 4261636B 		.ascii	"Backward\000"
 4544      77617264 
 4544      00
 4545              	.LASF14:
 4546 07fc 75696E74 		.ascii	"uint8\000"
 4546      3800
 4547              	.LASF20:
 4548 0802 646F7562 		.ascii	"double\000"
 4548      6C6500
 4549              	.LASF139:
 4550 0809 63757272 		.ascii	"currentCol\000"
 4550      656E7443 
 4550      6F6C00
 4551              	.LASF85:
 4552 0814 746F7461 		.ascii	"totalBlockSize\000"
 4552      6C426C6F 
 4552      636B5369 
 4552      7A6500
 4553              	.LASF26:
 4554 0823 67305F78 		.ascii	"g0_xpos\000"
 4554      706F7300 
 4555              	.LASF126:
 4556 082b 74696D65 		.ascii	"timerInt\000"
ARM GAS  C:\Users\ikui753\AppData\Local\Temp\ccFQrRb9.s 			page 104


 4556      72496E74 
 4556      00
 4557              	.LASF108:
 4558 0834 666C6167 		.ascii	"flag_KB_string\000"
 4558      5F4B425F 
 4558      73747269 
 4558      6E6700
 4559              	.LASF32:
 4560 0843 67315F73 		.ascii	"g1_speed\000"
 4560      70656564 
 4560      00
 4561              	.LASF53:
 4562 084c 69676E6F 		.ascii	"ignoreL\000"
 4562      72654C00 
 4563              	.LASF54:
 4564 0854 69676E6F 		.ascii	"ignoreR\000"
 4564      72655200 
 4565              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
