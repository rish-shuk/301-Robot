ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.global	currentDirection
 107              		.align	2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 3


 108              		.type	currentDirection, %object
 109              		.size	currentDirection, 4
 110              	currentDirection:
 111 0044 05000000 		.word	5
 112              		.global	previousDirection
 113              		.align	2
 114              		.type	previousDirection, %object
 115              		.size	previousDirection, 4
 116              	previousDirection:
 117 0048 06000000 		.word	6
 118              		.global	currentOrientation
 119              		.type	currentOrientation, %object
 120              		.size	currentOrientation, 1
 121              	currentOrientation:
 122 004c 03       		.byte	3
 123              		.global	previousOrientation
 124              		.type	previousOrientation, %object
 125              		.size	previousOrientation, 1
 126              	previousOrientation:
 127 004d 03       		.byte	3
 128              		.global	stopFlag
 129              		.bss
 130              		.type	stopFlag, %object
 131              		.size	stopFlag, 1
 132              	stopFlag:
 133 0012 00       		.space	1
 134              		.global	s3
 135              		.type	s3, %object
 136              		.size	s3, 1
 137              	s3:
 138 0013 00       		.space	1
 139              		.global	s4
 140              		.type	s4, %object
 141              		.size	s4, 1
 142              	s4:
 143 0014 00       		.space	1
 144              		.global	s5
 145              		.type	s5, %object
 146              		.size	s5, 1
 147              	s5:
 148 0015 00       		.space	1
 149              		.global	s6
 150              		.type	s6, %object
 151              		.size	s6, 1
 152              	s6:
 153 0016 00       		.space	1
 154              		.global	totalMilliseconds
 155 0017 00       		.align	2
 156              		.type	totalMilliseconds, %object
 157              		.size	totalMilliseconds, 4
 158              	totalMilliseconds:
 159 0018 00000000 		.space	4
 160              		.global	totalDistance
 161              		.align	2
 162              		.type	totalDistance, %object
 163              		.size	totalDistance, 4
 164              	totalDistance:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 4


 165 001c 00000000 		.space	4
 166              		.comm	buffer,69,4
 167              		.global	quadDec2Count
 168              		.align	2
 169              		.type	quadDec2Count, %object
 170              		.size	quadDec2Count, 4
 171              	quadDec2Count:
 172 0020 00000000 		.space	4
 173              		.global	timerInt
 174              		.align	2
 175              		.type	timerInt, %object
 176              		.size	timerInt, 4
 177              	timerInt:
 178 0024 00000000 		.space	4
 179              		.global	keepLedOn
 180              		.align	2
 181              		.type	keepLedOn, %object
 182              		.size	keepLedOn, 4
 183              	keepLedOn:
 184 0028 00000000 		.space	4
 185              		.global	stopBuffer
 186              		.align	2
 187              		.type	stopBuffer, %object
 188              		.size	stopBuffer, 4
 189              	stopBuffer:
 190 002c 00000000 		.space	4
 191              		.global	__aeabi_i2d
 192              		.global	__aeabi_dmul
 193              		.global	__aeabi_ddiv
 194              		.global	__aeabi_d2f
 195              		.global	__aeabi_fadd
 196              		.section	.text.speedTimer,"ax",%progbits
 197              		.align	2
 198              		.global	speedTimer
 199              		.thumb
 200              		.thumb_func
 201              		.type	speedTimer, %function
 202              	speedTimer:
 203              	.LFB64:
 204              		.file 1 "main.c"
   1:main.c        **** /* ========================================
   2:main.c        ****  * Fully working code: 
   3:main.c        ****  * PWM      : 
   4:main.c        ****  * Encoder  : 
   5:main.c        ****  * ADC      :
   6:main.c        ****  * USB      : port displays speed and position.
   7:main.c        ****  * CMD: "PW xx"
   8:main.c        ****  * Copyright Univ of Auckland, 2016
   9:main.c        ****  * All Rights Reserved
  10:main.c        ****  * UNPUBLISHED, LICENSED SOFTWARE.
  11:main.c        ****  *
  12:main.c        ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
  13:main.c        ****  * WHICH IS THE PROPERTY OF Univ of Auckland.
  14:main.c        ****  *
  15:main.c        ****  * ========================================
  16:main.c        **** */
  17:main.c        **** #include <stdio.h>
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 5


  18:main.c        **** #include <string.h>
  19:main.c        **** #include <stdlib.h>
  20:main.c        **** #include <project.h>
  21:main.c        **** //* ========================================
  22:main.c        **** #include "defines.h"
  23:main.c        **** #include "vars.h"
  24:main.c        **** #include "pathfinding.h"
  25:main.c        **** #include "initialise.h"
  26:main.c        **** #include "movement.h"
  27:main.c        **** #include "usbUART.h"
  28:main.c        **** #include "map.h"
  29:main.c        **** //* ========================================
  30:main.c        **** // USBUART
  31:main.c        **** void usbPutString(char *s);
  32:main.c        **** void usbPutChar(char c);
  33:main.c        **** void handle_usb();
  34:main.c        **** //* ========================================
  35:main.c        **** int16 quadCountToRPM(uint16 count);
  36:main.c        **** //* ========================================
  37:main.c        **** // Sensors, Course correction and Movement Direction.
  38:main.c        **** void ResetSensorFlags();
  39:main.c        **** void SetRobotMovement();
  40:main.c        **** enum DirectionState CheckSensorDirection();
  41:main.c        **** enum DirectionState {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown
  42:main.c        **** enum OrientationState {Up, Down, Left, Right};
  43:main.c        **** enum DirectionState currentDirection = Stop;
  44:main.c        **** enum DirectionState previousDirection = Unknown;
  45:main.c        **** enum OrientationState currentOrientation = Right;
  46:main.c        **** enum OrientationState previousOrientation = Right;
  47:main.c        **** enum DirectionState GetNextStep();
  48:main.c        **** enum DirectionState RecheckPosition();
  49:main.c        **** uint8 stopFlag = 0;
  50:main.c        **** 
  51:main.c        **** void ValidatePosition();
  52:main.c        **** 
  53:main.c        **** 
  54:main.c        **** // --- YIPPE
  55:main.c        **** // ----------------------------------------
  56:main.c        **** uint8 s3 = 0;
  57:main.c        **** uint8 s4 = 0;
  58:main.c        **** uint8 s5 = 0;
  59:main.c        **** uint8 s6 = 0;
  60:main.c        **** //* ========================================
  61:main.c        **** // Calculating Distance
  62:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  63:main.c        **** 
  64:main.c        **** uint32 totalMilliseconds = 0;
  65:main.c        **** float totalDistance = 0; // in mm
  66:main.c        **** //* ========================================
  67:main.c        **** char buffer[69];
  68:main.c        **** int quadDec2Count = 0;
  69:main.c        **** int timerInt = 0;
  70:main.c        **** int keepLedOn = 0;
  71:main.c        **** uint32 stopBuffer = 0;
  72:main.c        **** 
  73:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  74:main.c        **** 
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 6


  75:main.c        **** CY_ISR (speedTimer) {
 205              		.loc 1 75 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 8
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 90B5     		push	{r4, r7, lr}
 210              		.cfi_def_cfa_offset 12
 211              		.cfi_offset 4, -12
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  76:main.c        ****     timerInt = 1;
 218              		.loc 1 76 0
 219 0006 364B     		ldr	r3, .L4+16
 220 0008 0122     		movs	r2, #1
 221 000a 1A60     		str	r2, [r3]
  77:main.c        ****     //quadDec_M1 used for turning macros
  78:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 222              		.loc 1 78 0
 223 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 224 0010 0346     		mov	r3, r0
 225 0012 1A46     		mov	r2, r3
 226 0014 334B     		ldr	r3, .L4+20
 227 0016 1A60     		str	r2, [r3]
  79:main.c        ****     
  80:main.c        ****     if ((currentDirection == Forward || 
 228              		.loc 1 80 0
 229 0018 334B     		ldr	r3, .L4+24
 230 001a 1B68     		ldr	r3, [r3]
 231 001c 002B     		cmp	r3, #0
 232 001e 17D0     		beq	.L2
  81:main.c        ****         currentDirection == waitForTurn || 
 233              		.loc 1 81 0 discriminator 1
 234 0020 314B     		ldr	r3, .L4+24
 235 0022 1B68     		ldr	r3, [r3]
  80:main.c        ****         currentDirection == waitForTurn || 
 236              		.loc 1 80 0 discriminator 1
 237 0024 072B     		cmp	r3, #7
 238 0026 13D0     		beq	.L2
  82:main.c        ****         currentDirection == waitForLeftTurn ||
 239              		.loc 1 82 0
 240 0028 2F4B     		ldr	r3, .L4+24
 241 002a 1B68     		ldr	r3, [r3]
  81:main.c        ****         currentDirection == waitForTurn || 
 242              		.loc 1 81 0
 243 002c 092B     		cmp	r3, #9
 244 002e 0FD0     		beq	.L2
  83:main.c        ****         currentDirection == waitForRightTurn ||
 245              		.loc 1 83 0
 246 0030 2D4B     		ldr	r3, .L4+24
 247 0032 1B68     		ldr	r3, [r3]
  82:main.c        ****         currentDirection == waitForLeftTurn ||
 248              		.loc 1 82 0
 249 0034 082B     		cmp	r3, #8
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 7


 250 0036 0BD0     		beq	.L2
  84:main.c        ****         currentDirection == ForwardAfterTurn ||
 251              		.loc 1 84 0
 252 0038 2B4B     		ldr	r3, .L4+24
 253 003a 1B68     		ldr	r3, [r3]
  83:main.c        ****         currentDirection == waitForRightTurn ||
 254              		.loc 1 83 0
 255 003c 0A2B     		cmp	r3, #10
 256 003e 07D0     		beq	.L2
  85:main.c        ****         currentDirection == AdjustToTheLeft ||
 257              		.loc 1 85 0
 258 0040 294B     		ldr	r3, .L4+24
 259 0042 1B68     		ldr	r3, [r3]
  84:main.c        ****         currentDirection == ForwardAfterTurn ||
 260              		.loc 1 84 0
 261 0044 032B     		cmp	r3, #3
 262 0046 03D0     		beq	.L2
  86:main.c        ****         currentDirection == AdjustToTheRight) &&
 263              		.loc 1 86 0
 264 0048 274B     		ldr	r3, .L4+24
 265 004a 1B68     		ldr	r3, [r3]
  85:main.c        ****         currentDirection == AdjustToTheLeft ||
 266              		.loc 1 85 0
 267 004c 042B     		cmp	r3, #4
 268 004e 34D1     		bne	.L3
 269              	.L2:
  87:main.c        ****         quadDec2Count != 0) {
 270              		.loc 1 87 0
 271 0050 244B     		ldr	r3, .L4+20
 272 0052 1B68     		ldr	r3, [r3]
  86:main.c        ****         currentDirection == AdjustToTheRight) &&
 273              		.loc 1 86 0
 274 0054 002B     		cmp	r3, #0
 275 0056 30D0     		beq	.L3
 276              	.LBB2:
  88:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  89:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 277              		.loc 1 89 0
 278 0058 224B     		ldr	r3, .L4+20
 279 005a 1B68     		ldr	r3, [r3]
 280 005c 002B     		cmp	r3, #0
 281 005e B8BF     		it	lt
 282 0060 5B42     		rsblt	r3, r3, #0
 283 0062 1846     		mov	r0, r3
 284 0064 FFF7FEFF 		bl	__aeabi_i2d
 285 0068 19A3     		adr	r3, .L4
 286 006a D3E90023 		ldrd	r2, [r3]
 287 006e FFF7FEFF 		bl	__aeabi_dmul
 288 0072 0346     		mov	r3, r0
 289 0074 0C46     		mov	r4, r1
 290 0076 1846     		mov	r0, r3
 291 0078 2146     		mov	r1, r4
 292 007a 17A3     		adr	r3, .L4+8
 293 007c D3E90023 		ldrd	r2, [r3]
 294 0080 FFF7FEFF 		bl	__aeabi_dmul
 295 0084 0346     		mov	r3, r0
 296 0086 0C46     		mov	r4, r1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 8


 297 0088 1846     		mov	r0, r3
 298 008a 2146     		mov	r1, r4
 299 008c 4FF00002 		mov	r2, #0
 300 0090 164B     		ldr	r3, .L4+28
 301 0092 FFF7FEFF 		bl	__aeabi_ddiv
 302 0096 0346     		mov	r3, r0
 303 0098 0C46     		mov	r4, r1
 304 009a 1846     		mov	r0, r3
 305 009c 2146     		mov	r1, r4
 306 009e FFF7FEFF 		bl	__aeabi_d2f
 307 00a2 0346     		mov	r3, r0
 308 00a4 7B60     		str	r3, [r7, #4]	@ float
  90:main.c        ****         
  91:main.c        ****         totalDistance = totalDistance + newDistance;
 309              		.loc 1 91 0
 310 00a6 124B     		ldr	r3, .L4+32
 311 00a8 1B68     		ldr	r3, [r3]	@ float
 312 00aa 7968     		ldr	r1, [r7, #4]	@ float
 313 00ac 1846     		mov	r0, r3
 314 00ae FFF7FEFF 		bl	__aeabi_fadd
 315 00b2 0346     		mov	r3, r0
 316 00b4 1A46     		mov	r2, r3
 317 00b6 0E4B     		ldr	r3, .L4+32
 318 00b8 1A60     		str	r2, [r3]	@ float
 319              	.L3:
 320              	.LBE2:
  92:main.c        ****     }
  93:main.c        ****     
  94:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 321              		.loc 1 94 0
 322 00ba 0020     		movs	r0, #0
 323 00bc FFF7FEFF 		bl	QuadDec_M2_SetCounter
  95:main.c        ****     QuadDec_M2_Start(); // restart counter
 324              		.loc 1 95 0
 325 00c0 FFF7FEFF 		bl	QuadDec_M2_Start
  96:main.c        ****     
  97:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 326              		.loc 1 97 0
 327 00c4 FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  98:main.c        **** }
 328              		.loc 1 98 0
 329 00c8 00BF     		nop
 330 00ca 0C37     		adds	r7, r7, #12
 331              		.cfi_def_cfa_offset 12
 332 00cc BD46     		mov	sp, r7
 333              		.cfi_def_cfa_register 13
 334              		@ sp needed
 335 00ce 90BD     		pop	{r4, r7, pc}
 336              	.L5:
 337              		.align	3
 338              	.L4:
 339 00d0 182D4454 		.word	1413754136
 340 00d4 FB210940 		.word	1074340347
 341 00d8 00000000 		.word	0
 342 00dc 00205040 		.word	1078992896
 343 00e0 00000000 		.word	timerInt
 344 00e4 00000000 		.word	quadDec2Count
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 9


 345 00e8 00000000 		.word	currentDirection
 346 00ec 00806C40 		.word	1080852480
 347 00f0 00000000 		.word	totalDistance
 348              		.cfi_endproc
 349              	.LFE64:
 350              		.size	speedTimer, .-speedTimer
 351              		.section	.text.S3_DETECTED,"ax",%progbits
 352              		.align	2
 353              		.global	S3_DETECTED
 354              		.thumb
 355              		.thumb_func
 356              		.type	S3_DETECTED, %function
 357              	S3_DETECTED:
 358              	.LFB65:
  99:main.c        **** 
 100:main.c        **** CY_ISR(S3_DETECTED) {
 359              		.loc 1 100 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0000 80B4     		push	{r7}
 365              		.cfi_def_cfa_offset 4
 366              		.cfi_offset 7, -4
 367 0002 00AF     		add	r7, sp, #0
 368              		.cfi_def_cfa_register 7
 101:main.c        ****     // Sensor has detected WHITE
 102:main.c        ****     s3 = 1; // , Black = 0, White = 1
 369              		.loc 1 102 0
 370 0004 034B     		ldr	r3, .L7
 371 0006 0122     		movs	r2, #1
 372 0008 1A70     		strb	r2, [r3]
 103:main.c        ****     //LED_Write(1u);
 104:main.c        **** }
 373              		.loc 1 104 0
 374 000a 00BF     		nop
 375 000c BD46     		mov	sp, r7
 376              		.cfi_def_cfa_register 13
 377              		@ sp needed
 378 000e 80BC     		pop	{r7}
 379              		.cfi_restore 7
 380              		.cfi_def_cfa_offset 0
 381 0010 7047     		bx	lr
 382              	.L8:
 383 0012 00BF     		.align	2
 384              	.L7:
 385 0014 00000000 		.word	s3
 386              		.cfi_endproc
 387              	.LFE65:
 388              		.size	S3_DETECTED, .-S3_DETECTED
 389              		.section	.text.S4_DETECTED,"ax",%progbits
 390              		.align	2
 391              		.global	S4_DETECTED
 392              		.thumb
 393              		.thumb_func
 394              		.type	S4_DETECTED, %function
 395              	S4_DETECTED:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 10


 396              	.LFB66:
 105:main.c        **** 
 106:main.c        **** CY_ISR(S4_DETECTED) {
 397              		.loc 1 106 0
 398              		.cfi_startproc
 399              		@ args = 0, pretend = 0, frame = 0
 400              		@ frame_needed = 1, uses_anonymous_args = 0
 401              		@ link register save eliminated.
 402 0000 80B4     		push	{r7}
 403              		.cfi_def_cfa_offset 4
 404              		.cfi_offset 7, -4
 405 0002 00AF     		add	r7, sp, #0
 406              		.cfi_def_cfa_register 7
 107:main.c        ****     // Sensor has detected WHITE
 108:main.c        ****     s4 = 1; // , Black = 0, White = 1
 407              		.loc 1 108 0
 408 0004 034B     		ldr	r3, .L10
 409 0006 0122     		movs	r2, #1
 410 0008 1A70     		strb	r2, [r3]
 109:main.c        ****     //LED_Write(1u);
 110:main.c        **** }
 411              		.loc 1 110 0
 412 000a 00BF     		nop
 413 000c BD46     		mov	sp, r7
 414              		.cfi_def_cfa_register 13
 415              		@ sp needed
 416 000e 80BC     		pop	{r7}
 417              		.cfi_restore 7
 418              		.cfi_def_cfa_offset 0
 419 0010 7047     		bx	lr
 420              	.L11:
 421 0012 00BF     		.align	2
 422              	.L10:
 423 0014 00000000 		.word	s4
 424              		.cfi_endproc
 425              	.LFE66:
 426              		.size	S4_DETECTED, .-S4_DETECTED
 427              		.section	.text.S5_DETECTED,"ax",%progbits
 428              		.align	2
 429              		.global	S5_DETECTED
 430              		.thumb
 431              		.thumb_func
 432              		.type	S5_DETECTED, %function
 433              	S5_DETECTED:
 434              	.LFB67:
 111:main.c        **** 
 112:main.c        **** CY_ISR(S5_DETECTED) {
 435              		.loc 1 112 0
 436              		.cfi_startproc
 437              		@ args = 0, pretend = 0, frame = 0
 438              		@ frame_needed = 1, uses_anonymous_args = 0
 439              		@ link register save eliminated.
 440 0000 80B4     		push	{r7}
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 0002 00AF     		add	r7, sp, #0
 444              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 11


 113:main.c        ****     // Sensor has detected WHITE
 114:main.c        ****     s5 = 1; // , Black = 0, White = 1
 445              		.loc 1 114 0
 446 0004 034B     		ldr	r3, .L13
 447 0006 0122     		movs	r2, #1
 448 0008 1A70     		strb	r2, [r3]
 115:main.c        ****     //LED_Write(1u);
 116:main.c        **** }
 449              		.loc 1 116 0
 450 000a 00BF     		nop
 451 000c BD46     		mov	sp, r7
 452              		.cfi_def_cfa_register 13
 453              		@ sp needed
 454 000e 80BC     		pop	{r7}
 455              		.cfi_restore 7
 456              		.cfi_def_cfa_offset 0
 457 0010 7047     		bx	lr
 458              	.L14:
 459 0012 00BF     		.align	2
 460              	.L13:
 461 0014 00000000 		.word	s5
 462              		.cfi_endproc
 463              	.LFE67:
 464              		.size	S5_DETECTED, .-S5_DETECTED
 465              		.section	.text.S6_DETECTED,"ax",%progbits
 466              		.align	2
 467              		.global	S6_DETECTED
 468              		.thumb
 469              		.thumb_func
 470              		.type	S6_DETECTED, %function
 471              	S6_DETECTED:
 472              	.LFB68:
 117:main.c        **** 
 118:main.c        **** CY_ISR(S6_DETECTED) {
 473              		.loc 1 118 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 0000 80B4     		push	{r7}
 479              		.cfi_def_cfa_offset 4
 480              		.cfi_offset 7, -4
 481 0002 00AF     		add	r7, sp, #0
 482              		.cfi_def_cfa_register 7
 119:main.c        ****     // Sensor has detected WHITE
 120:main.c        ****     s6 = 1; // , Black = 0, White = 1
 483              		.loc 1 120 0
 484 0004 034B     		ldr	r3, .L16
 485 0006 0122     		movs	r2, #1
 486 0008 1A70     		strb	r2, [r3]
 121:main.c        ****     //LED_Write(1u);
 122:main.c        **** }
 487              		.loc 1 122 0
 488 000a 00BF     		nop
 489 000c BD46     		mov	sp, r7
 490              		.cfi_def_cfa_register 13
 491              		@ sp needed
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 12


 492 000e 80BC     		pop	{r7}
 493              		.cfi_restore 7
 494              		.cfi_def_cfa_offset 0
 495 0010 7047     		bx	lr
 496              	.L17:
 497 0012 00BF     		.align	2
 498              	.L16:
 499 0014 00000000 		.word	s6
 500              		.cfi_endproc
 501              	.LFE68:
 502              		.size	S6_DETECTED, .-S6_DETECTED
 503              		.section	.text.TIMER_FINISH,"ax",%progbits
 504              		.align	2
 505              		.global	TIMER_FINISH
 506              		.thumb
 507              		.thumb_func
 508              		.type	TIMER_FINISH, %function
 509              	TIMER_FINISH:
 510              	.LFB69:
 123:main.c        **** 
 124:main.c        **** CY_ISR(TIMER_FINISH) {
 511              		.loc 1 124 0
 512              		.cfi_startproc
 513              		@ args = 0, pretend = 0, frame = 0
 514              		@ frame_needed = 1, uses_anonymous_args = 0
 515 0000 80B5     		push	{r7, lr}
 516              		.cfi_def_cfa_offset 8
 517              		.cfi_offset 7, -8
 518              		.cfi_offset 14, -4
 519 0002 00AF     		add	r7, sp, #0
 520              		.cfi_def_cfa_register 7
 125:main.c        ****     if (stopFlag == 1) {
 521              		.loc 1 125 0
 522 0004 0A4B     		ldr	r3, .L21
 523 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 524 0008 012B     		cmp	r3, #1
 525 000a 05D1     		bne	.L19
 126:main.c        ****         stopBuffer = stopBuffer + 1;
 526              		.loc 1 126 0
 527 000c 094B     		ldr	r3, .L21+4
 528 000e 1B68     		ldr	r3, [r3]
 529 0010 0133     		adds	r3, r3, #1
 530 0012 084A     		ldr	r2, .L21+4
 531 0014 1360     		str	r3, [r2]
 532 0016 02E0     		b	.L20
 533              	.L19:
 127:main.c        ****     } else {
 128:main.c        ****         stopBuffer = 0;
 534              		.loc 1 128 0
 535 0018 064B     		ldr	r3, .L21+4
 536 001a 0022     		movs	r2, #0
 537 001c 1A60     		str	r2, [r3]
 538              	.L20:
 129:main.c        ****     }
 130:main.c        ****     SetRobotMovement(); 
 539              		.loc 1 130 0
 540 001e FFF7FEFF 		bl	SetRobotMovement
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 13


 131:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 541              		.loc 1 131 0
 542 0022 FFF7FEFF 		bl	ResetSensorFlags
 132:main.c        ****     Timer_LED_ReadStatusRegister();
 543              		.loc 1 132 0
 544 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 133:main.c        **** }
 545              		.loc 1 133 0
 546 002a 00BF     		nop
 547 002c 80BD     		pop	{r7, pc}
 548              	.L22:
 549 002e 00BF     		.align	2
 550              	.L21:
 551 0030 00000000 		.word	stopFlag
 552 0034 00000000 		.word	stopBuffer
 553              		.cfi_endproc
 554              	.LFE69:
 555              		.size	TIMER_FINISH, .-TIMER_FINISH
 556              		.section	.text.main,"ax",%progbits
 557              		.align	2
 558              		.global	main
 559              		.thumb
 560              		.thumb_func
 561              		.type	main, %function
 562              	main:
 563              	.LFB70:
 134:main.c        **** 
 135:main.c        **** 
 136:main.c        **** int main()
 137:main.c        **** {
 564              		.loc 1 137 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 1, uses_anonymous_args = 0
 568 0000 80B5     		push	{r7, lr}
 569              		.cfi_def_cfa_offset 8
 570              		.cfi_offset 7, -8
 571              		.cfi_offset 14, -4
 572 0002 00AF     		add	r7, sp, #0
 573              		.cfi_def_cfa_register 7
 138:main.c        **** // ----- INITIALIZATIONS ----------
 139:main.c        ****     CYGlobalIntEnable;
 574              		.loc 1 139 0
 575              		.syntax unified
 576              	@ 139 "main.c" 1
 577 0004 62B6     		CPSIE   i
 578              	@ 0 "" 2
 140:main.c        ****     ResetSensorFlags();
 579              		.loc 1 140 0
 580              		.thumb
 581              		.syntax unified
 582 0006 FFF7FEFF 		bl	ResetSensorFlags
 141:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 583              		.loc 1 141 0
 584 000a FFF7FEFF 		bl	init
 142:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 585              		.loc 1 142 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 14


 586 000e 1A48     		ldr	r0, .L27
 587 0010 FFF7FEFF 		bl	isr_speed_StartEx
 143:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 588              		.loc 1 143 0
 589 0014 1948     		ldr	r0, .L27+4
 590 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 144:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 591              		.loc 1 144 0
 592 001a 1948     		ldr	r0, .L27+8
 593 001c FFF7FEFF 		bl	S3_detected_StartEx
 145:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 594              		.loc 1 145 0
 595 0020 1848     		ldr	r0, .L27+12
 596 0022 FFF7FEFF 		bl	S4_detected_StartEx
 146:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 597              		.loc 1 146 0
 598 0026 1848     		ldr	r0, .L27+16
 599 0028 FFF7FEFF 		bl	S5_detected_StartEx
 147:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 600              		.loc 1 147 0
 601 002c 1748     		ldr	r0, .L27+20
 602 002e FFF7FEFF 		bl	S6_detected_StartEx
 148:main.c        ****     Timer_LED_Start();
 603              		.loc 1 148 0
 604 0032 FFF7FEFF 		bl	Timer_LED_Start
 149:main.c        **** 
 150:main.c        ****     findPath(map);// find shortest path- store this in map wasn't being called before
 605              		.loc 1 150 0
 606 0036 1648     		ldr	r0, .L27+24
 607 0038 FFF7FEFF 		bl	findPath
 151:main.c        ****     GetNextStep();
 608              		.loc 1 151 0
 609 003c FFF7FEFF 		bl	GetNextStep
 152:main.c        **** 
 153:main.c        **** // ------USB SETUP ----------------    
 154:main.c        **** #ifdef USE_USB    
 155:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 610              		.loc 1 155 0
 611 0040 0121     		movs	r1, #1
 612 0042 0020     		movs	r0, #0
 613 0044 FFF7FEFF 		bl	USBUART_Start
 156:main.c        **** #endif        
 157:main.c        ****     RF_BT_SELECT_Write(0);
 614              		.loc 1 157 0
 615 0048 0020     		movs	r0, #0
 616 004a FFF7FEFF 		bl	RF_BT_SELECT_Write
 617              	.L26:
 158:main.c        ****     
 159:main.c        ****     //usbPutString("Initialised UART");
 160:main.c        ****     for(;;)
 161:main.c        ****     {
 162:main.c        ****         if(timerInt == 1) {
 618              		.loc 1 162 0
 619 004e 114B     		ldr	r3, .L27+28
 620 0050 1B68     		ldr	r3, [r3]
 621 0052 012B     		cmp	r3, #1
 622 0054 08D1     		bne	.L24
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 15


 163:main.c        ****             timerInt = 0;
 623              		.loc 1 163 0
 624 0056 0F4B     		ldr	r3, .L27+28
 625 0058 0022     		movs	r2, #0
 626 005a 1A60     		str	r2, [r3]
 164:main.c        ****             // calculate RPM of M2
 165:main.c        ****             quadCountToRPM(quadDec2Count);
 627              		.loc 1 165 0
 628 005c 0E4B     		ldr	r3, .L27+32
 629 005e 1B68     		ldr	r3, [r3]
 630 0060 9BB2     		uxth	r3, r3
 631 0062 1846     		mov	r0, r3
 632 0064 FFF7FEFF 		bl	quadCountToRPM
 633              	.L24:
 166:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 167:main.c        ****             //usbPutString(buffer);
 168:main.c        ****             //usbPutString(" ");
 169:main.c        ****         }
 170:main.c        ****         //handle_usb();
 171:main.c        ****         if (flag_KB_string == 1)
 634              		.loc 1 171 0
 635 0068 0C4B     		ldr	r3, .L27+36
 636 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 637 006c 012B     		cmp	r3, #1
 638 006e EED1     		bne	.L26
 172:main.c        ****         {
 173:main.c        ****             //usbPutString("Total Distance: ");
 174:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 175:main.c        ****             //usbPutString(buffer);
 176:main.c        ****             flag_KB_string = 0;
 639              		.loc 1 176 0
 640 0070 0A4B     		ldr	r3, .L27+36
 641 0072 0022     		movs	r2, #0
 642 0074 1A70     		strb	r2, [r3]
 177:main.c        ****         }           
 178:main.c        ****     }
 643              		.loc 1 178 0
 644 0076 EAE7     		b	.L26
 645              	.L28:
 646              		.align	2
 647              	.L27:
 648 0078 00000000 		.word	speedTimer
 649 007c 00000000 		.word	TIMER_FINISH
 650 0080 00000000 		.word	S3_DETECTED
 651 0084 00000000 		.word	S4_DETECTED
 652 0088 00000000 		.word	S5_DETECTED
 653 008c 00000000 		.word	S6_DETECTED
 654 0090 00000000 		.word	map
 655 0094 00000000 		.word	timerInt
 656 0098 00000000 		.word	quadDec2Count
 657 009c 00000000 		.word	flag_KB_string
 658              		.cfi_endproc
 659              	.LFE70:
 660              		.size	main, .-main
 661              		.global	__aeabi_fmul
 662              		.global	__aeabi_f2iz
 663              		.section	.text.quadCountToRPM,"ax",%progbits
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 16


 664              		.align	2
 665              		.global	quadCountToRPM
 666              		.thumb
 667              		.thumb_func
 668              		.type	quadCountToRPM, %function
 669              	quadCountToRPM:
 670              	.LFB71:
 179:main.c        ****     return 0;
 180:main.c        **** }
 181:main.c        **** 
 182:main.c        **** // Calculations
 183:main.c        **** //* ========================================
 184:main.c        **** int16 quadCountToRPM(uint16 count)
 185:main.c        **** {
 671              		.loc 1 185 0
 672              		.cfi_startproc
 673              		@ args = 0, pretend = 0, frame = 16
 674              		@ frame_needed = 1, uses_anonymous_args = 0
 675 0000 90B5     		push	{r4, r7, lr}
 676              		.cfi_def_cfa_offset 12
 677              		.cfi_offset 4, -12
 678              		.cfi_offset 7, -8
 679              		.cfi_offset 14, -4
 680 0002 85B0     		sub	sp, sp, #20
 681              		.cfi_def_cfa_offset 32
 682 0004 00AF     		add	r7, sp, #0
 683              		.cfi_def_cfa_register 7
 684 0006 0346     		mov	r3, r0
 685 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 186:main.c        ****     float cps = count/57.00;
 686              		.loc 1 186 0
 687 000a FB88     		ldrh	r3, [r7, #6]
 688 000c 1846     		mov	r0, r3
 689 000e FFF7FEFF 		bl	__aeabi_i2d
 690 0012 4FF00002 		mov	r2, #0
 691 0016 0D4B     		ldr	r3, .L31
 692 0018 FFF7FEFF 		bl	__aeabi_ddiv
 693 001c 0346     		mov	r3, r0
 694 001e 0C46     		mov	r4, r1
 695 0020 1846     		mov	r0, r3
 696 0022 2146     		mov	r1, r4
 697 0024 FFF7FEFF 		bl	__aeabi_d2f
 698 0028 0346     		mov	r3, r0
 699 002a FB60     		str	r3, [r7, #12]	@ float
 187:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 700              		.loc 1 187 0
 701 002c 0849     		ldr	r1, .L31+4
 702 002e F868     		ldr	r0, [r7, #12]	@ float
 703 0030 FFF7FEFF 		bl	__aeabi_fmul
 704 0034 0346     		mov	r3, r0
 705 0036 1846     		mov	r0, r3
 706 0038 FFF7FEFF 		bl	__aeabi_f2iz
 707 003c 0346     		mov	r3, r0
 708 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 188:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 189:main.c        ****     return rpm;
 709              		.loc 1 189 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 17


 710 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 190:main.c        ****     //usbPutString(buffer);
 191:main.c        ****     //usbPutString("rpm ");
 192:main.c        **** }
 711              		.loc 1 192 0
 712 0044 1846     		mov	r0, r3
 713 0046 1437     		adds	r7, r7, #20
 714              		.cfi_def_cfa_offset 12
 715 0048 BD46     		mov	sp, r7
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 004a 90BD     		pop	{r4, r7, pc}
 719              	.L32:
 720              		.align	2
 721              	.L31:
 722 004c 00804C40 		.word	1078755328
 723 0050 00007041 		.word	1097859072
 724              		.cfi_endproc
 725              	.LFE71:
 726              		.size	quadCountToRPM, .-quadCountToRPM
 727              		.section	.text.ResetSensorFlags,"ax",%progbits
 728              		.align	2
 729              		.global	ResetSensorFlags
 730              		.thumb
 731              		.thumb_func
 732              		.type	ResetSensorFlags, %function
 733              	ResetSensorFlags:
 734              	.LFB72:
 193:main.c        **** 
 194:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 195:main.c        **** void ResetSensorFlags() {
 735              		.loc 1 195 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 0
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739              		@ link register save eliminated.
 740 0000 80B4     		push	{r7}
 741              		.cfi_def_cfa_offset 4
 742              		.cfi_offset 7, -4
 743 0002 00AF     		add	r7, sp, #0
 744              		.cfi_def_cfa_register 7
 196:main.c        ****     s3 = 0;
 745              		.loc 1 196 0
 746 0004 074B     		ldr	r3, .L34
 747 0006 0022     		movs	r2, #0
 748 0008 1A70     		strb	r2, [r3]
 197:main.c        ****     s4 = 0;
 749              		.loc 1 197 0
 750 000a 074B     		ldr	r3, .L34+4
 751 000c 0022     		movs	r2, #0
 752 000e 1A70     		strb	r2, [r3]
 198:main.c        ****     s5 = 0;
 753              		.loc 1 198 0
 754 0010 064B     		ldr	r3, .L34+8
 755 0012 0022     		movs	r2, #0
 756 0014 1A70     		strb	r2, [r3]
 199:main.c        ****     s6 = 0;
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 18


 757              		.loc 1 199 0
 758 0016 064B     		ldr	r3, .L34+12
 759 0018 0022     		movs	r2, #0
 760 001a 1A70     		strb	r2, [r3]
 200:main.c        **** }
 761              		.loc 1 200 0
 762 001c 00BF     		nop
 763 001e BD46     		mov	sp, r7
 764              		.cfi_def_cfa_register 13
 765              		@ sp needed
 766 0020 80BC     		pop	{r7}
 767              		.cfi_restore 7
 768              		.cfi_def_cfa_offset 0
 769 0022 7047     		bx	lr
 770              	.L35:
 771              		.align	2
 772              	.L34:
 773 0024 00000000 		.word	s3
 774 0028 00000000 		.word	s4
 775 002c 00000000 		.word	s5
 776 0030 00000000 		.word	s6
 777              		.cfi_endproc
 778              	.LFE72:
 779              		.size	ResetSensorFlags, .-ResetSensorFlags
 780              		.global	xBlocksize
 781              		.data
 782 004e 0000     		.align	2
 783              		.type	xBlocksize, %object
 784              		.size	xBlocksize, 4
 785              	xBlocksize:
 786 0050 0000F642 		.word	1123418112
 787              		.global	yBlocksize
 788              		.align	2
 789              		.type	yBlocksize, %object
 790              		.size	yBlocksize, 4
 791              	yBlocksize:
 792 0054 0000A042 		.word	1117782016
 793              		.global	currentRow
 794              		.type	currentRow, %object
 795              		.size	currentRow, 1
 796              	currentRow:
 797 0058 01       		.byte	1
 798              		.global	currentCol
 799              		.type	currentCol, %object
 800              		.size	currentCol, 1
 801              	currentCol:
 802 0059 01       		.byte	1
 803              		.section	.text.GetNextStep,"ax",%progbits
 804              		.align	2
 805              		.global	GetNextStep
 806              		.thumb
 807              		.thumb_func
 808              		.type	GetNextStep, %function
 809              	GetNextStep:
 810              	.LFB73:
 201:main.c        **** 
 202:main.c        **** float xBlocksize = 123; // 127.5
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 19


 203:main.c        **** float yBlocksize = 80; // 80
 204:main.c        **** uint8 currentRow = 1;
 205:main.c        **** uint8 currentCol = 1;
 206:main.c        **** 
 207:main.c        **** enum DirectionState GetNextStep() {
 811              		.loc 1 207 0
 812              		.cfi_startproc
 813              		@ args = 0, pretend = 0, frame = 8
 814              		@ frame_needed = 1, uses_anonymous_args = 0
 815              		@ link register save eliminated.
 816 0000 80B4     		push	{r7}
 817              		.cfi_def_cfa_offset 4
 818              		.cfi_offset 7, -4
 819 0002 83B0     		sub	sp, sp, #12
 820              		.cfi_def_cfa_offset 16
 821 0004 00AF     		add	r7, sp, #0
 822              		.cfi_def_cfa_register 7
 208:main.c        ****     enum DirectionState directionState;
 209:main.c        ****     // Determines robot movement and orientation to follow optimal path
 210:main.c        ****     // enum DirectionState directionState = Stop;
 211:main.c        ****     previousOrientation = currentOrientation;
 823              		.loc 1 211 0
 824 0006 AB4B     		ldr	r3, .L75
 825 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 826 000a AB4B     		ldr	r3, .L75+4
 827 000c 1A70     		strb	r2, [r3]
 212:main.c        ****     
 213:main.c        ****     if(map[currentRow][currentCol] == 9) {
 828              		.loc 1 213 0
 829 000e AB4B     		ldr	r3, .L75+8
 830 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 831 0012 1A46     		mov	r2, r3
 832 0014 AA4B     		ldr	r3, .L75+12
 833 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 834 0018 1846     		mov	r0, r3
 835 001a AA49     		ldr	r1, .L75+16
 836 001c 1346     		mov	r3, r2
 837 001e DB00     		lsls	r3, r3, #3
 838 0020 1344     		add	r3, r3, r2
 839 0022 5B00     		lsls	r3, r3, #1
 840 0024 1344     		add	r3, r3, r2
 841 0026 0344     		add	r3, r3, r0
 842 0028 51F82330 		ldr	r3, [r1, r3, lsl #2]
 843 002c 092B     		cmp	r3, #9
 844 002e 03D1     		bne	.L37
 214:main.c        ****         directionState = Stop; // reached target
 845              		.loc 1 214 0
 846 0030 0523     		movs	r3, #5
 847 0032 7B60     		str	r3, [r7, #4]
 215:main.c        ****         return directionState;
 848              		.loc 1 215 0
 849 0034 7B68     		ldr	r3, [r7, #4]
 850 0036 22E2     		b	.L38
 851              	.L37:
 216:main.c        ****     }
 217:main.c        ****     /*
 218:main.c        ****     if (totalDistance >= (yBlocksize)) {
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 20


 219:main.c        ****         directionState = Stop;
 220:main.c        ****         return directionState;
 221:main.c        ****     }
 222:main.c        ****     */
 223:main.c        ****         
 224:main.c        ****     switch (previousOrientation) {
 852              		.loc 1 224 0
 853 0038 9F4B     		ldr	r3, .L75+4
 854 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 855 003c 032B     		cmp	r3, #3
 856 003e 00F21482 		bhi	.L70
 857 0042 01A2     		adr	r2, .L41
 858 0044 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 859              		.p2align 2
 860              	.L41:
 861 0048 59000000 		.word	.L40+1
 862 004c 59010000 		.word	.L42+1
 863 0050 59020000 		.word	.L43+1
 864 0054 6D030000 		.word	.L44+1
 865              		.p2align 1
 866              	.L40:
 225:main.c        ****             case Up:
 226:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 867              		.loc 1 226 0
 868 0058 984B     		ldr	r3, .L75+8
 869 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870 005c 5A1E     		subs	r2, r3, #1
 871 005e 984B     		ldr	r3, .L75+12
 872 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 873 0062 1846     		mov	r0, r3
 874 0064 9749     		ldr	r1, .L75+16
 875 0066 1346     		mov	r3, r2
 876 0068 DB00     		lsls	r3, r3, #3
 877 006a 1344     		add	r3, r3, r2
 878 006c 5B00     		lsls	r3, r3, #1
 879 006e 1344     		add	r3, r3, r2
 880 0070 0344     		add	r3, r3, r0
 881 0072 51F82330 		ldr	r3, [r1, r3, lsl #2]
 882 0076 082B     		cmp	r3, #8
 883 0078 10D0     		beq	.L45
 884              		.loc 1 226 0 is_stmt 0 discriminator 1
 885 007a 904B     		ldr	r3, .L75+8
 886 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 887 007e 5A1E     		subs	r2, r3, #1
 888 0080 8F4B     		ldr	r3, .L75+12
 889 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 890 0084 1846     		mov	r0, r3
 891 0086 8F49     		ldr	r1, .L75+16
 892 0088 1346     		mov	r3, r2
 893 008a DB00     		lsls	r3, r3, #3
 894 008c 1344     		add	r3, r3, r2
 895 008e 5B00     		lsls	r3, r3, #1
 896 0090 1344     		add	r3, r3, r2
 897 0092 0344     		add	r3, r3, r0
 898 0094 51F82330 		ldr	r3, [r1, r3, lsl #2]
 899 0098 092B     		cmp	r3, #9
 900 009a 0BD1     		bne	.L46
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 21


 901              	.L45:
 227:main.c        ****                     currentOrientation = Up; 
 902              		.loc 1 227 0 is_stmt 1
 903 009c 854B     		ldr	r3, .L75
 904 009e 0022     		movs	r2, #0
 905 00a0 1A70     		strb	r2, [r3]
 228:main.c        ****                     directionState = Forward;
 906              		.loc 1 228 0
 907 00a2 0023     		movs	r3, #0
 908 00a4 7B60     		str	r3, [r7, #4]
 229:main.c        ****                     currentRow--;// update position
 909              		.loc 1 229 0
 910 00a6 854B     		ldr	r3, .L75+8
 911 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 912 00aa 013B     		subs	r3, r3, #1
 913 00ac DAB2     		uxtb	r2, r3
 914 00ae 834B     		ldr	r3, .L75+8
 915 00b0 1A70     		strb	r2, [r3]
 916 00b2 50E0     		b	.L47
 917              	.L46:
 230:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 918              		.loc 1 230 0
 919 00b4 814B     		ldr	r3, .L75+8
 920 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 921 00b8 1A46     		mov	r2, r3
 922 00ba 814B     		ldr	r3, .L75+12
 923 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 924 00be 591E     		subs	r1, r3, #1
 925 00c0 8048     		ldr	r0, .L75+16
 926 00c2 1346     		mov	r3, r2
 927 00c4 DB00     		lsls	r3, r3, #3
 928 00c6 1344     		add	r3, r3, r2
 929 00c8 5B00     		lsls	r3, r3, #1
 930 00ca 1344     		add	r3, r3, r2
 931 00cc 0B44     		add	r3, r3, r1
 932 00ce 50F82330 		ldr	r3, [r0, r3, lsl #2]
 933 00d2 082B     		cmp	r3, #8
 934 00d4 10D0     		beq	.L48
 935              		.loc 1 230 0 is_stmt 0 discriminator 1
 936 00d6 794B     		ldr	r3, .L75+8
 937 00d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 938 00da 1A46     		mov	r2, r3
 939 00dc 784B     		ldr	r3, .L75+12
 940 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 941 00e0 591E     		subs	r1, r3, #1
 942 00e2 7848     		ldr	r0, .L75+16
 943 00e4 1346     		mov	r3, r2
 944 00e6 DB00     		lsls	r3, r3, #3
 945 00e8 1344     		add	r3, r3, r2
 946 00ea 5B00     		lsls	r3, r3, #1
 947 00ec 1344     		add	r3, r3, r2
 948 00ee 0B44     		add	r3, r3, r1
 949 00f0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 950 00f4 092B     		cmp	r3, #9
 951 00f6 05D1     		bne	.L49
 952              	.L48:
 231:main.c        ****                     currentOrientation = Left;
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 22


 953              		.loc 1 231 0 is_stmt 1
 954 00f8 6E4B     		ldr	r3, .L75
 955 00fa 0222     		movs	r2, #2
 956 00fc 1A70     		strb	r2, [r3]
 232:main.c        ****                     directionState = waitForLeftTurn;
 957              		.loc 1 232 0
 958 00fe 0923     		movs	r3, #9
 959 0100 7B60     		str	r3, [r7, #4]
 960 0102 28E0     		b	.L47
 961              	.L49:
 233:main.c        ****                     //currentRow--;
 234:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 962              		.loc 1 234 0
 963 0104 6D4B     		ldr	r3, .L75+8
 964 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 965 0108 1A46     		mov	r2, r3
 966 010a 6D4B     		ldr	r3, .L75+12
 967 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 968 010e 591C     		adds	r1, r3, #1
 969 0110 6C48     		ldr	r0, .L75+16
 970 0112 1346     		mov	r3, r2
 971 0114 DB00     		lsls	r3, r3, #3
 972 0116 1344     		add	r3, r3, r2
 973 0118 5B00     		lsls	r3, r3, #1
 974 011a 1344     		add	r3, r3, r2
 975 011c 0B44     		add	r3, r3, r1
 976 011e 50F82330 		ldr	r3, [r0, r3, lsl #2]
 977 0122 082B     		cmp	r3, #8
 978 0124 11D0     		beq	.L50
 979              		.loc 1 234 0 is_stmt 0 discriminator 1
 980 0126 654B     		ldr	r3, .L75+8
 981 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982 012a 1A46     		mov	r2, r3
 983 012c 644B     		ldr	r3, .L75+12
 984 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 985 0130 591C     		adds	r1, r3, #1
 986 0132 6448     		ldr	r0, .L75+16
 987 0134 1346     		mov	r3, r2
 988 0136 DB00     		lsls	r3, r3, #3
 989 0138 1344     		add	r3, r3, r2
 990 013a 5B00     		lsls	r3, r3, #1
 991 013c 1344     		add	r3, r3, r2
 992 013e 0B44     		add	r3, r3, r1
 993 0140 50F82330 		ldr	r3, [r0, r3, lsl #2]
 994 0144 092B     		cmp	r3, #9
 995 0146 40F09281 		bne	.L71
 996              	.L50:
 235:main.c        ****                     currentOrientation = Right;
 997              		.loc 1 235 0 is_stmt 1
 998 014a 5A4B     		ldr	r3, .L75
 999 014c 0322     		movs	r2, #3
 1000 014e 1A70     		strb	r2, [r3]
 236:main.c        ****                     directionState = waitForRightTurn;
 1001              		.loc 1 236 0
 1002 0150 0823     		movs	r3, #8
 1003 0152 7B60     		str	r3, [r7, #4]
 237:main.c        ****                     //currentRow++; // update position
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 23


 238:main.c        ****                 }
 239:main.c        ****                 break;
 1004              		.loc 1 239 0
 1005 0154 8BE1     		b	.L71
 1006              	.L47:
 1007 0156 8AE1     		b	.L71
 1008              	.L42:
 240:main.c        ****             case Down:
 241:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 1009              		.loc 1 241 0
 1010 0158 584B     		ldr	r3, .L75+8
 1011 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1012 015c 5A1C     		adds	r2, r3, #1
 1013 015e 584B     		ldr	r3, .L75+12
 1014 0160 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1015 0162 1846     		mov	r0, r3
 1016 0164 5749     		ldr	r1, .L75+16
 1017 0166 1346     		mov	r3, r2
 1018 0168 DB00     		lsls	r3, r3, #3
 1019 016a 1344     		add	r3, r3, r2
 1020 016c 5B00     		lsls	r3, r3, #1
 1021 016e 1344     		add	r3, r3, r2
 1022 0170 0344     		add	r3, r3, r0
 1023 0172 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1024 0176 082B     		cmp	r3, #8
 1025 0178 10D0     		beq	.L52
 1026              		.loc 1 241 0 is_stmt 0 discriminator 1
 1027 017a 504B     		ldr	r3, .L75+8
 1028 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1029 017e 5A1C     		adds	r2, r3, #1
 1030 0180 4F4B     		ldr	r3, .L75+12
 1031 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1032 0184 1846     		mov	r0, r3
 1033 0186 4F49     		ldr	r1, .L75+16
 1034 0188 1346     		mov	r3, r2
 1035 018a DB00     		lsls	r3, r3, #3
 1036 018c 1344     		add	r3, r3, r2
 1037 018e 5B00     		lsls	r3, r3, #1
 1038 0190 1344     		add	r3, r3, r2
 1039 0192 0344     		add	r3, r3, r0
 1040 0194 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1041 0198 092B     		cmp	r3, #9
 1042 019a 0BD1     		bne	.L53
 1043              	.L52:
 242:main.c        ****                     currentOrientation = Down;
 1044              		.loc 1 242 0 is_stmt 1
 1045 019c 454B     		ldr	r3, .L75
 1046 019e 0122     		movs	r2, #1
 1047 01a0 1A70     		strb	r2, [r3]
 243:main.c        ****                     directionState = Forward;
 1048              		.loc 1 243 0
 1049 01a2 0023     		movs	r3, #0
 1050 01a4 7B60     		str	r3, [r7, #4]
 244:main.c        ****                     currentRow++;
 1051              		.loc 1 244 0
 1052 01a6 454B     		ldr	r3, .L75+8
 1053 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 24


 1054 01aa 0133     		adds	r3, r3, #1
 1055 01ac DAB2     		uxtb	r2, r3
 1056 01ae 434B     		ldr	r3, .L75+8
 1057 01b0 1A70     		strb	r2, [r3]
 1058 01b2 50E0     		b	.L54
 1059              	.L53:
 245:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 1060              		.loc 1 245 0
 1061 01b4 414B     		ldr	r3, .L75+8
 1062 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1063 01b8 1A46     		mov	r2, r3
 1064 01ba 414B     		ldr	r3, .L75+12
 1065 01bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1066 01be 591E     		subs	r1, r3, #1
 1067 01c0 4048     		ldr	r0, .L75+16
 1068 01c2 1346     		mov	r3, r2
 1069 01c4 DB00     		lsls	r3, r3, #3
 1070 01c6 1344     		add	r3, r3, r2
 1071 01c8 5B00     		lsls	r3, r3, #1
 1072 01ca 1344     		add	r3, r3, r2
 1073 01cc 0B44     		add	r3, r3, r1
 1074 01ce 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1075 01d2 082B     		cmp	r3, #8
 1076 01d4 10D0     		beq	.L55
 1077              		.loc 1 245 0 is_stmt 0 discriminator 1
 1078 01d6 394B     		ldr	r3, .L75+8
 1079 01d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1080 01da 1A46     		mov	r2, r3
 1081 01dc 384B     		ldr	r3, .L75+12
 1082 01de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1083 01e0 591E     		subs	r1, r3, #1
 1084 01e2 3848     		ldr	r0, .L75+16
 1085 01e4 1346     		mov	r3, r2
 1086 01e6 DB00     		lsls	r3, r3, #3
 1087 01e8 1344     		add	r3, r3, r2
 1088 01ea 5B00     		lsls	r3, r3, #1
 1089 01ec 1344     		add	r3, r3, r2
 1090 01ee 0B44     		add	r3, r3, r1
 1091 01f0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1092 01f4 092B     		cmp	r3, #9
 1093 01f6 05D1     		bne	.L56
 1094              	.L55:
 246:main.c        ****                     currentOrientation = Left;
 1095              		.loc 1 246 0 is_stmt 1
 1096 01f8 2E4B     		ldr	r3, .L75
 1097 01fa 0222     		movs	r2, #2
 1098 01fc 1A70     		strb	r2, [r3]
 247:main.c        ****                     directionState = waitForRightTurn;
 1099              		.loc 1 247 0
 1100 01fe 0823     		movs	r3, #8
 1101 0200 7B60     		str	r3, [r7, #4]
 1102 0202 28E0     		b	.L54
 1103              	.L56:
 248:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 1104              		.loc 1 248 0
 1105 0204 2D4B     		ldr	r3, .L75+8
 1106 0206 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 25


 1107 0208 1A46     		mov	r2, r3
 1108 020a 2D4B     		ldr	r3, .L75+12
 1109 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1110 020e 591C     		adds	r1, r3, #1
 1111 0210 2C48     		ldr	r0, .L75+16
 1112 0212 1346     		mov	r3, r2
 1113 0214 DB00     		lsls	r3, r3, #3
 1114 0216 1344     		add	r3, r3, r2
 1115 0218 5B00     		lsls	r3, r3, #1
 1116 021a 1344     		add	r3, r3, r2
 1117 021c 0B44     		add	r3, r3, r1
 1118 021e 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1119 0222 082B     		cmp	r3, #8
 1120 0224 11D0     		beq	.L57
 1121              		.loc 1 248 0 is_stmt 0 discriminator 1
 1122 0226 254B     		ldr	r3, .L75+8
 1123 0228 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1124 022a 1A46     		mov	r2, r3
 1125 022c 244B     		ldr	r3, .L75+12
 1126 022e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1127 0230 591C     		adds	r1, r3, #1
 1128 0232 2448     		ldr	r0, .L75+16
 1129 0234 1346     		mov	r3, r2
 1130 0236 DB00     		lsls	r3, r3, #3
 1131 0238 1344     		add	r3, r3, r2
 1132 023a 5B00     		lsls	r3, r3, #1
 1133 023c 1344     		add	r3, r3, r2
 1134 023e 0B44     		add	r3, r3, r1
 1135 0240 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1136 0244 092B     		cmp	r3, #9
 1137 0246 40F01481 		bne	.L72
 1138              	.L57:
 249:main.c        ****                     currentOrientation = Right;
 1139              		.loc 1 249 0 is_stmt 1
 1140 024a 1A4B     		ldr	r3, .L75
 1141 024c 0322     		movs	r2, #3
 1142 024e 1A70     		strb	r2, [r3]
 250:main.c        ****                     directionState = waitForLeftTurn;
 1143              		.loc 1 250 0
 1144 0250 0923     		movs	r3, #9
 1145 0252 7B60     		str	r3, [r7, #4]
 251:main.c        ****                 }
 252:main.c        ****                 break;
 1146              		.loc 1 252 0
 1147 0254 0DE1     		b	.L72
 1148              	.L54:
 1149 0256 0CE1     		b	.L72
 1150              	.L43:
 253:main.c        ****             case Left:
 254:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 1151              		.loc 1 254 0
 1152 0258 184B     		ldr	r3, .L75+8
 1153 025a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1154 025c 1A46     		mov	r2, r3
 1155 025e 184B     		ldr	r3, .L75+12
 1156 0260 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1157 0262 591E     		subs	r1, r3, #1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 26


 1158 0264 1748     		ldr	r0, .L75+16
 1159 0266 1346     		mov	r3, r2
 1160 0268 DB00     		lsls	r3, r3, #3
 1161 026a 1344     		add	r3, r3, r2
 1162 026c 5B00     		lsls	r3, r3, #1
 1163 026e 1344     		add	r3, r3, r2
 1164 0270 0B44     		add	r3, r3, r1
 1165 0272 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1166 0276 082B     		cmp	r3, #8
 1167 0278 10D0     		beq	.L58
 1168              		.loc 1 254 0 is_stmt 0 discriminator 1
 1169 027a 104B     		ldr	r3, .L75+8
 1170 027c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1171 027e 1A46     		mov	r2, r3
 1172 0280 0F4B     		ldr	r3, .L75+12
 1173 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1174 0284 591E     		subs	r1, r3, #1
 1175 0286 0F48     		ldr	r0, .L75+16
 1176 0288 1346     		mov	r3, r2
 1177 028a DB00     		lsls	r3, r3, #3
 1178 028c 1344     		add	r3, r3, r2
 1179 028e 5B00     		lsls	r3, r3, #1
 1180 0290 1344     		add	r3, r3, r2
 1181 0292 0B44     		add	r3, r3, r1
 1182 0294 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1183 0298 092B     		cmp	r3, #9
 1184 029a 15D1     		bne	.L59
 1185              	.L58:
 255:main.c        ****                     currentOrientation = Left;
 1186              		.loc 1 255 0 is_stmt 1
 1187 029c 054B     		ldr	r3, .L75
 1188 029e 0222     		movs	r2, #2
 1189 02a0 1A70     		strb	r2, [r3]
 256:main.c        ****                     directionState = Forward;
 1190              		.loc 1 256 0
 1191 02a2 0023     		movs	r3, #0
 1192 02a4 7B60     		str	r3, [r7, #4]
 257:main.c        ****                     currentCol--; // update position
 1193              		.loc 1 257 0
 1194 02a6 064B     		ldr	r3, .L75+12
 1195 02a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1196 02aa 013B     		subs	r3, r3, #1
 1197 02ac DAB2     		uxtb	r2, r3
 1198 02ae 044B     		ldr	r3, .L75+12
 1199 02b0 1A70     		strb	r2, [r3]
 1200 02b2 5AE0     		b	.L60
 1201              	.L76:
 1202              		.align	2
 1203              	.L75:
 1204 02b4 00000000 		.word	currentOrientation
 1205 02b8 00000000 		.word	previousOrientation
 1206 02bc 00000000 		.word	currentRow
 1207 02c0 00000000 		.word	currentCol
 1208 02c4 00000000 		.word	map
 1209              	.L59:
 258:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 1210              		.loc 1 258 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 27


 1211 02c8 6F4B     		ldr	r3, .L77
 1212 02ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1213 02cc 5A1E     		subs	r2, r3, #1
 1214 02ce 6F4B     		ldr	r3, .L77+4
 1215 02d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1216 02d2 1846     		mov	r0, r3
 1217 02d4 6E49     		ldr	r1, .L77+8
 1218 02d6 1346     		mov	r3, r2
 1219 02d8 DB00     		lsls	r3, r3, #3
 1220 02da 1344     		add	r3, r3, r2
 1221 02dc 5B00     		lsls	r3, r3, #1
 1222 02de 1344     		add	r3, r3, r2
 1223 02e0 0344     		add	r3, r3, r0
 1224 02e2 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1225 02e6 082B     		cmp	r3, #8
 1226 02e8 10D0     		beq	.L61
 1227              		.loc 1 258 0 is_stmt 0 discriminator 1
 1228 02ea 674B     		ldr	r3, .L77
 1229 02ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1230 02ee 5A1E     		subs	r2, r3, #1
 1231 02f0 664B     		ldr	r3, .L77+4
 1232 02f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1233 02f4 1846     		mov	r0, r3
 1234 02f6 6649     		ldr	r1, .L77+8
 1235 02f8 1346     		mov	r3, r2
 1236 02fa DB00     		lsls	r3, r3, #3
 1237 02fc 1344     		add	r3, r3, r2
 1238 02fe 5B00     		lsls	r3, r3, #1
 1239 0300 1344     		add	r3, r3, r2
 1240 0302 0344     		add	r3, r3, r0
 1241 0304 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1242 0308 092B     		cmp	r3, #9
 1243 030a 05D1     		bne	.L62
 1244              	.L61:
 259:main.c        ****                     currentOrientation = Up;
 1245              		.loc 1 259 0 is_stmt 1
 1246 030c 614B     		ldr	r3, .L77+12
 1247 030e 0022     		movs	r2, #0
 1248 0310 1A70     		strb	r2, [r3]
 260:main.c        ****                     directionState = waitForRightTurn;
 1249              		.loc 1 260 0
 1250 0312 0823     		movs	r3, #8
 1251 0314 7B60     		str	r3, [r7, #4]
 1252 0316 28E0     		b	.L60
 1253              	.L62:
 261:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 1254              		.loc 1 261 0
 1255 0318 5B4B     		ldr	r3, .L77
 1256 031a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1257 031c 5A1C     		adds	r2, r3, #1
 1258 031e 5B4B     		ldr	r3, .L77+4
 1259 0320 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1260 0322 1846     		mov	r0, r3
 1261 0324 5A49     		ldr	r1, .L77+8
 1262 0326 1346     		mov	r3, r2
 1263 0328 DB00     		lsls	r3, r3, #3
 1264 032a 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 28


 1265 032c 5B00     		lsls	r3, r3, #1
 1266 032e 1344     		add	r3, r3, r2
 1267 0330 0344     		add	r3, r3, r0
 1268 0332 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1269 0336 082B     		cmp	r3, #8
 1270 0338 11D0     		beq	.L63
 1271              		.loc 1 261 0 is_stmt 0 discriminator 1
 1272 033a 534B     		ldr	r3, .L77
 1273 033c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1274 033e 5A1C     		adds	r2, r3, #1
 1275 0340 524B     		ldr	r3, .L77+4
 1276 0342 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1277 0344 1846     		mov	r0, r3
 1278 0346 5249     		ldr	r1, .L77+8
 1279 0348 1346     		mov	r3, r2
 1280 034a DB00     		lsls	r3, r3, #3
 1281 034c 1344     		add	r3, r3, r2
 1282 034e 5B00     		lsls	r3, r3, #1
 1283 0350 1344     		add	r3, r3, r2
 1284 0352 0344     		add	r3, r3, r0
 1285 0354 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1286 0358 092B     		cmp	r3, #9
 1287 035a 40F08C80 		bne	.L73
 1288              	.L63:
 262:main.c        ****                     currentOrientation = Down;
 1289              		.loc 1 262 0 is_stmt 1
 1290 035e 4D4B     		ldr	r3, .L77+12
 1291 0360 0122     		movs	r2, #1
 1292 0362 1A70     		strb	r2, [r3]
 263:main.c        ****                     directionState = waitForLeftTurn;
 1293              		.loc 1 263 0
 1294 0364 0923     		movs	r3, #9
 1295 0366 7B60     		str	r3, [r7, #4]
 264:main.c        ****                 }
 265:main.c        ****                 break;
 1296              		.loc 1 265 0
 1297 0368 85E0     		b	.L73
 1298              	.L60:
 1299 036a 84E0     		b	.L73
 1300              	.L44:
 266:main.c        ****             case Right:
 267:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 1301              		.loc 1 267 0
 1302 036c 464B     		ldr	r3, .L77
 1303 036e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1304 0370 1A46     		mov	r2, r3
 1305 0372 464B     		ldr	r3, .L77+4
 1306 0374 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1307 0376 591C     		adds	r1, r3, #1
 1308 0378 4548     		ldr	r0, .L77+8
 1309 037a 1346     		mov	r3, r2
 1310 037c DB00     		lsls	r3, r3, #3
 1311 037e 1344     		add	r3, r3, r2
 1312 0380 5B00     		lsls	r3, r3, #1
 1313 0382 1344     		add	r3, r3, r2
 1314 0384 0B44     		add	r3, r3, r1
 1315 0386 50F82330 		ldr	r3, [r0, r3, lsl #2]
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 29


 1316 038a 082B     		cmp	r3, #8
 1317 038c 10D0     		beq	.L64
 1318              		.loc 1 267 0 is_stmt 0 discriminator 1
 1319 038e 3E4B     		ldr	r3, .L77
 1320 0390 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1321 0392 1A46     		mov	r2, r3
 1322 0394 3D4B     		ldr	r3, .L77+4
 1323 0396 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1324 0398 591C     		adds	r1, r3, #1
 1325 039a 3D48     		ldr	r0, .L77+8
 1326 039c 1346     		mov	r3, r2
 1327 039e DB00     		lsls	r3, r3, #3
 1328 03a0 1344     		add	r3, r3, r2
 1329 03a2 5B00     		lsls	r3, r3, #1
 1330 03a4 1344     		add	r3, r3, r2
 1331 03a6 0B44     		add	r3, r3, r1
 1332 03a8 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1333 03ac 092B     		cmp	r3, #9
 1334 03ae 0BD1     		bne	.L65
 1335              	.L64:
 268:main.c        ****                     currentOrientation = Right;
 1336              		.loc 1 268 0 is_stmt 1
 1337 03b0 384B     		ldr	r3, .L77+12
 1338 03b2 0322     		movs	r2, #3
 1339 03b4 1A70     		strb	r2, [r3]
 269:main.c        ****                     directionState = Forward;
 1340              		.loc 1 269 0
 1341 03b6 0023     		movs	r3, #0
 1342 03b8 7B60     		str	r3, [r7, #4]
 270:main.c        ****                     currentCol++; // update position
 1343              		.loc 1 270 0
 1344 03ba 344B     		ldr	r3, .L77+4
 1345 03bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1346 03be 0133     		adds	r3, r3, #1
 1347 03c0 DAB2     		uxtb	r2, r3
 1348 03c2 324B     		ldr	r3, .L77+4
 1349 03c4 1A70     		strb	r2, [r3]
 1350 03c6 4FE0     		b	.L66
 1351              	.L65:
 271:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 1352              		.loc 1 271 0
 1353 03c8 2F4B     		ldr	r3, .L77
 1354 03ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1355 03cc 5A1E     		subs	r2, r3, #1
 1356 03ce 2F4B     		ldr	r3, .L77+4
 1357 03d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1358 03d2 1846     		mov	r0, r3
 1359 03d4 2E49     		ldr	r1, .L77+8
 1360 03d6 1346     		mov	r3, r2
 1361 03d8 DB00     		lsls	r3, r3, #3
 1362 03da 1344     		add	r3, r3, r2
 1363 03dc 5B00     		lsls	r3, r3, #1
 1364 03de 1344     		add	r3, r3, r2
 1365 03e0 0344     		add	r3, r3, r0
 1366 03e2 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1367 03e6 082B     		cmp	r3, #8
 1368 03e8 10D0     		beq	.L67
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 30


 1369              		.loc 1 271 0 is_stmt 0 discriminator 1
 1370 03ea 274B     		ldr	r3, .L77
 1371 03ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1372 03ee 5A1E     		subs	r2, r3, #1
 1373 03f0 264B     		ldr	r3, .L77+4
 1374 03f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1375 03f4 1846     		mov	r0, r3
 1376 03f6 2649     		ldr	r1, .L77+8
 1377 03f8 1346     		mov	r3, r2
 1378 03fa DB00     		lsls	r3, r3, #3
 1379 03fc 1344     		add	r3, r3, r2
 1380 03fe 5B00     		lsls	r3, r3, #1
 1381 0400 1344     		add	r3, r3, r2
 1382 0402 0344     		add	r3, r3, r0
 1383 0404 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1384 0408 092B     		cmp	r3, #9
 1385 040a 05D1     		bne	.L68
 1386              	.L67:
 272:main.c        ****                     currentOrientation = Up;
 1387              		.loc 1 272 0 is_stmt 1
 1388 040c 214B     		ldr	r3, .L77+12
 1389 040e 0022     		movs	r2, #0
 1390 0410 1A70     		strb	r2, [r3]
 273:main.c        ****                     directionState = waitForLeftTurn;
 1391              		.loc 1 273 0
 1392 0412 0923     		movs	r3, #9
 1393 0414 7B60     		str	r3, [r7, #4]
 1394 0416 27E0     		b	.L66
 1395              	.L68:
 274:main.c        ****                     //currentCol++; // update position
 275:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 1396              		.loc 1 275 0
 1397 0418 1B4B     		ldr	r3, .L77
 1398 041a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1399 041c 5A1C     		adds	r2, r3, #1
 1400 041e 1B4B     		ldr	r3, .L77+4
 1401 0420 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1402 0422 1846     		mov	r0, r3
 1403 0424 1A49     		ldr	r1, .L77+8
 1404 0426 1346     		mov	r3, r2
 1405 0428 DB00     		lsls	r3, r3, #3
 1406 042a 1344     		add	r3, r3, r2
 1407 042c 5B00     		lsls	r3, r3, #1
 1408 042e 1344     		add	r3, r3, r2
 1409 0430 0344     		add	r3, r3, r0
 1410 0432 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1411 0436 082B     		cmp	r3, #8
 1412 0438 10D0     		beq	.L69
 1413              		.loc 1 275 0 is_stmt 0 discriminator 1
 1414 043a 134B     		ldr	r3, .L77
 1415 043c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1416 043e 5A1C     		adds	r2, r3, #1
 1417 0440 124B     		ldr	r3, .L77+4
 1418 0442 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1419 0444 1846     		mov	r0, r3
 1420 0446 1249     		ldr	r1, .L77+8
 1421 0448 1346     		mov	r3, r2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 31


 1422 044a DB00     		lsls	r3, r3, #3
 1423 044c 1344     		add	r3, r3, r2
 1424 044e 5B00     		lsls	r3, r3, #1
 1425 0450 1344     		add	r3, r3, r2
 1426 0452 0344     		add	r3, r3, r0
 1427 0454 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1428 0458 092B     		cmp	r3, #9
 1429 045a 0ED1     		bne	.L74
 1430              	.L69:
 276:main.c        ****                     currentOrientation = Down;
 1431              		.loc 1 276 0 is_stmt 1
 1432 045c 0D4B     		ldr	r3, .L77+12
 1433 045e 0122     		movs	r2, #1
 1434 0460 1A70     		strb	r2, [r3]
 277:main.c        ****                     directionState = waitForRightTurn;
 1435              		.loc 1 277 0
 1436 0462 0823     		movs	r3, #8
 1437 0464 7B60     		str	r3, [r7, #4]
 278:main.c        ****                     //currentCol--; // update position
 279:main.c        ****                 }
 280:main.c        ****                 break;
 1438              		.loc 1 280 0
 1439 0466 08E0     		b	.L74
 1440              	.L66:
 1441 0468 07E0     		b	.L74
 1442              	.L70:
 281:main.c        ****             default:
 282:main.c        ****                 break;
 1443              		.loc 1 282 0
 1444 046a 00BF     		nop
 1445 046c 06E0     		b	.L51
 1446              	.L71:
 239:main.c        ****             case Down:
 1447              		.loc 1 239 0
 1448 046e 00BF     		nop
 1449 0470 04E0     		b	.L51
 1450              	.L72:
 252:main.c        ****             case Left:
 1451              		.loc 1 252 0
 1452 0472 00BF     		nop
 1453 0474 02E0     		b	.L51
 1454              	.L73:
 265:main.c        ****             case Right:
 1455              		.loc 1 265 0
 1456 0476 00BF     		nop
 1457 0478 00E0     		b	.L51
 1458              	.L74:
 280:main.c        ****             default:
 1459              		.loc 1 280 0
 1460 047a 00BF     		nop
 1461              	.L51:
 283:main.c        ****         }
 284:main.c        ****     
 285:main.c        ****     return directionState;
 1462              		.loc 1 285 0
 1463 047c 7B68     		ldr	r3, [r7, #4]
 1464              	.L38:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 32


 286:main.c        **** }
 1465              		.loc 1 286 0
 1466 047e 1846     		mov	r0, r3
 1467 0480 0C37     		adds	r7, r7, #12
 1468              		.cfi_def_cfa_offset 4
 1469 0482 BD46     		mov	sp, r7
 1470              		.cfi_def_cfa_register 13
 1471              		@ sp needed
 1472 0484 80BC     		pop	{r7}
 1473              		.cfi_restore 7
 1474              		.cfi_def_cfa_offset 0
 1475 0486 7047     		bx	lr
 1476              	.L78:
 1477              		.align	2
 1478              	.L77:
 1479 0488 00000000 		.word	currentRow
 1480 048c 00000000 		.word	currentCol
 1481 0490 00000000 		.word	map
 1482 0494 00000000 		.word	currentOrientation
 1483              		.cfi_endproc
 1484              	.LFE73:
 1485              		.size	GetNextStep, .-GetNextStep
 1486              		.section	.text.RecheckPosition,"ax",%progbits
 1487              		.align	2
 1488              		.global	RecheckPosition
 1489              		.thumb
 1490              		.thumb_func
 1491              		.type	RecheckPosition, %function
 1492              	RecheckPosition:
 1493              	.LFB74:
 287:main.c        **** 
 288:main.c        **** enum DirectionState RecheckPosition() {
 1494              		.loc 1 288 0
 1495              		.cfi_startproc
 1496              		@ args = 0, pretend = 0, frame = 0
 1497              		@ frame_needed = 1, uses_anonymous_args = 0
 1498 0000 80B5     		push	{r7, lr}
 1499              		.cfi_def_cfa_offset 8
 1500              		.cfi_offset 7, -8
 1501              		.cfi_offset 14, -4
 1502 0002 00AF     		add	r7, sp, #0
 1503              		.cfi_def_cfa_register 7
 289:main.c        ****     // Called when we are at intersection/ turn
 290:main.c        ****     // Check our position on the map and see if it aligns with the junction
 291:main.c        ****     
 292:main.c        ****     // CHECK FOR PATH
 293:main.c        ****     if (currentOrientation == Up || currentOrientation == Down) { // check left right for path
 1504              		.loc 1 293 0
 1505 0004 544B     		ldr	r3, .L89
 1506 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1507 0008 002B     		cmp	r3, #0
 1508 000a 03D0     		beq	.L80
 1509              		.loc 1 293 0 is_stmt 0 discriminator 1
 1510 000c 524B     		ldr	r3, .L89
 1511 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1512 0010 012B     		cmp	r3, #1
 1513 0012 4AD1     		bne	.L81
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 33


 1514              	.L80:
 294:main.c        ****         if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol - 1] == 8 ||
 1515              		.loc 1 294 0 is_stmt 1
 1516 0014 514B     		ldr	r3, .L89+4
 1517 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1518 0018 1A46     		mov	r2, r3
 1519 001a 514B     		ldr	r3, .L89+8
 1520 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1521 001e 591C     		adds	r1, r3, #1
 1522 0020 5048     		ldr	r0, .L89+12
 1523 0022 1346     		mov	r3, r2
 1524 0024 DB00     		lsls	r3, r3, #3
 1525 0026 1344     		add	r3, r3, r2
 1526 0028 5B00     		lsls	r3, r3, #1
 1527 002a 1344     		add	r3, r3, r2
 1528 002c 0B44     		add	r3, r3, r1
 1529 002e 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1530 0032 082B     		cmp	r3, #8
 1531 0034 32D0     		beq	.L82
 1532              		.loc 1 294 0 is_stmt 0 discriminator 1
 1533 0036 494B     		ldr	r3, .L89+4
 1534 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1535 003a 1A46     		mov	r2, r3
 1536 003c 484B     		ldr	r3, .L89+8
 1537 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1538 0040 591E     		subs	r1, r3, #1
 1539 0042 4848     		ldr	r0, .L89+12
 1540 0044 1346     		mov	r3, r2
 1541 0046 DB00     		lsls	r3, r3, #3
 1542 0048 1344     		add	r3, r3, r2
 1543 004a 5B00     		lsls	r3, r3, #1
 1544 004c 1344     		add	r3, r3, r2
 1545 004e 0B44     		add	r3, r3, r1
 1546 0050 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1547 0054 082B     		cmp	r3, #8
 1548 0056 21D0     		beq	.L82
 295:main.c        ****             map[currentRow][currentCol + 1] == 9 || map[currentRow][currentCol - 1] == 9) {
 1549              		.loc 1 295 0 is_stmt 1 discriminator 2
 1550 0058 404B     		ldr	r3, .L89+4
 1551 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1552 005c 1A46     		mov	r2, r3
 1553 005e 404B     		ldr	r3, .L89+8
 1554 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1555 0062 591C     		adds	r1, r3, #1
 1556 0064 3F48     		ldr	r0, .L89+12
 1557 0066 1346     		mov	r3, r2
 1558 0068 DB00     		lsls	r3, r3, #3
 1559 006a 1344     		add	r3, r3, r2
 1560 006c 5B00     		lsls	r3, r3, #1
 1561 006e 1344     		add	r3, r3, r2
 1562 0070 0B44     		add	r3, r3, r1
 1563 0072 50F82330 		ldr	r3, [r0, r3, lsl #2]
 294:main.c        ****         if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol - 1] == 8 ||
 1564              		.loc 1 294 0 discriminator 2
 1565 0076 092B     		cmp	r3, #9
 1566 0078 10D0     		beq	.L82
 1567              		.loc 1 295 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 34


 1568 007a 384B     		ldr	r3, .L89+4
 1569 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1570 007e 1A46     		mov	r2, r3
 1571 0080 374B     		ldr	r3, .L89+8
 1572 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1573 0084 591E     		subs	r1, r3, #1
 1574 0086 3748     		ldr	r0, .L89+12
 1575 0088 1346     		mov	r3, r2
 1576 008a DB00     		lsls	r3, r3, #3
 1577 008c 1344     		add	r3, r3, r2
 1578 008e 5B00     		lsls	r3, r3, #1
 1579 0090 1344     		add	r3, r3, r2
 1580 0092 0B44     		add	r3, r3, r1
 1581 0094 50F82330 		ldr	r3, [r0, r3, lsl #2]
 1582 0098 092B     		cmp	r3, #9
 1583 009a 02D1     		bne	.L83
 1584              	.L82:
 296:main.c        ****             return currentDirection;// if correct location, break
 1585              		.loc 1 296 0
 1586 009c 324B     		ldr	r3, .L89+16
 1587 009e 1B68     		ldr	r3, [r3]
 1588 00a0 58E0     		b	.L84
 1589              	.L83:
 297:main.c        ****         } else {
 298:main.c        ****             return GetNextStep(); // need to increment location
 1590              		.loc 1 298 0
 1591 00a2 FFF7FEFF 		bl	GetNextStep
 1592 00a6 0346     		mov	r3, r0
 1593 00a8 54E0     		b	.L84
 1594              	.L81:
 299:main.c        ****         }
 300:main.c        ****     }
 301:main.c        ****     else if (currentOrientation == Left || currentOrientation == Right) { // check up down for path
 1595              		.loc 1 301 0
 1596 00aa 2B4B     		ldr	r3, .L89
 1597 00ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1598 00ae 022B     		cmp	r3, #2
 1599 00b0 03D0     		beq	.L85
 1600              		.loc 1 301 0 is_stmt 0 discriminator 1
 1601 00b2 294B     		ldr	r3, .L89
 1602 00b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1603 00b6 032B     		cmp	r3, #3
 1604 00b8 4AD1     		bne	.L86
 1605              	.L85:
 302:main.c        ****         if(map[currentRow + 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 8 ||
 1606              		.loc 1 302 0 is_stmt 1
 1607 00ba 284B     		ldr	r3, .L89+4
 1608 00bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1609 00be 5A1C     		adds	r2, r3, #1
 1610 00c0 274B     		ldr	r3, .L89+8
 1611 00c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1612 00c4 1846     		mov	r0, r3
 1613 00c6 2749     		ldr	r1, .L89+12
 1614 00c8 1346     		mov	r3, r2
 1615 00ca DB00     		lsls	r3, r3, #3
 1616 00cc 1344     		add	r3, r3, r2
 1617 00ce 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 35


 1618 00d0 1344     		add	r3, r3, r2
 1619 00d2 0344     		add	r3, r3, r0
 1620 00d4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1621 00d8 082B     		cmp	r3, #8
 1622 00da 32D0     		beq	.L87
 1623              		.loc 1 302 0 is_stmt 0 discriminator 1
 1624 00dc 1F4B     		ldr	r3, .L89+4
 1625 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1626 00e0 5A1E     		subs	r2, r3, #1
 1627 00e2 1F4B     		ldr	r3, .L89+8
 1628 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1629 00e6 1846     		mov	r0, r3
 1630 00e8 1E49     		ldr	r1, .L89+12
 1631 00ea 1346     		mov	r3, r2
 1632 00ec DB00     		lsls	r3, r3, #3
 1633 00ee 1344     		add	r3, r3, r2
 1634 00f0 5B00     		lsls	r3, r3, #1
 1635 00f2 1344     		add	r3, r3, r2
 1636 00f4 0344     		add	r3, r3, r0
 1637 00f6 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1638 00fa 082B     		cmp	r3, #8
 1639 00fc 21D0     		beq	.L87
 303:main.c        ****             map[currentRow + 1][currentCol] == 9 || map[currentRow - 1][currentCol] == 9) {
 1640              		.loc 1 303 0 is_stmt 1 discriminator 2
 1641 00fe 174B     		ldr	r3, .L89+4
 1642 0100 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1643 0102 5A1C     		adds	r2, r3, #1
 1644 0104 164B     		ldr	r3, .L89+8
 1645 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1646 0108 1846     		mov	r0, r3
 1647 010a 1649     		ldr	r1, .L89+12
 1648 010c 1346     		mov	r3, r2
 1649 010e DB00     		lsls	r3, r3, #3
 1650 0110 1344     		add	r3, r3, r2
 1651 0112 5B00     		lsls	r3, r3, #1
 1652 0114 1344     		add	r3, r3, r2
 1653 0116 0344     		add	r3, r3, r0
 1654 0118 51F82330 		ldr	r3, [r1, r3, lsl #2]
 302:main.c        ****         if(map[currentRow + 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 8 ||
 1655              		.loc 1 302 0 discriminator 2
 1656 011c 092B     		cmp	r3, #9
 1657 011e 10D0     		beq	.L87
 1658              		.loc 1 303 0
 1659 0120 0E4B     		ldr	r3, .L89+4
 1660 0122 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1661 0124 5A1E     		subs	r2, r3, #1
 1662 0126 0E4B     		ldr	r3, .L89+8
 1663 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1664 012a 1846     		mov	r0, r3
 1665 012c 0D49     		ldr	r1, .L89+12
 1666 012e 1346     		mov	r3, r2
 1667 0130 DB00     		lsls	r3, r3, #3
 1668 0132 1344     		add	r3, r3, r2
 1669 0134 5B00     		lsls	r3, r3, #1
 1670 0136 1344     		add	r3, r3, r2
 1671 0138 0344     		add	r3, r3, r0
 1672 013a 51F82330 		ldr	r3, [r1, r3, lsl #2]
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 36


 1673 013e 092B     		cmp	r3, #9
 1674 0140 02D1     		bne	.L88
 1675              	.L87:
 304:main.c        ****             return currentDirection;// if correct location, break
 1676              		.loc 1 304 0
 1677 0142 094B     		ldr	r3, .L89+16
 1678 0144 1B68     		ldr	r3, [r3]
 1679 0146 05E0     		b	.L84
 1680              	.L88:
 305:main.c        ****         } else {
 306:main.c        ****             return GetNextStep(); // need to increment location
 1681              		.loc 1 306 0
 1682 0148 FFF7FEFF 		bl	GetNextStep
 1683 014c 0346     		mov	r3, r0
 1684 014e 01E0     		b	.L84
 1685              	.L86:
 307:main.c        ****         }
 308:main.c        ****     }
 309:main.c        ****     
 310:main.c        ****     return currentDirection;
 1686              		.loc 1 310 0
 1687 0150 054B     		ldr	r3, .L89+16
 1688 0152 1B68     		ldr	r3, [r3]
 1689              	.L84:
 311:main.c        **** }
 1690              		.loc 1 311 0
 1691 0154 1846     		mov	r0, r3
 1692 0156 80BD     		pop	{r7, pc}
 1693              	.L90:
 1694              		.align	2
 1695              	.L89:
 1696 0158 00000000 		.word	currentOrientation
 1697 015c 00000000 		.word	currentRow
 1698 0160 00000000 		.word	currentCol
 1699 0164 00000000 		.word	map
 1700 0168 00000000 		.word	currentDirection
 1701              		.cfi_endproc
 1702              	.LFE74:
 1703              		.size	RecheckPosition, .-RecheckPosition
 1704              		.section	.text.GetJunctionType,"ax",%progbits
 1705              		.align	2
 1706              		.global	GetJunctionType
 1707              		.thumb
 1708              		.thumb_func
 1709              		.type	GetJunctionType, %function
 1710              	GetJunctionType:
 1711              	.LFB75:
 312:main.c        **** 
 313:main.c        **** enum JunctionType {LeftJunction, RightJunction, LeftJunctionAfterTurn, RightJunctionAfterTurn, Bran
 314:main.c        **** 
 315:main.c        **** enum JunctionType GetJunctionType();
 316:main.c        **** 
 317:main.c        **** enum JunctionType GetJunctionType() {
 1712              		.loc 1 317 0
 1713              		.cfi_startproc
 1714              		@ args = 0, pretend = 0, frame = 0
 1715              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 37


 1716              		@ link register save eliminated.
 1717 0000 80B4     		push	{r7}
 1718              		.cfi_def_cfa_offset 4
 1719              		.cfi_offset 7, -4
 1720 0002 00AF     		add	r7, sp, #0
 1721              		.cfi_def_cfa_register 7
 318:main.c        ****     if((!s5 || !s6) && !s3){
 1722              		.loc 1 318 0
 1723 0004 424B     		ldr	r3, .L106
 1724 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1725 0008 002B     		cmp	r3, #0
 1726 000a 03D0     		beq	.L92
 1727              		.loc 1 318 0 is_stmt 0 discriminator 2
 1728 000c 414B     		ldr	r3, .L106+4
 1729 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1730 0010 002B     		cmp	r3, #0
 1731 0012 05D1     		bne	.L93
 1732              	.L92:
 1733              		.loc 1 318 0 discriminator 3
 1734 0014 404B     		ldr	r3, .L106+8
 1735 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1736 0018 002B     		cmp	r3, #0
 1737 001a 01D1     		bne	.L93
 319:main.c        ****         return BranchLeft;
 1738              		.loc 1 319 0 is_stmt 1
 1739 001c 0423     		movs	r3, #4
 1740 001e 72E0     		b	.L94
 1741              	.L93:
 320:main.c        ****         
 321:main.c        ****     }else if((!s5 || !s6) && !s4){
 1742              		.loc 1 321 0
 1743 0020 3B4B     		ldr	r3, .L106
 1744 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1745 0024 002B     		cmp	r3, #0
 1746 0026 03D0     		beq	.L95
 1747              		.loc 1 321 0 is_stmt 0 discriminator 2
 1748 0028 3A4B     		ldr	r3, .L106+4
 1749 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1750 002c 002B     		cmp	r3, #0
 1751 002e 05D1     		bne	.L96
 1752              	.L95:
 1753              		.loc 1 321 0 discriminator 3
 1754 0030 3A4B     		ldr	r3, .L106+12
 1755 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1756 0034 002B     		cmp	r3, #0
 1757 0036 01D1     		bne	.L96
 322:main.c        ****         return BranchRight;
 1758              		.loc 1 322 0 is_stmt 1
 1759 0038 0523     		movs	r3, #5
 1760 003a 64E0     		b	.L94
 1761              	.L96:
 323:main.c        ****         
 324:main.c        ****     }else if((!s5 || !s6) && (!s3 && !s4)){
 1762              		.loc 1 324 0
 1763 003c 344B     		ldr	r3, .L106
 1764 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1765 0040 002B     		cmp	r3, #0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 38


 1766 0042 03D0     		beq	.L97
 1767              		.loc 1 324 0 is_stmt 0 discriminator 2
 1768 0044 334B     		ldr	r3, .L106+4
 1769 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1770 0048 002B     		cmp	r3, #0
 1771 004a 09D1     		bne	.L98
 1772              	.L97:
 1773              		.loc 1 324 0 discriminator 3
 1774 004c 324B     		ldr	r3, .L106+8
 1775 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1776 0050 002B     		cmp	r3, #0
 1777 0052 05D1     		bne	.L98
 1778              		.loc 1 324 0 discriminator 4
 1779 0054 314B     		ldr	r3, .L106+12
 1780 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1781 0058 002B     		cmp	r3, #0
 1782 005a 01D1     		bne	.L98
 325:main.c        ****         return TIntersection;
 1783              		.loc 1 325 0 is_stmt 1
 1784 005c 0623     		movs	r3, #6
 1785 005e 52E0     		b	.L94
 1786              	.L98:
 326:main.c        ****         
 327:main.c        ****     }else if(!s3 && !s4){
 1787              		.loc 1 327 0
 1788 0060 2D4B     		ldr	r3, .L106+8
 1789 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1790 0064 002B     		cmp	r3, #0
 1791 0066 05D1     		bne	.L99
 1792              		.loc 1 327 0 is_stmt 0 discriminator 1
 1793 0068 2C4B     		ldr	r3, .L106+12
 1794 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1795 006c 002B     		cmp	r3, #0
 1796 006e 01D1     		bne	.L99
 328:main.c        ****         return InvertedTIntersection;
 1797              		.loc 1 328 0 is_stmt 1
 1798 0070 0723     		movs	r3, #7
 1799 0072 48E0     		b	.L94
 1800              	.L99:
 329:main.c        ****         
 330:main.c        ****     }else if(!s3 && s4 && (s5 || s6)){
 1801              		.loc 1 330 0
 1802 0074 284B     		ldr	r3, .L106+8
 1803 0076 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1804 0078 002B     		cmp	r3, #0
 1805 007a 0DD1     		bne	.L100
 1806              		.loc 1 330 0 is_stmt 0 discriminator 1
 1807 007c 274B     		ldr	r3, .L106+12
 1808 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1809 0080 002B     		cmp	r3, #0
 1810 0082 09D0     		beq	.L100
 1811              		.loc 1 330 0 discriminator 2
 1812 0084 224B     		ldr	r3, .L106
 1813 0086 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1814 0088 002B     		cmp	r3, #0
 1815 008a 03D1     		bne	.L101
 1816              		.loc 1 330 0 discriminator 3
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 39


 1817 008c 214B     		ldr	r3, .L106+4
 1818 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1819 0090 002B     		cmp	r3, #0
 1820 0092 01D0     		beq	.L100
 1821              	.L101:
 331:main.c        ****         return LeftJunction;
 1822              		.loc 1 331 0 is_stmt 1
 1823 0094 0023     		movs	r3, #0
 1824 0096 36E0     		b	.L94
 1825              	.L100:
 332:main.c        **** 
 333:main.c        ****     }else if(s3 && !s4 && (s5 || s6)){
 1826              		.loc 1 333 0
 1827 0098 1F4B     		ldr	r3, .L106+8
 1828 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1829 009c 002B     		cmp	r3, #0
 1830 009e 0DD0     		beq	.L102
 1831              		.loc 1 333 0 is_stmt 0 discriminator 1
 1832 00a0 1E4B     		ldr	r3, .L106+12
 1833 00a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1834 00a4 002B     		cmp	r3, #0
 1835 00a6 09D1     		bne	.L102
 1836              		.loc 1 333 0 discriminator 2
 1837 00a8 194B     		ldr	r3, .L106
 1838 00aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1839 00ac 002B     		cmp	r3, #0
 1840 00ae 03D1     		bne	.L103
 1841              		.loc 1 333 0 discriminator 3
 1842 00b0 184B     		ldr	r3, .L106+4
 1843 00b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1844 00b4 002B     		cmp	r3, #0
 1845 00b6 01D0     		beq	.L102
 1846              	.L103:
 334:main.c        ****         return RightJunction;
 1847              		.loc 1 334 0 is_stmt 1
 1848 00b8 0123     		movs	r3, #1
 1849 00ba 24E0     		b	.L94
 1850              	.L102:
 335:main.c        ****     }else if (!s3 && s4 && !(s5 || s6)) {
 1851              		.loc 1 335 0
 1852 00bc 164B     		ldr	r3, .L106+8
 1853 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1854 00c0 002B     		cmp	r3, #0
 1855 00c2 0DD1     		bne	.L104
 1856              		.loc 1 335 0 is_stmt 0 discriminator 1
 1857 00c4 154B     		ldr	r3, .L106+12
 1858 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1859 00c8 002B     		cmp	r3, #0
 1860 00ca 09D0     		beq	.L104
 1861              		.loc 1 335 0 discriminator 2
 1862 00cc 104B     		ldr	r3, .L106
 1863 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1864 00d0 002B     		cmp	r3, #0
 1865 00d2 05D1     		bne	.L104
 1866              		.loc 1 335 0 discriminator 3
 1867 00d4 0F4B     		ldr	r3, .L106+4
 1868 00d6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 40


 1869 00d8 002B     		cmp	r3, #0
 1870 00da 01D1     		bne	.L104
 336:main.c        ****         return LeftJunctionAfterTurn;
 1871              		.loc 1 336 0 is_stmt 1
 1872 00dc 0223     		movs	r3, #2
 1873 00de 12E0     		b	.L94
 1874              	.L104:
 337:main.c        ****     }else if (s3 && !s4 && !(s5 || s6)){
 1875              		.loc 1 337 0
 1876 00e0 0D4B     		ldr	r3, .L106+8
 1877 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1878 00e4 002B     		cmp	r3, #0
 1879 00e6 0DD0     		beq	.L105
 1880              		.loc 1 337 0 is_stmt 0 discriminator 1
 1881 00e8 0C4B     		ldr	r3, .L106+12
 1882 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1883 00ec 002B     		cmp	r3, #0
 1884 00ee 09D1     		bne	.L105
 1885              		.loc 1 337 0 discriminator 2
 1886 00f0 074B     		ldr	r3, .L106
 1887 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1888 00f4 002B     		cmp	r3, #0
 1889 00f6 05D1     		bne	.L105
 1890              		.loc 1 337 0 discriminator 3
 1891 00f8 064B     		ldr	r3, .L106+4
 1892 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1893 00fc 002B     		cmp	r3, #0
 1894 00fe 01D1     		bne	.L105
 338:main.c        ****         return RightJunctionAfterTurn;
 1895              		.loc 1 338 0 is_stmt 1
 1896 0100 0323     		movs	r3, #3
 1897 0102 00E0     		b	.L94
 1898              	.L105:
 339:main.c        ****     }else{
 340:main.c        ****         return Straight; 
 1899              		.loc 1 340 0
 1900 0104 0823     		movs	r3, #8
 1901              	.L94:
 341:main.c        ****     }
 342:main.c        **** }
 1902              		.loc 1 342 0
 1903 0106 1846     		mov	r0, r3
 1904 0108 BD46     		mov	sp, r7
 1905              		.cfi_def_cfa_register 13
 1906              		@ sp needed
 1907 010a 80BC     		pop	{r7}
 1908              		.cfi_restore 7
 1909              		.cfi_def_cfa_offset 0
 1910 010c 7047     		bx	lr
 1911              	.L107:
 1912 010e 00BF     		.align	2
 1913              	.L106:
 1914 0110 00000000 		.word	s5
 1915 0114 00000000 		.word	s6
 1916 0118 00000000 		.word	s3
 1917 011c 00000000 		.word	s4
 1918              		.cfi_endproc
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 41


 1919              	.LFE75:
 1920              		.size	GetJunctionType, .-GetJunctionType
 1921              		.section	.text.ConvertJunctionTypeToUpOrientation,"ax",%progbits
 1922              		.align	2
 1923              		.global	ConvertJunctionTypeToUpOrientation
 1924              		.thumb
 1925              		.thumb_func
 1926              		.type	ConvertJunctionTypeToUpOrientation, %function
 1927              	ConvertJunctionTypeToUpOrientation:
 1928              	.LFB76:
 343:main.c        **** 
 344:main.c        **** enum JunctionType ConvertJunctionTypeToUpOrientation(enum JunctionType junctionToConvert);
 345:main.c        **** 
 346:main.c        **** enum JunctionType ConvertJunctionTypeToUpOrientation(enum JunctionType junctionToConvert) {
 1929              		.loc 1 346 0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 8
 1932              		@ frame_needed = 1, uses_anonymous_args = 0
 1933              		@ link register save eliminated.
 1934 0000 80B4     		push	{r7}
 1935              		.cfi_def_cfa_offset 4
 1936              		.cfi_offset 7, -4
 1937 0002 83B0     		sub	sp, sp, #12
 1938              		.cfi_def_cfa_offset 16
 1939 0004 00AF     		add	r7, sp, #0
 1940              		.cfi_def_cfa_register 7
 1941 0006 0346     		mov	r3, r0
 1942 0008 FB71     		strb	r3, [r7, #7]
 347:main.c        ****         switch (currentOrientation) {
 1943              		.loc 1 347 0
 1944 000a 4F4B     		ldr	r3, .L154
 1945 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1946 000e 032B     		cmp	r3, #3
 1947 0010 00F28C80 		bhi	.L150
 1948 0014 01A2     		adr	r2, .L111
 1949 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1950 001a 00BF     		.p2align 2
 1951              	.L111:
 1952 001c 2D000000 		.word	.L110+1
 1953 0020 31000000 		.word	.L112+1
 1954 0024 85000000 		.word	.L113+1
 1955 0028 D9000000 		.word	.L114+1
 1956              		.p2align 1
 1957              	.L110:
 348:main.c        ****         case Up:
 349:main.c        ****             return junctionToConvert;
 1958              		.loc 1 349 0
 1959 002c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1960 002e 85E0     		b	.L115
 1961              	.L112:
 350:main.c        ****             break;
 351:main.c        ****         case Down:
 352:main.c        ****             switch (junctionToConvert) {
 1962              		.loc 1 352 0
 1963 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1964 0032 082B     		cmp	r3, #8
 1965 0034 7CD8     		bhi	.L151
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 42


 1966 0036 01A2     		adr	r2, .L118
 1967 0038 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1968              		.p2align 2
 1969              	.L118:
 1970 003c 61000000 		.word	.L117+1
 1971 0040 65000000 		.word	.L119+1
 1972 0044 79000000 		.word	.L120+1
 1973 0048 7D000000 		.word	.L121+1
 1974 004c 69000000 		.word	.L122+1
 1975 0050 6D000000 		.word	.L123+1
 1976 0054 71000000 		.word	.L124+1
 1977 0058 75000000 		.word	.L125+1
 1978 005c 81000000 		.word	.L126+1
 1979              		.p2align 1
 1980              	.L117:
 353:main.c        ****                 // {LeftJunction, RightJunction, BranchLeft, BranchRight, TIntersection, InvertedTI
 354:main.c        ****                 case LeftJunction:
 355:main.c        ****                     return RightJunctionAfterTurn; // correct
 1981              		.loc 1 355 0
 1982 0060 0323     		movs	r3, #3
 1983 0062 6BE0     		b	.L115
 1984              	.L119:
 356:main.c        ****                     break;
 357:main.c        ****                 case RightJunction:
 358:main.c        ****                     return LeftJunctionAfterTurn; // correct
 1985              		.loc 1 358 0
 1986 0064 0223     		movs	r3, #2
 1987 0066 69E0     		b	.L115
 1988              	.L122:
 359:main.c        ****                     break;
 360:main.c        ****                 case BranchLeft:
 361:main.c        ****                     return BranchRight; // correct
 1989              		.loc 1 361 0
 1990 0068 0523     		movs	r3, #5
 1991 006a 67E0     		b	.L115
 1992              	.L123:
 362:main.c        ****                     break;
 363:main.c        ****                 case BranchRight:
 364:main.c        ****                     return BranchLeft; // correct
 1993              		.loc 1 364 0
 1994 006c 0423     		movs	r3, #4
 1995 006e 65E0     		b	.L115
 1996              	.L124:
 365:main.c        ****                     break;
 366:main.c        ****                 case TIntersection:
 367:main.c        ****                     return InvertedTIntersection; // correct
 1997              		.loc 1 367 0
 1998 0070 0723     		movs	r3, #7
 1999 0072 63E0     		b	.L115
 2000              	.L125:
 368:main.c        ****                     break;
 369:main.c        ****                 case InvertedTIntersection:
 370:main.c        ****                     return TIntersection; // correct
 2001              		.loc 1 370 0
 2002 0074 0623     		movs	r3, #6
 2003 0076 61E0     		b	.L115
 2004              	.L120:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 43


 371:main.c        ****                     break;
 372:main.c        ****                 case LeftJunctionAfterTurn:
 373:main.c        ****                     return RightJunction; // correct
 2005              		.loc 1 373 0
 2006 0078 0123     		movs	r3, #1
 2007 007a 5FE0     		b	.L115
 2008              	.L121:
 374:main.c        ****                     break;
 375:main.c        ****                 case RightJunctionAfterTurn:
 376:main.c        ****                     return LeftJunction; // correct
 2009              		.loc 1 376 0
 2010 007c 0023     		movs	r3, #0
 2011 007e 5DE0     		b	.L115
 2012              	.L126:
 377:main.c        ****                     break;
 378:main.c        ****                 case Straight:
 379:main.c        ****                     return junctionToConvert;
 2013              		.loc 1 379 0
 2014 0080 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2015 0082 5BE0     		b	.L115
 2016              	.L113:
 380:main.c        ****                     break;
 381:main.c        ****             }
 382:main.c        ****             break;
 383:main.c        ****         case Left:
 384:main.c        ****             switch (junctionToConvert) {
 2017              		.loc 1 384 0
 2018 0084 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2019 0086 082B     		cmp	r3, #8
 2020 0088 54D8     		bhi	.L152
 2021 008a 01A2     		adr	r2, .L130
 2022 008c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2023              		.p2align 2
 2024              	.L130:
 2025 0090 B5000000 		.word	.L129+1
 2026 0094 B9000000 		.word	.L131+1
 2027 0098 CD000000 		.word	.L132+1
 2028 009c D1000000 		.word	.L133+1
 2029 00a0 BD000000 		.word	.L134+1
 2030 00a4 C1000000 		.word	.L135+1
 2031 00a8 C5000000 		.word	.L136+1
 2032 00ac C9000000 		.word	.L137+1
 2033 00b0 D5000000 		.word	.L138+1
 2034              		.p2align 1
 2035              	.L129:
 385:main.c        ****                 // {LeftJunction, RightJunction, BranchLeft, BranchRight, TIntersection, InvertedTI
 386:main.c        ****                 case LeftJunction:
 387:main.c        ****                     return RightJunction; // correct
 2036              		.loc 1 387 0
 2037 00b4 0123     		movs	r3, #1
 2038 00b6 41E0     		b	.L115
 2039              	.L131:
 388:main.c        ****                     break;
 389:main.c        ****                 case RightJunction:
 390:main.c        ****                     return RightJunctionAfterTurn; // correct
 2040              		.loc 1 390 0
 2041 00b8 0323     		movs	r3, #3
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 44


 2042 00ba 3FE0     		b	.L115
 2043              	.L134:
 391:main.c        ****                     break;
 392:main.c        ****                 case BranchLeft:
 393:main.c        ****                     return TIntersection; // correct
 2044              		.loc 1 393 0
 2045 00bc 0623     		movs	r3, #6
 2046 00be 3DE0     		b	.L115
 2047              	.L135:
 394:main.c        ****                     break;
 395:main.c        ****                 case BranchRight:
 396:main.c        ****                     return InvertedTIntersection; // correct
 2048              		.loc 1 396 0
 2049 00c0 0723     		movs	r3, #7
 2050 00c2 3BE0     		b	.L115
 2051              	.L136:
 397:main.c        ****                     break;
 398:main.c        ****                 case TIntersection:
 399:main.c        ****                     return BranchRight; // corrrect
 2052              		.loc 1 399 0
 2053 00c4 0523     		movs	r3, #5
 2054 00c6 39E0     		b	.L115
 2055              	.L137:
 400:main.c        ****                     break;
 401:main.c        ****                 case InvertedTIntersection:
 402:main.c        ****                     return BranchLeft; // correct
 2056              		.loc 1 402 0
 2057 00c8 0423     		movs	r3, #4
 2058 00ca 37E0     		b	.L115
 2059              	.L132:
 403:main.c        ****                     break;
 404:main.c        ****                 case LeftJunctionAfterTurn:
 405:main.c        ****                     return LeftJunction; // correct
 2060              		.loc 1 405 0
 2061 00cc 0023     		movs	r3, #0
 2062 00ce 35E0     		b	.L115
 2063              	.L133:
 406:main.c        ****                     break;
 407:main.c        ****                 case RightJunctionAfterTurn:
 408:main.c        ****                     return LeftJunctionAfterTurn; // correct
 2064              		.loc 1 408 0
 2065 00d0 0223     		movs	r3, #2
 2066 00d2 33E0     		b	.L115
 2067              	.L138:
 409:main.c        ****                     break;
 410:main.c        ****                 case Straight:
 411:main.c        ****                     return junctionToConvert;
 2068              		.loc 1 411 0
 2069 00d4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2070 00d6 31E0     		b	.L115
 2071              	.L114:
 412:main.c        ****                     break;
 413:main.c        ****             }
 414:main.c        ****             break;
 415:main.c        ****         case Right:
 416:main.c        ****             switch (junctionToConvert) {
 2072              		.loc 1 416 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 45


 2073 00d8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2074 00da 082B     		cmp	r3, #8
 2075 00dc 2CD8     		bhi	.L153
 2076 00de 01A2     		adr	r2, .L141
 2077 00e0 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2078              		.p2align 2
 2079              	.L141:
 2080 00e4 09010000 		.word	.L140+1
 2081 00e8 0D010000 		.word	.L142+1
 2082 00ec 21010000 		.word	.L143+1
 2083 00f0 25010000 		.word	.L144+1
 2084 00f4 11010000 		.word	.L145+1
 2085 00f8 15010000 		.word	.L146+1
 2086 00fc 19010000 		.word	.L147+1
 2087 0100 1D010000 		.word	.L148+1
 2088 0104 29010000 		.word	.L149+1
 2089              		.p2align 1
 2090              	.L140:
 417:main.c        ****                 // {LeftJunction, RightJunction, BranchLeft, BranchRight, TIntersection, InvertedTI
 418:main.c        ****                 case LeftJunction:
 419:main.c        ****                     return LeftJunctionAfterTurn; // correct
 2091              		.loc 1 419 0
 2092 0108 0223     		movs	r3, #2
 2093 010a 17E0     		b	.L115
 2094              	.L142:
 420:main.c        ****                     break;
 421:main.c        ****                 case RightJunction:
 422:main.c        ****                     return LeftJunction; // correct
 2095              		.loc 1 422 0
 2096 010c 0023     		movs	r3, #0
 2097 010e 15E0     		b	.L115
 2098              	.L145:
 423:main.c        ****                     break;
 424:main.c        ****                 case BranchLeft:
 425:main.c        ****                     return InvertedTIntersection; // correct
 2099              		.loc 1 425 0
 2100 0110 0723     		movs	r3, #7
 2101 0112 13E0     		b	.L115
 2102              	.L146:
 426:main.c        ****                     break;
 427:main.c        ****                 case BranchRight:
 428:main.c        ****                     return TIntersection; // correct
 2103              		.loc 1 428 0
 2104 0114 0623     		movs	r3, #6
 2105 0116 11E0     		b	.L115
 2106              	.L147:
 429:main.c        ****                     break;
 430:main.c        ****                 case TIntersection:
 431:main.c        ****                     return BranchLeft; // correct
 2107              		.loc 1 431 0
 2108 0118 0423     		movs	r3, #4
 2109 011a 0FE0     		b	.L115
 2110              	.L148:
 432:main.c        ****                     break;
 433:main.c        ****                 case InvertedTIntersection:
 434:main.c        ****                     return BranchRight; // correct
 2111              		.loc 1 434 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 46


 2112 011c 0523     		movs	r3, #5
 2113 011e 0DE0     		b	.L115
 2114              	.L143:
 435:main.c        ****                     break;
 436:main.c        ****                 case LeftJunctionAfterTurn:
 437:main.c        ****                     return RightJunctionAfterTurn; // correct
 2115              		.loc 1 437 0
 2116 0120 0323     		movs	r3, #3
 2117 0122 0BE0     		b	.L115
 2118              	.L144:
 438:main.c        ****                     break;
 439:main.c        ****                 case RightJunctionAfterTurn:
 440:main.c        ****                     return RightJunction; // correct
 2119              		.loc 1 440 0
 2120 0124 0123     		movs	r3, #1
 2121 0126 09E0     		b	.L115
 2122              	.L149:
 441:main.c        ****                     break;
 442:main.c        ****                 case Straight:
 443:main.c        ****                     return junctionToConvert;
 2123              		.loc 1 443 0
 2124 0128 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2125 012a 07E0     		b	.L115
 2126              	.L150:
 444:main.c        ****                     break;
 445:main.c        ****             }
 446:main.c        ****             break;
 447:main.c        ****         default:
 448:main.c        ****             break;
 2127              		.loc 1 448 0
 2128 012c 00BF     		nop
 2129 012e 04E0     		b	.L127
 2130              	.L151:
 382:main.c        ****         case Left:
 2131              		.loc 1 382 0
 2132 0130 00BF     		nop
 2133 0132 02E0     		b	.L127
 2134              	.L152:
 414:main.c        ****         case Right:
 2135              		.loc 1 414 0
 2136 0134 00BF     		nop
 2137 0136 00E0     		b	.L127
 2138              	.L153:
 446:main.c        ****         default:
 2139              		.loc 1 446 0
 2140 0138 00BF     		nop
 2141              	.L127:
 449:main.c        ****     }
 450:main.c        ****     return junctionToConvert;
 2142              		.loc 1 450 0
 2143 013a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2144              	.L115:
 451:main.c        **** }
 2145              		.loc 1 451 0
 2146 013c 1846     		mov	r0, r3
 2147 013e 0C37     		adds	r7, r7, #12
 2148              		.cfi_def_cfa_offset 4
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 47


 2149 0140 BD46     		mov	sp, r7
 2150              		.cfi_def_cfa_register 13
 2151              		@ sp needed
 2152 0142 80BC     		pop	{r7}
 2153              		.cfi_restore 7
 2154              		.cfi_def_cfa_offset 0
 2155 0144 7047     		bx	lr
 2156              	.L155:
 2157 0146 00BF     		.align	2
 2158              	.L154:
 2159 0148 00000000 		.word	currentOrientation
 2160              		.cfi_endproc
 2161              	.LFE76:
 2162              		.size	ConvertJunctionTypeToUpOrientation, .-ConvertJunctionTypeToUpOrientation
 2163              		.section	.text.CheckIfJunctionExistsAtRowCol,"ax",%progbits
 2164              		.align	2
 2165              		.global	CheckIfJunctionExistsAtRowCol
 2166              		.thumb
 2167              		.thumb_func
 2168              		.type	CheckIfJunctionExistsAtRowCol, %function
 2169              	CheckIfJunctionExistsAtRowCol:
 2170              	.LFB77:
 452:main.c        **** 
 453:main.c        **** uint8 CheckIfJunctionExistsAtRowCol(enum JunctionType junctionToCheck, uint8 rowToCheck, uint8 colT
 454:main.c        **** uint8 CheckIfJunctionExistsAtRowCol(enum JunctionType junctionToCheck, uint8 rowToCheck, uint8 colT
 2171              		.loc 1 454 0
 2172              		.cfi_startproc
 2173              		@ args = 0, pretend = 0, frame = 8
 2174              		@ frame_needed = 1, uses_anonymous_args = 0
 2175              		@ link register save eliminated.
 2176 0000 80B4     		push	{r7}
 2177              		.cfi_def_cfa_offset 4
 2178              		.cfi_offset 7, -4
 2179 0002 83B0     		sub	sp, sp, #12
 2180              		.cfi_def_cfa_offset 16
 2181 0004 00AF     		add	r7, sp, #0
 2182              		.cfi_def_cfa_register 7
 2183 0006 0346     		mov	r3, r0
 2184 0008 FB71     		strb	r3, [r7, #7]
 2185 000a 0B46     		mov	r3, r1
 2186 000c BB71     		strb	r3, [r7, #6]
 2187 000e 1346     		mov	r3, r2
 2188 0010 7B71     		strb	r3, [r7, #5]
 455:main.c        ****     // 1 for true, 0 for false, -1 for no conditions fulfilled
 456:main.c        ****     // node to check is at map[rowToCheck][colToCheck]
 457:main.c        ****     // 0 = path, 1 = wall, 7 = start, 8 = optimal path, 9 = target
 458:main.c        ****     // ASSUMING THAT THE JUCNTIONTYPE GIVEN IS RELATIVE TO UP ORIENTATION!!!!!!!!
 459:main.c        ****     // ALSO ASSUMING THAT JUNCTION TYPE GIVEN IS ACCURATE
 460:main.c        ****         // WITHOUT BACK SENSORS, THE JUNCTION TYPE GIVEN COULD BE INACCURATE
 461:main.c        ****     switch (junctionToCheck) {
 2189              		.loc 1 461 0
 2190 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2191 0014 082B     		cmp	r3, #8
 2192 0016 00F26D82 		bhi	.L157
 2193 001a 01A2     		adr	r2, .L159
 2194 001c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2195              		.p2align 2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 48


 2196              	.L159:
 2197 0020 45000000 		.word	.L158+1
 2198 0024 BD000000 		.word	.L160+1
 2199 0028 19030000 		.word	.L161+1
 2200 002c 91030000 		.word	.L162+1
 2201 0030 35010000 		.word	.L163+1
 2202 0034 AD010000 		.word	.L164+1
 2203 0038 25020000 		.word	.L165+1
 2204 003c 9D020000 		.word	.L166+1
 2205 0040 09040000 		.word	.L167+1
 2206              		.p2align 1
 2207              	.L158:
 462:main.c        ****             case LeftJunction:
 463:main.c        ****                 // Check UP if is WALL
 464:main.c        ****                 // Check DOWN if is NOT WALL
 465:main.c        ****                 // Check LEFT if is NOT WALL
 466:main.c        ****                 // Check RIGHT if is WALL
 467:main.c        ****                 if (map[rowToCheck - 1][colToCheck] == 0 && 
 2208              		.loc 1 467 0
 2209 0044 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2210 0046 5A1E     		subs	r2, r3, #1
 2211 0048 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2212 004a B248     		ldr	r0, .L179
 2213 004c 1346     		mov	r3, r2
 2214 004e DB00     		lsls	r3, r3, #3
 2215 0050 1344     		add	r3, r3, r2
 2216 0052 5B00     		lsls	r3, r3, #1
 2217 0054 1344     		add	r3, r3, r2
 2218 0056 0B44     		add	r3, r3, r1
 2219 0058 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2220 005c 002B     		cmp	r3, #0
 2221 005e 2BD1     		bne	.L168
 468:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2222              		.loc 1 468 0 discriminator 1
 2223 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2224 0062 5A1C     		adds	r2, r3, #1
 2225 0064 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2226 0066 AB48     		ldr	r0, .L179
 2227 0068 1346     		mov	r3, r2
 2228 006a DB00     		lsls	r3, r3, #3
 2229 006c 1344     		add	r3, r3, r2
 2230 006e 5B00     		lsls	r3, r3, #1
 2231 0070 1344     		add	r3, r3, r2
 2232 0072 0B44     		add	r3, r3, r1
 2233 0074 50F82330 		ldr	r3, [r0, r3, lsl #2]
 467:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2234              		.loc 1 467 0 discriminator 1
 2235 0078 002B     		cmp	r3, #0
 2236 007a 1DD0     		beq	.L168
 469:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2237              		.loc 1 469 0
 2238 007c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2239 007e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2240 0080 591E     		subs	r1, r3, #1
 2241 0082 A448     		ldr	r0, .L179
 2242 0084 1346     		mov	r3, r2
 2243 0086 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 49


 2244 0088 1344     		add	r3, r3, r2
 2245 008a 5B00     		lsls	r3, r3, #1
 2246 008c 1344     		add	r3, r3, r2
 2247 008e 0B44     		add	r3, r3, r1
 2248 0090 50F82330 		ldr	r3, [r0, r3, lsl #2]
 468:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2249              		.loc 1 468 0
 2250 0094 002B     		cmp	r3, #0
 2251 0096 0FD0     		beq	.L168
 470:main.c        ****                     map[rowToCheck][colToCheck + 1] == 0) {
 2252              		.loc 1 470 0
 2253 0098 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2254 009a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2255 009c 591C     		adds	r1, r3, #1
 2256 009e 9D48     		ldr	r0, .L179
 2257 00a0 1346     		mov	r3, r2
 2258 00a2 DB00     		lsls	r3, r3, #3
 2259 00a4 1344     		add	r3, r3, r2
 2260 00a6 5B00     		lsls	r3, r3, #1
 2261 00a8 1344     		add	r3, r3, r2
 2262 00aa 0B44     		add	r3, r3, r1
 2263 00ac 50F82330 		ldr	r3, [r0, r3, lsl #2]
 469:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2264              		.loc 1 469 0
 2265 00b0 002B     		cmp	r3, #0
 2266 00b2 01D1     		bne	.L168
 471:main.c        ****                     return 1; // Junction aligns with robot position
 2267              		.loc 1 471 0
 2268 00b4 0123     		movs	r3, #1
 2269 00b6 1EE2     		b	.L169
 2270              	.L168:
 472:main.c        ****                 }
 473:main.c        ****                 return 0; // Junction does NOT align with robot position
 2271              		.loc 1 473 0
 2272 00b8 0023     		movs	r3, #0
 2273 00ba 1CE2     		b	.L169
 2274              	.L160:
 474:main.c        ****                 break;
 475:main.c        ****             case RightJunction:
 476:main.c        ****                 // Check UP if is WALL
 477:main.c        ****                 // Check DOWN if is NOT WALL
 478:main.c        ****                 // Check LEFT if is WALL
 479:main.c        ****                 // Check RIGHT if is NOT WALL
 480:main.c        ****                 if (map[rowToCheck - 1][colToCheck] == 0 &&
 2275              		.loc 1 480 0
 2276 00bc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2277 00be 5A1E     		subs	r2, r3, #1
 2278 00c0 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2279 00c2 9448     		ldr	r0, .L179
 2280 00c4 1346     		mov	r3, r2
 2281 00c6 DB00     		lsls	r3, r3, #3
 2282 00c8 1344     		add	r3, r3, r2
 2283 00ca 5B00     		lsls	r3, r3, #1
 2284 00cc 1344     		add	r3, r3, r2
 2285 00ce 0B44     		add	r3, r3, r1
 2286 00d0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2287 00d4 002B     		cmp	r3, #0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 50


 2288 00d6 2BD1     		bne	.L170
 481:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2289              		.loc 1 481 0 discriminator 1
 2290 00d8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2291 00da 5A1C     		adds	r2, r3, #1
 2292 00dc 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2293 00de 8D48     		ldr	r0, .L179
 2294 00e0 1346     		mov	r3, r2
 2295 00e2 DB00     		lsls	r3, r3, #3
 2296 00e4 1344     		add	r3, r3, r2
 2297 00e6 5B00     		lsls	r3, r3, #1
 2298 00e8 1344     		add	r3, r3, r2
 2299 00ea 0B44     		add	r3, r3, r1
 2300 00ec 50F82330 		ldr	r3, [r0, r3, lsl #2]
 480:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2301              		.loc 1 480 0 discriminator 1
 2302 00f0 002B     		cmp	r3, #0
 2303 00f2 1DD0     		beq	.L170
 482:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2304              		.loc 1 482 0
 2305 00f4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2306 00f6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2307 00f8 591E     		subs	r1, r3, #1
 2308 00fa 8648     		ldr	r0, .L179
 2309 00fc 1346     		mov	r3, r2
 2310 00fe DB00     		lsls	r3, r3, #3
 2311 0100 1344     		add	r3, r3, r2
 2312 0102 5B00     		lsls	r3, r3, #1
 2313 0104 1344     		add	r3, r3, r2
 2314 0106 0B44     		add	r3, r3, r1
 2315 0108 50F82330 		ldr	r3, [r0, r3, lsl #2]
 481:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2316              		.loc 1 481 0
 2317 010c 002B     		cmp	r3, #0
 2318 010e 0FD1     		bne	.L170
 483:main.c        ****                     map[rowToCheck][colToCheck + 1] != 0) {
 2319              		.loc 1 483 0
 2320 0110 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2321 0112 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2322 0114 591C     		adds	r1, r3, #1
 2323 0116 7F48     		ldr	r0, .L179
 2324 0118 1346     		mov	r3, r2
 2325 011a DB00     		lsls	r3, r3, #3
 2326 011c 1344     		add	r3, r3, r2
 2327 011e 5B00     		lsls	r3, r3, #1
 2328 0120 1344     		add	r3, r3, r2
 2329 0122 0B44     		add	r3, r3, r1
 2330 0124 50F82330 		ldr	r3, [r0, r3, lsl #2]
 482:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2331              		.loc 1 482 0
 2332 0128 002B     		cmp	r3, #0
 2333 012a 01D0     		beq	.L170
 484:main.c        ****                     return 1; // Junction aligns with robot position
 2334              		.loc 1 484 0
 2335 012c 0123     		movs	r3, #1
 2336 012e E2E1     		b	.L169
 2337              	.L170:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 51


 485:main.c        ****                 }
 486:main.c        ****                 return 0; // Junction does NOT align with robot position                
 2338              		.loc 1 486 0
 2339 0130 0023     		movs	r3, #0
 2340 0132 E0E1     		b	.L169
 2341              	.L163:
 487:main.c        ****                 break;
 488:main.c        ****             case BranchLeft:
 489:main.c        ****                 // Check UP if is NOT WALL
 490:main.c        ****                 // Check DOWN if is NOT WALL
 491:main.c        ****                 // Check LEFT if is NOT WALL
 492:main.c        ****                 // Check RIGHT if is WALL
 493:main.c        ****                 if (map[rowToCheck - 1][colToCheck] != 0 && 
 2342              		.loc 1 493 0
 2343 0134 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2344 0136 5A1E     		subs	r2, r3, #1
 2345 0138 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2346 013a 7648     		ldr	r0, .L179
 2347 013c 1346     		mov	r3, r2
 2348 013e DB00     		lsls	r3, r3, #3
 2349 0140 1344     		add	r3, r3, r2
 2350 0142 5B00     		lsls	r3, r3, #1
 2351 0144 1344     		add	r3, r3, r2
 2352 0146 0B44     		add	r3, r3, r1
 2353 0148 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2354 014c 002B     		cmp	r3, #0
 2355 014e 2BD0     		beq	.L171
 494:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2356              		.loc 1 494 0 discriminator 1
 2357 0150 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2358 0152 5A1C     		adds	r2, r3, #1
 2359 0154 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2360 0156 6F48     		ldr	r0, .L179
 2361 0158 1346     		mov	r3, r2
 2362 015a DB00     		lsls	r3, r3, #3
 2363 015c 1344     		add	r3, r3, r2
 2364 015e 5B00     		lsls	r3, r3, #1
 2365 0160 1344     		add	r3, r3, r2
 2366 0162 0B44     		add	r3, r3, r1
 2367 0164 50F82330 		ldr	r3, [r0, r3, lsl #2]
 493:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2368              		.loc 1 493 0 discriminator 1
 2369 0168 002B     		cmp	r3, #0
 2370 016a 1DD0     		beq	.L171
 495:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2371              		.loc 1 495 0
 2372 016c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2373 016e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2374 0170 591E     		subs	r1, r3, #1
 2375 0172 6848     		ldr	r0, .L179
 2376 0174 1346     		mov	r3, r2
 2377 0176 DB00     		lsls	r3, r3, #3
 2378 0178 1344     		add	r3, r3, r2
 2379 017a 5B00     		lsls	r3, r3, #1
 2380 017c 1344     		add	r3, r3, r2
 2381 017e 0B44     		add	r3, r3, r1
 2382 0180 50F82330 		ldr	r3, [r0, r3, lsl #2]
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 52


 494:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2383              		.loc 1 494 0
 2384 0184 002B     		cmp	r3, #0
 2385 0186 0FD0     		beq	.L171
 496:main.c        ****                     map[rowToCheck][colToCheck + 1] == 0) {
 2386              		.loc 1 496 0
 2387 0188 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2388 018a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2389 018c 591C     		adds	r1, r3, #1
 2390 018e 6148     		ldr	r0, .L179
 2391 0190 1346     		mov	r3, r2
 2392 0192 DB00     		lsls	r3, r3, #3
 2393 0194 1344     		add	r3, r3, r2
 2394 0196 5B00     		lsls	r3, r3, #1
 2395 0198 1344     		add	r3, r3, r2
 2396 019a 0B44     		add	r3, r3, r1
 2397 019c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 495:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2398              		.loc 1 495 0
 2399 01a0 002B     		cmp	r3, #0
 2400 01a2 01D1     		bne	.L171
 497:main.c        ****                     return 1; // Junction aligns with robot position
 2401              		.loc 1 497 0
 2402 01a4 0123     		movs	r3, #1
 2403 01a6 A6E1     		b	.L169
 2404              	.L171:
 498:main.c        ****                 }
 499:main.c        ****                 return 0; // Junction does NOT align with robot position
 2405              		.loc 1 499 0
 2406 01a8 0023     		movs	r3, #0
 2407 01aa A4E1     		b	.L169
 2408              	.L164:
 500:main.c        ****                 break;
 501:main.c        ****             case BranchRight:
 502:main.c        ****                 // Check UP if is NOT WALL
 503:main.c        ****                 // Check DOWN if is NOT WALL
 504:main.c        ****                 // Check LEFT if is WALL
 505:main.c        ****                 // Check RIGHT if is NOT WALL
 506:main.c        ****                 if (map[rowToCheck - 1][colToCheck] != 0 && 
 2409              		.loc 1 506 0
 2410 01ac BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2411 01ae 5A1E     		subs	r2, r3, #1
 2412 01b0 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2413 01b2 5848     		ldr	r0, .L179
 2414 01b4 1346     		mov	r3, r2
 2415 01b6 DB00     		lsls	r3, r3, #3
 2416 01b8 1344     		add	r3, r3, r2
 2417 01ba 5B00     		lsls	r3, r3, #1
 2418 01bc 1344     		add	r3, r3, r2
 2419 01be 0B44     		add	r3, r3, r1
 2420 01c0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2421 01c4 002B     		cmp	r3, #0
 2422 01c6 2BD0     		beq	.L172
 507:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2423              		.loc 1 507 0 discriminator 1
 2424 01c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2425 01ca 5A1C     		adds	r2, r3, #1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 53


 2426 01cc 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2427 01ce 5148     		ldr	r0, .L179
 2428 01d0 1346     		mov	r3, r2
 2429 01d2 DB00     		lsls	r3, r3, #3
 2430 01d4 1344     		add	r3, r3, r2
 2431 01d6 5B00     		lsls	r3, r3, #1
 2432 01d8 1344     		add	r3, r3, r2
 2433 01da 0B44     		add	r3, r3, r1
 2434 01dc 50F82330 		ldr	r3, [r0, r3, lsl #2]
 506:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2435              		.loc 1 506 0 discriminator 1
 2436 01e0 002B     		cmp	r3, #0
 2437 01e2 1DD0     		beq	.L172
 508:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2438              		.loc 1 508 0
 2439 01e4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2440 01e6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2441 01e8 591E     		subs	r1, r3, #1
 2442 01ea 4A48     		ldr	r0, .L179
 2443 01ec 1346     		mov	r3, r2
 2444 01ee DB00     		lsls	r3, r3, #3
 2445 01f0 1344     		add	r3, r3, r2
 2446 01f2 5B00     		lsls	r3, r3, #1
 2447 01f4 1344     		add	r3, r3, r2
 2448 01f6 0B44     		add	r3, r3, r1
 2449 01f8 50F82330 		ldr	r3, [r0, r3, lsl #2]
 507:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2450              		.loc 1 507 0
 2451 01fc 002B     		cmp	r3, #0
 2452 01fe 0FD1     		bne	.L172
 509:main.c        ****                     map[rowToCheck][colToCheck + 1] != 0) {
 2453              		.loc 1 509 0
 2454 0200 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2455 0202 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2456 0204 591C     		adds	r1, r3, #1
 2457 0206 4348     		ldr	r0, .L179
 2458 0208 1346     		mov	r3, r2
 2459 020a DB00     		lsls	r3, r3, #3
 2460 020c 1344     		add	r3, r3, r2
 2461 020e 5B00     		lsls	r3, r3, #1
 2462 0210 1344     		add	r3, r3, r2
 2463 0212 0B44     		add	r3, r3, r1
 2464 0214 50F82330 		ldr	r3, [r0, r3, lsl #2]
 508:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2465              		.loc 1 508 0
 2466 0218 002B     		cmp	r3, #0
 2467 021a 01D0     		beq	.L172
 510:main.c        ****                     return 1; // Junction aligns with robot position
 2468              		.loc 1 510 0
 2469 021c 0123     		movs	r3, #1
 2470 021e 6AE1     		b	.L169
 2471              	.L172:
 511:main.c        ****                 }
 512:main.c        ****                 return 0; // Junction does NOT align with robot position
 2472              		.loc 1 512 0
 2473 0220 0023     		movs	r3, #0
 2474 0222 68E1     		b	.L169
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 54


 2475              	.L165:
 513:main.c        ****                 break;
 514:main.c        ****             case TIntersection:
 515:main.c        ****                 // Check UP if is WALL
 516:main.c        ****                 // Check DOWN if is NOT WALL
 517:main.c        ****                 // Check LEFT if is NOT WALL
 518:main.c        ****                 // Check RIGHT if is NOT WALL
 519:main.c        ****                 if (map[rowToCheck - 1][colToCheck] == 0 && 
 2476              		.loc 1 519 0
 2477 0224 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2478 0226 5A1E     		subs	r2, r3, #1
 2479 0228 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2480 022a 3A48     		ldr	r0, .L179
 2481 022c 1346     		mov	r3, r2
 2482 022e DB00     		lsls	r3, r3, #3
 2483 0230 1344     		add	r3, r3, r2
 2484 0232 5B00     		lsls	r3, r3, #1
 2485 0234 1344     		add	r3, r3, r2
 2486 0236 0B44     		add	r3, r3, r1
 2487 0238 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2488 023c 002B     		cmp	r3, #0
 2489 023e 2BD1     		bne	.L173
 520:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2490              		.loc 1 520 0 discriminator 1
 2491 0240 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2492 0242 5A1C     		adds	r2, r3, #1
 2493 0244 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2494 0246 3348     		ldr	r0, .L179
 2495 0248 1346     		mov	r3, r2
 2496 024a DB00     		lsls	r3, r3, #3
 2497 024c 1344     		add	r3, r3, r2
 2498 024e 5B00     		lsls	r3, r3, #1
 2499 0250 1344     		add	r3, r3, r2
 2500 0252 0B44     		add	r3, r3, r1
 2501 0254 50F82330 		ldr	r3, [r0, r3, lsl #2]
 519:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2502              		.loc 1 519 0 discriminator 1
 2503 0258 002B     		cmp	r3, #0
 2504 025a 1DD0     		beq	.L173
 521:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2505              		.loc 1 521 0
 2506 025c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2507 025e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2508 0260 591E     		subs	r1, r3, #1
 2509 0262 2C48     		ldr	r0, .L179
 2510 0264 1346     		mov	r3, r2
 2511 0266 DB00     		lsls	r3, r3, #3
 2512 0268 1344     		add	r3, r3, r2
 2513 026a 5B00     		lsls	r3, r3, #1
 2514 026c 1344     		add	r3, r3, r2
 2515 026e 0B44     		add	r3, r3, r1
 2516 0270 50F82330 		ldr	r3, [r0, r3, lsl #2]
 520:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2517              		.loc 1 520 0
 2518 0274 002B     		cmp	r3, #0
 2519 0276 0FD0     		beq	.L173
 522:main.c        ****                     map[rowToCheck][colToCheck + 1] != 0) {
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 55


 2520              		.loc 1 522 0
 2521 0278 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2522 027a 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2523 027c 591C     		adds	r1, r3, #1
 2524 027e 2548     		ldr	r0, .L179
 2525 0280 1346     		mov	r3, r2
 2526 0282 DB00     		lsls	r3, r3, #3
 2527 0284 1344     		add	r3, r3, r2
 2528 0286 5B00     		lsls	r3, r3, #1
 2529 0288 1344     		add	r3, r3, r2
 2530 028a 0B44     		add	r3, r3, r1
 2531 028c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 521:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2532              		.loc 1 521 0
 2533 0290 002B     		cmp	r3, #0
 2534 0292 01D0     		beq	.L173
 523:main.c        ****                     return 1; // Junction aligns with robot position
 2535              		.loc 1 523 0
 2536 0294 0123     		movs	r3, #1
 2537 0296 2EE1     		b	.L169
 2538              	.L173:
 524:main.c        ****                 }
 525:main.c        ****                 return 0; // Junction does NOT align with robot 
 2539              		.loc 1 525 0
 2540 0298 0023     		movs	r3, #0
 2541 029a 2CE1     		b	.L169
 2542              	.L166:
 526:main.c        ****                 break;
 527:main.c        ****             case InvertedTIntersection:
 528:main.c        ****                 // At an inverted T intersection, we might also be at a fourway intersection, so ch
 529:main.c        ****                 // Check UP if is NOT WALL
 530:main.c        ****                 // Check DOWN if is WALL
 531:main.c        ****                 // Check LEFT if is NOT WALL
 532:main.c        ****                 // Check RIGHT if is NOT WALL
 533:main.c        ****                 if (map[rowToCheck - 1][colToCheck] != 0 && 
 2543              		.loc 1 533 0
 2544 029c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2545 029e 5A1E     		subs	r2, r3, #1
 2546 02a0 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2547 02a2 1C48     		ldr	r0, .L179
 2548 02a4 1346     		mov	r3, r2
 2549 02a6 DB00     		lsls	r3, r3, #3
 2550 02a8 1344     		add	r3, r3, r2
 2551 02aa 5B00     		lsls	r3, r3, #1
 2552 02ac 1344     		add	r3, r3, r2
 2553 02ae 0B44     		add	r3, r3, r1
 2554 02b0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2555 02b4 002B     		cmp	r3, #0
 2556 02b6 2BD0     		beq	.L174
 534:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2557              		.loc 1 534 0 discriminator 1
 2558 02b8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2559 02ba 5A1C     		adds	r2, r3, #1
 2560 02bc 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2561 02be 1548     		ldr	r0, .L179
 2562 02c0 1346     		mov	r3, r2
 2563 02c2 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 56


 2564 02c4 1344     		add	r3, r3, r2
 2565 02c6 5B00     		lsls	r3, r3, #1
 2566 02c8 1344     		add	r3, r3, r2
 2567 02ca 0B44     		add	r3, r3, r1
 2568 02cc 50F82330 		ldr	r3, [r0, r3, lsl #2]
 533:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2569              		.loc 1 533 0 discriminator 1
 2570 02d0 002B     		cmp	r3, #0
 2571 02d2 1DD1     		bne	.L174
 535:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2572              		.loc 1 535 0
 2573 02d4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2574 02d6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2575 02d8 591E     		subs	r1, r3, #1
 2576 02da 0E48     		ldr	r0, .L179
 2577 02dc 1346     		mov	r3, r2
 2578 02de DB00     		lsls	r3, r3, #3
 2579 02e0 1344     		add	r3, r3, r2
 2580 02e2 5B00     		lsls	r3, r3, #1
 2581 02e4 1344     		add	r3, r3, r2
 2582 02e6 0B44     		add	r3, r3, r1
 2583 02e8 50F82330 		ldr	r3, [r0, r3, lsl #2]
 534:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2584              		.loc 1 534 0
 2585 02ec 002B     		cmp	r3, #0
 2586 02ee 0FD0     		beq	.L174
 536:main.c        ****                     map[rowToCheck][colToCheck + 1] != 0) {
 2587              		.loc 1 536 0
 2588 02f0 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2589 02f2 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2590 02f4 591C     		adds	r1, r3, #1
 2591 02f6 0748     		ldr	r0, .L179
 2592 02f8 1346     		mov	r3, r2
 2593 02fa DB00     		lsls	r3, r3, #3
 2594 02fc 1344     		add	r3, r3, r2
 2595 02fe 5B00     		lsls	r3, r3, #1
 2596 0300 1344     		add	r3, r3, r2
 2597 0302 0B44     		add	r3, r3, r1
 2598 0304 50F82330 		ldr	r3, [r0, r3, lsl #2]
 535:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2599              		.loc 1 535 0
 2600 0308 002B     		cmp	r3, #0
 2601 030a 01D0     		beq	.L174
 537:main.c        ****                     return 1; // Junction aligns with robot position
 2602              		.loc 1 537 0
 2603 030c 0123     		movs	r3, #1
 2604 030e F2E0     		b	.L169
 2605              	.L174:
 538:main.c        ****                 }
 539:main.c        ****                 return 0; // Junction does NOT align with robot 
 2606              		.loc 1 539 0
 2607 0310 0023     		movs	r3, #0
 2608 0312 F0E0     		b	.L169
 2609              	.L180:
 2610              		.align	2
 2611              	.L179:
 2612 0314 00000000 		.word	map
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 57


 2613              	.L161:
 540:main.c        ****                 break;
 541:main.c        ****             case LeftJunctionAfterTurn:
 542:main.c        ****                 // Check UP if is NOT WALL
 543:main.c        ****                 // Check DOWN if is WALL
 544:main.c        ****                 // Check LEFT if is NOT WALL
 545:main.c        ****                 // Check RIGHT if is WALL
 546:main.c        ****                 if (map[rowToCheck - 1][colToCheck] != 0 && 
 2614              		.loc 1 546 0
 2615 0318 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2616 031a 5A1E     		subs	r2, r3, #1
 2617 031c 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2618 031e 7848     		ldr	r0, .L181
 2619 0320 1346     		mov	r3, r2
 2620 0322 DB00     		lsls	r3, r3, #3
 2621 0324 1344     		add	r3, r3, r2
 2622 0326 5B00     		lsls	r3, r3, #1
 2623 0328 1344     		add	r3, r3, r2
 2624 032a 0B44     		add	r3, r3, r1
 2625 032c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2626 0330 002B     		cmp	r3, #0
 2627 0332 2BD0     		beq	.L175
 547:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2628              		.loc 1 547 0 discriminator 1
 2629 0334 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2630 0336 5A1C     		adds	r2, r3, #1
 2631 0338 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2632 033a 7148     		ldr	r0, .L181
 2633 033c 1346     		mov	r3, r2
 2634 033e DB00     		lsls	r3, r3, #3
 2635 0340 1344     		add	r3, r3, r2
 2636 0342 5B00     		lsls	r3, r3, #1
 2637 0344 1344     		add	r3, r3, r2
 2638 0346 0B44     		add	r3, r3, r1
 2639 0348 50F82330 		ldr	r3, [r0, r3, lsl #2]
 546:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2640              		.loc 1 546 0 discriminator 1
 2641 034c 002B     		cmp	r3, #0
 2642 034e 1DD1     		bne	.L175
 548:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2643              		.loc 1 548 0
 2644 0350 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2645 0352 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2646 0354 591E     		subs	r1, r3, #1
 2647 0356 6A48     		ldr	r0, .L181
 2648 0358 1346     		mov	r3, r2
 2649 035a DB00     		lsls	r3, r3, #3
 2650 035c 1344     		add	r3, r3, r2
 2651 035e 5B00     		lsls	r3, r3, #1
 2652 0360 1344     		add	r3, r3, r2
 2653 0362 0B44     		add	r3, r3, r1
 2654 0364 50F82330 		ldr	r3, [r0, r3, lsl #2]
 547:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2655              		.loc 1 547 0
 2656 0368 002B     		cmp	r3, #0
 2657 036a 0FD0     		beq	.L175
 549:main.c        ****                     map[rowToCheck][colToCheck + 1] == 0) {
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 58


 2658              		.loc 1 549 0
 2659 036c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2660 036e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2661 0370 591C     		adds	r1, r3, #1
 2662 0372 6348     		ldr	r0, .L181
 2663 0374 1346     		mov	r3, r2
 2664 0376 DB00     		lsls	r3, r3, #3
 2665 0378 1344     		add	r3, r3, r2
 2666 037a 5B00     		lsls	r3, r3, #1
 2667 037c 1344     		add	r3, r3, r2
 2668 037e 0B44     		add	r3, r3, r1
 2669 0380 50F82330 		ldr	r3, [r0, r3, lsl #2]
 548:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2670              		.loc 1 548 0
 2671 0384 002B     		cmp	r3, #0
 2672 0386 01D1     		bne	.L175
 550:main.c        ****                     return 1; // Junction aligns with robot position
 2673              		.loc 1 550 0
 2674 0388 0123     		movs	r3, #1
 2675 038a B4E0     		b	.L169
 2676              	.L175:
 551:main.c        ****                 }
 552:main.c        ****                 return 0; // Junction does NOT align with robot position
 2677              		.loc 1 552 0
 2678 038c 0023     		movs	r3, #0
 2679 038e B2E0     		b	.L169
 2680              	.L162:
 553:main.c        ****                 break;
 554:main.c        ****             case RightJunctionAfterTurn:
 555:main.c        ****                 // Check UP if is NOT WALL
 556:main.c        ****                 // Check DOWN if is WALL
 557:main.c        ****                 // Check LEFT if is WALL
 558:main.c        ****                 // Check RIGHT if is NOT WALL
 559:main.c        ****                 if (map[rowToCheck - 1][colToCheck] != 0 && 
 2681              		.loc 1 559 0
 2682 0390 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2683 0392 5A1E     		subs	r2, r3, #1
 2684 0394 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2685 0396 5A48     		ldr	r0, .L181
 2686 0398 1346     		mov	r3, r2
 2687 039a DB00     		lsls	r3, r3, #3
 2688 039c 1344     		add	r3, r3, r2
 2689 039e 5B00     		lsls	r3, r3, #1
 2690 03a0 1344     		add	r3, r3, r2
 2691 03a2 0B44     		add	r3, r3, r1
 2692 03a4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2693 03a8 002B     		cmp	r3, #0
 2694 03aa 2BD0     		beq	.L176
 560:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2695              		.loc 1 560 0 discriminator 1
 2696 03ac BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2697 03ae 5A1C     		adds	r2, r3, #1
 2698 03b0 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2699 03b2 5348     		ldr	r0, .L181
 2700 03b4 1346     		mov	r3, r2
 2701 03b6 DB00     		lsls	r3, r3, #3
 2702 03b8 1344     		add	r3, r3, r2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 59


 2703 03ba 5B00     		lsls	r3, r3, #1
 2704 03bc 1344     		add	r3, r3, r2
 2705 03be 0B44     		add	r3, r3, r1
 2706 03c0 50F82330 		ldr	r3, [r0, r3, lsl #2]
 559:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2707              		.loc 1 559 0 discriminator 1
 2708 03c4 002B     		cmp	r3, #0
 2709 03c6 1DD1     		bne	.L176
 561:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2710              		.loc 1 561 0
 2711 03c8 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2712 03ca 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2713 03cc 591E     		subs	r1, r3, #1
 2714 03ce 4C48     		ldr	r0, .L181
 2715 03d0 1346     		mov	r3, r2
 2716 03d2 DB00     		lsls	r3, r3, #3
 2717 03d4 1344     		add	r3, r3, r2
 2718 03d6 5B00     		lsls	r3, r3, #1
 2719 03d8 1344     		add	r3, r3, r2
 2720 03da 0B44     		add	r3, r3, r1
 2721 03dc 50F82330 		ldr	r3, [r0, r3, lsl #2]
 560:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2722              		.loc 1 560 0
 2723 03e0 002B     		cmp	r3, #0
 2724 03e2 0FD1     		bne	.L176
 562:main.c        ****                     map[rowToCheck][colToCheck + 1] != 0) {
 2725              		.loc 1 562 0
 2726 03e4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2727 03e6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2728 03e8 591C     		adds	r1, r3, #1
 2729 03ea 4548     		ldr	r0, .L181
 2730 03ec 1346     		mov	r3, r2
 2731 03ee DB00     		lsls	r3, r3, #3
 2732 03f0 1344     		add	r3, r3, r2
 2733 03f2 5B00     		lsls	r3, r3, #1
 2734 03f4 1344     		add	r3, r3, r2
 2735 03f6 0B44     		add	r3, r3, r1
 2736 03f8 50F82330 		ldr	r3, [r0, r3, lsl #2]
 561:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2737              		.loc 1 561 0
 2738 03fc 002B     		cmp	r3, #0
 2739 03fe 01D0     		beq	.L176
 563:main.c        ****                     return 1; // Junction aligns with robot position
 2740              		.loc 1 563 0
 2741 0400 0123     		movs	r3, #1
 2742 0402 78E0     		b	.L169
 2743              	.L176:
 564:main.c        ****                 }
 565:main.c        ****                 return 0;
 2744              		.loc 1 565 0
 2745 0404 0023     		movs	r3, #0
 2746 0406 76E0     		b	.L169
 2747              	.L167:
 566:main.c        ****                 break;
 567:main.c        ****             case Straight:
 568:main.c        ****                 // Check UP if is NOT WALL
 569:main.c        ****                 // Check DOWN if is NOT WALL
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 60


 570:main.c        ****                 // Check LEFT if is WALL
 571:main.c        ****                 // Check RIGHT if is WALL
 572:main.c        ****                 if (map[rowToCheck - 1][colToCheck] != 0 && 
 2748              		.loc 1 572 0
 2749 0408 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2750 040a 5A1E     		subs	r2, r3, #1
 2751 040c 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2752 040e 3C48     		ldr	r0, .L181
 2753 0410 1346     		mov	r3, r2
 2754 0412 DB00     		lsls	r3, r3, #3
 2755 0414 1344     		add	r3, r3, r2
 2756 0416 5B00     		lsls	r3, r3, #1
 2757 0418 1344     		add	r3, r3, r2
 2758 041a 0B44     		add	r3, r3, r1
 2759 041c 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2760 0420 002B     		cmp	r3, #0
 2761 0422 2BD0     		beq	.L177
 573:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2762              		.loc 1 573 0 discriminator 1
 2763 0424 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2764 0426 5A1C     		adds	r2, r3, #1
 2765 0428 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2766 042a 3548     		ldr	r0, .L181
 2767 042c 1346     		mov	r3, r2
 2768 042e DB00     		lsls	r3, r3, #3
 2769 0430 1344     		add	r3, r3, r2
 2770 0432 5B00     		lsls	r3, r3, #1
 2771 0434 1344     		add	r3, r3, r2
 2772 0436 0B44     		add	r3, r3, r1
 2773 0438 50F82330 		ldr	r3, [r0, r3, lsl #2]
 572:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2774              		.loc 1 572 0 discriminator 1
 2775 043c 002B     		cmp	r3, #0
 2776 043e 1DD0     		beq	.L177
 574:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2777              		.loc 1 574 0
 2778 0440 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2779 0442 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2780 0444 591E     		subs	r1, r3, #1
 2781 0446 2E48     		ldr	r0, .L181
 2782 0448 1346     		mov	r3, r2
 2783 044a DB00     		lsls	r3, r3, #3
 2784 044c 1344     		add	r3, r3, r2
 2785 044e 5B00     		lsls	r3, r3, #1
 2786 0450 1344     		add	r3, r3, r2
 2787 0452 0B44     		add	r3, r3, r1
 2788 0454 50F82330 		ldr	r3, [r0, r3, lsl #2]
 573:main.c        ****                     map[rowToCheck + 1][colToCheck] != 0 &&
 2789              		.loc 1 573 0
 2790 0458 002B     		cmp	r3, #0
 2791 045a 0FD1     		bne	.L177
 575:main.c        ****                     map[rowToCheck][colToCheck + 1] == 0) {
 2792              		.loc 1 575 0
 2793 045c BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2794 045e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2795 0460 591C     		adds	r1, r3, #1
 2796 0462 2748     		ldr	r0, .L181
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 61


 2797 0464 1346     		mov	r3, r2
 2798 0466 DB00     		lsls	r3, r3, #3
 2799 0468 1344     		add	r3, r3, r2
 2800 046a 5B00     		lsls	r3, r3, #1
 2801 046c 1344     		add	r3, r3, r2
 2802 046e 0B44     		add	r3, r3, r1
 2803 0470 50F82330 		ldr	r3, [r0, r3, lsl #2]
 574:main.c        ****                     map[rowToCheck][colToCheck - 1] == 0 &&
 2804              		.loc 1 574 0
 2805 0474 002B     		cmp	r3, #0
 2806 0476 01D1     		bne	.L177
 576:main.c        ****                     return 1; // Junction aligns with robot position
 2807              		.loc 1 576 0
 2808 0478 0123     		movs	r3, #1
 2809 047a 3CE0     		b	.L169
 2810              	.L177:
 577:main.c        ****                 }
 578:main.c        ****                 // OR OR OR OR OR OR OR OR OR OR OR OR OR OR
 579:main.c        ****                 // Check UP if is WALL
 580:main.c        ****                 // Check DOWN if is WALL
 581:main.c        ****                 // Check LEFT if is NOT WALL
 582:main.c        ****                 // Check RIGHT if is NOT WALL
 583:main.c        ****                 if (map[rowToCheck - 1][colToCheck] == 0 && 
 2811              		.loc 1 583 0
 2812 047c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2813 047e 5A1E     		subs	r2, r3, #1
 2814 0480 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2815 0482 1F48     		ldr	r0, .L181
 2816 0484 1346     		mov	r3, r2
 2817 0486 DB00     		lsls	r3, r3, #3
 2818 0488 1344     		add	r3, r3, r2
 2819 048a 5B00     		lsls	r3, r3, #1
 2820 048c 1344     		add	r3, r3, r2
 2821 048e 0B44     		add	r3, r3, r1
 2822 0490 50F82330 		ldr	r3, [r0, r3, lsl #2]
 2823 0494 002B     		cmp	r3, #0
 2824 0496 2BD1     		bne	.L178
 584:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2825              		.loc 1 584 0 discriminator 1
 2826 0498 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2827 049a 5A1C     		adds	r2, r3, #1
 2828 049c 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 2829 049e 1848     		ldr	r0, .L181
 2830 04a0 1346     		mov	r3, r2
 2831 04a2 DB00     		lsls	r3, r3, #3
 2832 04a4 1344     		add	r3, r3, r2
 2833 04a6 5B00     		lsls	r3, r3, #1
 2834 04a8 1344     		add	r3, r3, r2
 2835 04aa 0B44     		add	r3, r3, r1
 2836 04ac 50F82330 		ldr	r3, [r0, r3, lsl #2]
 583:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2837              		.loc 1 583 0 discriminator 1
 2838 04b0 002B     		cmp	r3, #0
 2839 04b2 1DD1     		bne	.L178
 585:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2840              		.loc 1 585 0
 2841 04b4 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 62


 2842 04b6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2843 04b8 591E     		subs	r1, r3, #1
 2844 04ba 1148     		ldr	r0, .L181
 2845 04bc 1346     		mov	r3, r2
 2846 04be DB00     		lsls	r3, r3, #3
 2847 04c0 1344     		add	r3, r3, r2
 2848 04c2 5B00     		lsls	r3, r3, #1
 2849 04c4 1344     		add	r3, r3, r2
 2850 04c6 0B44     		add	r3, r3, r1
 2851 04c8 50F82330 		ldr	r3, [r0, r3, lsl #2]
 584:main.c        ****                     map[rowToCheck + 1][colToCheck] == 0 &&
 2852              		.loc 1 584 0
 2853 04cc 002B     		cmp	r3, #0
 2854 04ce 0FD0     		beq	.L178
 586:main.c        ****                     map[rowToCheck][colToCheck + 1] != 0) {
 2855              		.loc 1 586 0
 2856 04d0 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2857 04d2 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2858 04d4 591C     		adds	r1, r3, #1
 2859 04d6 0A48     		ldr	r0, .L181
 2860 04d8 1346     		mov	r3, r2
 2861 04da DB00     		lsls	r3, r3, #3
 2862 04dc 1344     		add	r3, r3, r2
 2863 04de 5B00     		lsls	r3, r3, #1
 2864 04e0 1344     		add	r3, r3, r2
 2865 04e2 0B44     		add	r3, r3, r1
 2866 04e4 50F82330 		ldr	r3, [r0, r3, lsl #2]
 585:main.c        ****                     map[rowToCheck][colToCheck - 1] != 0 &&
 2867              		.loc 1 585 0
 2868 04e8 002B     		cmp	r3, #0
 2869 04ea 01D0     		beq	.L178
 587:main.c        ****                     return 1; // Junction aligns with robot position
 2870              		.loc 1 587 0
 2871 04ec 0123     		movs	r3, #1
 2872 04ee 02E0     		b	.L169
 2873              	.L178:
 588:main.c        ****                 }
 589:main.c        ****                 return 0;
 2874              		.loc 1 589 0
 2875 04f0 0023     		movs	r3, #0
 2876 04f2 00E0     		b	.L169
 2877              	.L157:
 590:main.c        ****                 break;
 591:main.c        ****         }
 592:main.c        ****     return -1; // no conditions fulfilled??
 2878              		.loc 1 592 0
 2879 04f4 FF23     		movs	r3, #255
 2880              	.L169:
 593:main.c        **** }
 2881              		.loc 1 593 0
 2882 04f6 1846     		mov	r0, r3
 2883 04f8 0C37     		adds	r7, r7, #12
 2884              		.cfi_def_cfa_offset 4
 2885 04fa BD46     		mov	sp, r7
 2886              		.cfi_def_cfa_register 13
 2887              		@ sp needed
 2888 04fc 80BC     		pop	{r7}
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 63


 2889              		.cfi_restore 7
 2890              		.cfi_def_cfa_offset 0
 2891 04fe 7047     		bx	lr
 2892              	.L182:
 2893              		.align	2
 2894              	.L181:
 2895 0500 00000000 		.word	map
 2896              		.cfi_endproc
 2897              	.LFE77:
 2898              		.size	CheckIfJunctionExistsAtRowCol, .-CheckIfJunctionExistsAtRowCol
 2899              		.section	.text.ValidatePosition,"ax",%progbits
 2900              		.align	2
 2901              		.global	ValidatePosition
 2902              		.thumb
 2903              		.thumb_func
 2904              		.type	ValidatePosition, %function
 2905              	ValidatePosition:
 2906              	.LFB78:
 594:main.c        **** 
 595:main.c        **** 
 596:main.c        **** void ValidatePosition() {
 2907              		.loc 1 596 0
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 24
 2910              		@ frame_needed = 1, uses_anonymous_args = 0
 2911 0000 80B5     		push	{r7, lr}
 2912              		.cfi_def_cfa_offset 8
 2913              		.cfi_offset 7, -8
 2914              		.cfi_offset 14, -4
 2915 0002 86B0     		sub	sp, sp, #24
 2916              		.cfi_def_cfa_offset 32
 2917 0004 00AF     		add	r7, sp, #0
 2918              		.cfi_def_cfa_register 7
 597:main.c        ****     // Check robot position by checking what intersection/junction we are at
 598:main.c        ****     // // Check Up, Down, Left, Right of currentRow, currentCol position to see if it aligns with r
 599:main.c        ****     
 600:main.c        ****     // If Robot posiiton aligns with map position 
 601:main.c        ****     // THEN continue with current direction and don't change currentRow, currentCol
 602:main.c        ****     // OTHERWISE, 
 603:main.c        ****         // positionToCheck = map[add/subtract row/col] depending on orientation 
 604:main.c        ****         // check around positionToCheck to see if it aligns with robotNodePosition 
 605:main.c        ****             // If the next node aligns with the robotNodePosition
 606:main.c        ****                 // THEN we are behind by a node, so we call GetNextStep() early
 607:main.c        ****             // OTHERWISE
 608:main.c        ****             // If the previous node aligns with the robotNodePosition
 609:main.c        ****                 // THEN we are ahead by a node, so we move our current row and column back to the p
 610:main.c        ****     
 611:main.c        ****     
 612:main.c        ****     // -- GET JUNCTION TYPE TO CHECK FROM ROBOT POSITION BASED ON SENSORS
 613:main.c        ****     enum JunctionType relativeJunction = GetJunctionType();
 2919              		.loc 1 613 0
 2920 0006 FFF7FEFF 		bl	GetJunctionType
 2921 000a 0346     		mov	r3, r0
 2922 000c FB71     		strb	r3, [r7, #7]
 614:main.c        ****     // -- GET JUNCTION TYPE TO CHECK FROM ROBOT POSITION BASED ON 
 615:main.c        ****     
 616:main.c        ****     // ---- CONVERT JUNCTION RELATIVE TO ORIENTATION INTO JUNCTION BASED ON UP ORIENTATION
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 64


 617:main.c        ****     enum JunctionType junctionToCheck = ConvertJunctionTypeToUpOrientation(relativeJunction);
 2923              		.loc 1 617 0
 2924 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2925 0010 1846     		mov	r0, r3
 2926 0012 FFF7FEFF 		bl	ConvertJunctionTypeToUpOrientation
 2927 0016 0346     		mov	r3, r0
 2928 0018 BB71     		strb	r3, [r7, #6]
 618:main.c        ****     // ---- CONVERT JUNCTION RELATIVE TO ORIENTATION INTO JUNCTION BASED ON UP ORIENTATION
 619:main.c        ****     
 620:main.c        ****     // Check if current robot position aligns with map position
 621:main.c        ****     if (CheckIfJunctionExistsAtRowCol(junctionToCheck, currentRow, currentCol) == 1) {
 2929              		.loc 1 621 0
 2930 001a 2D4B     		ldr	r3, .L190
 2931 001c 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2932 001e 2D4B     		ldr	r3, .L190+4
 2933 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 2934 0022 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2935 0024 1846     		mov	r0, r3
 2936 0026 FFF7FEFF 		bl	CheckIfJunctionExistsAtRowCol
 622:main.c        ****         // Robot position aligns with map position so we continue with current direction
 623:main.c        ****     }
 624:main.c        ****     
 625:main.c        ****     // If we get up to this point, then the current robot position DOES NOT align with the map posi
 626:main.c        ****     // So we check previous node and next node if any of their junctions match the current robot ju
 627:main.c        ****     int nextRow = 0;
 2937              		.loc 1 627 0
 2938 002a 0023     		movs	r3, #0
 2939 002c 7B61     		str	r3, [r7, #20]
 628:main.c        ****     int nextCol = 0;
 2940              		.loc 1 628 0
 2941 002e 0023     		movs	r3, #0
 2942 0030 3B61     		str	r3, [r7, #16]
 629:main.c        ****     int prevRow = 0;
 2943              		.loc 1 629 0
 2944 0032 0023     		movs	r3, #0
 2945 0034 FB60     		str	r3, [r7, #12]
 630:main.c        ****     int prevCol = 0;
 2946              		.loc 1 630 0
 2947 0036 0023     		movs	r3, #0
 2948 0038 BB60     		str	r3, [r7, #8]
 631:main.c        ****     switch (currentOrientation) {
 2949              		.loc 1 631 0
 2950 003a 274B     		ldr	r3, .L190+8
 2951 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2952 003e 032B     		cmp	r3, #3
 2953 0040 22D8     		bhi	.L184
 2954 0042 01A2     		adr	r2, .L186
 2955 0044 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2956              		.p2align 2
 2957              	.L186:
 2958 0048 59000000 		.word	.L185+1
 2959 004c 65000000 		.word	.L187+1
 2960 0050 71000000 		.word	.L188+1
 2961 0054 7D000000 		.word	.L189+1
 2962              		.p2align 1
 2963              	.L185:
 632:main.c        ****         case Up:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 65


 633:main.c        ****             // Facing Up, our next node is [Row - 1][Col]
 634:main.c        ****             // Our prev node is [Row + 1][Col]
 635:main.c        ****             nextRow = -1;
 2964              		.loc 1 635 0
 2965 0058 4FF0FF33 		mov	r3, #-1
 2966 005c 7B61     		str	r3, [r7, #20]
 636:main.c        ****             prevRow = 1;
 2967              		.loc 1 636 0
 2968 005e 0123     		movs	r3, #1
 2969 0060 FB60     		str	r3, [r7, #12]
 637:main.c        ****             break;
 2970              		.loc 1 637 0
 2971 0062 11E0     		b	.L184
 2972              	.L187:
 638:main.c        ****         case Down:
 639:main.c        ****             // Facing Down, our next node is [Row + 1][Col]
 640:main.c        ****             // Our prev node is [Row - 1][Col]
 641:main.c        ****             nextRow = 1;
 2973              		.loc 1 641 0
 2974 0064 0123     		movs	r3, #1
 2975 0066 7B61     		str	r3, [r7, #20]
 642:main.c        ****             prevRow = -1;
 2976              		.loc 1 642 0
 2977 0068 4FF0FF33 		mov	r3, #-1
 2978 006c FB60     		str	r3, [r7, #12]
 643:main.c        ****             break;
 2979              		.loc 1 643 0
 2980 006e 0BE0     		b	.L184
 2981              	.L188:
 644:main.c        ****         case Left:
 645:main.c        ****             // Facing Left, our next node is [Row][Col - 1]
 646:main.c        ****             // Our prev node is [Row][Col + 1]
 647:main.c        ****             nextCol = -1;
 2982              		.loc 1 647 0
 2983 0070 4FF0FF33 		mov	r3, #-1
 2984 0074 3B61     		str	r3, [r7, #16]
 648:main.c        ****             prevCol = 1;
 2985              		.loc 1 648 0
 2986 0076 0123     		movs	r3, #1
 2987 0078 BB60     		str	r3, [r7, #8]
 649:main.c        ****             break;
 2988              		.loc 1 649 0
 2989 007a 05E0     		b	.L184
 2990              	.L189:
 650:main.c        ****         case Right:
 651:main.c        ****             // Facing Left, our next node is [Row][Col + 1]
 652:main.c        ****             // Our prev node is [Row][Col - 1]
 653:main.c        ****             nextCol = 1;
 2991              		.loc 1 653 0
 2992 007c 0123     		movs	r3, #1
 2993 007e 3B61     		str	r3, [r7, #16]
 654:main.c        ****             prevCol = -1;
 2994              		.loc 1 654 0
 2995 0080 4FF0FF33 		mov	r3, #-1
 2996 0084 BB60     		str	r3, [r7, #8]
 655:main.c        ****             break;
 2997              		.loc 1 655 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 66


 2998 0086 00BF     		nop
 2999              	.L184:
 656:main.c        ****     }
 657:main.c        ****     // Check Next node
 658:main.c        ****     if (CheckIfJunctionExistsAtRowCol(junctionToCheck, (currentRow + nextRow), (currentCol + nextCo
 3000              		.loc 1 658 0
 3001 0088 7B69     		ldr	r3, [r7, #20]
 3002 008a DAB2     		uxtb	r2, r3
 3003 008c 104B     		ldr	r3, .L190
 3004 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3005 0090 1344     		add	r3, r3, r2
 3006 0092 D9B2     		uxtb	r1, r3
 3007 0094 3B69     		ldr	r3, [r7, #16]
 3008 0096 DAB2     		uxtb	r2, r3
 3009 0098 0E4B     		ldr	r3, .L190+4
 3010 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3011 009c 1344     		add	r3, r3, r2
 3012 009e DAB2     		uxtb	r2, r3
 3013 00a0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3014 00a2 1846     		mov	r0, r3
 3015 00a4 FFF7FEFF 		bl	CheckIfJunctionExistsAtRowCol
 659:main.c        ****         // Next node aligns with current robot position,
 660:main.c        ****         // This means that we are behind a node
 661:main.c        ****         // So we have to call GetNextStep early(?)
 662:main.c        ****     }
 663:main.c        ****     
 664:main.c        ****     // Check Previous node
 665:main.c        ****     if (CheckIfJunctionExistsAtRowCol(junctionToCheck, (currentRow + prevRow), (currentCol + prevCo
 3016              		.loc 1 665 0
 3017 00a8 FB68     		ldr	r3, [r7, #12]
 3018 00aa DAB2     		uxtb	r2, r3
 3019 00ac 084B     		ldr	r3, .L190
 3020 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3021 00b0 1344     		add	r3, r3, r2
 3022 00b2 D9B2     		uxtb	r1, r3
 3023 00b4 BB68     		ldr	r3, [r7, #8]
 3024 00b6 DAB2     		uxtb	r2, r3
 3025 00b8 064B     		ldr	r3, .L190+4
 3026 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3027 00bc 1344     		add	r3, r3, r2
 3028 00be DAB2     		uxtb	r2, r3
 3029 00c0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 3030 00c2 1846     		mov	r0, r3
 3031 00c4 FFF7FEFF 		bl	CheckIfJunctionExistsAtRowCol
 666:main.c        ****         // Prev node aligns with current robot position,
 667:main.c        ****         // This means that we are ahead by a node
 668:main.c        ****         // So we have to update current row and current col accordingly then call GetNextStep
 669:main.c        ****     }
 670:main.c        **** }
 3032              		.loc 1 670 0
 3033 00c8 00BF     		nop
 3034 00ca 1837     		adds	r7, r7, #24
 3035              		.cfi_def_cfa_offset 8
 3036 00cc BD46     		mov	sp, r7
 3037              		.cfi_def_cfa_register 13
 3038              		@ sp needed
 3039 00ce 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 67


 3040              	.L191:
 3041              		.align	2
 3042              	.L190:
 3043 00d0 00000000 		.word	currentRow
 3044 00d4 00000000 		.word	currentCol
 3045 00d8 00000000 		.word	currentOrientation
 3046              		.cfi_endproc
 3047              	.LFE78:
 3048              		.size	ValidatePosition, .-ValidatePosition
 3049              		.global	stoppedAfterTurn
 3050              		.bss
 3051              		.type	stoppedAfterTurn, %object
 3052              		.size	stoppedAfterTurn, 1
 3053              	stoppedAfterTurn:
 3054 0030 00       		.space	1
 3055              		.global	ignoreSensor
 3056              		.type	ignoreSensor, %object
 3057              		.size	ignoreSensor, 1
 3058              	ignoreSensor:
 3059 0031 00       		.space	1
 3060              		.global	__aeabi_fcmpge
 3061              		.section	.text.CheckSensorDirection,"ax",%progbits
 3062              		.align	2
 3063              		.global	CheckSensorDirection
 3064              		.thumb
 3065              		.thumb_func
 3066              		.type	CheckSensorDirection, %function
 3067              	CheckSensorDirection:
 3068              	.LFB79:
 671:main.c        **** 
 672:main.c        **** uint8 stoppedAfterTurn = 0;
 673:main.c        **** uint8 ignoreSensor = 0;
 674:main.c        **** 
 675:main.c        **** enum DirectionState CheckSensorDirection() {
 3069              		.loc 1 675 0
 3070              		.cfi_startproc
 3071              		@ args = 0, pretend = 0, frame = 8
 3072              		@ frame_needed = 1, uses_anonymous_args = 0
 3073 0000 80B5     		push	{r7, lr}
 3074              		.cfi_def_cfa_offset 8
 3075              		.cfi_offset 7, -8
 3076              		.cfi_offset 14, -4
 3077 0002 82B0     		sub	sp, sp, #8
 3078              		.cfi_def_cfa_offset 16
 3079 0004 00AF     		add	r7, sp, #0
 3080              		.cfi_def_cfa_register 7
 676:main.c        ****     float blocksize;
 677:main.c        ****     if(currentOrientation == Up || currentOrientation == Down) {
 3081              		.loc 1 677 0
 3082 0006 8C4B     		ldr	r3, .L225
 3083 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3084 000a 002B     		cmp	r3, #0
 3085 000c 03D0     		beq	.L193
 3086              		.loc 1 677 0 is_stmt 0 discriminator 1
 3087 000e 8A4B     		ldr	r3, .L225
 3088 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3089 0012 012B     		cmp	r3, #1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 68


 3090 0014 03D1     		bne	.L194
 3091              	.L193:
 678:main.c        ****         blocksize = yBlocksize;
 3092              		.loc 1 678 0 is_stmt 1
 3093 0016 894B     		ldr	r3, .L225+4
 3094 0018 1B68     		ldr	r3, [r3]	@ float
 3095 001a 7B60     		str	r3, [r7, #4]	@ float
 3096 001c 02E0     		b	.L195
 3097              	.L194:
 679:main.c        ****     } else {
 680:main.c        ****         blocksize = xBlocksize;
 3098              		.loc 1 680 0
 3099 001e 884B     		ldr	r3, .L225+8
 3100 0020 1B68     		ldr	r3, [r3]	@ float
 3101 0022 7B60     		str	r3, [r7, #4]	@ float
 3102              	.L195:
 681:main.c        ****     }
 682:main.c        ****     enum DirectionState directionState = Stop; // initialise state as stop
 3103              		.loc 1 682 0
 3104 0024 0523     		movs	r3, #5
 3105 0026 3B60     		str	r3, [r7]
 683:main.c        ****    
 684:main.c        ****     // GET NEXT STEP * ========================================
 685:main.c        ****     // Check if robot position aligns with our map 
 686:main.c        ****     if (!s3 || !s4) {
 3106              		.loc 1 686 0
 3107 0028 864B     		ldr	r3, .L225+12
 3108 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3109 002c 002B     		cmp	r3, #0
 3110 002e 03D0     		beq	.L196
 3111              		.loc 1 686 0 is_stmt 0 discriminator 1
 3112 0030 854B     		ldr	r3, .L225+16
 3113 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3114 0034 002B     		cmp	r3, #0
 3115 0036 01D1     		bne	.L197
 3116              	.L196:
 687:main.c        ****          ValidatePosition();
 3117              		.loc 1 687 0 is_stmt 1
 3118 0038 FFF7FEFF 		bl	ValidatePosition
 3119              	.L197:
 688:main.c        ****     }
 689:main.c        ****             
 690:main.c        ****     if (stoppedAfterTurn == 1) {
 3120              		.loc 1 690 0
 3121 003c 834B     		ldr	r3, .L225+20
 3122 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3123 0040 012B     		cmp	r3, #1
 3124 0042 1DD1     		bne	.L198
 691:main.c        ****         if (stopBuffer <= 50) {
 3125              		.loc 1 691 0
 3126 0044 824B     		ldr	r3, .L225+24
 3127 0046 1B68     		ldr	r3, [r3]
 3128 0048 322B     		cmp	r3, #50
 3129 004a 07D8     		bhi	.L199
 692:main.c        ****             //directionState = Stop; // stop buffer- prevents overturning
 693:main.c        ****             stopFlag = 1;
 3130              		.loc 1 693 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 69


 3131 004c 814B     		ldr	r3, .L225+28
 3132 004e 0122     		movs	r2, #1
 3133 0050 1A70     		strb	r2, [r3]
 694:main.c        ****             previousDirection = directionState;
 3134              		.loc 1 694 0
 3135 0052 814A     		ldr	r2, .L225+32
 3136 0054 3B68     		ldr	r3, [r7]
 3137 0056 1360     		str	r3, [r2]
 695:main.c        ****             return directionState;
 3138              		.loc 1 695 0
 3139 0058 3B68     		ldr	r3, [r7]
 3140 005a 2DE1     		b	.L200
 3141              	.L199:
 696:main.c        ****         }
 697:main.c        ****         directionState = GetNextStep(); // get next step at each block
 3142              		.loc 1 697 0
 3143 005c FFF7FEFF 		bl	GetNextStep
 3144 0060 3860     		str	r0, [r7]
 698:main.c        ****         totalDistance = 0; // reset distance
 3145              		.loc 1 698 0
 3146 0062 7E4B     		ldr	r3, .L225+36
 3147 0064 4FF00002 		mov	r2, #0
 3148 0068 1A60     		str	r2, [r3]	@ float
 699:main.c        ****         previousDirection = directionState;
 3149              		.loc 1 699 0
 3150 006a 7B4A     		ldr	r2, .L225+32
 3151 006c 3B68     		ldr	r3, [r7]
 3152 006e 1360     		str	r3, [r2]
 700:main.c        ****         stoppedAfterTurn = 0;
 3153              		.loc 1 700 0
 3154 0070 764B     		ldr	r3, .L225+20
 3155 0072 0022     		movs	r2, #0
 3156 0074 1A70     		strb	r2, [r3]
 701:main.c        ****         stopFlag = 0;
 3157              		.loc 1 701 0
 3158 0076 774B     		ldr	r3, .L225+28
 3159 0078 0022     		movs	r2, #0
 3160 007a 1A70     		strb	r2, [r3]
 702:main.c        ****         return directionState;
 3161              		.loc 1 702 0
 3162 007c 3B68     		ldr	r3, [r7]
 3163 007e 1BE1     		b	.L200
 3164              	.L198:
 703:main.c        ****     }
 704:main.c        ****     if (totalDistance >= blocksize) {
 3165              		.loc 1 704 0
 3166 0080 764B     		ldr	r3, .L225+36
 3167 0082 1B68     		ldr	r3, [r3]	@ float
 3168 0084 7968     		ldr	r1, [r7, #4]	@ float
 3169 0086 1846     		mov	r0, r3
 3170 0088 FFF7FEFF 		bl	__aeabi_fcmpge
 3171 008c 0346     		mov	r3, r0
 3172 008e 002B     		cmp	r3, #0
 3173 0090 0BD0     		beq	.L224
 705:main.c        ****         directionState = GetNextStep(); // get next step at each block
 3174              		.loc 1 705 0
 3175 0092 FFF7FEFF 		bl	GetNextStep
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 70


 3176 0096 3860     		str	r0, [r7]
 706:main.c        ****         totalDistance = 0; // reset distance
 3177              		.loc 1 706 0
 3178 0098 704B     		ldr	r3, .L225+36
 3179 009a 4FF00002 		mov	r2, #0
 3180 009e 1A60     		str	r2, [r3]	@ float
 707:main.c        ****         previousDirection = directionState;
 3181              		.loc 1 707 0
 3182 00a0 6D4A     		ldr	r2, .L225+32
 3183 00a2 3B68     		ldr	r3, [r7]
 3184 00a4 1360     		str	r3, [r2]
 708:main.c        ****         return directionState;
 3185              		.loc 1 708 0
 3186 00a6 3B68     		ldr	r3, [r7]
 3187 00a8 06E1     		b	.L200
 3188              	.L224:
 709:main.c        ****     }
 710:main.c        ****     
 711:main.c        ****     // STOP BUFFER * ========================================
 712:main.c        ****     if (previousDirection == Stop) {
 3189              		.loc 1 712 0
 3190 00aa 6B4B     		ldr	r3, .L225+32
 3191 00ac 1B68     		ldr	r3, [r3]
 3192 00ae 052B     		cmp	r3, #5
 3193 00b0 0FD1     		bne	.L203
 713:main.c        ****         if (stopBuffer <= 50) {
 3194              		.loc 1 713 0
 3195 00b2 674B     		ldr	r3, .L225+24
 3196 00b4 1B68     		ldr	r3, [r3]
 3197 00b6 322B     		cmp	r3, #50
 3198 00b8 06D8     		bhi	.L204
 714:main.c        ****             //directionState = Stop; // stop buffer- prevents overturning
 715:main.c        ****             stopFlag = 1;
 3199              		.loc 1 715 0
 3200 00ba 664B     		ldr	r3, .L225+28
 3201 00bc 0122     		movs	r2, #1
 3202 00be 1A70     		strb	r2, [r3]
 716:main.c        ****             previousDirection = directionState;
 3203              		.loc 1 716 0
 3204 00c0 654A     		ldr	r2, .L225+32
 3205 00c2 3B68     		ldr	r3, [r7]
 3206 00c4 1360     		str	r3, [r2]
 3207 00c6 02E0     		b	.L205
 3208              	.L204:
 717:main.c        ****         } else {
 718:main.c        ****             stopFlag = 0;
 3209              		.loc 1 718 0
 3210 00c8 624B     		ldr	r3, .L225+28
 3211 00ca 0022     		movs	r2, #0
 3212 00cc 1A70     		strb	r2, [r3]
 3213              	.L205:
 719:main.c        ****             //directionState = ForwardAfterTurn;
 720:main.c        ****         }
 721:main.c        ****         return directionState;
 3214              		.loc 1 721 0
 3215 00ce 3B68     		ldr	r3, [r7]
 3216 00d0 F2E0     		b	.L200
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 71


 3217              	.L203:
 722:main.c        ****     }
 723:main.c        **** 
 724:main.c        ****     // TURNING * ========================================    
 725:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 3218              		.loc 1 725 0
 3219 00d2 614B     		ldr	r3, .L225+32
 3220 00d4 1B68     		ldr	r3, [r3]
 3221 00d6 0A2B     		cmp	r3, #10
 3222 00d8 0ED1     		bne	.L206
 726:main.c        **** 
 727:main.c        ****         if (s3 || s4) {
 3223              		.loc 1 727 0
 3224 00da 5A4B     		ldr	r3, .L225+12
 3225 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3226 00de 002B     		cmp	r3, #0
 3227 00e0 03D1     		bne	.L207
 3228              		.loc 1 727 0 is_stmt 0 discriminator 1
 3229 00e2 594B     		ldr	r3, .L225+16
 3230 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3231 00e6 002B     		cmp	r3, #0
 3232 00e8 06D0     		beq	.L206
 3233              	.L207:
 728:main.c        ****             //ignoreSensor = 0;
 729:main.c        ****             //usbPutString("Forward\n");
 730:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 3234              		.loc 1 730 0 is_stmt 1
 3235 00ea 0023     		movs	r3, #0
 3236 00ec 3B60     		str	r3, [r7]
 731:main.c        ****             previousDirection = directionState;
 3237              		.loc 1 731 0
 3238 00ee 5A4A     		ldr	r2, .L225+32
 3239 00f0 3B68     		ldr	r3, [r7]
 3240 00f2 1360     		str	r3, [r2]
 732:main.c        ****             return directionState;
 3241              		.loc 1 732 0
 3242 00f4 3B68     		ldr	r3, [r7]
 3243 00f6 DFE0     		b	.L200
 3244              	.L206:
 733:main.c        ****         }
 734:main.c        ****     }
 735:main.c        **** 
 736:main.c        ****     if(previousDirection == waitForRightTurn) {
 3245              		.loc 1 736 0
 3246 00f8 574B     		ldr	r3, .L225+32
 3247 00fa 1B68     		ldr	r3, [r3]
 3248 00fc 082B     		cmp	r3, #8
 3249 00fe 11D1     		bne	.L208
 737:main.c        ****         //ignoreSensor = 0;
 738:main.c        ****         if(!s4) {
 3250              		.loc 1 738 0
 3251 0100 514B     		ldr	r3, .L225+16
 3252 0102 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3253 0104 002B     		cmp	r3, #0
 3254 0106 06D1     		bne	.L209
 739:main.c        ****             //usbPutString("Turn Right\n");
 740:main.c        ****             directionState = TurnRight;
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 72


 3255              		.loc 1 740 0
 3256 0108 0123     		movs	r3, #1
 3257 010a 3B60     		str	r3, [r7]
 741:main.c        ****             previousDirection = directionState;
 3258              		.loc 1 741 0
 3259 010c 524A     		ldr	r2, .L225+32
 3260 010e 3B68     		ldr	r3, [r7]
 3261 0110 1360     		str	r3, [r2]
 742:main.c        ****             return directionState;
 3262              		.loc 1 742 0
 3263 0112 3B68     		ldr	r3, [r7]
 3264 0114 D0E0     		b	.L200
 3265              	.L209:
 743:main.c        ****         } else {
 744:main.c        ****             //usbPutString("Wait for Right Turn\n");
 745:main.c        ****             directionState = waitForRightTurn;
 3266              		.loc 1 745 0
 3267 0116 0823     		movs	r3, #8
 3268 0118 3B60     		str	r3, [r7]
 746:main.c        ****             previousDirection = directionState;
 3269              		.loc 1 746 0
 3270 011a 4F4A     		ldr	r2, .L225+32
 3271 011c 3B68     		ldr	r3, [r7]
 3272 011e 1360     		str	r3, [r2]
 747:main.c        ****             return directionState;
 3273              		.loc 1 747 0
 3274 0120 3B68     		ldr	r3, [r7]
 3275 0122 C9E0     		b	.L200
 3276              	.L208:
 748:main.c        ****         }
 749:main.c        ****     }
 750:main.c        **** 
 751:main.c        ****     if(previousDirection == waitForLeftTurn) {
 3277              		.loc 1 751 0
 3278 0124 4C4B     		ldr	r3, .L225+32
 3279 0126 1B68     		ldr	r3, [r3]
 3280 0128 092B     		cmp	r3, #9
 3281 012a 11D1     		bne	.L210
 752:main.c        ****         //ignoreSensor = 0;
 753:main.c        ****         if(!s3) {
 3282              		.loc 1 753 0
 3283 012c 454B     		ldr	r3, .L225+12
 3284 012e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3285 0130 002B     		cmp	r3, #0
 3286 0132 06D1     		bne	.L211
 754:main.c        ****             //usbPutString("Turn Left\n");
 755:main.c        ****             directionState = TurnLeft;
 3287              		.loc 1 755 0
 3288 0134 0223     		movs	r3, #2
 3289 0136 3B60     		str	r3, [r7]
 756:main.c        ****             previousDirection = directionState;
 3290              		.loc 1 756 0
 3291 0138 474A     		ldr	r2, .L225+32
 3292 013a 3B68     		ldr	r3, [r7]
 3293 013c 1360     		str	r3, [r2]
 757:main.c        ****             return directionState;
 3294              		.loc 1 757 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 73


 3295 013e 3B68     		ldr	r3, [r7]
 3296 0140 BAE0     		b	.L200
 3297              	.L211:
 758:main.c        ****         } else {
 759:main.c        ****             //usbPutString("Wait for Left Turn\n");
 760:main.c        ****             directionState = waitForLeftTurn;
 3298              		.loc 1 760 0
 3299 0142 0923     		movs	r3, #9
 3300 0144 3B60     		str	r3, [r7]
 761:main.c        ****             previousDirection = directionState;
 3301              		.loc 1 761 0
 3302 0146 444A     		ldr	r2, .L225+32
 3303 0148 3B68     		ldr	r3, [r7]
 3304 014a 1360     		str	r3, [r2]
 762:main.c        ****             return directionState;
 3305              		.loc 1 762 0
 3306 014c 3B68     		ldr	r3, [r7]
 3307 014e B3E0     		b	.L200
 3308              	.L210:
 763:main.c        ****         }
 764:main.c        ****     }
 765:main.c        **** 
 766:main.c        ****     if(previousDirection == TurnRight) {
 3309              		.loc 1 766 0
 3310 0150 414B     		ldr	r3, .L225+32
 3311 0152 1B68     		ldr	r3, [r3]
 3312 0154 012B     		cmp	r3, #1
 3313 0156 24D1     		bne	.L212
 767:main.c        ****         if(s5 && s6) {
 3314              		.loc 1 767 0
 3315 0158 414B     		ldr	r3, .L225+40
 3316 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3317 015c 002B     		cmp	r3, #0
 3318 015e 0AD0     		beq	.L213
 3319              		.loc 1 767 0 is_stmt 0 discriminator 1
 3320 0160 404B     		ldr	r3, .L225+44
 3321 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3322 0164 002B     		cmp	r3, #0
 3323 0166 06D0     		beq	.L213
 768:main.c        ****             //usbPutString("Turn Right\n");
 769:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 3324              		.loc 1 769 0 is_stmt 1
 3325 0168 0123     		movs	r3, #1
 3326 016a 3B60     		str	r3, [r7]
 770:main.c        ****             previousDirection = directionState;
 3327              		.loc 1 770 0
 3328 016c 3A4A     		ldr	r2, .L225+32
 3329 016e 3B68     		ldr	r3, [r7]
 3330 0170 1360     		str	r3, [r2]
 771:main.c        ****             return directionState;
 3331              		.loc 1 771 0
 3332 0172 3B68     		ldr	r3, [r7]
 3333 0174 A0E0     		b	.L200
 3334              	.L213:
 772:main.c        ****         } 
 773:main.c        ****         else if (!s5 || !s6) {
 3335              		.loc 1 773 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 74


 3336 0176 3A4B     		ldr	r3, .L225+40
 3337 0178 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3338 017a 002B     		cmp	r3, #0
 3339 017c 03D0     		beq	.L214
 3340              		.loc 1 773 0 is_stmt 0 discriminator 1
 3341 017e 394B     		ldr	r3, .L225+44
 3342 0180 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3343 0182 002B     		cmp	r3, #0
 3344 0184 0DD1     		bne	.L212
 3345              	.L214:
 774:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 775:main.c        ****             //usbPutString("Stop after Right Turn");
 776:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 3346              		.loc 1 776 0 is_stmt 1
 3347 0186 0523     		movs	r3, #5
 3348 0188 3B60     		str	r3, [r7]
 777:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 3349              		.loc 1 777 0
 3350 018a 344B     		ldr	r3, .L225+36
 3351 018c 4FF00002 		mov	r2, #0
 3352 0190 1A60     		str	r2, [r3]	@ float
 778:main.c        ****             previousDirection = directionState;
 3353              		.loc 1 778 0
 3354 0192 314A     		ldr	r2, .L225+32
 3355 0194 3B68     		ldr	r3, [r7]
 3356 0196 1360     		str	r3, [r2]
 779:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 3357              		.loc 1 779 0
 3358 0198 2C4B     		ldr	r3, .L225+20
 3359 019a 0122     		movs	r2, #1
 3360 019c 1A70     		strb	r2, [r3]
 780:main.c        ****             return directionState;
 3361              		.loc 1 780 0
 3362 019e 3B68     		ldr	r3, [r7]
 3363 01a0 8AE0     		b	.L200
 3364              	.L212:
 781:main.c        ****         }
 782:main.c        ****     }    
 783:main.c        **** 
 784:main.c        ****     if(previousDirection == TurnLeft) {
 3365              		.loc 1 784 0
 3366 01a2 2D4B     		ldr	r3, .L225+32
 3367 01a4 1B68     		ldr	r3, [r3]
 3368 01a6 022B     		cmp	r3, #2
 3369 01a8 24D1     		bne	.L215
 785:main.c        ****         if(s5 && s6) {
 3370              		.loc 1 785 0
 3371 01aa 2D4B     		ldr	r3, .L225+40
 3372 01ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3373 01ae 002B     		cmp	r3, #0
 3374 01b0 0AD0     		beq	.L216
 3375              		.loc 1 785 0 is_stmt 0 discriminator 1
 3376 01b2 2C4B     		ldr	r3, .L225+44
 3377 01b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3378 01b6 002B     		cmp	r3, #0
 3379 01b8 06D0     		beq	.L216
 786:main.c        ****             //usbPutString("Turn Left\n");
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 75


 787:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 3380              		.loc 1 787 0 is_stmt 1
 3381 01ba 0223     		movs	r3, #2
 3382 01bc 3B60     		str	r3, [r7]
 788:main.c        ****             previousDirection = directionState;
 3383              		.loc 1 788 0
 3384 01be 264A     		ldr	r2, .L225+32
 3385 01c0 3B68     		ldr	r3, [r7]
 3386 01c2 1360     		str	r3, [r2]
 789:main.c        ****             return directionState;
 3387              		.loc 1 789 0
 3388 01c4 3B68     		ldr	r3, [r7]
 3389 01c6 77E0     		b	.L200
 3390              	.L216:
 790:main.c        ****         } 
 791:main.c        ****         else if (!s5 || !s6) {
 3391              		.loc 1 791 0
 3392 01c8 254B     		ldr	r3, .L225+40
 3393 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3394 01cc 002B     		cmp	r3, #0
 3395 01ce 03D0     		beq	.L217
 3396              		.loc 1 791 0 is_stmt 0 discriminator 1
 3397 01d0 244B     		ldr	r3, .L225+44
 3398 01d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3399 01d4 002B     		cmp	r3, #0
 3400 01d6 0DD1     		bne	.L215
 3401              	.L217:
 792:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 793:main.c        ****            // usbPutString("Stop after Left Turn\n");
 794:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 3402              		.loc 1 794 0 is_stmt 1
 3403 01d8 0523     		movs	r3, #5
 3404 01da 3B60     		str	r3, [r7]
 795:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 3405              		.loc 1 795 0
 3406 01dc 1F4B     		ldr	r3, .L225+36
 3407 01de 4FF00002 		mov	r2, #0
 3408 01e2 1A60     		str	r2, [r3]	@ float
 796:main.c        ****             previousDirection = directionState;
 3409              		.loc 1 796 0
 3410 01e4 1C4A     		ldr	r2, .L225+32
 3411 01e6 3B68     		ldr	r3, [r7]
 3412 01e8 1360     		str	r3, [r2]
 797:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 3413              		.loc 1 797 0
 3414 01ea 184B     		ldr	r3, .L225+20
 3415 01ec 0122     		movs	r2, #1
 3416 01ee 1A70     		strb	r2, [r3]
 798:main.c        ****             return directionState;
 3417              		.loc 1 798 0
 3418 01f0 3B68     		ldr	r3, [r7]
 3419 01f2 61E0     		b	.L200
 3420              	.L215:
 799:main.c        ****         }
 800:main.c        ****     }
 801:main.c        ****     
 802:main.c        ****     // COURSE CORRECTION * ========================================
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 76


 803:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 3421              		.loc 1 803 0
 3422 01f4 184B     		ldr	r3, .L225+32
 3423 01f6 1B68     		ldr	r3, [r3]
 3424 01f8 002B     		cmp	r3, #0
 3425 01fa 07D0     		beq	.L218
 3426              		.loc 1 803 0 is_stmt 0 discriminator 1
 3427 01fc 164B     		ldr	r3, .L225+32
 3428 01fe 1B68     		ldr	r3, [r3]
 3429 0200 032B     		cmp	r3, #3
 3430 0202 03D0     		beq	.L218
 3431              		.loc 1 803 0 discriminator 2
 3432 0204 144B     		ldr	r3, .L225+32
 3433 0206 1B68     		ldr	r3, [r3]
 3434 0208 042B     		cmp	r3, #4
 3435 020a 2DD1     		bne	.L219
 3436              	.L218:
 804:main.c        ****         //ignoreSensor = 0;
 805:main.c        ****         if(s6) {
 3437              		.loc 1 805 0 is_stmt 1
 3438 020c 154B     		ldr	r3, .L225+44
 3439 020e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3440 0210 002B     		cmp	r3, #0
 3441 0212 06D0     		beq	.L220
 806:main.c        ****             //usbPutString("Adjust to the left\n");
 807:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 3442              		.loc 1 807 0
 3443 0214 0323     		movs	r3, #3
 3444 0216 3B60     		str	r3, [r7]
 808:main.c        ****             previousDirection = directionState;
 3445              		.loc 1 808 0
 3446 0218 0F4A     		ldr	r2, .L225+32
 3447 021a 3B68     		ldr	r3, [r7]
 3448 021c 1360     		str	r3, [r2]
 809:main.c        ****             return directionState;
 3449              		.loc 1 809 0
 3450 021e 3B68     		ldr	r3, [r7]
 3451 0220 4AE0     		b	.L200
 3452              	.L220:
 810:main.c        ****         }
 811:main.c        ****         if(s5) {
 3453              		.loc 1 811 0
 3454 0222 0F4B     		ldr	r3, .L225+40
 3455 0224 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3456 0226 002B     		cmp	r3, #0
 3457 0228 1ED0     		beq	.L219
 812:main.c        ****             //usbPutString("Adjust to the right\n");
 813:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 3458              		.loc 1 813 0
 3459 022a 0423     		movs	r3, #4
 3460 022c 3B60     		str	r3, [r7]
 814:main.c        ****             previousDirection = directionState;
 3461              		.loc 1 814 0
 3462 022e 0A4A     		ldr	r2, .L225+32
 3463 0230 3B68     		ldr	r3, [r7]
 3464 0232 1360     		str	r3, [r2]
 815:main.c        ****             return directionState;
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 77


 3465              		.loc 1 815 0
 3466 0234 3B68     		ldr	r3, [r7]
 3467 0236 3FE0     		b	.L200
 3468              	.L226:
 3469              		.align	2
 3470              	.L225:
 3471 0238 00000000 		.word	currentOrientation
 3472 023c 00000000 		.word	yBlocksize
 3473 0240 00000000 		.word	xBlocksize
 3474 0244 00000000 		.word	s3
 3475 0248 00000000 		.word	s4
 3476 024c 00000000 		.word	stoppedAfterTurn
 3477 0250 00000000 		.word	stopBuffer
 3478 0254 00000000 		.word	stopFlag
 3479 0258 00000000 		.word	previousDirection
 3480 025c 00000000 		.word	totalDistance
 3481 0260 00000000 		.word	s5
 3482 0264 00000000 		.word	s6
 3483              	.L219:
 816:main.c        ****         }
 817:main.c        ****     }
 818:main.c        ****     
 819:main.c        ****     // FORWARD * ========================================
 820:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 3484              		.loc 1 820 0
 3485 0268 154B     		ldr	r3, .L227
 3486 026a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3487 026c 002B     		cmp	r3, #0
 3488 026e 12D0     		beq	.L221
 3489              		.loc 1 820 0 is_stmt 0 discriminator 1
 3490 0270 144B     		ldr	r3, .L227+4
 3491 0272 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3492 0274 002B     		cmp	r3, #0
 3493 0276 0ED0     		beq	.L221
 3494              		.loc 1 820 0 discriminator 2
 3495 0278 134B     		ldr	r3, .L227+8
 3496 027a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3497 027c 002B     		cmp	r3, #0
 3498 027e 0AD1     		bne	.L221
 3499              		.loc 1 820 0 discriminator 3
 3500 0280 124B     		ldr	r3, .L227+12
 3501 0282 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3502 0284 002B     		cmp	r3, #0
 3503 0286 06D1     		bne	.L221
 821:main.c        ****         //usbPutString("Forward\n");
 822:main.c        ****         directionState = Forward;
 3504              		.loc 1 822 0 is_stmt 1
 3505 0288 0023     		movs	r3, #0
 3506 028a 3B60     		str	r3, [r7]
 823:main.c        ****         previousDirection = directionState;
 3507              		.loc 1 823 0
 3508 028c 104A     		ldr	r2, .L227+16
 3509 028e 3B68     		ldr	r3, [r7]
 3510 0290 1360     		str	r3, [r2]
 824:main.c        ****         return directionState;   
 3511              		.loc 1 824 0
 3512 0292 3B68     		ldr	r3, [r7]
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 78


 3513 0294 10E0     		b	.L200
 3514              	.L221:
 825:main.c        ****     }
 826:main.c        ****     // SENSORS ALL HIGH CONDITION- waiting for a turn * ========================================
 827:main.c        ****     /*if(s5 && s6 && (previousDirection != waitForTurn)) {
 828:main.c        ****         directionState = waitForTurn; // need to keep going forward until s3 || s4 are low before t
 829:main.c        ****         return directionState;
 830:main.c        ****     }
 831:main.c        **** 
 832:main.c        ****     if (previousDirection == waitForTurn && (s3 || s4)) {
 833:main.c        ****         //usbPutString("Wait For Turn\n");
 834:main.c        ****         directionState = GetNextStep(); // determine which way to turn
 835:main.c        ****         return directionState;
 836:main.c        ****     }*/
 837:main.c        **** 
 838:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 839:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 840:main.c        ****     if (previousDirection == Unknown) {
 3515              		.loc 1 840 0
 3516 0296 0E4B     		ldr	r3, .L227+16
 3517 0298 1B68     		ldr	r3, [r3]
 3518 029a 062B     		cmp	r3, #6
 3519 029c 06D1     		bne	.L222
 841:main.c        ****         directionState = Forward;
 3520              		.loc 1 841 0
 3521 029e 0023     		movs	r3, #0
 3522 02a0 3B60     		str	r3, [r7]
 842:main.c        ****         previousDirection = directionState;
 3523              		.loc 1 842 0
 3524 02a2 0B4A     		ldr	r2, .L227+16
 3525 02a4 3B68     		ldr	r3, [r7]
 3526 02a6 1360     		str	r3, [r2]
 843:main.c        ****         return directionState;
 3527              		.loc 1 843 0
 3528 02a8 3B68     		ldr	r3, [r7]
 3529 02aa 05E0     		b	.L200
 3530              	.L222:
 844:main.c        ****     }
 845:main.c        **** 
 846:main.c        ****     // Possible reason
 847:main.c        ****     previousDirection = currentDirection;
 3531              		.loc 1 847 0
 3532 02ac 094B     		ldr	r3, .L227+20
 3533 02ae 1B68     		ldr	r3, [r3]
 3534 02b0 074A     		ldr	r2, .L227+16
 3535 02b2 1360     		str	r3, [r2]
 848:main.c        ****     return previousDirection;
 3536              		.loc 1 848 0
 3537 02b4 064B     		ldr	r3, .L227+16
 3538 02b6 1B68     		ldr	r3, [r3]
 3539              	.L200:
 849:main.c        **** }
 3540              		.loc 1 849 0
 3541 02b8 1846     		mov	r0, r3
 3542 02ba 0837     		adds	r7, r7, #8
 3543              		.cfi_def_cfa_offset 8
 3544 02bc BD46     		mov	sp, r7
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 79


 3545              		.cfi_def_cfa_register 13
 3546              		@ sp needed
 3547 02be 80BD     		pop	{r7, pc}
 3548              	.L228:
 3549              		.align	2
 3550              	.L227:
 3551 02c0 00000000 		.word	s3
 3552 02c4 00000000 		.word	s4
 3553 02c8 00000000 		.word	s5
 3554 02cc 00000000 		.word	s6
 3555 02d0 00000000 		.word	previousDirection
 3556 02d4 00000000 		.word	currentDirection
 3557              		.cfi_endproc
 3558              	.LFE79:
 3559              		.size	CheckSensorDirection, .-CheckSensorDirection
 3560              		.section	.text.SetRobotMovement,"ax",%progbits
 3561              		.align	2
 3562              		.global	SetRobotMovement
 3563              		.thumb
 3564              		.thumb_func
 3565              		.type	SetRobotMovement, %function
 3566              	SetRobotMovement:
 3567              	.LFB80:
 850:main.c        **** 
 851:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 852:main.c        **** void SetRobotMovement() {
 3568              		.loc 1 852 0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 1, uses_anonymous_args = 0
 3572 0000 80B5     		push	{r7, lr}
 3573              		.cfi_def_cfa_offset 8
 3574              		.cfi_offset 7, -8
 3575              		.cfi_offset 14, -4
 3576 0002 00AF     		add	r7, sp, #0
 3577              		.cfi_def_cfa_register 7
 853:main.c        ****     currentDirection = CheckSensorDirection();   
 3578              		.loc 1 853 0
 3579 0004 FFF7FEFF 		bl	CheckSensorDirection
 3580 0008 0246     		mov	r2, r0
 3581 000a 224B     		ldr	r3, .L246
 3582 000c 1A60     		str	r2, [r3]
 854:main.c        ****     
 855:main.c        ****     switch (currentDirection) {
 3583              		.loc 1 855 0
 3584 000e 214B     		ldr	r3, .L246
 3585 0010 1B68     		ldr	r3, [r3]
 3586 0012 0B2B     		cmp	r3, #11
 3587 0014 3CD8     		bhi	.L244
 3588 0016 01A2     		adr	r2, .L232
 3589 0018 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 3590              		.p2align 2
 3591              	.L232:
 3592 001c 4D000000 		.word	.L231+1
 3593 0020 53000000 		.word	.L233+1
 3594 0024 59000000 		.word	.L234+1
 3595 0028 65000000 		.word	.L235+1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 80


 3596 002c 5F000000 		.word	.L236+1
 3597 0030 6B000000 		.word	.L237+1
 3598 0034 8F000000 		.word	.L245+1
 3599 0038 71000000 		.word	.L239+1
 3600 003c 89000000 		.word	.L240+1
 3601 0040 83000000 		.word	.L241+1
 3602 0044 77000000 		.word	.L242+1
 3603 0048 7D000000 		.word	.L243+1
 3604              		.p2align 1
 3605              	.L231:
 856:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 857:main.c        ****         case Forward:
 858:main.c        ****             moveForward();
 3606              		.loc 1 858 0
 3607 004c FFF7FEFF 		bl	moveForward
 859:main.c        ****             break;
 3608              		.loc 1 859 0
 3609 0050 1EE0     		b	.L230
 3610              	.L233:
 860:main.c        ****         case TurnRight:
 861:main.c        ****             turnRight();
 3611              		.loc 1 861 0
 3612 0052 FFF7FEFF 		bl	turnRight
 862:main.c        ****             break;
 3613              		.loc 1 862 0
 3614 0056 1BE0     		b	.L230
 3615              	.L234:
 863:main.c        ****         case TurnLeft:
 864:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 3616              		.loc 1 864 0
 3617 0058 FFF7FEFF 		bl	turnLeft
 865:main.c        ****             break;
 3618              		.loc 1 865 0
 3619 005c 18E0     		b	.L230
 3620              	.L236:
 866:main.c        ****         case AdjustToTheRight:
 867:main.c        ****             adjustRight();
 3621              		.loc 1 867 0
 3622 005e FFF7FEFF 		bl	adjustRight
 868:main.c        ****             break;
 3623              		.loc 1 868 0
 3624 0062 15E0     		b	.L230
 3625              	.L235:
 869:main.c        ****         case AdjustToTheLeft:
 870:main.c        ****             adjustLeft();
 3626              		.loc 1 870 0
 3627 0064 FFF7FEFF 		bl	adjustLeft
 871:main.c        ****             break;
 3628              		.loc 1 871 0
 3629 0068 12E0     		b	.L230
 3630              	.L237:
 872:main.c        ****         case Stop:
 873:main.c        ****             stopMoving();
 3631              		.loc 1 873 0
 3632 006a FFF7FEFF 		bl	stopMoving
 874:main.c        ****             break;
 3633              		.loc 1 874 0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 81


 3634 006e 0FE0     		b	.L230
 3635              	.L239:
 875:main.c        ****         case waitForTurn:
 876:main.c        ****             moveForward(); 
 3636              		.loc 1 876 0
 3637 0070 FFF7FEFF 		bl	moveForward
 877:main.c        ****             break;
 3638              		.loc 1 877 0
 3639 0074 0CE0     		b	.L230
 3640              	.L242:
 878:main.c        ****         case ForwardAfterTurn:
 879:main.c        ****             moveForward();
 3641              		.loc 1 879 0
 3642 0076 FFF7FEFF 		bl	moveForward
 880:main.c        ****             break;
 3643              		.loc 1 880 0
 3644 007a 09E0     		b	.L230
 3645              	.L243:
 881:main.c        ****         case Backward:
 882:main.c        ****             moveBackward();
 3646              		.loc 1 882 0
 3647 007c FFF7FEFF 		bl	moveBackward
 883:main.c        ****             break;
 3648              		.loc 1 883 0
 3649 0080 06E0     		b	.L230
 3650              	.L241:
 884:main.c        ****         case waitForLeftTurn:
 885:main.c        ****             moveForward();
 3651              		.loc 1 885 0
 3652 0082 FFF7FEFF 		bl	moveForward
 886:main.c        ****             break;
 3653              		.loc 1 886 0
 3654 0086 03E0     		b	.L230
 3655              	.L240:
 887:main.c        ****         case waitForRightTurn:
 888:main.c        ****             moveForward();
 3656              		.loc 1 888 0
 3657 0088 FFF7FEFF 		bl	moveForward
 889:main.c        ****             break;
 3658              		.loc 1 889 0
 3659 008c 00E0     		b	.L230
 3660              	.L245:
 890:main.c        ****         case Unknown:
 891:main.c        ****             // UNKNOWN CONFIGURATION
 892:main.c        ****             break;  
 3661              		.loc 1 892 0
 3662 008e 00BF     		nop
 3663              	.L230:
 3664              	.L244:
 893:main.c        ****     }
 894:main.c        **** }...
 3665              		.loc 1 894 0
 3666 0090 00BF     		nop
 3667 0092 80BD     		pop	{r7, pc}
 3668              	.L247:
 3669              		.align	2
 3670              	.L246:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 82


 3671 0094 00000000 		.word	currentDirection
 3672              		.cfi_endproc
 3673              	.LFE80:
 3674              		.size	SetRobotMovement, .-SetRobotMovement
 3675              		.text
 3676              	.Letext0:
 3677              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3678              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.4\\psoc creator\\import\\gnu\\arm\\5.4.
 3679              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3680              		.file 5 "vars.h"
 3681              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3682              		.file 7 "map.h"
 3683              		.section	.debug_info,"",%progbits
 3684              	.Ldebug_info0:
 3685 0000 06080000 		.4byte	0x806
 3686 0004 0400     		.2byte	0x4
 3687 0006 00000000 		.4byte	.Ldebug_abbrev0
 3688 000a 04       		.byte	0x4
 3689 000b 01       		.uleb128 0x1
 3690 000c 86000000 		.4byte	.LASF131
 3691 0010 0C       		.byte	0xc
 3692 0011 2E000000 		.4byte	.LASF132
 3693 0015 95010000 		.4byte	.LASF133
 3694 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3695 001d 00000000 		.4byte	0
 3696 0021 00000000 		.4byte	.Ldebug_line0
 3697 0025 02       		.uleb128 0x2
 3698 0026 01       		.byte	0x1
 3699 0027 06       		.byte	0x6
 3700 0028 24060000 		.4byte	.LASF0
 3701 002c 02       		.uleb128 0x2
 3702 002d 01       		.byte	0x1
 3703 002e 08       		.byte	0x8
 3704 002f 84050000 		.4byte	.LASF1
 3705 0033 02       		.uleb128 0x2
 3706 0034 02       		.byte	0x2
 3707 0035 05       		.byte	0x5
 3708 0036 8A040000 		.4byte	.LASF2
 3709 003a 02       		.uleb128 0x2
 3710 003b 02       		.byte	0x2
 3711 003c 07       		.byte	0x7
 3712 003d 51060000 		.4byte	.LASF3
 3713 0041 03       		.uleb128 0x3
 3714 0042 61000000 		.4byte	.LASF12
 3715 0046 02       		.byte	0x2
 3716 0047 3F       		.byte	0x3f
 3717 0048 4C000000 		.4byte	0x4c
 3718 004c 02       		.uleb128 0x2
 3719 004d 04       		.byte	0x4
 3720 004e 05       		.byte	0x5
 3721 004f A0040000 		.4byte	.LASF4
 3722 0053 02       		.uleb128 0x2
 3723 0054 04       		.byte	0x4
 3724 0055 07       		.byte	0x7
 3725 0056 41050000 		.4byte	.LASF5
 3726 005a 02       		.uleb128 0x2
 3727 005b 08       		.byte	0x8
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 83


 3728 005c 05       		.byte	0x5
 3729 005d 59030000 		.4byte	.LASF6
 3730 0061 02       		.uleb128 0x2
 3731 0062 08       		.byte	0x8
 3732 0063 07       		.byte	0x7
 3733 0064 05020000 		.4byte	.LASF7
 3734 0068 04       		.uleb128 0x4
 3735 0069 04       		.byte	0x4
 3736 006a 05       		.byte	0x5
 3737 006b 696E7400 		.ascii	"int\000"
 3738 006f 02       		.uleb128 0x2
 3739 0070 04       		.byte	0x4
 3740 0071 07       		.byte	0x7
 3741 0072 46000000 		.4byte	.LASF8
 3742 0076 02       		.uleb128 0x2
 3743 0077 08       		.byte	0x8
 3744 0078 04       		.byte	0x4
 3745 0079 43040000 		.4byte	.LASF9
 3746 007d 02       		.uleb128 0x2
 3747 007e 04       		.byte	0x4
 3748 007f 07       		.byte	0x7
 3749 0080 38050000 		.4byte	.LASF10
 3750 0084 02       		.uleb128 0x2
 3751 0085 01       		.byte	0x1
 3752 0086 08       		.byte	0x8
 3753 0087 00030000 		.4byte	.LASF11
 3754 008b 03       		.uleb128 0x3
 3755 008c 5E050000 		.4byte	.LASF13
 3756 0090 03       		.byte	0x3
 3757 0091 2C       		.byte	0x2c
 3758 0092 41000000 		.4byte	0x41
 3759 0096 05       		.uleb128 0x5
 3760 0097 9C060000 		.4byte	.LASF14
 3761 009b 04       		.byte	0x4
 3762 009c E901     		.2byte	0x1e9
 3763 009e 2C000000 		.4byte	0x2c
 3764 00a2 05       		.uleb128 0x5
 3765 00a3 0E030000 		.4byte	.LASF15
 3766 00a7 04       		.byte	0x4
 3767 00a8 EA01     		.2byte	0x1ea
 3768 00aa 3A000000 		.4byte	0x3a
 3769 00ae 05       		.uleb128 0x5
 3770 00af E8030000 		.4byte	.LASF16
 3771 00b3 04       		.byte	0x4
 3772 00b4 EB01     		.2byte	0x1eb
 3773 00b6 53000000 		.4byte	0x53
 3774 00ba 05       		.uleb128 0x5
 3775 00bb 15030000 		.4byte	.LASF17
 3776 00bf 04       		.byte	0x4
 3777 00c0 EC01     		.2byte	0x1ec
 3778 00c2 25000000 		.4byte	0x25
 3779 00c6 05       		.uleb128 0x5
 3780 00c7 6B000000 		.4byte	.LASF18
 3781 00cb 04       		.byte	0x4
 3782 00cc ED01     		.2byte	0x1ed
 3783 00ce 33000000 		.4byte	0x33
 3784 00d2 02       		.uleb128 0x2
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 84


 3785 00d3 04       		.byte	0x4
 3786 00d4 04       		.byte	0x4
 3787 00d5 E9010000 		.4byte	.LASF19
 3788 00d9 02       		.uleb128 0x2
 3789 00da 08       		.byte	0x8
 3790 00db 04       		.byte	0x4
 3791 00dc A2060000 		.4byte	.LASF20
 3792 00e0 06       		.uleb128 0x6
 3793 00e1 0A040000 		.4byte	.LASF134
 3794 00e5 20       		.byte	0x20
 3795 00e6 05       		.byte	0x5
 3796 00e7 28       		.byte	0x28
 3797 00e8 B9010000 		.4byte	0x1b9
 3798 00ec 07       		.uleb128 0x7
 3799 00ed 14040000 		.4byte	.LASF21
 3800 00f1 05       		.byte	0x5
 3801 00f2 2A       		.byte	0x2a
 3802 00f3 BA000000 		.4byte	0xba
 3803 00f7 00       		.byte	0
 3804 00f8 07       		.uleb128 0x7
 3805 00f9 FF010000 		.4byte	.LASF22
 3806 00fd 05       		.byte	0x5
 3807 00fe 2B       		.byte	0x2b
 3808 00ff 96000000 		.4byte	0x96
 3809 0103 01       		.byte	0x1
 3810 0104 07       		.uleb128 0x7
 3811 0105 73050000 		.4byte	.LASF23
 3812 0109 05       		.byte	0x5
 3813 010a 2C       		.byte	0x2c
 3814 010b C6000000 		.4byte	0xc6
 3815 010f 02       		.byte	0x2
 3816 0110 07       		.uleb128 0x7
 3817 0111 D7020000 		.4byte	.LASF24
 3818 0115 05       		.byte	0x5
 3819 0116 2D       		.byte	0x2d
 3820 0117 C6000000 		.4byte	0xc6
 3821 011b 04       		.byte	0x4
 3822 011c 07       		.uleb128 0x7
 3823 011d 64060000 		.4byte	.LASF25
 3824 0121 05       		.byte	0x5
 3825 0122 2E       		.byte	0x2e
 3826 0123 C6000000 		.4byte	0xc6
 3827 0127 06       		.byte	0x6
 3828 0128 07       		.uleb128 0x7
 3829 0129 EC060000 		.4byte	.LASF26
 3830 012d 05       		.byte	0x5
 3831 012e 2F       		.byte	0x2f
 3832 012f C6000000 		.4byte	0xc6
 3833 0133 08       		.byte	0x8
 3834 0134 07       		.uleb128 0x7
 3835 0135 B7030000 		.4byte	.LASF27
 3836 0139 05       		.byte	0x5
 3837 013a 30       		.byte	0x30
 3838 013b C6000000 		.4byte	0xc6
 3839 013f 0A       		.byte	0xa
 3840 0140 07       		.uleb128 0x7
 3841 0141 05030000 		.4byte	.LASF28
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 85


 3842 0145 05       		.byte	0x5
 3843 0146 31       		.byte	0x31
 3844 0147 C6000000 		.4byte	0xc6
 3845 014b 0C       		.byte	0xc
 3846 014c 07       		.uleb128 0x7
 3847 014d 19040000 		.4byte	.LASF29
 3848 0151 05       		.byte	0x5
 3849 0152 32       		.byte	0x32
 3850 0153 C6000000 		.4byte	0xc6
 3851 0157 0E       		.byte	0xe
 3852 0158 07       		.uleb128 0x7
 3853 0159 67030000 		.4byte	.LASF30
 3854 015d 05       		.byte	0x5
 3855 015e 33       		.byte	0x33
 3856 015f C6000000 		.4byte	0xc6
 3857 0163 10       		.byte	0x10
 3858 0164 07       		.uleb128 0x7
 3859 0165 16050000 		.4byte	.LASF31
 3860 0169 05       		.byte	0x5
 3861 016a 34       		.byte	0x34
 3862 016b C6000000 		.4byte	0xc6
 3863 016f 12       		.byte	0x12
 3864 0170 07       		.uleb128 0x7
 3865 0171 14070000 		.4byte	.LASF32
 3866 0175 05       		.byte	0x5
 3867 0176 35       		.byte	0x35
 3868 0177 C6000000 		.4byte	0xc6
 3869 017b 14       		.byte	0x14
 3870 017c 07       		.uleb128 0x7
 3871 017d 25030000 		.4byte	.LASF33
 3872 0181 05       		.byte	0x5
 3873 0182 36       		.byte	0x36
 3874 0183 C6000000 		.4byte	0xc6
 3875 0187 16       		.byte	0x16
 3876 0188 07       		.uleb128 0x7
 3877 0189 2E010000 		.4byte	.LASF34
 3878 018d 05       		.byte	0x5
 3879 018e 37       		.byte	0x37
 3880 018f C6000000 		.4byte	0xc6
 3881 0193 18       		.byte	0x18
 3882 0194 07       		.uleb128 0x7
 3883 0195 DA040000 		.4byte	.LASF35
 3884 0199 05       		.byte	0x5
 3885 019a 38       		.byte	0x38
 3886 019b C6000000 		.4byte	0xc6
 3887 019f 1A       		.byte	0x1a
 3888 01a0 07       		.uleb128 0x7
 3889 01a1 AE030000 		.4byte	.LASF36
 3890 01a5 05       		.byte	0x5
 3891 01a6 39       		.byte	0x39
 3892 01a7 C6000000 		.4byte	0xc6
 3893 01ab 1C       		.byte	0x1c
 3894 01ac 07       		.uleb128 0x7
 3895 01ad 6F010000 		.4byte	.LASF37
 3896 01b1 05       		.byte	0x5
 3897 01b2 3A       		.byte	0x3a
 3898 01b3 C6000000 		.4byte	0xc6
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 86


 3899 01b7 1E       		.byte	0x1e
 3900 01b8 00       		.byte	0
 3901 01b9 08       		.uleb128 0x8
 3902 01ba 11000000 		.4byte	.LASF50
 3903 01be 04       		.byte	0x4
 3904 01bf 6F000000 		.4byte	0x6f
 3905 01c3 01       		.byte	0x1
 3906 01c4 28       		.byte	0x28
 3907 01c5 12020000 		.4byte	0x212
 3908 01c9 09       		.uleb128 0x9
 3909 01ca C0040000 		.4byte	.LASF38
 3910 01ce 00       		.byte	0
 3911 01cf 09       		.uleb128 0x9
 3912 01d0 00040000 		.4byte	.LASF39
 3913 01d4 01       		.byte	0x1
 3914 01d5 09       		.uleb128 0x9
 3915 01d6 BF030000 		.4byte	.LASF40
 3916 01da 02       		.byte	0x2
 3917 01db 09       		.uleb128 0x9
 3918 01dc 7B060000 		.4byte	.LASF41
 3919 01e0 03       		.byte	0x3
 3920 01e1 09       		.uleb128 0x9
 3921 01e2 A8050000 		.4byte	.LASF42
 3922 01e6 04       		.byte	0x4
 3923 01e7 09       		.uleb128 0x9
 3924 01e8 C9050000 		.4byte	.LASF43
 3925 01ec 05       		.byte	0x5
 3926 01ed 09       		.uleb128 0x9
 3927 01ee D1030000 		.4byte	.LASF44
 3928 01f2 06       		.byte	0x6
 3929 01f3 09       		.uleb128 0x9
 3930 01f4 CB020000 		.4byte	.LASF45
 3931 01f8 07       		.byte	0x7
 3932 01f9 09       		.uleb128 0x9
 3933 01fa EF030000 		.4byte	.LASF46
 3934 01fe 08       		.byte	0x8
 3935 01ff 09       		.uleb128 0x9
 3936 0200 49030000 		.4byte	.LASF47
 3937 0204 09       		.byte	0x9
 3938 0205 09       		.uleb128 0x9
 3939 0206 00000000 		.4byte	.LASF48
 3940 020a 0A       		.byte	0xa
 3941 020b 09       		.uleb128 0x9
 3942 020c 8B060000 		.4byte	.LASF49
 3943 0210 0B       		.byte	0xb
 3944 0211 00       		.byte	0
 3945 0212 08       		.uleb128 0x8
 3946 0213 EA040000 		.4byte	.LASF51
 3947 0217 01       		.byte	0x1
 3948 0218 2C000000 		.4byte	0x2c
 3949 021c 01       		.byte	0x1
 3950 021d 2A       		.byte	0x2a
 3951 021e 3A020000 		.4byte	0x23a
 3952 0222 0A       		.uleb128 0xa
 3953 0223 557000   		.ascii	"Up\000"
 3954 0226 00       		.byte	0
 3955 0227 09       		.uleb128 0x9
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 87


 3956 0228 FB040000 		.4byte	.LASF52
 3957 022c 01       		.byte	0x1
 3958 022d 09       		.uleb128 0x9
 3959 022e 5C020000 		.4byte	.LASF53
 3960 0232 02       		.byte	0x2
 3961 0233 09       		.uleb128 0x9
 3962 0234 00050000 		.4byte	.LASF54
 3963 0238 03       		.byte	0x3
 3964 0239 00       		.byte	0
 3965 023a 0B       		.uleb128 0xb
 3966 023b 66050000 		.4byte	.LASF55
 3967 023f 01       		.byte	0x1
 3968 0240 2C000000 		.4byte	0x2c
 3969 0244 01       		.byte	0x1
 3970 0245 3901     		.2byte	0x139
 3971 0247 82020000 		.4byte	0x282
 3972 024b 09       		.uleb128 0x9
 3973 024c 3E070000 		.4byte	.LASF56
 3974 0250 00       		.byte	0
 3975 0251 09       		.uleb128 0x9
 3976 0252 53000000 		.4byte	.LASF57
 3977 0256 01       		.byte	0x1
 3978 0257 09       		.uleb128 0x9
 3979 0258 30060000 		.4byte	.LASF58
 3980 025c 02       		.byte	0x2
 3981 025d 09       		.uleb128 0x9
 3982 025e 01060000 		.4byte	.LASF59
 3983 0262 03       		.byte	0x3
 3984 0263 09       		.uleb128 0x9
 3985 0264 38040000 		.4byte	.LASF60
 3986 0268 04       		.byte	0x4
 3987 0269 09       		.uleb128 0x9
 3988 026a 36010000 		.4byte	.LASF61
 3989 026e 05       		.byte	0x5
 3990 026f 09       		.uleb128 0x9
 3991 0270 20000000 		.4byte	.LASF62
 3992 0274 06       		.byte	0x6
 3993 0275 09       		.uleb128 0x9
 3994 0276 8C030000 		.4byte	.LASF63
 3995 027a 07       		.byte	0x7
 3996 027b 09       		.uleb128 0x9
 3997 027c 83030000 		.4byte	.LASF64
 3998 0280 08       		.byte	0x8
 3999 0281 00       		.byte	0
 4000 0282 0C       		.uleb128 0xc
 4001 0283 3E030000 		.4byte	.LASF72
 4002 0287 01       		.byte	0x1
 4003 0288 4B       		.byte	0x4b
 4004 0289 00000000 		.4byte	.LFB64
 4005 028d F4000000 		.4byte	.LFE64-.LFB64
 4006 0291 01       		.uleb128 0x1
 4007 0292 9C       		.byte	0x9c
 4008 0293 B0020000 		.4byte	0x2b0
 4009 0297 0D       		.uleb128 0xd
 4010 0298 58000000 		.4byte	.LBB2
 4011 029c 62000000 		.4byte	.LBE2-.LBB2
 4012 02a0 0E       		.uleb128 0xe
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 88


 4013 02a1 A2030000 		.4byte	.LASF71
 4014 02a5 01       		.byte	0x1
 4015 02a6 59       		.byte	0x59
 4016 02a7 D2000000 		.4byte	0xd2
 4017 02ab 02       		.uleb128 0x2
 4018 02ac 91       		.byte	0x91
 4019 02ad 6C       		.sleb128 -20
 4020 02ae 00       		.byte	0
 4021 02af 00       		.byte	0
 4022 02b0 0F       		.uleb128 0xf
 4023 02b1 32030000 		.4byte	.LASF65
 4024 02b5 01       		.byte	0x1
 4025 02b6 64       		.byte	0x64
 4026 02b7 00000000 		.4byte	.LFB65
 4027 02bb 18000000 		.4byte	.LFE65-.LFB65
 4028 02bf 01       		.uleb128 0x1
 4029 02c0 9C       		.byte	0x9c
 4030 02c1 0F       		.uleb128 0xf
 4031 02c2 94040000 		.4byte	.LASF66
 4032 02c6 01       		.byte	0x1
 4033 02c7 6A       		.byte	0x6a
 4034 02c8 00000000 		.4byte	.LFB66
 4035 02cc 18000000 		.4byte	.LFE66-.LFB66
 4036 02d0 01       		.uleb128 0x1
 4037 02d1 9C       		.byte	0x9c
 4038 02d2 0F       		.uleb128 0xf
 4039 02d3 18060000 		.4byte	.LASF67
 4040 02d7 01       		.byte	0x1
 4041 02d8 70       		.byte	0x70
 4042 02d9 00000000 		.4byte	.LFB67
 4043 02dd 18000000 		.4byte	.LFE67-.LFB67
 4044 02e1 01       		.uleb128 0x1
 4045 02e2 9C       		.byte	0x9c
 4046 02e3 0F       		.uleb128 0xf
 4047 02e4 14010000 		.4byte	.LASF68
 4048 02e8 01       		.byte	0x1
 4049 02e9 76       		.byte	0x76
 4050 02ea 00000000 		.4byte	.LFB68
 4051 02ee 18000000 		.4byte	.LFE68-.LFB68
 4052 02f2 01       		.uleb128 0x1
 4053 02f3 9C       		.byte	0x9c
 4054 02f4 10       		.uleb128 0x10
 4055 02f5 39020000 		.4byte	.LASF69
 4056 02f9 01       		.byte	0x1
 4057 02fa 7C       		.byte	0x7c
 4058 02fb 00000000 		.4byte	.LFB69
 4059 02ff 38000000 		.4byte	.LFE69-.LFB69
 4060 0303 01       		.uleb128 0x1
 4061 0304 9C       		.byte	0x9c
 4062 0305 11       		.uleb128 0x11
 4063 0306 76060000 		.4byte	.LASF70
 4064 030a 01       		.byte	0x1
 4065 030b 88       		.byte	0x88
 4066 030c 68000000 		.4byte	0x68
 4067 0310 00000000 		.4byte	.LFB70
 4068 0314 A0000000 		.4byte	.LFE70-.LFB70
 4069 0318 01       		.uleb128 0x1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 89


 4070 0319 9C       		.byte	0x9c
 4071 031a 12       		.uleb128 0x12
 4072 031b 7C020000 		.4byte	.LASF77
 4073 031f 01       		.byte	0x1
 4074 0320 B8       		.byte	0xb8
 4075 0321 C6000000 		.4byte	0xc6
 4076 0325 00000000 		.4byte	.LFB71
 4077 0329 54000000 		.4byte	.LFE71-.LFB71
 4078 032d 01       		.uleb128 0x1
 4079 032e 9C       		.byte	0x9c
 4080 032f 5E030000 		.4byte	0x35e
 4081 0333 13       		.uleb128 0x13
 4082 0334 F9010000 		.4byte	.LASF79
 4083 0338 01       		.byte	0x1
 4084 0339 B8       		.byte	0xb8
 4085 033a A2000000 		.4byte	0xa2
 4086 033e 02       		.uleb128 0x2
 4087 033f 91       		.byte	0x91
 4088 0340 66       		.sleb128 -26
 4089 0341 14       		.uleb128 0x14
 4090 0342 63707300 		.ascii	"cps\000"
 4091 0346 01       		.byte	0x1
 4092 0347 BA       		.byte	0xba
 4093 0348 D2000000 		.4byte	0xd2
 4094 034c 02       		.uleb128 0x2
 4095 034d 91       		.byte	0x91
 4096 034e 6C       		.sleb128 -20
 4097 034f 14       		.uleb128 0x14
 4098 0350 72706D00 		.ascii	"rpm\000"
 4099 0354 01       		.byte	0x1
 4100 0355 BB       		.byte	0xbb
 4101 0356 C6000000 		.4byte	0xc6
 4102 035a 02       		.uleb128 0x2
 4103 035b 91       		.byte	0x91
 4104 035c 6A       		.sleb128 -22
 4105 035d 00       		.byte	0
 4106 035e 15       		.uleb128 0x15
 4107 035f 5E010000 		.4byte	.LASF92
 4108 0363 01       		.byte	0x1
 4109 0364 C3       		.byte	0xc3
 4110 0365 00000000 		.4byte	.LFB72
 4111 0369 34000000 		.4byte	.LFE72-.LFB72
 4112 036d 01       		.uleb128 0x1
 4113 036e 9C       		.byte	0x9c
 4114 036f 16       		.uleb128 0x16
 4115 0370 46020000 		.4byte	.LASF73
 4116 0374 01       		.byte	0x1
 4117 0375 CF       		.byte	0xcf
 4118 0376 B9010000 		.4byte	0x1b9
 4119 037a 00000000 		.4byte	.LFB73
 4120 037e 98040000 		.4byte	.LFE73-.LFB73
 4121 0382 01       		.uleb128 0x1
 4122 0383 9C       		.byte	0x9c
 4123 0384 97030000 		.4byte	0x397
 4124 0388 0E       		.uleb128 0xe
 4125 0389 D9030000 		.4byte	.LASF74
 4126 038d 01       		.byte	0x1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 90


 4127 038e D0       		.byte	0xd0
 4128 038f B9010000 		.4byte	0x1b9
 4129 0393 02       		.uleb128 0x2
 4130 0394 91       		.byte	0x91
 4131 0395 74       		.sleb128 -12
 4132 0396 00       		.byte	0
 4133 0397 17       		.uleb128 0x17
 4134 0398 9D020000 		.4byte	.LASF75
 4135 039c 01       		.byte	0x1
 4136 039d 2001     		.2byte	0x120
 4137 039f B9010000 		.4byte	0x1b9
 4138 03a3 00000000 		.4byte	.LFB74
 4139 03a7 6C010000 		.4byte	.LFE74-.LFB74
 4140 03ab 01       		.uleb128 0x1
 4141 03ac 9C       		.byte	0x9c
 4142 03ad 18       		.uleb128 0x18
 4143 03ae B9050000 		.4byte	.LASF76
 4144 03b2 01       		.byte	0x1
 4145 03b3 3D01     		.2byte	0x13d
 4146 03b5 3A020000 		.4byte	0x23a
 4147 03b9 00000000 		.4byte	.LFB75
 4148 03bd 20010000 		.4byte	.LFE75-.LFB75
 4149 03c1 01       		.uleb128 0x1
 4150 03c2 9C       		.byte	0x9c
 4151 03c3 19       		.uleb128 0x19
 4152 03c4 C9060000 		.4byte	.LASF78
 4153 03c8 01       		.byte	0x1
 4154 03c9 5A01     		.2byte	0x15a
 4155 03cb 3A020000 		.4byte	0x23a
 4156 03cf 00000000 		.4byte	.LFB76
 4157 03d3 4C010000 		.4byte	.LFE76-.LFB76
 4158 03d7 01       		.uleb128 0x1
 4159 03d8 9C       		.byte	0x9c
 4160 03d9 ED030000 		.4byte	0x3ed
 4161 03dd 1A       		.uleb128 0x1a
 4162 03de 8B020000 		.4byte	.LASF80
 4163 03e2 01       		.byte	0x1
 4164 03e3 5A01     		.2byte	0x15a
 4165 03e5 3A020000 		.4byte	0x23a
 4166 03e9 02       		.uleb128 0x2
 4167 03ea 91       		.byte	0x91
 4168 03eb 77       		.sleb128 -9
 4169 03ec 00       		.byte	0
 4170 03ed 19       		.uleb128 0x19
 4171 03ee D5050000 		.4byte	.LASF81
 4172 03f2 01       		.byte	0x1
 4173 03f3 C601     		.2byte	0x1c6
 4174 03f5 96000000 		.4byte	0x96
 4175 03f9 00000000 		.4byte	.LFB77
 4176 03fd 04050000 		.4byte	.LFE77-.LFB77
 4177 0401 01       		.uleb128 0x1
 4178 0402 9C       		.byte	0x9c
 4179 0403 35040000 		.4byte	0x435
 4180 0407 1A       		.uleb128 0x1a
 4181 0408 06050000 		.4byte	.LASF82
 4182 040c 01       		.byte	0x1
 4183 040d C601     		.2byte	0x1c6
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 91


 4184 040f 3A020000 		.4byte	0x23a
 4185 0413 02       		.uleb128 0x2
 4186 0414 91       		.byte	0x91
 4187 0415 77       		.sleb128 -9
 4188 0416 1A       		.uleb128 0x1a
 4189 0417 4F040000 		.4byte	.LASF83
 4190 041b 01       		.byte	0x1
 4191 041c C601     		.2byte	0x1c6
 4192 041e 96000000 		.4byte	0x96
 4193 0422 02       		.uleb128 0x2
 4194 0423 91       		.byte	0x91
 4195 0424 76       		.sleb128 -10
 4196 0425 1A       		.uleb128 0x1a
 4197 0426 8A010000 		.4byte	.LASF84
 4198 042a 01       		.byte	0x1
 4199 042b C601     		.2byte	0x1c6
 4200 042d 96000000 		.4byte	0x96
 4201 0431 02       		.uleb128 0x2
 4202 0432 91       		.byte	0x91
 4203 0433 75       		.sleb128 -11
 4204 0434 00       		.byte	0
 4205 0435 1B       		.uleb128 0x1b
 4206 0436 AD020000 		.4byte	.LASF135
 4207 043a 01       		.byte	0x1
 4208 043b 5402     		.2byte	0x254
 4209 043d 00000000 		.4byte	.LFB78
 4210 0441 DC000000 		.4byte	.LFE78-.LFB78
 4211 0445 01       		.uleb128 0x1
 4212 0446 9C       		.byte	0x9c
 4213 0447 A6040000 		.4byte	0x4a6
 4214 044b 1C       		.uleb128 0x1c
 4215 044c 2D070000 		.4byte	.LASF85
 4216 0450 01       		.byte	0x1
 4217 0451 6502     		.2byte	0x265
 4218 0453 3A020000 		.4byte	0x23a
 4219 0457 02       		.uleb128 0x2
 4220 0458 91       		.byte	0x91
 4221 0459 67       		.sleb128 -25
 4222 045a 1C       		.uleb128 0x1c
 4223 045b 06050000 		.4byte	.LASF82
 4224 045f 01       		.byte	0x1
 4225 0460 6902     		.2byte	0x269
 4226 0462 3A020000 		.4byte	0x23a
 4227 0466 02       		.uleb128 0x2
 4228 0467 91       		.byte	0x91
 4229 0468 66       		.sleb128 -26
 4230 0469 1C       		.uleb128 0x1c
 4231 046a 94060000 		.4byte	.LASF86
 4232 046e 01       		.byte	0x1
 4233 046f 7302     		.2byte	0x273
 4234 0471 68000000 		.4byte	0x68
 4235 0475 02       		.uleb128 0x2
 4236 0476 91       		.byte	0x91
 4237 0477 74       		.sleb128 -12
 4238 0478 1C       		.uleb128 0x1c
 4239 0479 FD060000 		.4byte	.LASF87
 4240 047d 01       		.byte	0x1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 92


 4241 047e 7402     		.2byte	0x274
 4242 0480 68000000 		.4byte	0x68
 4243 0484 02       		.uleb128 0x2
 4244 0485 91       		.byte	0x91
 4245 0486 70       		.sleb128 -16
 4246 0487 1C       		.uleb128 0x1c
 4247 0488 E2040000 		.4byte	.LASF88
 4248 048c 01       		.byte	0x1
 4249 048d 7502     		.2byte	0x275
 4250 048f 68000000 		.4byte	0x68
 4251 0493 02       		.uleb128 0x2
 4252 0494 91       		.byte	0x91
 4253 0495 6C       		.sleb128 -20
 4254 0496 1C       		.uleb128 0x1c
 4255 0497 7E000000 		.4byte	.LASF89
 4256 049b 01       		.byte	0x1
 4257 049c 7602     		.2byte	0x276
 4258 049e 68000000 		.4byte	0x68
 4259 04a2 02       		.uleb128 0x2
 4260 04a3 91       		.byte	0x91
 4261 04a4 68       		.sleb128 -24
 4262 04a5 00       		.byte	0
 4263 04a6 1D       		.uleb128 0x1d
 4264 04a7 A9060000 		.4byte	.LASF90
 4265 04ab 01       		.byte	0x1
 4266 04ac A302     		.2byte	0x2a3
 4267 04ae B9010000 		.4byte	0x1b9
 4268 04b2 00000000 		.4byte	.LFB79
 4269 04b6 D8020000 		.4byte	.LFE79-.LFB79
 4270 04ba 01       		.uleb128 0x1
 4271 04bb 9C       		.byte	0x9c
 4272 04bc DF040000 		.4byte	0x4df
 4273 04c0 1C       		.uleb128 0x1c
 4274 04c1 35000000 		.4byte	.LASF91
 4275 04c5 01       		.byte	0x1
 4276 04c6 A402     		.2byte	0x2a4
 4277 04c8 D2000000 		.4byte	0xd2
 4278 04cc 02       		.uleb128 0x2
 4279 04cd 91       		.byte	0x91
 4280 04ce 74       		.sleb128 -12
 4281 04cf 1C       		.uleb128 0x1c
 4282 04d0 D9030000 		.4byte	.LASF74
 4283 04d4 01       		.byte	0x1
 4284 04d5 AA02     		.2byte	0x2aa
 4285 04d7 B9010000 		.4byte	0x1b9
 4286 04db 02       		.uleb128 0x2
 4287 04dc 91       		.byte	0x91
 4288 04dd 70       		.sleb128 -16
 4289 04de 00       		.byte	0
 4290 04df 1E       		.uleb128 0x1e
 4291 04e0 28020000 		.4byte	.LASF93
 4292 04e4 01       		.byte	0x1
 4293 04e5 5403     		.2byte	0x354
 4294 04e7 00000000 		.4byte	.LFB80
 4295 04eb 98000000 		.4byte	.LFE80-.LFB80
 4296 04ef 01       		.uleb128 0x1
 4297 04f0 9C       		.byte	0x9c
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 93


 4298 04f1 1F       		.uleb128 0x1f
 4299 04f2 A9040000 		.4byte	.LASF94
 4300 04f6 06       		.byte	0x6
 4301 04f7 1207     		.2byte	0x712
 4302 04f9 FD040000 		.4byte	0x4fd
 4303 04fd 20       		.uleb128 0x20
 4304 04fe 8B000000 		.4byte	0x8b
 4305 0502 21       		.uleb128 0x21
 4306 0503 747300   		.ascii	"ts\000"
 4307 0506 05       		.byte	0x5
 4308 0507 10       		.byte	0x10
 4309 0508 96000000 		.4byte	0x96
 4310 050c 05       		.uleb128 0x5
 4311 050d 03       		.byte	0x3
 4312 050e 00000000 		.4byte	ts
 4313 0512 22       		.uleb128 0x22
 4314 0513 CE050000 		.4byte	.LASF95
 4315 0517 05       		.byte	0x5
 4316 0518 11       		.byte	0x11
 4317 0519 A2000000 		.4byte	0xa2
 4318 051d 05       		.uleb128 0x5
 4319 051e 03       		.byte	0x3
 4320 051f 00000000 		.4byte	ts_enc
 4321 0523 22       		.uleb128 0x22
 4322 0524 B6040000 		.4byte	.LASF96
 4323 0528 05       		.byte	0x5
 4324 0529 12       		.byte	0x12
 4325 052a A2000000 		.4byte	0xa2
 4326 052e 05       		.uleb128 0x5
 4327 052f 03       		.byte	0x3
 4328 0530 00000000 		.4byte	ts_update
 4329 0534 22       		.uleb128 0x22
 4330 0535 C8030000 		.4byte	.LASF97
 4331 0539 05       		.byte	0x5
 4332 053a 13       		.byte	0x13
 4333 053b A2000000 		.4byte	0xa2
 4334 053f 05       		.uleb128 0x5
 4335 0540 03       		.byte	0x3
 4336 0541 00000000 		.4byte	ts_speed
 4337 0545 22       		.uleb128 0x22
 4338 0546 E2020000 		.4byte	.LASF98
 4339 054a 05       		.byte	0x5
 4340 054b 14       		.byte	0x14
 4341 054c A2000000 		.4byte	0xa2
 4342 0550 05       		.uleb128 0x5
 4343 0551 03       		.byte	0x3
 4344 0552 00000000 		.4byte	ts_display
 4345 0556 22       		.uleb128 0x22
 4346 0557 70020000 		.4byte	.LASF99
 4347 055b 05       		.byte	0x5
 4348 055c 16       		.byte	0x16
 4349 055d 96000000 		.4byte	0x96
 4350 0561 05       		.uleb128 0x5
 4351 0562 03       		.byte	0x3
 4352 0563 00000000 		.4byte	flag_ts_enc
 4353 0567 22       		.uleb128 0x22
 4354 0568 61020000 		.4byte	.LASF100
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 94


 4355 056c 05       		.byte	0x5
 4356 056d 17       		.byte	0x17
 4357 056e 96000000 		.4byte	0x96
 4358 0572 05       		.uleb128 0x5
 4359 0573 03       		.byte	0x3
 4360 0574 00000000 		.4byte	flag_ts_update
 4361 0578 22       		.uleb128 0x22
 4362 0579 5A040000 		.4byte	.LASF101
 4363 057d 05       		.byte	0x5
 4364 057e 18       		.byte	0x18
 4365 057f 96000000 		.4byte	0x96
 4366 0583 05       		.uleb128 0x5
 4367 0584 03       		.byte	0x3
 4368 0585 00000000 		.4byte	flag_ts_speed
 4369 0589 22       		.uleb128 0x22
 4370 058a 1D070000 		.4byte	.LASF102
 4371 058e 05       		.byte	0x5
 4372 058f 19       		.byte	0x19
 4373 0590 96000000 		.4byte	0x96
 4374 0594 05       		.uleb128 0x5
 4375 0595 03       		.byte	0x3
 4376 0596 00000000 		.4byte	flag_ts_display
 4377 059a 22       		.uleb128 0x22
 4378 059b 77040000 		.4byte	.LASF103
 4379 059f 05       		.byte	0x5
 4380 05a0 1B       		.byte	0x1b
 4381 05a1 96000000 		.4byte	0x96
 4382 05a5 05       		.uleb128 0x5
 4383 05a6 03       		.byte	0x3
 4384 05a7 00000000 		.4byte	flag_rx
 4385 05ab 22       		.uleb128 0x22
 4386 05ac 1C020000 		.4byte	.LASF104
 4387 05b0 05       		.byte	0x5
 4388 05b1 1C       		.byte	0x1c
 4389 05b2 96000000 		.4byte	0x96
 4390 05b6 05       		.uleb128 0x5
 4391 05b7 03       		.byte	0x3
 4392 05b8 00000000 		.4byte	flag_packet
 4393 05bc 22       		.uleb128 0x22
 4394 05bd 05070000 		.4byte	.LASF105
 4395 05c1 05       		.byte	0x5
 4396 05c2 1D       		.byte	0x1d
 4397 05c3 96000000 		.4byte	0x96
 4398 05c7 05       		.uleb128 0x5
 4399 05c8 03       		.byte	0x3
 4400 05c9 00000000 		.4byte	flag_KB_string
 4401 05cd 22       		.uleb128 0x22
 4402 05ce 68040000 		.4byte	.LASF106
 4403 05d2 05       		.byte	0x5
 4404 05d3 1F       		.byte	0x1f
 4405 05d4 96000000 		.4byte	0x96
 4406 05d8 05       		.uleb128 0x5
 4407 05d9 03       		.byte	0x3
 4408 05da 00000000 		.4byte	dataready_flag
 4409 05de 22       		.uleb128 0x22
 4410 05df 42010000 		.4byte	.LASF107
 4411 05e3 05       		.byte	0x5
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 95


 4412 05e4 21       		.byte	0x21
 4413 05e5 96000000 		.4byte	0x96
 4414 05e9 05       		.uleb128 0x5
 4415 05ea 03       		.byte	0x3
 4416 05eb 00000000 		.4byte	flag_rf_transmission_active
 4417 05ef 23       		.uleb128 0x23
 4418 05f0 84000000 		.4byte	0x84
 4419 05f4 FF050000 		.4byte	0x5ff
 4420 05f8 24       		.uleb128 0x24
 4421 05f9 7D000000 		.4byte	0x7d
 4422 05fd 3F       		.byte	0x3f
 4423 05fe 00       		.byte	0
 4424 05ff 22       		.uleb128 0x22
 4425 0600 F3050000 		.4byte	.LASF108
 4426 0604 05       		.byte	0x5
 4427 0605 24       		.byte	0x24
 4428 0606 EF050000 		.4byte	0x5ef
 4429 060a 05       		.uleb128 0x5
 4430 060b 03       		.byte	0x3
 4431 060c 00000000 		.4byte	displaystring
 4432 0610 22       		.uleb128 0x22
 4433 0611 A3050000 		.4byte	.LASF109
 4434 0615 05       		.byte	0x5
 4435 0616 25       		.byte	0x25
 4436 0617 EF050000 		.4byte	0x5ef
 4437 061b 05       		.uleb128 0x5
 4438 061c 03       		.byte	0x3
 4439 061d 00000000 		.4byte	line
 4440 0621 22       		.uleb128 0x22
 4441 0622 7E050000 		.4byte	.LASF110
 4442 0626 05       		.byte	0x5
 4443 0627 25       		.byte	0x25
 4444 0628 EF050000 		.4byte	0x5ef
 4445 062c 05       		.uleb128 0x5
 4446 062d 03       		.byte	0x3
 4447 062e 00000000 		.4byte	entry
 4448 0632 23       		.uleb128 0x23
 4449 0633 96000000 		.4byte	0x96
 4450 0637 42060000 		.4byte	0x642
 4451 063b 24       		.uleb128 0x24
 4452 063c 7D000000 		.4byte	0x7d
 4453 0640 3F       		.byte	0x3f
 4454 0641 00       		.byte	0
 4455 0642 22       		.uleb128 0x22
 4456 0643 EF010000 		.4byte	.LASF111
 4457 0647 05       		.byte	0x5
 4458 0648 26       		.byte	0x26
 4459 0649 32060000 		.4byte	0x632
 4460 064d 05       		.uleb128 0x5
 4461 064e 03       		.byte	0x3
 4462 064f 00000000 		.4byte	usbBuffer
 4463 0653 22       		.uleb128 0x22
 4464 0654 71000000 		.4byte	.LASF112
 4465 0658 05       		.byte	0x5
 4466 0659 3C       		.byte	0x3c
 4467 065a E0000000 		.4byte	0xe0
 4468 065e 05       		.uleb128 0x5
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 96


 4469 065f 03       		.byte	0x3
 4470 0660 00000000 		.4byte	system_state
 4471 0664 23       		.uleb128 0x23
 4472 0665 68000000 		.4byte	0x68
 4473 0669 7A060000 		.4byte	0x67a
 4474 066d 24       		.uleb128 0x24
 4475 066e 7D000000 		.4byte	0x7d
 4476 0672 0E       		.byte	0xe
 4477 0673 24       		.uleb128 0x24
 4478 0674 7D000000 		.4byte	0x7d
 4479 0678 12       		.byte	0x12
 4480 0679 00       		.byte	0
 4481 067a 25       		.uleb128 0x25
 4482 067b 6D617000 		.ascii	"map\000"
 4483 067f 07       		.byte	0x7
 4484 0680 04       		.byte	0x4
 4485 0681 64060000 		.4byte	0x664
 4486 0685 22       		.uleb128 0x22
 4487 0686 1E050000 		.4byte	.LASF113
 4488 068a 01       		.byte	0x1
 4489 068b 2B       		.byte	0x2b
 4490 068c B9010000 		.4byte	0x1b9
 4491 0690 05       		.uleb128 0x5
 4492 0691 03       		.byte	0x3
 4493 0692 00000000 		.4byte	currentDirection
 4494 0696 22       		.uleb128 0x22
 4495 0697 26040000 		.4byte	.LASF114
 4496 069b 01       		.byte	0x1
 4497 069c 2C       		.byte	0x2c
 4498 069d B9010000 		.4byte	0x1b9
 4499 06a1 05       		.uleb128 0x5
 4500 06a2 03       		.byte	0x3
 4501 06a3 00000000 		.4byte	previousDirection
 4502 06a7 22       		.uleb128 0x22
 4503 06a8 ED020000 		.4byte	.LASF115
 4504 06ac 01       		.byte	0x1
 4505 06ad 2D       		.byte	0x2d
 4506 06ae 12020000 		.4byte	0x212
 4507 06b2 05       		.uleb128 0x5
 4508 06b3 03       		.byte	0x3
 4509 06b4 00000000 		.4byte	currentOrientation
 4510 06b8 22       		.uleb128 0x22
 4511 06b9 6F030000 		.4byte	.LASF116
 4512 06bd 01       		.byte	0x1
 4513 06be 2E       		.byte	0x2e
 4514 06bf 12020000 		.4byte	0x212
 4515 06c3 05       		.uleb128 0x5
 4516 06c4 03       		.byte	0x3
 4517 06c5 00000000 		.4byte	previousOrientation
 4518 06c9 22       		.uleb128 0x22
 4519 06ca 2F050000 		.4byte	.LASF117
 4520 06ce 01       		.byte	0x1
 4521 06cf 31       		.byte	0x31
 4522 06d0 96000000 		.4byte	0x96
 4523 06d4 05       		.uleb128 0x5
 4524 06d5 03       		.byte	0x3
 4525 06d6 00000000 		.4byte	stopFlag
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 97


 4526 06da 21       		.uleb128 0x21
 4527 06db 733300   		.ascii	"s3\000"
 4528 06de 01       		.byte	0x1
 4529 06df 38       		.byte	0x38
 4530 06e0 96000000 		.4byte	0x96
 4531 06e4 05       		.uleb128 0x5
 4532 06e5 03       		.byte	0x3
 4533 06e6 00000000 		.4byte	s3
 4534 06ea 21       		.uleb128 0x21
 4535 06eb 733400   		.ascii	"s4\000"
 4536 06ee 01       		.byte	0x1
 4537 06ef 39       		.byte	0x39
 4538 06f0 96000000 		.4byte	0x96
 4539 06f4 05       		.uleb128 0x5
 4540 06f5 03       		.byte	0x3
 4541 06f6 00000000 		.4byte	s4
 4542 06fa 21       		.uleb128 0x21
 4543 06fb 733500   		.ascii	"s5\000"
 4544 06fe 01       		.byte	0x1
 4545 06ff 3A       		.byte	0x3a
 4546 0700 96000000 		.4byte	0x96
 4547 0704 05       		.uleb128 0x5
 4548 0705 03       		.byte	0x3
 4549 0706 00000000 		.4byte	s5
 4550 070a 21       		.uleb128 0x21
 4551 070b 733600   		.ascii	"s6\000"
 4552 070e 01       		.byte	0x1
 4553 070f 3B       		.byte	0x3b
 4554 0710 96000000 		.4byte	0x96
 4555 0714 05       		.uleb128 0x5
 4556 0715 03       		.byte	0x3
 4557 0716 00000000 		.4byte	s6
 4558 071a 22       		.uleb128 0x22
 4559 071b C8040000 		.4byte	.LASF118
 4560 071f 01       		.byte	0x1
 4561 0720 40       		.byte	0x40
 4562 0721 AE000000 		.4byte	0xae
 4563 0725 05       		.uleb128 0x5
 4564 0726 03       		.byte	0x3
 4565 0727 00000000 		.4byte	totalMilliseconds
 4566 072b 22       		.uleb128 0x22
 4567 072c 20010000 		.4byte	.LASF119
 4568 0730 01       		.byte	0x1
 4569 0731 41       		.byte	0x41
 4570 0732 D2000000 		.4byte	0xd2
 4571 0736 05       		.uleb128 0x5
 4572 0737 03       		.byte	0x3
 4573 0738 00000000 		.4byte	totalDistance
 4574 073c 23       		.uleb128 0x23
 4575 073d 84000000 		.4byte	0x84
 4576 0741 4C070000 		.4byte	0x74c
 4577 0745 24       		.uleb128 0x24
 4578 0746 7D000000 		.4byte	0x7d
 4579 074a 44       		.byte	0x44
 4580 074b 00       		.byte	0
 4581 074c 22       		.uleb128 0x22
 4582 074d 3F000000 		.4byte	.LASF120
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 98


 4583 0751 01       		.byte	0x1
 4584 0752 43       		.byte	0x43
 4585 0753 3C070000 		.4byte	0x73c
 4586 0757 05       		.uleb128 0x5
 4587 0758 03       		.byte	0x3
 4588 0759 00000000 		.4byte	buffer
 4589 075d 22       		.uleb128 0x22
 4590 075e 7C010000 		.4byte	.LASF121
 4591 0762 01       		.byte	0x1
 4592 0763 44       		.byte	0x44
 4593 0764 68000000 		.4byte	0x68
 4594 0768 05       		.uleb128 0x5
 4595 0769 03       		.byte	0x3
 4596 076a 00000000 		.4byte	quadDec2Count
 4597 076e 22       		.uleb128 0x22
 4598 076f F4060000 		.4byte	.LASF122
 4599 0773 01       		.byte	0x1
 4600 0774 45       		.byte	0x45
 4601 0775 68000000 		.4byte	0x68
 4602 0779 05       		.uleb128 0x5
 4603 077a 03       		.byte	0x3
 4604 077b 00000000 		.4byte	timerInt
 4605 077f 22       		.uleb128 0x22
 4606 0780 52020000 		.4byte	.LASF123
 4607 0784 01       		.byte	0x1
 4608 0785 46       		.byte	0x46
 4609 0786 68000000 		.4byte	0x68
 4610 078a 05       		.uleb128 0x5
 4611 078b 03       		.byte	0x3
 4612 078c 00000000 		.4byte	keepLedOn
 4613 0790 22       		.uleb128 0x22
 4614 0791 53050000 		.4byte	.LASF124
 4615 0795 01       		.byte	0x1
 4616 0796 47       		.byte	0x47
 4617 0797 AE000000 		.4byte	0xae
 4618 079b 05       		.uleb128 0x5
 4619 079c 03       		.byte	0x3
 4620 079d 00000000 		.4byte	stopBuffer
 4621 07a1 22       		.uleb128 0x22
 4622 07a2 1A030000 		.4byte	.LASF125
 4623 07a6 01       		.byte	0x1
 4624 07a7 CA       		.byte	0xca
 4625 07a8 D2000000 		.4byte	0xd2
 4626 07ac 05       		.uleb128 0x5
 4627 07ad 03       		.byte	0x3
 4628 07ae 00000000 		.4byte	xBlocksize
 4629 07b2 22       		.uleb128 0x22
 4630 07b3 7F040000 		.4byte	.LASF126
 4631 07b7 01       		.byte	0x1
 4632 07b8 CB       		.byte	0xcb
 4633 07b9 D2000000 		.4byte	0xd2
 4634 07bd 05       		.uleb128 0x5
 4635 07be 03       		.byte	0x3
 4636 07bf 00000000 		.4byte	yBlocksize
 4637 07c3 22       		.uleb128 0x22
 4638 07c4 46060000 		.4byte	.LASF127
 4639 07c8 01       		.byte	0x1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 99


 4640 07c9 CC       		.byte	0xcc
 4641 07ca 96000000 		.4byte	0x96
 4642 07ce 05       		.uleb128 0x5
 4643 07cf 03       		.byte	0x3
 4644 07d0 00000000 		.4byte	currentRow
 4645 07d4 22       		.uleb128 0x22
 4646 07d5 BE060000 		.4byte	.LASF128
 4647 07d9 01       		.byte	0x1
 4648 07da CD       		.byte	0xcd
 4649 07db 96000000 		.4byte	0x96
 4650 07df 05       		.uleb128 0x5
 4651 07e0 03       		.byte	0x3
 4652 07e1 00000000 		.4byte	currentCol
 4653 07e5 26       		.uleb128 0x26
 4654 07e6 92050000 		.4byte	.LASF129
 4655 07ea 01       		.byte	0x1
 4656 07eb A002     		.2byte	0x2a0
 4657 07ed 96000000 		.4byte	0x96
 4658 07f1 05       		.uleb128 0x5
 4659 07f2 03       		.byte	0x3
 4660 07f3 00000000 		.4byte	stoppedAfterTurn
 4661 07f7 26       		.uleb128 0x26
 4662 07f8 BE020000 		.4byte	.LASF130
 4663 07fc 01       		.byte	0x1
 4664 07fd A102     		.2byte	0x2a1
 4665 07ff 96000000 		.4byte	0x96
 4666 0803 05       		.uleb128 0x5
 4667 0804 03       		.byte	0x3
 4668 0805 00000000 		.4byte	ignoreSensor
 4669 0809 00       		.byte	0
 4670              		.section	.debug_abbrev,"",%progbits
 4671              	.Ldebug_abbrev0:
 4672 0000 01       		.uleb128 0x1
 4673 0001 11       		.uleb128 0x11
 4674 0002 01       		.byte	0x1
 4675 0003 25       		.uleb128 0x25
 4676 0004 0E       		.uleb128 0xe
 4677 0005 13       		.uleb128 0x13
 4678 0006 0B       		.uleb128 0xb
 4679 0007 03       		.uleb128 0x3
 4680 0008 0E       		.uleb128 0xe
 4681 0009 1B       		.uleb128 0x1b
 4682 000a 0E       		.uleb128 0xe
 4683 000b 55       		.uleb128 0x55
 4684 000c 17       		.uleb128 0x17
 4685 000d 11       		.uleb128 0x11
 4686 000e 01       		.uleb128 0x1
 4687 000f 10       		.uleb128 0x10
 4688 0010 17       		.uleb128 0x17
 4689 0011 00       		.byte	0
 4690 0012 00       		.byte	0
 4691 0013 02       		.uleb128 0x2
 4692 0014 24       		.uleb128 0x24
 4693 0015 00       		.byte	0
 4694 0016 0B       		.uleb128 0xb
 4695 0017 0B       		.uleb128 0xb
 4696 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 100


 4697 0019 0B       		.uleb128 0xb
 4698 001a 03       		.uleb128 0x3
 4699 001b 0E       		.uleb128 0xe
 4700 001c 00       		.byte	0
 4701 001d 00       		.byte	0
 4702 001e 03       		.uleb128 0x3
 4703 001f 16       		.uleb128 0x16
 4704 0020 00       		.byte	0
 4705 0021 03       		.uleb128 0x3
 4706 0022 0E       		.uleb128 0xe
 4707 0023 3A       		.uleb128 0x3a
 4708 0024 0B       		.uleb128 0xb
 4709 0025 3B       		.uleb128 0x3b
 4710 0026 0B       		.uleb128 0xb
 4711 0027 49       		.uleb128 0x49
 4712 0028 13       		.uleb128 0x13
 4713 0029 00       		.byte	0
 4714 002a 00       		.byte	0
 4715 002b 04       		.uleb128 0x4
 4716 002c 24       		.uleb128 0x24
 4717 002d 00       		.byte	0
 4718 002e 0B       		.uleb128 0xb
 4719 002f 0B       		.uleb128 0xb
 4720 0030 3E       		.uleb128 0x3e
 4721 0031 0B       		.uleb128 0xb
 4722 0032 03       		.uleb128 0x3
 4723 0033 08       		.uleb128 0x8
 4724 0034 00       		.byte	0
 4725 0035 00       		.byte	0
 4726 0036 05       		.uleb128 0x5
 4727 0037 16       		.uleb128 0x16
 4728 0038 00       		.byte	0
 4729 0039 03       		.uleb128 0x3
 4730 003a 0E       		.uleb128 0xe
 4731 003b 3A       		.uleb128 0x3a
 4732 003c 0B       		.uleb128 0xb
 4733 003d 3B       		.uleb128 0x3b
 4734 003e 05       		.uleb128 0x5
 4735 003f 49       		.uleb128 0x49
 4736 0040 13       		.uleb128 0x13
 4737 0041 00       		.byte	0
 4738 0042 00       		.byte	0
 4739 0043 06       		.uleb128 0x6
 4740 0044 13       		.uleb128 0x13
 4741 0045 01       		.byte	0x1
 4742 0046 03       		.uleb128 0x3
 4743 0047 0E       		.uleb128 0xe
 4744 0048 0B       		.uleb128 0xb
 4745 0049 0B       		.uleb128 0xb
 4746 004a 3A       		.uleb128 0x3a
 4747 004b 0B       		.uleb128 0xb
 4748 004c 3B       		.uleb128 0x3b
 4749 004d 0B       		.uleb128 0xb
 4750 004e 01       		.uleb128 0x1
 4751 004f 13       		.uleb128 0x13
 4752 0050 00       		.byte	0
 4753 0051 00       		.byte	0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 101


 4754 0052 07       		.uleb128 0x7
 4755 0053 0D       		.uleb128 0xd
 4756 0054 00       		.byte	0
 4757 0055 03       		.uleb128 0x3
 4758 0056 0E       		.uleb128 0xe
 4759 0057 3A       		.uleb128 0x3a
 4760 0058 0B       		.uleb128 0xb
 4761 0059 3B       		.uleb128 0x3b
 4762 005a 0B       		.uleb128 0xb
 4763 005b 49       		.uleb128 0x49
 4764 005c 13       		.uleb128 0x13
 4765 005d 38       		.uleb128 0x38
 4766 005e 0B       		.uleb128 0xb
 4767 005f 00       		.byte	0
 4768 0060 00       		.byte	0
 4769 0061 08       		.uleb128 0x8
 4770 0062 04       		.uleb128 0x4
 4771 0063 01       		.byte	0x1
 4772 0064 03       		.uleb128 0x3
 4773 0065 0E       		.uleb128 0xe
 4774 0066 0B       		.uleb128 0xb
 4775 0067 0B       		.uleb128 0xb
 4776 0068 49       		.uleb128 0x49
 4777 0069 13       		.uleb128 0x13
 4778 006a 3A       		.uleb128 0x3a
 4779 006b 0B       		.uleb128 0xb
 4780 006c 3B       		.uleb128 0x3b
 4781 006d 0B       		.uleb128 0xb
 4782 006e 01       		.uleb128 0x1
 4783 006f 13       		.uleb128 0x13
 4784 0070 00       		.byte	0
 4785 0071 00       		.byte	0
 4786 0072 09       		.uleb128 0x9
 4787 0073 28       		.uleb128 0x28
 4788 0074 00       		.byte	0
 4789 0075 03       		.uleb128 0x3
 4790 0076 0E       		.uleb128 0xe
 4791 0077 1C       		.uleb128 0x1c
 4792 0078 0B       		.uleb128 0xb
 4793 0079 00       		.byte	0
 4794 007a 00       		.byte	0
 4795 007b 0A       		.uleb128 0xa
 4796 007c 28       		.uleb128 0x28
 4797 007d 00       		.byte	0
 4798 007e 03       		.uleb128 0x3
 4799 007f 08       		.uleb128 0x8
 4800 0080 1C       		.uleb128 0x1c
 4801 0081 0B       		.uleb128 0xb
 4802 0082 00       		.byte	0
 4803 0083 00       		.byte	0
 4804 0084 0B       		.uleb128 0xb
 4805 0085 04       		.uleb128 0x4
 4806 0086 01       		.byte	0x1
 4807 0087 03       		.uleb128 0x3
 4808 0088 0E       		.uleb128 0xe
 4809 0089 0B       		.uleb128 0xb
 4810 008a 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 102


 4811 008b 49       		.uleb128 0x49
 4812 008c 13       		.uleb128 0x13
 4813 008d 3A       		.uleb128 0x3a
 4814 008e 0B       		.uleb128 0xb
 4815 008f 3B       		.uleb128 0x3b
 4816 0090 05       		.uleb128 0x5
 4817 0091 01       		.uleb128 0x1
 4818 0092 13       		.uleb128 0x13
 4819 0093 00       		.byte	0
 4820 0094 00       		.byte	0
 4821 0095 0C       		.uleb128 0xc
 4822 0096 2E       		.uleb128 0x2e
 4823 0097 01       		.byte	0x1
 4824 0098 3F       		.uleb128 0x3f
 4825 0099 19       		.uleb128 0x19
 4826 009a 03       		.uleb128 0x3
 4827 009b 0E       		.uleb128 0xe
 4828 009c 3A       		.uleb128 0x3a
 4829 009d 0B       		.uleb128 0xb
 4830 009e 3B       		.uleb128 0x3b
 4831 009f 0B       		.uleb128 0xb
 4832 00a0 27       		.uleb128 0x27
 4833 00a1 19       		.uleb128 0x19
 4834 00a2 11       		.uleb128 0x11
 4835 00a3 01       		.uleb128 0x1
 4836 00a4 12       		.uleb128 0x12
 4837 00a5 06       		.uleb128 0x6
 4838 00a6 40       		.uleb128 0x40
 4839 00a7 18       		.uleb128 0x18
 4840 00a8 9642     		.uleb128 0x2116
 4841 00aa 19       		.uleb128 0x19
 4842 00ab 01       		.uleb128 0x1
 4843 00ac 13       		.uleb128 0x13
 4844 00ad 00       		.byte	0
 4845 00ae 00       		.byte	0
 4846 00af 0D       		.uleb128 0xd
 4847 00b0 0B       		.uleb128 0xb
 4848 00b1 01       		.byte	0x1
 4849 00b2 11       		.uleb128 0x11
 4850 00b3 01       		.uleb128 0x1
 4851 00b4 12       		.uleb128 0x12
 4852 00b5 06       		.uleb128 0x6
 4853 00b6 00       		.byte	0
 4854 00b7 00       		.byte	0
 4855 00b8 0E       		.uleb128 0xe
 4856 00b9 34       		.uleb128 0x34
 4857 00ba 00       		.byte	0
 4858 00bb 03       		.uleb128 0x3
 4859 00bc 0E       		.uleb128 0xe
 4860 00bd 3A       		.uleb128 0x3a
 4861 00be 0B       		.uleb128 0xb
 4862 00bf 3B       		.uleb128 0x3b
 4863 00c0 0B       		.uleb128 0xb
 4864 00c1 49       		.uleb128 0x49
 4865 00c2 13       		.uleb128 0x13
 4866 00c3 02       		.uleb128 0x2
 4867 00c4 18       		.uleb128 0x18
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 103


 4868 00c5 00       		.byte	0
 4869 00c6 00       		.byte	0
 4870 00c7 0F       		.uleb128 0xf
 4871 00c8 2E       		.uleb128 0x2e
 4872 00c9 00       		.byte	0
 4873 00ca 3F       		.uleb128 0x3f
 4874 00cb 19       		.uleb128 0x19
 4875 00cc 03       		.uleb128 0x3
 4876 00cd 0E       		.uleb128 0xe
 4877 00ce 3A       		.uleb128 0x3a
 4878 00cf 0B       		.uleb128 0xb
 4879 00d0 3B       		.uleb128 0x3b
 4880 00d1 0B       		.uleb128 0xb
 4881 00d2 27       		.uleb128 0x27
 4882 00d3 19       		.uleb128 0x19
 4883 00d4 11       		.uleb128 0x11
 4884 00d5 01       		.uleb128 0x1
 4885 00d6 12       		.uleb128 0x12
 4886 00d7 06       		.uleb128 0x6
 4887 00d8 40       		.uleb128 0x40
 4888 00d9 18       		.uleb128 0x18
 4889 00da 9742     		.uleb128 0x2117
 4890 00dc 19       		.uleb128 0x19
 4891 00dd 00       		.byte	0
 4892 00de 00       		.byte	0
 4893 00df 10       		.uleb128 0x10
 4894 00e0 2E       		.uleb128 0x2e
 4895 00e1 00       		.byte	0
 4896 00e2 3F       		.uleb128 0x3f
 4897 00e3 19       		.uleb128 0x19
 4898 00e4 03       		.uleb128 0x3
 4899 00e5 0E       		.uleb128 0xe
 4900 00e6 3A       		.uleb128 0x3a
 4901 00e7 0B       		.uleb128 0xb
 4902 00e8 3B       		.uleb128 0x3b
 4903 00e9 0B       		.uleb128 0xb
 4904 00ea 27       		.uleb128 0x27
 4905 00eb 19       		.uleb128 0x19
 4906 00ec 11       		.uleb128 0x11
 4907 00ed 01       		.uleb128 0x1
 4908 00ee 12       		.uleb128 0x12
 4909 00ef 06       		.uleb128 0x6
 4910 00f0 40       		.uleb128 0x40
 4911 00f1 18       		.uleb128 0x18
 4912 00f2 9642     		.uleb128 0x2116
 4913 00f4 19       		.uleb128 0x19
 4914 00f5 00       		.byte	0
 4915 00f6 00       		.byte	0
 4916 00f7 11       		.uleb128 0x11
 4917 00f8 2E       		.uleb128 0x2e
 4918 00f9 00       		.byte	0
 4919 00fa 3F       		.uleb128 0x3f
 4920 00fb 19       		.uleb128 0x19
 4921 00fc 03       		.uleb128 0x3
 4922 00fd 0E       		.uleb128 0xe
 4923 00fe 3A       		.uleb128 0x3a
 4924 00ff 0B       		.uleb128 0xb
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 104


 4925 0100 3B       		.uleb128 0x3b
 4926 0101 0B       		.uleb128 0xb
 4927 0102 49       		.uleb128 0x49
 4928 0103 13       		.uleb128 0x13
 4929 0104 11       		.uleb128 0x11
 4930 0105 01       		.uleb128 0x1
 4931 0106 12       		.uleb128 0x12
 4932 0107 06       		.uleb128 0x6
 4933 0108 40       		.uleb128 0x40
 4934 0109 18       		.uleb128 0x18
 4935 010a 9642     		.uleb128 0x2116
 4936 010c 19       		.uleb128 0x19
 4937 010d 00       		.byte	0
 4938 010e 00       		.byte	0
 4939 010f 12       		.uleb128 0x12
 4940 0110 2E       		.uleb128 0x2e
 4941 0111 01       		.byte	0x1
 4942 0112 3F       		.uleb128 0x3f
 4943 0113 19       		.uleb128 0x19
 4944 0114 03       		.uleb128 0x3
 4945 0115 0E       		.uleb128 0xe
 4946 0116 3A       		.uleb128 0x3a
 4947 0117 0B       		.uleb128 0xb
 4948 0118 3B       		.uleb128 0x3b
 4949 0119 0B       		.uleb128 0xb
 4950 011a 27       		.uleb128 0x27
 4951 011b 19       		.uleb128 0x19
 4952 011c 49       		.uleb128 0x49
 4953 011d 13       		.uleb128 0x13
 4954 011e 11       		.uleb128 0x11
 4955 011f 01       		.uleb128 0x1
 4956 0120 12       		.uleb128 0x12
 4957 0121 06       		.uleb128 0x6
 4958 0122 40       		.uleb128 0x40
 4959 0123 18       		.uleb128 0x18
 4960 0124 9642     		.uleb128 0x2116
 4961 0126 19       		.uleb128 0x19
 4962 0127 01       		.uleb128 0x1
 4963 0128 13       		.uleb128 0x13
 4964 0129 00       		.byte	0
 4965 012a 00       		.byte	0
 4966 012b 13       		.uleb128 0x13
 4967 012c 05       		.uleb128 0x5
 4968 012d 00       		.byte	0
 4969 012e 03       		.uleb128 0x3
 4970 012f 0E       		.uleb128 0xe
 4971 0130 3A       		.uleb128 0x3a
 4972 0131 0B       		.uleb128 0xb
 4973 0132 3B       		.uleb128 0x3b
 4974 0133 0B       		.uleb128 0xb
 4975 0134 49       		.uleb128 0x49
 4976 0135 13       		.uleb128 0x13
 4977 0136 02       		.uleb128 0x2
 4978 0137 18       		.uleb128 0x18
 4979 0138 00       		.byte	0
 4980 0139 00       		.byte	0
 4981 013a 14       		.uleb128 0x14
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 105


 4982 013b 34       		.uleb128 0x34
 4983 013c 00       		.byte	0
 4984 013d 03       		.uleb128 0x3
 4985 013e 08       		.uleb128 0x8
 4986 013f 3A       		.uleb128 0x3a
 4987 0140 0B       		.uleb128 0xb
 4988 0141 3B       		.uleb128 0x3b
 4989 0142 0B       		.uleb128 0xb
 4990 0143 49       		.uleb128 0x49
 4991 0144 13       		.uleb128 0x13
 4992 0145 02       		.uleb128 0x2
 4993 0146 18       		.uleb128 0x18
 4994 0147 00       		.byte	0
 4995 0148 00       		.byte	0
 4996 0149 15       		.uleb128 0x15
 4997 014a 2E       		.uleb128 0x2e
 4998 014b 00       		.byte	0
 4999 014c 3F       		.uleb128 0x3f
 5000 014d 19       		.uleb128 0x19
 5001 014e 03       		.uleb128 0x3
 5002 014f 0E       		.uleb128 0xe
 5003 0150 3A       		.uleb128 0x3a
 5004 0151 0B       		.uleb128 0xb
 5005 0152 3B       		.uleb128 0x3b
 5006 0153 0B       		.uleb128 0xb
 5007 0154 11       		.uleb128 0x11
 5008 0155 01       		.uleb128 0x1
 5009 0156 12       		.uleb128 0x12
 5010 0157 06       		.uleb128 0x6
 5011 0158 40       		.uleb128 0x40
 5012 0159 18       		.uleb128 0x18
 5013 015a 9742     		.uleb128 0x2117
 5014 015c 19       		.uleb128 0x19
 5015 015d 00       		.byte	0
 5016 015e 00       		.byte	0
 5017 015f 16       		.uleb128 0x16
 5018 0160 2E       		.uleb128 0x2e
 5019 0161 01       		.byte	0x1
 5020 0162 3F       		.uleb128 0x3f
 5021 0163 19       		.uleb128 0x19
 5022 0164 03       		.uleb128 0x3
 5023 0165 0E       		.uleb128 0xe
 5024 0166 3A       		.uleb128 0x3a
 5025 0167 0B       		.uleb128 0xb
 5026 0168 3B       		.uleb128 0x3b
 5027 0169 0B       		.uleb128 0xb
 5028 016a 49       		.uleb128 0x49
 5029 016b 13       		.uleb128 0x13
 5030 016c 11       		.uleb128 0x11
 5031 016d 01       		.uleb128 0x1
 5032 016e 12       		.uleb128 0x12
 5033 016f 06       		.uleb128 0x6
 5034 0170 40       		.uleb128 0x40
 5035 0171 18       		.uleb128 0x18
 5036 0172 9742     		.uleb128 0x2117
 5037 0174 19       		.uleb128 0x19
 5038 0175 01       		.uleb128 0x1
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 106


 5039 0176 13       		.uleb128 0x13
 5040 0177 00       		.byte	0
 5041 0178 00       		.byte	0
 5042 0179 17       		.uleb128 0x17
 5043 017a 2E       		.uleb128 0x2e
 5044 017b 00       		.byte	0
 5045 017c 3F       		.uleb128 0x3f
 5046 017d 19       		.uleb128 0x19
 5047 017e 03       		.uleb128 0x3
 5048 017f 0E       		.uleb128 0xe
 5049 0180 3A       		.uleb128 0x3a
 5050 0181 0B       		.uleb128 0xb
 5051 0182 3B       		.uleb128 0x3b
 5052 0183 05       		.uleb128 0x5
 5053 0184 49       		.uleb128 0x49
 5054 0185 13       		.uleb128 0x13
 5055 0186 11       		.uleb128 0x11
 5056 0187 01       		.uleb128 0x1
 5057 0188 12       		.uleb128 0x12
 5058 0189 06       		.uleb128 0x6
 5059 018a 40       		.uleb128 0x40
 5060 018b 18       		.uleb128 0x18
 5061 018c 9642     		.uleb128 0x2116
 5062 018e 19       		.uleb128 0x19
 5063 018f 00       		.byte	0
 5064 0190 00       		.byte	0
 5065 0191 18       		.uleb128 0x18
 5066 0192 2E       		.uleb128 0x2e
 5067 0193 00       		.byte	0
 5068 0194 3F       		.uleb128 0x3f
 5069 0195 19       		.uleb128 0x19
 5070 0196 03       		.uleb128 0x3
 5071 0197 0E       		.uleb128 0xe
 5072 0198 3A       		.uleb128 0x3a
 5073 0199 0B       		.uleb128 0xb
 5074 019a 3B       		.uleb128 0x3b
 5075 019b 05       		.uleb128 0x5
 5076 019c 49       		.uleb128 0x49
 5077 019d 13       		.uleb128 0x13
 5078 019e 11       		.uleb128 0x11
 5079 019f 01       		.uleb128 0x1
 5080 01a0 12       		.uleb128 0x12
 5081 01a1 06       		.uleb128 0x6
 5082 01a2 40       		.uleb128 0x40
 5083 01a3 18       		.uleb128 0x18
 5084 01a4 9742     		.uleb128 0x2117
 5085 01a6 19       		.uleb128 0x19
 5086 01a7 00       		.byte	0
 5087 01a8 00       		.byte	0
 5088 01a9 19       		.uleb128 0x19
 5089 01aa 2E       		.uleb128 0x2e
 5090 01ab 01       		.byte	0x1
 5091 01ac 3F       		.uleb128 0x3f
 5092 01ad 19       		.uleb128 0x19
 5093 01ae 03       		.uleb128 0x3
 5094 01af 0E       		.uleb128 0xe
 5095 01b0 3A       		.uleb128 0x3a
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 107


 5096 01b1 0B       		.uleb128 0xb
 5097 01b2 3B       		.uleb128 0x3b
 5098 01b3 05       		.uleb128 0x5
 5099 01b4 27       		.uleb128 0x27
 5100 01b5 19       		.uleb128 0x19
 5101 01b6 49       		.uleb128 0x49
 5102 01b7 13       		.uleb128 0x13
 5103 01b8 11       		.uleb128 0x11
 5104 01b9 01       		.uleb128 0x1
 5105 01ba 12       		.uleb128 0x12
 5106 01bb 06       		.uleb128 0x6
 5107 01bc 40       		.uleb128 0x40
 5108 01bd 18       		.uleb128 0x18
 5109 01be 9742     		.uleb128 0x2117
 5110 01c0 19       		.uleb128 0x19
 5111 01c1 01       		.uleb128 0x1
 5112 01c2 13       		.uleb128 0x13
 5113 01c3 00       		.byte	0
 5114 01c4 00       		.byte	0
 5115 01c5 1A       		.uleb128 0x1a
 5116 01c6 05       		.uleb128 0x5
 5117 01c7 00       		.byte	0
 5118 01c8 03       		.uleb128 0x3
 5119 01c9 0E       		.uleb128 0xe
 5120 01ca 3A       		.uleb128 0x3a
 5121 01cb 0B       		.uleb128 0xb
 5122 01cc 3B       		.uleb128 0x3b
 5123 01cd 05       		.uleb128 0x5
 5124 01ce 49       		.uleb128 0x49
 5125 01cf 13       		.uleb128 0x13
 5126 01d0 02       		.uleb128 0x2
 5127 01d1 18       		.uleb128 0x18
 5128 01d2 00       		.byte	0
 5129 01d3 00       		.byte	0
 5130 01d4 1B       		.uleb128 0x1b
 5131 01d5 2E       		.uleb128 0x2e
 5132 01d6 01       		.byte	0x1
 5133 01d7 3F       		.uleb128 0x3f
 5134 01d8 19       		.uleb128 0x19
 5135 01d9 03       		.uleb128 0x3
 5136 01da 0E       		.uleb128 0xe
 5137 01db 3A       		.uleb128 0x3a
 5138 01dc 0B       		.uleb128 0xb
 5139 01dd 3B       		.uleb128 0x3b
 5140 01de 05       		.uleb128 0x5
 5141 01df 11       		.uleb128 0x11
 5142 01e0 01       		.uleb128 0x1
 5143 01e1 12       		.uleb128 0x12
 5144 01e2 06       		.uleb128 0x6
 5145 01e3 40       		.uleb128 0x40
 5146 01e4 18       		.uleb128 0x18
 5147 01e5 9642     		.uleb128 0x2116
 5148 01e7 19       		.uleb128 0x19
 5149 01e8 01       		.uleb128 0x1
 5150 01e9 13       		.uleb128 0x13
 5151 01ea 00       		.byte	0
 5152 01eb 00       		.byte	0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 108


 5153 01ec 1C       		.uleb128 0x1c
 5154 01ed 34       		.uleb128 0x34
 5155 01ee 00       		.byte	0
 5156 01ef 03       		.uleb128 0x3
 5157 01f0 0E       		.uleb128 0xe
 5158 01f1 3A       		.uleb128 0x3a
 5159 01f2 0B       		.uleb128 0xb
 5160 01f3 3B       		.uleb128 0x3b
 5161 01f4 05       		.uleb128 0x5
 5162 01f5 49       		.uleb128 0x49
 5163 01f6 13       		.uleb128 0x13
 5164 01f7 02       		.uleb128 0x2
 5165 01f8 18       		.uleb128 0x18
 5166 01f9 00       		.byte	0
 5167 01fa 00       		.byte	0
 5168 01fb 1D       		.uleb128 0x1d
 5169 01fc 2E       		.uleb128 0x2e
 5170 01fd 01       		.byte	0x1
 5171 01fe 3F       		.uleb128 0x3f
 5172 01ff 19       		.uleb128 0x19
 5173 0200 03       		.uleb128 0x3
 5174 0201 0E       		.uleb128 0xe
 5175 0202 3A       		.uleb128 0x3a
 5176 0203 0B       		.uleb128 0xb
 5177 0204 3B       		.uleb128 0x3b
 5178 0205 05       		.uleb128 0x5
 5179 0206 49       		.uleb128 0x49
 5180 0207 13       		.uleb128 0x13
 5181 0208 11       		.uleb128 0x11
 5182 0209 01       		.uleb128 0x1
 5183 020a 12       		.uleb128 0x12
 5184 020b 06       		.uleb128 0x6
 5185 020c 40       		.uleb128 0x40
 5186 020d 18       		.uleb128 0x18
 5187 020e 9642     		.uleb128 0x2116
 5188 0210 19       		.uleb128 0x19
 5189 0211 01       		.uleb128 0x1
 5190 0212 13       		.uleb128 0x13
 5191 0213 00       		.byte	0
 5192 0214 00       		.byte	0
 5193 0215 1E       		.uleb128 0x1e
 5194 0216 2E       		.uleb128 0x2e
 5195 0217 00       		.byte	0
 5196 0218 3F       		.uleb128 0x3f
 5197 0219 19       		.uleb128 0x19
 5198 021a 03       		.uleb128 0x3
 5199 021b 0E       		.uleb128 0xe
 5200 021c 3A       		.uleb128 0x3a
 5201 021d 0B       		.uleb128 0xb
 5202 021e 3B       		.uleb128 0x3b
 5203 021f 05       		.uleb128 0x5
 5204 0220 11       		.uleb128 0x11
 5205 0221 01       		.uleb128 0x1
 5206 0222 12       		.uleb128 0x12
 5207 0223 06       		.uleb128 0x6
 5208 0224 40       		.uleb128 0x40
 5209 0225 18       		.uleb128 0x18
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 109


 5210 0226 9642     		.uleb128 0x2116
 5211 0228 19       		.uleb128 0x19
 5212 0229 00       		.byte	0
 5213 022a 00       		.byte	0
 5214 022b 1F       		.uleb128 0x1f
 5215 022c 34       		.uleb128 0x34
 5216 022d 00       		.byte	0
 5217 022e 03       		.uleb128 0x3
 5218 022f 0E       		.uleb128 0xe
 5219 0230 3A       		.uleb128 0x3a
 5220 0231 0B       		.uleb128 0xb
 5221 0232 3B       		.uleb128 0x3b
 5222 0233 05       		.uleb128 0x5
 5223 0234 49       		.uleb128 0x49
 5224 0235 13       		.uleb128 0x13
 5225 0236 3F       		.uleb128 0x3f
 5226 0237 19       		.uleb128 0x19
 5227 0238 3C       		.uleb128 0x3c
 5228 0239 19       		.uleb128 0x19
 5229 023a 00       		.byte	0
 5230 023b 00       		.byte	0
 5231 023c 20       		.uleb128 0x20
 5232 023d 35       		.uleb128 0x35
 5233 023e 00       		.byte	0
 5234 023f 49       		.uleb128 0x49
 5235 0240 13       		.uleb128 0x13
 5236 0241 00       		.byte	0
 5237 0242 00       		.byte	0
 5238 0243 21       		.uleb128 0x21
 5239 0244 34       		.uleb128 0x34
 5240 0245 00       		.byte	0
 5241 0246 03       		.uleb128 0x3
 5242 0247 08       		.uleb128 0x8
 5243 0248 3A       		.uleb128 0x3a
 5244 0249 0B       		.uleb128 0xb
 5245 024a 3B       		.uleb128 0x3b
 5246 024b 0B       		.uleb128 0xb
 5247 024c 49       		.uleb128 0x49
 5248 024d 13       		.uleb128 0x13
 5249 024e 3F       		.uleb128 0x3f
 5250 024f 19       		.uleb128 0x19
 5251 0250 02       		.uleb128 0x2
 5252 0251 18       		.uleb128 0x18
 5253 0252 00       		.byte	0
 5254 0253 00       		.byte	0
 5255 0254 22       		.uleb128 0x22
 5256 0255 34       		.uleb128 0x34
 5257 0256 00       		.byte	0
 5258 0257 03       		.uleb128 0x3
 5259 0258 0E       		.uleb128 0xe
 5260 0259 3A       		.uleb128 0x3a
 5261 025a 0B       		.uleb128 0xb
 5262 025b 3B       		.uleb128 0x3b
 5263 025c 0B       		.uleb128 0xb
 5264 025d 49       		.uleb128 0x49
 5265 025e 13       		.uleb128 0x13
 5266 025f 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 110


 5267 0260 19       		.uleb128 0x19
 5268 0261 02       		.uleb128 0x2
 5269 0262 18       		.uleb128 0x18
 5270 0263 00       		.byte	0
 5271 0264 00       		.byte	0
 5272 0265 23       		.uleb128 0x23
 5273 0266 01       		.uleb128 0x1
 5274 0267 01       		.byte	0x1
 5275 0268 49       		.uleb128 0x49
 5276 0269 13       		.uleb128 0x13
 5277 026a 01       		.uleb128 0x1
 5278 026b 13       		.uleb128 0x13
 5279 026c 00       		.byte	0
 5280 026d 00       		.byte	0
 5281 026e 24       		.uleb128 0x24
 5282 026f 21       		.uleb128 0x21
 5283 0270 00       		.byte	0
 5284 0271 49       		.uleb128 0x49
 5285 0272 13       		.uleb128 0x13
 5286 0273 2F       		.uleb128 0x2f
 5287 0274 0B       		.uleb128 0xb
 5288 0275 00       		.byte	0
 5289 0276 00       		.byte	0
 5290 0277 25       		.uleb128 0x25
 5291 0278 34       		.uleb128 0x34
 5292 0279 00       		.byte	0
 5293 027a 03       		.uleb128 0x3
 5294 027b 08       		.uleb128 0x8
 5295 027c 3A       		.uleb128 0x3a
 5296 027d 0B       		.uleb128 0xb
 5297 027e 3B       		.uleb128 0x3b
 5298 027f 0B       		.uleb128 0xb
 5299 0280 49       		.uleb128 0x49
 5300 0281 13       		.uleb128 0x13
 5301 0282 3F       		.uleb128 0x3f
 5302 0283 19       		.uleb128 0x19
 5303 0284 3C       		.uleb128 0x3c
 5304 0285 19       		.uleb128 0x19
 5305 0286 00       		.byte	0
 5306 0287 00       		.byte	0
 5307 0288 26       		.uleb128 0x26
 5308 0289 34       		.uleb128 0x34
 5309 028a 00       		.byte	0
 5310 028b 03       		.uleb128 0x3
 5311 028c 0E       		.uleb128 0xe
 5312 028d 3A       		.uleb128 0x3a
 5313 028e 0B       		.uleb128 0xb
 5314 028f 3B       		.uleb128 0x3b
 5315 0290 05       		.uleb128 0x5
 5316 0291 49       		.uleb128 0x49
 5317 0292 13       		.uleb128 0x13
 5318 0293 3F       		.uleb128 0x3f
 5319 0294 19       		.uleb128 0x19
 5320 0295 02       		.uleb128 0x2
 5321 0296 18       		.uleb128 0x18
 5322 0297 00       		.byte	0
 5323 0298 00       		.byte	0
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 111


 5324 0299 00       		.byte	0
 5325              		.section	.debug_aranges,"",%progbits
 5326 0000 9C000000 		.4byte	0x9c
 5327 0004 0200     		.2byte	0x2
 5328 0006 00000000 		.4byte	.Ldebug_info0
 5329 000a 04       		.byte	0x4
 5330 000b 00       		.byte	0
 5331 000c 0000     		.2byte	0
 5332 000e 0000     		.2byte	0
 5333 0010 00000000 		.4byte	.LFB64
 5334 0014 F4000000 		.4byte	.LFE64-.LFB64
 5335 0018 00000000 		.4byte	.LFB65
 5336 001c 18000000 		.4byte	.LFE65-.LFB65
 5337 0020 00000000 		.4byte	.LFB66
 5338 0024 18000000 		.4byte	.LFE66-.LFB66
 5339 0028 00000000 		.4byte	.LFB67
 5340 002c 18000000 		.4byte	.LFE67-.LFB67
 5341 0030 00000000 		.4byte	.LFB68
 5342 0034 18000000 		.4byte	.LFE68-.LFB68
 5343 0038 00000000 		.4byte	.LFB69
 5344 003c 38000000 		.4byte	.LFE69-.LFB69
 5345 0040 00000000 		.4byte	.LFB70
 5346 0044 A0000000 		.4byte	.LFE70-.LFB70
 5347 0048 00000000 		.4byte	.LFB71
 5348 004c 54000000 		.4byte	.LFE71-.LFB71
 5349 0050 00000000 		.4byte	.LFB72
 5350 0054 34000000 		.4byte	.LFE72-.LFB72
 5351 0058 00000000 		.4byte	.LFB73
 5352 005c 98040000 		.4byte	.LFE73-.LFB73
 5353 0060 00000000 		.4byte	.LFB74
 5354 0064 6C010000 		.4byte	.LFE74-.LFB74
 5355 0068 00000000 		.4byte	.LFB75
 5356 006c 20010000 		.4byte	.LFE75-.LFB75
 5357 0070 00000000 		.4byte	.LFB76
 5358 0074 4C010000 		.4byte	.LFE76-.LFB76
 5359 0078 00000000 		.4byte	.LFB77
 5360 007c 04050000 		.4byte	.LFE77-.LFB77
 5361 0080 00000000 		.4byte	.LFB78
 5362 0084 DC000000 		.4byte	.LFE78-.LFB78
 5363 0088 00000000 		.4byte	.LFB79
 5364 008c D8020000 		.4byte	.LFE79-.LFB79
 5365 0090 00000000 		.4byte	.LFB80
 5366 0094 98000000 		.4byte	.LFE80-.LFB80
 5367 0098 00000000 		.4byte	0
 5368 009c 00000000 		.4byte	0
 5369              		.section	.debug_ranges,"",%progbits
 5370              	.Ldebug_ranges0:
 5371 0000 00000000 		.4byte	.LFB64
 5372 0004 F4000000 		.4byte	.LFE64
 5373 0008 00000000 		.4byte	.LFB65
 5374 000c 18000000 		.4byte	.LFE65
 5375 0010 00000000 		.4byte	.LFB66
 5376 0014 18000000 		.4byte	.LFE66
 5377 0018 00000000 		.4byte	.LFB67
 5378 001c 18000000 		.4byte	.LFE67
 5379 0020 00000000 		.4byte	.LFB68
 5380 0024 18000000 		.4byte	.LFE68
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 112


 5381 0028 00000000 		.4byte	.LFB69
 5382 002c 38000000 		.4byte	.LFE69
 5383 0030 00000000 		.4byte	.LFB70
 5384 0034 A0000000 		.4byte	.LFE70
 5385 0038 00000000 		.4byte	.LFB71
 5386 003c 54000000 		.4byte	.LFE71
 5387 0040 00000000 		.4byte	.LFB72
 5388 0044 34000000 		.4byte	.LFE72
 5389 0048 00000000 		.4byte	.LFB73
 5390 004c 98040000 		.4byte	.LFE73
 5391 0050 00000000 		.4byte	.LFB74
 5392 0054 6C010000 		.4byte	.LFE74
 5393 0058 00000000 		.4byte	.LFB75
 5394 005c 20010000 		.4byte	.LFE75
 5395 0060 00000000 		.4byte	.LFB76
 5396 0064 4C010000 		.4byte	.LFE76
 5397 0068 00000000 		.4byte	.LFB77
 5398 006c 04050000 		.4byte	.LFE77
 5399 0070 00000000 		.4byte	.LFB78
 5400 0074 DC000000 		.4byte	.LFE78
 5401 0078 00000000 		.4byte	.LFB79
 5402 007c D8020000 		.4byte	.LFE79
 5403 0080 00000000 		.4byte	.LFB80
 5404 0084 98000000 		.4byte	.LFE80
 5405 0088 00000000 		.4byte	0
 5406 008c 00000000 		.4byte	0
 5407              		.section	.debug_line,"",%progbits
 5408              	.Ldebug_line0:
 5409 0000 F9050000 		.section	.debug_str,"MS",%progbits,1
 5409      02005F01 
 5409      00000201 
 5409      FB0E0D00 
 5409      01010101 
 5410              	.LASF48:
 5411 0000 466F7277 		.ascii	"ForwardAfterTurn\000"
 5411      61726441 
 5411      66746572 
 5411      5475726E 
 5411      00
 5412              	.LASF50:
 5413 0011 44697265 		.ascii	"DirectionState\000"
 5413      6374696F 
 5413      6E537461 
 5413      746500
 5414              	.LASF62:
 5415 0020 54496E74 		.ascii	"TIntersection\000"
 5415      65727365 
 5415      6374696F 
 5415      6E00
 5416              	.LASF132:
 5417 002e 6D61696E 		.ascii	"main.c\000"
 5417      2E6300
 5418              	.LASF91:
 5419 0035 626C6F63 		.ascii	"blocksize\000"
 5419      6B73697A 
 5419      6500
 5420              	.LASF120:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 113


 5421 003f 62756666 		.ascii	"buffer\000"
 5421      657200
 5422              	.LASF8:
 5423 0046 756E7369 		.ascii	"unsigned int\000"
 5423      676E6564 
 5423      20696E74 
 5423      00
 5424              	.LASF57:
 5425 0053 52696768 		.ascii	"RightJunction\000"
 5425      744A756E 
 5425      6374696F 
 5425      6E00
 5426              	.LASF12:
 5427 0061 5F5F696E 		.ascii	"__int32_t\000"
 5427      7433325F 
 5427      7400
 5428              	.LASF18:
 5429 006b 696E7431 		.ascii	"int16\000"
 5429      3600
 5430              	.LASF112:
 5431 0071 73797374 		.ascii	"system_state\000"
 5431      656D5F73 
 5431      74617465 
 5431      00
 5432              	.LASF89:
 5433 007e 70726576 		.ascii	"prevCol\000"
 5433      436F6C00 
 5434              	.LASF131:
 5435 0086 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5435      43313120 
 5435      352E342E 
 5435      31203230 
 5435      31363036 
 5436 00b9 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5436      20726576 
 5436      6973696F 
 5436      6E203233 
 5436      37373135 
 5437 00ec 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5437      66756E63 
 5437      74696F6E 
 5437      2D736563 
 5437      74696F6E 
 5438              	.LASF68:
 5439 0114 53365F44 		.ascii	"S6_DETECTED\000"
 5439      45544543 
 5439      54454400 
 5440              	.LASF119:
 5441 0120 746F7461 		.ascii	"totalDistance\000"
 5441      6C446973 
 5441      74616E63 
 5441      6500
 5442              	.LASF34:
 5443 012e 67325F78 		.ascii	"g2_xpos\000"
 5443      706F7300 
 5444              	.LASF61:
 5445 0136 4272616E 		.ascii	"BranchRight\000"
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 114


 5445      63685269 
 5445      67687400 
 5446              	.LASF107:
 5447 0142 666C6167 		.ascii	"flag_rf_transmission_active\000"
 5447      5F72665F 
 5447      7472616E 
 5447      736D6973 
 5447      73696F6E 
 5448              	.LASF92:
 5449 015e 52657365 		.ascii	"ResetSensorFlags\000"
 5449      7453656E 
 5449      736F7246 
 5449      6C616773 
 5449      00
 5450              	.LASF37:
 5451 016f 67325F64 		.ascii	"g2_direction\000"
 5451      69726563 
 5451      74696F6E 
 5451      00
 5452              	.LASF121:
 5453 017c 71756164 		.ascii	"quadDec2Count\000"
 5453      44656332 
 5453      436F756E 
 5453      7400
 5454              	.LASF84:
 5455 018a 636F6C54 		.ascii	"colToCheck\000"
 5455      6F436865 
 5455      636B00
 5456              	.LASF133:
 5457 0195 433A5C50 		.ascii	"C:\\Projects\\University\\301-Robot\\psoc student p"
 5457      726F6A65 
 5457      6374735C 
 5457      556E6976 
 5457      65727369 
 5458 01c4 61636B5C 		.ascii	"ack\\psoc_code_base\\CS301_Class.cydsn\000"
 5458      70736F63 
 5458      5F636F64 
 5458      655F6261 
 5458      73655C43 
 5459              	.LASF19:
 5460 01e9 666C6F61 		.ascii	"float\000"
 5460      7400
 5461              	.LASF111:
 5462 01ef 75736242 		.ascii	"usbBuffer\000"
 5462      75666665 
 5462      7200
 5463              	.LASF79:
 5464 01f9 636F756E 		.ascii	"count\000"
 5464      7400
 5465              	.LASF22:
 5466 01ff 696E6465 		.ascii	"index\000"
 5466      7800
 5467              	.LASF7:
 5468 0205 6C6F6E67 		.ascii	"long long unsigned int\000"
 5468      206C6F6E 
 5468      6720756E 
 5468      7369676E 
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 115


 5468      65642069 
 5469              	.LASF104:
 5470 021c 666C6167 		.ascii	"flag_packet\000"
 5470      5F706163 
 5470      6B657400 
 5471              	.LASF93:
 5472 0228 53657452 		.ascii	"SetRobotMovement\000"
 5472      6F626F74 
 5472      4D6F7665 
 5472      6D656E74 
 5472      00
 5473              	.LASF69:
 5474 0239 54494D45 		.ascii	"TIMER_FINISH\000"
 5474      525F4649 
 5474      4E495348 
 5474      00
 5475              	.LASF73:
 5476 0246 4765744E 		.ascii	"GetNextStep\000"
 5476      65787453 
 5476      74657000 
 5477              	.LASF123:
 5478 0252 6B656570 		.ascii	"keepLedOn\000"
 5478      4C65644F 
 5478      6E00
 5479              	.LASF53:
 5480 025c 4C656674 		.ascii	"Left\000"
 5480      00
 5481              	.LASF100:
 5482 0261 666C6167 		.ascii	"flag_ts_update\000"
 5482      5F74735F 
 5482      75706461 
 5482      746500
 5483              	.LASF99:
 5484 0270 666C6167 		.ascii	"flag_ts_enc\000"
 5484      5F74735F 
 5484      656E6300 
 5485              	.LASF77:
 5486 027c 71756164 		.ascii	"quadCountToRPM\000"
 5486      436F756E 
 5486      74546F52 
 5486      504D00
 5487              	.LASF80:
 5488 028b 6A756E63 		.ascii	"junctionToConvert\000"
 5488      74696F6E 
 5488      546F436F 
 5488      6E766572 
 5488      7400
 5489              	.LASF75:
 5490 029d 52656368 		.ascii	"RecheckPosition\000"
 5490      65636B50 
 5490      6F736974 
 5490      696F6E00 
 5491              	.LASF135:
 5492 02ad 56616C69 		.ascii	"ValidatePosition\000"
 5492      64617465 
 5492      506F7369 
 5492      74696F6E 
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 116


 5492      00
 5493              	.LASF130:
 5494 02be 69676E6F 		.ascii	"ignoreSensor\000"
 5494      72655365 
 5494      6E736F72 
 5494      00
 5495              	.LASF45:
 5496 02cb 77616974 		.ascii	"waitForTurn\000"
 5496      466F7254 
 5496      75726E00 
 5497              	.LASF24:
 5498 02d7 726F626F 		.ascii	"robot_ypos\000"
 5498      745F7970 
 5498      6F7300
 5499              	.LASF98:
 5500 02e2 74735F64 		.ascii	"ts_display\000"
 5500      6973706C 
 5500      617900
 5501              	.LASF115:
 5502 02ed 63757272 		.ascii	"currentOrientation\000"
 5502      656E744F 
 5502      7269656E 
 5502      74617469 
 5502      6F6E00
 5503              	.LASF11:
 5504 0300 63686172 		.ascii	"char\000"
 5504      00
 5505              	.LASF28:
 5506 0305 67305F73 		.ascii	"g0_speed\000"
 5506      70656564 
 5506      00
 5507              	.LASF15:
 5508 030e 75696E74 		.ascii	"uint16\000"
 5508      313600
 5509              	.LASF17:
 5510 0315 696E7438 		.ascii	"int8\000"
 5510      00
 5511              	.LASF125:
 5512 031a 78426C6F 		.ascii	"xBlocksize\000"
 5512      636B7369 
 5512      7A6500
 5513              	.LASF33:
 5514 0325 67315F64 		.ascii	"g1_direction\000"
 5514      69726563 
 5514      74696F6E 
 5514      00
 5515              	.LASF65:
 5516 0332 53335F44 		.ascii	"S3_DETECTED\000"
 5516      45544543 
 5516      54454400 
 5517              	.LASF72:
 5518 033e 73706565 		.ascii	"speedTimer\000"
 5518      6454696D 
 5518      657200
 5519              	.LASF47:
 5520 0349 77616974 		.ascii	"waitForLeftTurn\000"
 5520      466F724C 
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 117


 5520      65667454 
 5520      75726E00 
 5521              	.LASF6:
 5522 0359 6C6F6E67 		.ascii	"long long int\000"
 5522      206C6F6E 
 5522      6720696E 
 5522      7400
 5523              	.LASF30:
 5524 0367 67315F78 		.ascii	"g1_xpos\000"
 5524      706F7300 
 5525              	.LASF116:
 5526 036f 70726576 		.ascii	"previousOrientation\000"
 5526      696F7573 
 5526      4F726965 
 5526      6E746174 
 5526      696F6E00 
 5527              	.LASF64:
 5528 0383 53747261 		.ascii	"Straight\000"
 5528      69676874 
 5528      00
 5529              	.LASF63:
 5530 038c 496E7665 		.ascii	"InvertedTIntersection\000"
 5530      72746564 
 5530      54496E74 
 5530      65727365 
 5530      6374696F 
 5531              	.LASF71:
 5532 03a2 6E657744 		.ascii	"newDistance\000"
 5532      69737461 
 5532      6E636500 
 5533              	.LASF36:
 5534 03ae 67325F73 		.ascii	"g2_speed\000"
 5534      70656564 
 5534      00
 5535              	.LASF27:
 5536 03b7 67305F79 		.ascii	"g0_ypos\000"
 5536      706F7300 
 5537              	.LASF40:
 5538 03bf 5475726E 		.ascii	"TurnLeft\000"
 5538      4C656674 
 5538      00
 5539              	.LASF97:
 5540 03c8 74735F73 		.ascii	"ts_speed\000"
 5540      70656564 
 5540      00
 5541              	.LASF44:
 5542 03d1 556E6B6E 		.ascii	"Unknown\000"
 5542      6F776E00 
 5543              	.LASF74:
 5544 03d9 64697265 		.ascii	"directionState\000"
 5544      6374696F 
 5544      6E537461 
 5544      746500
 5545              	.LASF16:
 5546 03e8 75696E74 		.ascii	"uint32\000"
 5546      333200
 5547              	.LASF46:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 118


 5548 03ef 77616974 		.ascii	"waitForRightTurn\000"
 5548      466F7252 
 5548      69676874 
 5548      5475726E 
 5548      00
 5549              	.LASF39:
 5550 0400 5475726E 		.ascii	"TurnRight\000"
 5550      52696768 
 5550      7400
 5551              	.LASF134:
 5552 040a 64617461 		.ascii	"data_main\000"
 5552      5F6D6169 
 5552      6E00
 5553              	.LASF21:
 5554 0414 72737369 		.ascii	"rssi\000"
 5554      00
 5555              	.LASF29:
 5556 0419 67305F64 		.ascii	"g0_direction\000"
 5556      69726563 
 5556      74696F6E 
 5556      00
 5557              	.LASF114:
 5558 0426 70726576 		.ascii	"previousDirection\000"
 5558      696F7573 
 5558      44697265 
 5558      6374696F 
 5558      6E00
 5559              	.LASF60:
 5560 0438 4272616E 		.ascii	"BranchLeft\000"
 5560      63684C65 
 5560      667400
 5561              	.LASF9:
 5562 0443 6C6F6E67 		.ascii	"long double\000"
 5562      20646F75 
 5562      626C6500 
 5563              	.LASF83:
 5564 044f 726F7754 		.ascii	"rowToCheck\000"
 5564      6F436865 
 5564      636B00
 5565              	.LASF101:
 5566 045a 666C6167 		.ascii	"flag_ts_speed\000"
 5566      5F74735F 
 5566      73706565 
 5566      6400
 5567              	.LASF106:
 5568 0468 64617461 		.ascii	"dataready_flag\000"
 5568      72656164 
 5568      795F666C 
 5568      616700
 5569              	.LASF103:
 5570 0477 666C6167 		.ascii	"flag_rx\000"
 5570      5F727800 
 5571              	.LASF126:
 5572 047f 79426C6F 		.ascii	"yBlocksize\000"
 5572      636B7369 
 5572      7A6500
 5573              	.LASF2:
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 119


 5574 048a 73686F72 		.ascii	"short int\000"
 5574      7420696E 
 5574      7400
 5575              	.LASF66:
 5576 0494 53345F44 		.ascii	"S4_DETECTED\000"
 5576      45544543 
 5576      54454400 
 5577              	.LASF4:
 5578 04a0 6C6F6E67 		.ascii	"long int\000"
 5578      20696E74 
 5578      00
 5579              	.LASF94:
 5580 04a9 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5580      52784275 
 5580      66666572 
 5580      00
 5581              	.LASF96:
 5582 04b6 74735F75 		.ascii	"ts_update\000"
 5582      70646174 
 5582      6500
 5583              	.LASF38:
 5584 04c0 466F7277 		.ascii	"Forward\000"
 5584      61726400 
 5585              	.LASF118:
 5586 04c8 746F7461 		.ascii	"totalMilliseconds\000"
 5586      6C4D696C 
 5586      6C697365 
 5586      636F6E64 
 5586      7300
 5587              	.LASF35:
 5588 04da 67325F79 		.ascii	"g2_ypos\000"
 5588      706F7300 
 5589              	.LASF88:
 5590 04e2 70726576 		.ascii	"prevRow\000"
 5590      526F7700 
 5591              	.LASF51:
 5592 04ea 4F726965 		.ascii	"OrientationState\000"
 5592      6E746174 
 5592      696F6E53 
 5592      74617465 
 5592      00
 5593              	.LASF52:
 5594 04fb 446F776E 		.ascii	"Down\000"
 5594      00
 5595              	.LASF54:
 5596 0500 52696768 		.ascii	"Right\000"
 5596      7400
 5597              	.LASF82:
 5598 0506 6A756E63 		.ascii	"junctionToCheck\000"
 5598      74696F6E 
 5598      546F4368 
 5598      65636B00 
 5599              	.LASF31:
 5600 0516 67315F79 		.ascii	"g1_ypos\000"
 5600      706F7300 
 5601              	.LASF113:
 5602 051e 63757272 		.ascii	"currentDirection\000"
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 120


 5602      656E7444 
 5602      69726563 
 5602      74696F6E 
 5602      00
 5603              	.LASF117:
 5604 052f 73746F70 		.ascii	"stopFlag\000"
 5604      466C6167 
 5604      00
 5605              	.LASF10:
 5606 0538 73697A65 		.ascii	"sizetype\000"
 5606      74797065 
 5606      00
 5607              	.LASF5:
 5608 0541 6C6F6E67 		.ascii	"long unsigned int\000"
 5608      20756E73 
 5608      69676E65 
 5608      6420696E 
 5608      7400
 5609              	.LASF124:
 5610 0553 73746F70 		.ascii	"stopBuffer\000"
 5610      42756666 
 5610      657200
 5611              	.LASF13:
 5612 055e 696E7433 		.ascii	"int32_t\000"
 5612      325F7400 
 5613              	.LASF55:
 5614 0566 4A756E63 		.ascii	"JunctionType\000"
 5614      74696F6E 
 5614      54797065 
 5614      00
 5615              	.LASF23:
 5616 0573 726F626F 		.ascii	"robot_xpos\000"
 5616      745F7870 
 5616      6F7300
 5617              	.LASF110:
 5618 057e 656E7472 		.ascii	"entry\000"
 5618      7900
 5619              	.LASF1:
 5620 0584 756E7369 		.ascii	"unsigned char\000"
 5620      676E6564 
 5620      20636861 
 5620      7200
 5621              	.LASF129:
 5622 0592 73746F70 		.ascii	"stoppedAfterTurn\000"
 5622      70656441 
 5622      66746572 
 5622      5475726E 
 5622      00
 5623              	.LASF109:
 5624 05a3 6C696E65 		.ascii	"line\000"
 5624      00
 5625              	.LASF42:
 5626 05a8 41646A75 		.ascii	"AdjustToTheRight\000"
 5626      7374546F 
 5626      54686552 
 5626      69676874 
 5626      00
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 121


 5627              	.LASF76:
 5628 05b9 4765744A 		.ascii	"GetJunctionType\000"
 5628      756E6374 
 5628      696F6E54 
 5628      79706500 
 5629              	.LASF43:
 5630 05c9 53746F70 		.ascii	"Stop\000"
 5630      00
 5631              	.LASF95:
 5632 05ce 74735F65 		.ascii	"ts_enc\000"
 5632      6E6300
 5633              	.LASF81:
 5634 05d5 43686563 		.ascii	"CheckIfJunctionExistsAtRowCol\000"
 5634      6B49664A 
 5634      756E6374 
 5634      696F6E45 
 5634      78697374 
 5635              	.LASF108:
 5636 05f3 64697370 		.ascii	"displaystring\000"
 5636      6C617973 
 5636      7472696E 
 5636      6700
 5637              	.LASF59:
 5638 0601 52696768 		.ascii	"RightJunctionAfterTurn\000"
 5638      744A756E 
 5638      6374696F 
 5638      6E416674 
 5638      65725475 
 5639              	.LASF67:
 5640 0618 53355F44 		.ascii	"S5_DETECTED\000"
 5640      45544543 
 5640      54454400 
 5641              	.LASF0:
 5642 0624 7369676E 		.ascii	"signed char\000"
 5642      65642063 
 5642      68617200 
 5643              	.LASF58:
 5644 0630 4C656674 		.ascii	"LeftJunctionAfterTurn\000"
 5644      4A756E63 
 5644      74696F6E 
 5644      41667465 
 5644      72547572 
 5645              	.LASF127:
 5646 0646 63757272 		.ascii	"currentRow\000"
 5646      656E7452 
 5646      6F7700
 5647              	.LASF3:
 5648 0651 73686F72 		.ascii	"short unsigned int\000"
 5648      7420756E 
 5648      7369676E 
 5648      65642069 
 5648      6E7400
 5649              	.LASF25:
 5650 0664 726F626F 		.ascii	"robot_orientation\000"
 5650      745F6F72 
 5650      69656E74 
 5650      6174696F 
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 122


 5650      6E00
 5651              	.LASF70:
 5652 0676 6D61696E 		.ascii	"main\000"
 5652      00
 5653              	.LASF41:
 5654 067b 41646A75 		.ascii	"AdjustToTheLeft\000"
 5654      7374546F 
 5654      5468654C 
 5654      65667400 
 5655              	.LASF49:
 5656 068b 4261636B 		.ascii	"Backward\000"
 5656      77617264 
 5656      00
 5657              	.LASF86:
 5658 0694 6E657874 		.ascii	"nextRow\000"
 5658      526F7700 
 5659              	.LASF14:
 5660 069c 75696E74 		.ascii	"uint8\000"
 5660      3800
 5661              	.LASF20:
 5662 06a2 646F7562 		.ascii	"double\000"
 5662      6C6500
 5663              	.LASF90:
 5664 06a9 43686563 		.ascii	"CheckSensorDirection\000"
 5664      6B53656E 
 5664      736F7244 
 5664      69726563 
 5664      74696F6E 
 5665              	.LASF128:
 5666 06be 63757272 		.ascii	"currentCol\000"
 5666      656E7443 
 5666      6F6C00
 5667              	.LASF78:
 5668 06c9 436F6E76 		.ascii	"ConvertJunctionTypeToUpOrientation\000"
 5668      6572744A 
 5668      756E6374 
 5668      696F6E54 
 5668      79706554 
 5669              	.LASF26:
 5670 06ec 67305F78 		.ascii	"g0_xpos\000"
 5670      706F7300 
 5671              	.LASF122:
 5672 06f4 74696D65 		.ascii	"timerInt\000"
 5672      72496E74 
 5672      00
 5673              	.LASF87:
 5674 06fd 6E657874 		.ascii	"nextCol\000"
 5674      436F6C00 
 5675              	.LASF105:
 5676 0705 666C6167 		.ascii	"flag_KB_string\000"
 5676      5F4B425F 
 5676      73747269 
 5676      6E6700
 5677              	.LASF32:
 5678 0714 67315F73 		.ascii	"g1_speed\000"
 5678      70656564 
 5678      00
ARM GAS  C:\Users\Jobsa\AppData\Local\Temp\ccU3XmhY.s 			page 123


 5679              	.LASF102:
 5680 071d 666C6167 		.ascii	"flag_ts_display\000"
 5680      5F74735F 
 5680      64697370 
 5680      6C617900 
 5681              	.LASF85:
 5682 072d 72656C61 		.ascii	"relativeJunction\000"
 5682      74697665 
 5682      4A756E63 
 5682      74696F6E 
 5682      00
 5683              	.LASF56:
 5684 073e 4C656674 		.ascii	"LeftJunction\000"
 5684      4A756E63 
 5684      74696F6E 
 5684      00
 5685              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
