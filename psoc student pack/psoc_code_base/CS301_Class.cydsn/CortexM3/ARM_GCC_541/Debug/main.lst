ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"main.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	ts
  20              		.bss
  21              		.type	ts, %object
  22              		.size	ts, 1
  23              	ts:
  24 0000 00       		.space	1
  25              		.global	ts_enc
  26 0001 00       		.align	1
  27              		.type	ts_enc, %object
  28              		.size	ts_enc, 2
  29              	ts_enc:
  30 0002 0000     		.space	2
  31              		.global	ts_update
  32              		.align	1
  33              		.type	ts_update, %object
  34              		.size	ts_update, 2
  35              	ts_update:
  36 0004 0000     		.space	2
  37              		.global	ts_speed
  38              		.align	1
  39              		.type	ts_speed, %object
  40              		.size	ts_speed, 2
  41              	ts_speed:
  42 0006 0000     		.space	2
  43              		.global	ts_display
  44              		.align	1
  45              		.type	ts_display, %object
  46              		.size	ts_display, 2
  47              	ts_display:
  48 0008 0000     		.space	2
  49              		.global	flag_ts_enc
  50              		.type	flag_ts_enc, %object
  51              		.size	flag_ts_enc, 1
  52              	flag_ts_enc:
  53 000a 00       		.space	1
  54              		.global	flag_ts_update
  55              		.type	flag_ts_update, %object
  56              		.size	flag_ts_update, 1
  57              	flag_ts_update:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 2


  58 000b 00       		.space	1
  59              		.global	flag_ts_speed
  60              		.type	flag_ts_speed, %object
  61              		.size	flag_ts_speed, 1
  62              	flag_ts_speed:
  63 000c 00       		.space	1
  64              		.global	flag_ts_display
  65              		.type	flag_ts_display, %object
  66              		.size	flag_ts_display, 1
  67              	flag_ts_display:
  68 000d 00       		.space	1
  69              		.global	flag_rx
  70              		.type	flag_rx, %object
  71              		.size	flag_rx, 1
  72              	flag_rx:
  73 000e 00       		.space	1
  74              		.global	flag_packet
  75              		.type	flag_packet, %object
  76              		.size	flag_packet, 1
  77              	flag_packet:
  78 000f 00       		.space	1
  79              		.global	flag_KB_string
  80              		.type	flag_KB_string, %object
  81              		.size	flag_KB_string, 1
  82              	flag_KB_string:
  83 0010 00       		.space	1
  84              		.global	dataready_flag
  85              		.type	dataready_flag, %object
  86              		.size	dataready_flag, 1
  87              	dataready_flag:
  88 0011 00       		.space	1
  89              		.global	flag_rf_transmission_active
  90              		.data
  91              		.type	flag_rf_transmission_active, %object
  92              		.size	flag_rf_transmission_active, 1
  93              	flag_rf_transmission_active:
  94 0000 0A       		.byte	10
  95              		.global	displaystring
  96 0001 000000   		.align	2
  97              		.type	displaystring, %object
  98              		.size	displaystring, 64
  99              	displaystring:
 100 0004 43533330 		.ascii	"CS301 2016\012\015\000"
 100      31203230 
 100      31360A0D 
 100      00
 101 0011 00000000 		.space	51
 101      00000000 
 101      00000000 
 101      00000000 
 101      00000000 
 102              		.comm	line,64,4
 103              		.comm	entry,64,4
 104              		.comm	usbBuffer,64,4
 105              		.comm	system_state,32,4
 106              		.comm	currentDirection,1,1
 107              		.global	previousDirection
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 3


 108              		.bss
 109              		.type	previousDirection, %object
 110              		.size	previousDirection, 1
 111              	previousDirection:
 112 0012 00       		.space	1
 113              		.comm	currentRobotOrientation,1,1
 114              		.global	previousOrientation
 115              		.data
 116              		.type	previousOrientation, %object
 117              		.size	previousOrientation, 1
 118              	previousOrientation:
 119 0044 01       		.byte	1
 120              		.comm	currentInstruction,12,4
 121              		.comm	numSteps,4,4
 122              		.comm	instructionList,4,4
 123              		.global	instructionIndex
 124              		.bss
 125 0013 00       		.align	2
 126              		.type	instructionIndex, %object
 127              		.size	instructionIndex, 4
 128              	instructionIndex:
 129 0014 00000000 		.space	4
 130              		.comm	s3,1,1
 131              		.comm	s4,1,1
 132              		.comm	s5,1,1
 133              		.global	s6
 134              		.type	s6, %object
 135              		.size	s6, 1
 136              	s6:
 137 0018 00       		.space	1
 138              		.global	totalMilliseconds
 139 0019 000000   		.align	2
 140              		.type	totalMilliseconds, %object
 141              		.size	totalMilliseconds, 4
 142              	totalMilliseconds:
 143 001c 00000000 		.space	4
 144              		.global	totalDistance
 145              		.align	2
 146              		.type	totalDistance, %object
 147              		.size	totalDistance, 4
 148              	totalDistance:
 149 0020 00000000 		.space	4
 150              		.comm	buffer,69,4
 151              		.global	quadDec2Count
 152              		.align	2
 153              		.type	quadDec2Count, %object
 154              		.size	quadDec2Count, 4
 155              	quadDec2Count:
 156 0024 00000000 		.space	4
 157              		.global	timerInt
 158              		.align	2
 159              		.type	timerInt, %object
 160              		.size	timerInt, 4
 161              	timerInt:
 162 0028 00000000 		.space	4
 163              		.global	keepLedOn
 164              		.align	2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 4


 165              		.type	keepLedOn, %object
 166              		.size	keepLedOn, 4
 167              	keepLedOn:
 168 002c 00000000 		.space	4
 169              		.global	stopBuffer
 170              		.align	2
 171              		.type	stopBuffer, %object
 172              		.size	stopBuffer, 4
 173              	stopBuffer:
 174 0030 00000000 		.space	4
 175              		.global	turnFinishedFlag
 176              		.type	turnFinishedFlag, %object
 177              		.size	turnFinishedFlag, 1
 178              	turnFinishedFlag:
 179 0034 00       		.space	1
 180              		.global	forwardUntilTargetStartedFlag
 181              		.type	forwardUntilTargetStartedFlag, %object
 182              		.size	forwardUntilTargetStartedFlag, 1
 183              	forwardUntilTargetStartedFlag:
 184 0035 00       		.space	1
 185              		.global	blockSizeTotal
 186 0036 0000     		.align	2
 187              		.type	blockSizeTotal, %object
 188              		.size	blockSizeTotal, 4
 189              	blockSizeTotal:
 190 0038 00000000 		.space	4
 191              		.global	__aeabi_i2d
 192              		.global	__aeabi_dmul
 193              		.global	__aeabi_ddiv
 194              		.global	__aeabi_d2f
 195              		.global	__aeabi_fadd
 196              		.section	.text.speedTimer,"ax",%progbits
 197              		.align	2
 198              		.global	speedTimer
 199              		.thumb
 200              		.thumb_func
 201              		.type	speedTimer, %function
 202              	speedTimer:
 203              	.LFB64:
 204              		.file 1 "main.c"
   1:main.c        **** #include <stdio.h>
   2:main.c        **** #include <string.h>
   3:main.c        **** #include <stdlib.h>
   4:main.c        **** #include <project.h>
   5:main.c        **** //* ========================================
   6:main.c        **** #include "defines.h"
   7:main.c        **** #include "vars.h"
   8:main.c        **** #include "pathfinding.h"
   9:main.c        **** #include "initialise.h"
  10:main.c        **** #include "movement.h"
  11:main.c        **** #include "usbUART.h"
  12:main.c        **** #include "map.h"
  13:main.c        **** //* ========================================
  14:main.c        **** // USBUART
  15:main.c        **** void usbPutString(char *s);
  16:main.c        **** void usbPutChar(char c);
  17:main.c        **** void handle_usb();
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 5


  18:main.c        **** //* ========================================
  19:main.c        **** int16 quadCountToRPM(uint16 count);
  20:main.c        **** //* ========================================
  21:main.c        **** // Sensors, Course correction and Movement Direction.
  22:main.c        **** void ResetSensorFlags();
  23:main.c        **** void SetRobotMovement();
  24:main.c        **** enum RobotMovement {Forward, TurnRight, TurnLeft, AdjustToTheLeft, AdjustToTheRight, Stop, Unknown,
  25:main.c        **** enum RobotMovement currentDirection, previousDirection = Forward; 
  26:main.c        **** enum RobotMovement GetMovementAccordingToInstruction();
  27:main.c        **** enum OrientationState currentRobotOrientation, previousOrientation = Down;
  28:main.c        **** Instruction currentInstruction;
  29:main.c        **** int numSteps;
  30:main.c        **** void traversePath(int numSteps, Instruction instructionList[]);
  31:main.c        **** Instruction * instructionList; // pointer to array
  32:main.c        **** uint32 instructionIndex = 0;
  33:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
  34:main.c        **** float CalculateDistanceToTravel(float blockSize);
  35:main.c        **** void MoveToNextInstruction();
  36:main.c        **** // ----------------------------------------
  37:main.c        **** uint8 s3, s4, s5, s6 = 0;
  38:main.c        **** //* ========================================
  39:main.c        **** // Calculating Distance
  40:main.c        **** #define WHEEL_DIAMETER_MM 64.5
  41:main.c        **** 
  42:main.c        **** uint32 totalMilliseconds = 0;
  43:main.c        **** float totalDistance = 0; // in mm
  44:main.c        **** //* ========================================
  45:main.c        **** char buffer[69];
  46:main.c        **** int quadDec2Count = 0;
  47:main.c        **** int timerInt = 0;
  48:main.c        **** int keepLedOn = 0;
  49:main.c        **** // ========================================= FLAGS
  50:main.c        **** uint32 stopBuffer = 0;
  51:main.c        **** uint8 turnFinishedFlag = 0;
  52:main.c        **** uint8 forwardUntilTargetStartedFlag = 0;
  53:main.c        **** float blockSizeTotal = 0;
  54:main.c        **** //char map[MAX_ROWS][MAX_COLS]; // global map array- stores the map
  55:main.c        **** 
  56:main.c        **** CY_ISR (speedTimer) {
 205              		.loc 1 56 0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 8
 208              		@ frame_needed = 1, uses_anonymous_args = 0
 209 0000 90B5     		push	{r4, r7, lr}
 210              		.cfi_def_cfa_offset 12
 211              		.cfi_offset 4, -12
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 0002 83B0     		sub	sp, sp, #12
 215              		.cfi_def_cfa_offset 24
 216 0004 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
  57:main.c        ****     timerInt = 1;
 218              		.loc 1 57 0
 219 0006 344B     		ldr	r3, .L4+16
 220 0008 0122     		movs	r2, #1
 221 000a 1A60     		str	r2, [r3]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 6


  58:main.c        ****     //quadDec_M1 used for turning macros
  59:main.c        ****     quadDec2Count = QuadDec_M2_GetCounter();
 222              		.loc 1 59 0
 223 000c FFF7FEFF 		bl	QuadDec_M2_GetCounter
 224 0010 0346     		mov	r3, r0
 225 0012 1A46     		mov	r2, r3
 226 0014 314B     		ldr	r3, .L4+20
 227 0016 1A60     		str	r2, [r3]
  60:main.c        ****     
  61:main.c        ****     if ((currentDirection == Forward || 
 228              		.loc 1 61 0
 229 0018 314B     		ldr	r3, .L4+24
 230 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 231 001c 002B     		cmp	r3, #0
 232 001e 13D0     		beq	.L2
  62:main.c        ****         currentDirection == ForwardAfterTurn ||
 233              		.loc 1 62 0 discriminator 1
 234 0020 2F4B     		ldr	r3, .L4+24
 235 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  61:main.c        ****         currentDirection == ForwardAfterTurn ||
 236              		.loc 1 61 0 discriminator 1
 237 0024 082B     		cmp	r3, #8
 238 0026 0FD0     		beq	.L2
  63:main.c        ****         currentDirection == waitForTurn || 
 239              		.loc 1 63 0
 240 0028 2D4B     		ldr	r3, .L4+24
 241 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  62:main.c        ****         currentDirection == ForwardAfterTurn ||
 242              		.loc 1 62 0
 243 002c 072B     		cmp	r3, #7
 244 002e 0BD0     		beq	.L2
  64:main.c        ****         currentDirection == AdjustToTheLeft ||
 245              		.loc 1 64 0
 246 0030 2B4B     		ldr	r3, .L4+24
 247 0032 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  63:main.c        ****         currentDirection == waitForTurn || 
 248              		.loc 1 63 0
 249 0034 032B     		cmp	r3, #3
 250 0036 07D0     		beq	.L2
  65:main.c        ****         currentDirection == AdjustToTheRight ||
 251              		.loc 1 65 0
 252 0038 294B     		ldr	r3, .L4+24
 253 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  64:main.c        ****         currentDirection == AdjustToTheLeft ||
 254              		.loc 1 64 0
 255 003c 042B     		cmp	r3, #4
 256 003e 03D0     		beq	.L2
  66:main.c        ****         currentDirection == Backward) &&
 257              		.loc 1 66 0
 258 0040 274B     		ldr	r3, .L4+24
 259 0042 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  65:main.c        ****         currentDirection == AdjustToTheRight ||
 260              		.loc 1 65 0
 261 0044 092B     		cmp	r3, #9
 262 0046 34D1     		bne	.L3
 263              	.L2:
  67:main.c        ****         quadDec2Count != 0) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 7


 264              		.loc 1 67 0
 265 0048 244B     		ldr	r3, .L4+20
 266 004a 1B68     		ldr	r3, [r3]
  66:main.c        ****         currentDirection == Backward) &&
 267              		.loc 1 66 0
 268 004c 002B     		cmp	r3, #0
 269 004e 30D0     		beq	.L3
 270              	.LBB2:
  68:main.c        ****         //uint32 newDistance = ((abs(quadDec2Count) / 57.0) * CY_M_PI * WHEEL_DIAMETER_MM)/4;
  69:main.c        ****         float newDistance = (abs(quadDec2Count) * CY_M_PI * WHEEL_DIAMETER_MM)/228;
 271              		.loc 1 69 0
 272 0050 224B     		ldr	r3, .L4+20
 273 0052 1B68     		ldr	r3, [r3]
 274 0054 002B     		cmp	r3, #0
 275 0056 B8BF     		it	lt
 276 0058 5B42     		rsblt	r3, r3, #0
 277 005a 1846     		mov	r0, r3
 278 005c FFF7FEFF 		bl	__aeabi_i2d
 279 0060 19A3     		adr	r3, .L4
 280 0062 D3E90023 		ldrd	r2, [r3]
 281 0066 FFF7FEFF 		bl	__aeabi_dmul
 282 006a 0346     		mov	r3, r0
 283 006c 0C46     		mov	r4, r1
 284 006e 1846     		mov	r0, r3
 285 0070 2146     		mov	r1, r4
 286 0072 17A3     		adr	r3, .L4+8
 287 0074 D3E90023 		ldrd	r2, [r3]
 288 0078 FFF7FEFF 		bl	__aeabi_dmul
 289 007c 0346     		mov	r3, r0
 290 007e 0C46     		mov	r4, r1
 291 0080 1846     		mov	r0, r3
 292 0082 2146     		mov	r1, r4
 293 0084 4FF00002 		mov	r2, #0
 294 0088 164B     		ldr	r3, .L4+28
 295 008a FFF7FEFF 		bl	__aeabi_ddiv
 296 008e 0346     		mov	r3, r0
 297 0090 0C46     		mov	r4, r1
 298 0092 1846     		mov	r0, r3
 299 0094 2146     		mov	r1, r4
 300 0096 FFF7FEFF 		bl	__aeabi_d2f
 301 009a 0346     		mov	r3, r0
 302 009c 7B60     		str	r3, [r7, #4]	@ float
  70:main.c        ****         
  71:main.c        ****         totalDistance = totalDistance + newDistance;
 303              		.loc 1 71 0
 304 009e 124B     		ldr	r3, .L4+32
 305 00a0 1B68     		ldr	r3, [r3]	@ float
 306 00a2 7968     		ldr	r1, [r7, #4]	@ float
 307 00a4 1846     		mov	r0, r3
 308 00a6 FFF7FEFF 		bl	__aeabi_fadd
 309 00aa 0346     		mov	r3, r0
 310 00ac 1A46     		mov	r2, r3
 311 00ae 0E4B     		ldr	r3, .L4+32
 312 00b0 1A60     		str	r2, [r3]	@ float
 313              	.L3:
 314              	.LBE2:
  72:main.c        ****     }
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 8


  73:main.c        ****     
  74:main.c        ****     QuadDec_M2_SetCounter(0); // reset count
 315              		.loc 1 74 0
 316 00b2 0020     		movs	r0, #0
 317 00b4 FFF7FEFF 		bl	QuadDec_M2_SetCounter
  75:main.c        ****     QuadDec_M2_Start(); // restart counter
 318              		.loc 1 75 0
 319 00b8 FFF7FEFF 		bl	QuadDec_M2_Start
  76:main.c        ****     
  77:main.c        ****     SpeedTimer_ReadStatusRegister(); // clear interrupt
 320              		.loc 1 77 0
 321 00bc FFF7FEFF 		bl	SpeedTimer_ReadStatusRegister
  78:main.c        **** }
 322              		.loc 1 78 0
 323 00c0 00BF     		nop
 324 00c2 0C37     		adds	r7, r7, #12
 325              		.cfi_def_cfa_offset 12
 326 00c4 BD46     		mov	sp, r7
 327              		.cfi_def_cfa_register 13
 328              		@ sp needed
 329 00c6 90BD     		pop	{r4, r7, pc}
 330              	.L5:
 331              		.align	3
 332              	.L4:
 333 00c8 182D4454 		.word	1413754136
 334 00cc FB210940 		.word	1074340347
 335 00d0 00000000 		.word	0
 336 00d4 00205040 		.word	1078992896
 337 00d8 00000000 		.word	timerInt
 338 00dc 00000000 		.word	quadDec2Count
 339 00e0 00000000 		.word	currentDirection
 340 00e4 00806C40 		.word	1080852480
 341 00e8 00000000 		.word	totalDistance
 342              		.cfi_endproc
 343              	.LFE64:
 344              		.size	speedTimer, .-speedTimer
 345              		.section	.text.S3_DETECTED,"ax",%progbits
 346              		.align	2
 347              		.global	S3_DETECTED
 348              		.thumb
 349              		.thumb_func
 350              		.type	S3_DETECTED, %function
 351              	S3_DETECTED:
 352              	.LFB65:
  79:main.c        **** 
  80:main.c        **** CY_ISR(S3_DETECTED) {
 353              		.loc 1 80 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 1, uses_anonymous_args = 0
 357              		@ link register save eliminated.
 358 0000 80B4     		push	{r7}
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 7, -4
 361 0002 00AF     		add	r7, sp, #0
 362              		.cfi_def_cfa_register 7
  81:main.c        ****     // Sensor has detected WHITE
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 9


  82:main.c        ****     s3 = 1; // , Black = 0, White = 1
 363              		.loc 1 82 0
 364 0004 034B     		ldr	r3, .L7
 365 0006 0122     		movs	r2, #1
 366 0008 1A70     		strb	r2, [r3]
  83:main.c        ****     //LED_Write(1u);
  84:main.c        **** }
 367              		.loc 1 84 0
 368 000a 00BF     		nop
 369 000c BD46     		mov	sp, r7
 370              		.cfi_def_cfa_register 13
 371              		@ sp needed
 372 000e 80BC     		pop	{r7}
 373              		.cfi_restore 7
 374              		.cfi_def_cfa_offset 0
 375 0010 7047     		bx	lr
 376              	.L8:
 377 0012 00BF     		.align	2
 378              	.L7:
 379 0014 00000000 		.word	s3
 380              		.cfi_endproc
 381              	.LFE65:
 382              		.size	S3_DETECTED, .-S3_DETECTED
 383              		.section	.text.S4_DETECTED,"ax",%progbits
 384              		.align	2
 385              		.global	S4_DETECTED
 386              		.thumb
 387              		.thumb_func
 388              		.type	S4_DETECTED, %function
 389              	S4_DETECTED:
 390              	.LFB66:
  85:main.c        **** 
  86:main.c        **** CY_ISR(S4_DETECTED) {
 391              		.loc 1 86 0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 1, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 396 0000 80B4     		push	{r7}
 397              		.cfi_def_cfa_offset 4
 398              		.cfi_offset 7, -4
 399 0002 00AF     		add	r7, sp, #0
 400              		.cfi_def_cfa_register 7
  87:main.c        ****     // Sensor has detected WHITE
  88:main.c        ****     s4 = 1; // , Black = 0, White = 1
 401              		.loc 1 88 0
 402 0004 034B     		ldr	r3, .L10
 403 0006 0122     		movs	r2, #1
 404 0008 1A70     		strb	r2, [r3]
  89:main.c        ****     //LED_Write(1u);
  90:main.c        **** }
 405              		.loc 1 90 0
 406 000a 00BF     		nop
 407 000c BD46     		mov	sp, r7
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 000e 80BC     		pop	{r7}
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 10


 411              		.cfi_restore 7
 412              		.cfi_def_cfa_offset 0
 413 0010 7047     		bx	lr
 414              	.L11:
 415 0012 00BF     		.align	2
 416              	.L10:
 417 0014 00000000 		.word	s4
 418              		.cfi_endproc
 419              	.LFE66:
 420              		.size	S4_DETECTED, .-S4_DETECTED
 421              		.section	.text.S5_DETECTED,"ax",%progbits
 422              		.align	2
 423              		.global	S5_DETECTED
 424              		.thumb
 425              		.thumb_func
 426              		.type	S5_DETECTED, %function
 427              	S5_DETECTED:
 428              	.LFB67:
  91:main.c        **** 
  92:main.c        **** CY_ISR(S5_DETECTED) {
 429              		.loc 1 92 0
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 0
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              		.cfi_def_cfa_offset 4
 436              		.cfi_offset 7, -4
 437 0002 00AF     		add	r7, sp, #0
 438              		.cfi_def_cfa_register 7
  93:main.c        ****     // Sensor has detected WHITE
  94:main.c        ****     s5 = 1; // , Black = 0, White = 1
 439              		.loc 1 94 0
 440 0004 034B     		ldr	r3, .L13
 441 0006 0122     		movs	r2, #1
 442 0008 1A70     		strb	r2, [r3]
  95:main.c        ****     //LED_Write(1u);
  96:main.c        **** }
 443              		.loc 1 96 0
 444 000a 00BF     		nop
 445 000c BD46     		mov	sp, r7
 446              		.cfi_def_cfa_register 13
 447              		@ sp needed
 448 000e 80BC     		pop	{r7}
 449              		.cfi_restore 7
 450              		.cfi_def_cfa_offset 0
 451 0010 7047     		bx	lr
 452              	.L14:
 453 0012 00BF     		.align	2
 454              	.L13:
 455 0014 00000000 		.word	s5
 456              		.cfi_endproc
 457              	.LFE67:
 458              		.size	S5_DETECTED, .-S5_DETECTED
 459              		.section	.text.S6_DETECTED,"ax",%progbits
 460              		.align	2
 461              		.global	S6_DETECTED
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 11


 462              		.thumb
 463              		.thumb_func
 464              		.type	S6_DETECTED, %function
 465              	S6_DETECTED:
 466              	.LFB68:
  97:main.c        **** 
  98:main.c        **** CY_ISR(S6_DETECTED) {
 467              		.loc 1 98 0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 1, uses_anonymous_args = 0
 471              		@ link register save eliminated.
 472 0000 80B4     		push	{r7}
 473              		.cfi_def_cfa_offset 4
 474              		.cfi_offset 7, -4
 475 0002 00AF     		add	r7, sp, #0
 476              		.cfi_def_cfa_register 7
  99:main.c        ****     // Sensor has detected WHITE
 100:main.c        ****     s6 = 1; // , Black = 0, White = 1
 477              		.loc 1 100 0
 478 0004 034B     		ldr	r3, .L16
 479 0006 0122     		movs	r2, #1
 480 0008 1A70     		strb	r2, [r3]
 101:main.c        ****     //LED_Write(1u);
 102:main.c        **** }
 481              		.loc 1 102 0
 482 000a 00BF     		nop
 483 000c BD46     		mov	sp, r7
 484              		.cfi_def_cfa_register 13
 485              		@ sp needed
 486 000e 80BC     		pop	{r7}
 487              		.cfi_restore 7
 488              		.cfi_def_cfa_offset 0
 489 0010 7047     		bx	lr
 490              	.L17:
 491 0012 00BF     		.align	2
 492              	.L16:
 493 0014 00000000 		.word	s6
 494              		.cfi_endproc
 495              	.LFE68:
 496              		.size	S6_DETECTED, .-S6_DETECTED
 497              		.section	.text.TIMER_FINISH,"ax",%progbits
 498              		.align	2
 499              		.global	TIMER_FINISH
 500              		.thumb
 501              		.thumb_func
 502              		.type	TIMER_FINISH, %function
 503              	TIMER_FINISH:
 504              	.LFB69:
 103:main.c        **** 
 104:main.c        **** CY_ISR(TIMER_FINISH) {
 505              		.loc 1 104 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 1, uses_anonymous_args = 0
 509 0000 80B5     		push	{r7, lr}
 510              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 12


 511              		.cfi_offset 7, -8
 512              		.cfi_offset 14, -4
 513 0002 00AF     		add	r7, sp, #0
 514              		.cfi_def_cfa_register 7
 105:main.c        ****     if (currentDirection == Stop) {
 515              		.loc 1 105 0
 516 0004 0A4B     		ldr	r3, .L21
 517 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 518 0008 052B     		cmp	r3, #5
 519 000a 05D1     		bne	.L19
 106:main.c        ****         stopBuffer = stopBuffer + 1;
 520              		.loc 1 106 0
 521 000c 094B     		ldr	r3, .L21+4
 522 000e 1B68     		ldr	r3, [r3]
 523 0010 0133     		adds	r3, r3, #1
 524 0012 084A     		ldr	r2, .L21+4
 525 0014 1360     		str	r3, [r2]
 526 0016 02E0     		b	.L20
 527              	.L19:
 107:main.c        ****     } else {
 108:main.c        ****         stopBuffer = 0;
 528              		.loc 1 108 0
 529 0018 064B     		ldr	r3, .L21+4
 530 001a 0022     		movs	r2, #0
 531 001c 1A60     		str	r2, [r3]
 532              	.L20:
 109:main.c        ****     }
 110:main.c        ****     SetRobotMovement(); 
 533              		.loc 1 110 0
 534 001e FFF7FEFF 		bl	SetRobotMovement
 111:main.c        ****     ResetSensorFlags(); // Reset Sensor Flags for Next rising Eddge
 535              		.loc 1 111 0
 536 0022 FFF7FEFF 		bl	ResetSensorFlags
 112:main.c        ****     Timer_LED_ReadStatusRegister();
 537              		.loc 1 112 0
 538 0026 FFF7FEFF 		bl	Timer_LED_ReadStatusRegister
 113:main.c        **** }
 539              		.loc 1 113 0
 540 002a 00BF     		nop
 541 002c 80BD     		pop	{r7, pc}
 542              	.L22:
 543 002e 00BF     		.align	2
 544              	.L21:
 545 0030 00000000 		.word	currentDirection
 546 0034 00000000 		.word	stopBuffer
 547              		.cfi_endproc
 548              	.LFE69:
 549              		.size	TIMER_FINISH, .-TIMER_FINISH
 550              		.section	.text.main,"ax",%progbits
 551              		.align	2
 552              		.global	main
 553              		.thumb
 554              		.thumb_func
 555              		.type	main, %function
 556              	main:
 557              	.LFB70:
 114:main.c        **** 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 13


 115:main.c        **** 
 116:main.c        **** int main()
 117:main.c        **** {
 558              		.loc 1 117 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562 0000 80B5     		push	{r7, lr}
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 7, -8
 565              		.cfi_offset 14, -4
 566 0002 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 118:main.c        **** // ----- INITIALIZATIONS ----------
 119:main.c        ****     CYGlobalIntEnable;
 568              		.loc 1 119 0
 569              		.syntax unified
 570              	@ 119 "main.c" 1
 571 0004 62B6     		CPSIE   i
 572              	@ 0 "" 2
 120:main.c        ****     ResetSensorFlags();
 573              		.loc 1 120 0
 574              		.thumb
 575              		.syntax unified
 576 0006 FFF7FEFF 		bl	ResetSensorFlags
 121:main.c        ****     init(); // initialise clocks, pwms, adc, dac etc- done in header file
 577              		.loc 1 121 0
 578 000a FFF7FEFF 		bl	init
 122:main.c        ****     isr_speed_StartEx(speedTimer); // start interrupt
 579              		.loc 1 122 0
 580 000e 1F48     		ldr	r0, .L27
 581 0010 FFF7FEFF 		bl	isr_speed_StartEx
 123:main.c        ****     isr_Timer_LED_StartEx(TIMER_FINISH);
 582              		.loc 1 123 0
 583 0014 1E48     		ldr	r0, .L27+4
 584 0016 FFF7FEFF 		bl	isr_Timer_LED_StartEx
 124:main.c        ****     S3_detected_StartEx(S3_DETECTED);
 585              		.loc 1 124 0
 586 001a 1E48     		ldr	r0, .L27+8
 587 001c FFF7FEFF 		bl	S3_detected_StartEx
 125:main.c        ****     S4_detected_StartEx(S4_DETECTED);
 588              		.loc 1 125 0
 589 0020 1D48     		ldr	r0, .L27+12
 590 0022 FFF7FEFF 		bl	S4_detected_StartEx
 126:main.c        ****     S5_detected_StartEx(S5_DETECTED);
 591              		.loc 1 126 0
 592 0026 1D48     		ldr	r0, .L27+16
 593 0028 FFF7FEFF 		bl	S5_detected_StartEx
 127:main.c        ****     S6_detected_StartEx(S6_DETECTED);
 594              		.loc 1 127 0
 595 002c 1C48     		ldr	r0, .L27+20
 596 002e FFF7FEFF 		bl	S6_detected_StartEx
 128:main.c        ****     Timer_LED_Start();
 597              		.loc 1 128 0
 598 0032 FFF7FEFF 		bl	Timer_LED_Start
 129:main.c        ****     instructionList = findPath(map, food_list, 0);
 599              		.loc 1 129 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 14


 600 0036 0022     		movs	r2, #0
 601 0038 1A49     		ldr	r1, .L27+24
 602 003a 1B48     		ldr	r0, .L27+28
 603 003c FFF7FEFF 		bl	findPath
 604 0040 0246     		mov	r2, r0
 605 0042 1A4B     		ldr	r3, .L27+32
 606 0044 1A60     		str	r2, [r3]
 130:main.c        ****     numSteps = instructionsListLength();
 607              		.loc 1 130 0
 608 0046 FFF7FEFF 		bl	instructionsListLength
 609 004a 0346     		mov	r3, r0
 610 004c 1A46     		mov	r2, r3
 611 004e 184B     		ldr	r3, .L27+36
 612 0050 1A60     		str	r2, [r3]
 131:main.c        **** // ------USB SETUP ----------------    
 132:main.c        **** #ifdef USE_USB    
 133:main.c        ****     USBUART_Start(0,USBUART_5V_OPERATION);
 613              		.loc 1 133 0
 614 0052 0121     		movs	r1, #1
 615 0054 0020     		movs	r0, #0
 616 0056 FFF7FEFF 		bl	USBUART_Start
 134:main.c        **** #endif        
 135:main.c        ****     RF_BT_SELECT_Write(0);
 617              		.loc 1 135 0
 618 005a 0020     		movs	r0, #0
 619 005c FFF7FEFF 		bl	RF_BT_SELECT_Write
 620              	.L26:
 136:main.c        ****     
 137:main.c        ****     //usbPutString("Initialised UART");
 138:main.c        ****     for(;;)
 139:main.c        ****     {
 140:main.c        ****         if(timerInt == 1) {
 621              		.loc 1 140 0
 622 0060 144B     		ldr	r3, .L27+40
 623 0062 1B68     		ldr	r3, [r3]
 624 0064 012B     		cmp	r3, #1
 625 0066 08D1     		bne	.L24
 141:main.c        ****             timerInt = 0;
 626              		.loc 1 141 0
 627 0068 124B     		ldr	r3, .L27+40
 628 006a 0022     		movs	r2, #0
 629 006c 1A60     		str	r2, [r3]
 142:main.c        ****             // calculate RPM of M2
 143:main.c        ****             quadCountToRPM(quadDec2Count);
 630              		.loc 1 143 0
 631 006e 124B     		ldr	r3, .L27+44
 632 0070 1B68     		ldr	r3, [r3]
 633 0072 9BB2     		uxth	r3, r3
 634 0074 1846     		mov	r0, r3
 635 0076 FFF7FEFF 		bl	quadCountToRPM
 636              	.L24:
 144:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 145:main.c        ****             //usbPutString(buffer);
 146:main.c        ****             //usbPutString(" ");
 147:main.c        ****         }
 148:main.c        ****         //handle_usb();
 149:main.c        ****         if (flag_KB_string == 1)
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 15


 637              		.loc 1 149 0
 638 007a 104B     		ldr	r3, .L27+48
 639 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 640 007e 012B     		cmp	r3, #1
 641 0080 EED1     		bne	.L26
 150:main.c        ****         {
 151:main.c        ****             //usbPutString("Total Distance: ");
 152:main.c        ****             //sprintf(buffer, "%lu", totalDistance);
 153:main.c        ****             //usbPutString(buffer);
 154:main.c        ****             flag_KB_string = 0;
 642              		.loc 1 154 0
 643 0082 0E4B     		ldr	r3, .L27+48
 644 0084 0022     		movs	r2, #0
 645 0086 1A70     		strb	r2, [r3]
 155:main.c        ****         }           
 156:main.c        ****     }
 646              		.loc 1 156 0
 647 0088 EAE7     		b	.L26
 648              	.L28:
 649 008a 00BF     		.align	2
 650              	.L27:
 651 008c 00000000 		.word	speedTimer
 652 0090 00000000 		.word	TIMER_FINISH
 653 0094 00000000 		.word	S3_DETECTED
 654 0098 00000000 		.word	S4_DETECTED
 655 009c 00000000 		.word	S5_DETECTED
 656 00a0 00000000 		.word	S6_DETECTED
 657 00a4 00000000 		.word	food_list
 658 00a8 00000000 		.word	map
 659 00ac 00000000 		.word	instructionList
 660 00b0 00000000 		.word	numSteps
 661 00b4 00000000 		.word	timerInt
 662 00b8 00000000 		.word	quadDec2Count
 663 00bc 00000000 		.word	flag_KB_string
 664              		.cfi_endproc
 665              	.LFE70:
 666              		.size	main, .-main
 667              		.global	__aeabi_fmul
 668              		.global	__aeabi_f2iz
 669              		.section	.text.quadCountToRPM,"ax",%progbits
 670              		.align	2
 671              		.global	quadCountToRPM
 672              		.thumb
 673              		.thumb_func
 674              		.type	quadCountToRPM, %function
 675              	quadCountToRPM:
 676              	.LFB71:
 157:main.c        ****     return 0;
 158:main.c        **** }
 159:main.c        **** 
 160:main.c        **** // Calculations
 161:main.c        **** //* ========================================
 162:main.c        **** int16 quadCountToRPM(uint16 count)
 163:main.c        **** {
 677              		.loc 1 163 0
 678              		.cfi_startproc
 679              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 16


 680              		@ frame_needed = 1, uses_anonymous_args = 0
 681 0000 90B5     		push	{r4, r7, lr}
 682              		.cfi_def_cfa_offset 12
 683              		.cfi_offset 4, -12
 684              		.cfi_offset 7, -8
 685              		.cfi_offset 14, -4
 686 0002 85B0     		sub	sp, sp, #20
 687              		.cfi_def_cfa_offset 32
 688 0004 00AF     		add	r7, sp, #0
 689              		.cfi_def_cfa_register 7
 690 0006 0346     		mov	r3, r0
 691 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 164:main.c        ****     float cps = count/57.00;
 692              		.loc 1 164 0
 693 000a FB88     		ldrh	r3, [r7, #6]
 694 000c 1846     		mov	r0, r3
 695 000e FFF7FEFF 		bl	__aeabi_i2d
 696 0012 4FF00002 		mov	r2, #0
 697 0016 0D4B     		ldr	r3, .L31
 698 0018 FFF7FEFF 		bl	__aeabi_ddiv
 699 001c 0346     		mov	r3, r0
 700 001e 0C46     		mov	r4, r1
 701 0020 1846     		mov	r0, r3
 702 0022 2146     		mov	r1, r4
 703 0024 FFF7FEFF 		bl	__aeabi_d2f
 704 0028 0346     		mov	r3, r0
 705 002a FB60     		str	r3, [r7, #12]	@ float
 165:main.c        ****     int16 rpm = (int16)(cps*15); // rpm value
 706              		.loc 1 165 0
 707 002c 0849     		ldr	r1, .L31+4
 708 002e F868     		ldr	r0, [r7, #12]	@ float
 709 0030 FFF7FEFF 		bl	__aeabi_fmul
 710 0034 0346     		mov	r3, r0
 711 0036 1846     		mov	r0, r3
 712 0038 FFF7FEFF 		bl	__aeabi_f2iz
 713 003c 0346     		mov	r3, r0
 714 003e 7B81     		strh	r3, [r7, #10]	@ movhi
 166:main.c        ****     //sprintf(buffer, "%d", rpm); // store in buffer
 167:main.c        ****     return rpm;
 715              		.loc 1 167 0
 716 0040 B7F90A30 		ldrsh	r3, [r7, #10]
 168:main.c        ****     //usbPutString(buffer);
 169:main.c        ****     //usbPutString("rpm ");
 170:main.c        **** }
 717              		.loc 1 170 0
 718 0044 1846     		mov	r0, r3
 719 0046 1437     		adds	r7, r7, #20
 720              		.cfi_def_cfa_offset 12
 721 0048 BD46     		mov	sp, r7
 722              		.cfi_def_cfa_register 13
 723              		@ sp needed
 724 004a 90BD     		pop	{r4, r7, pc}
 725              	.L32:
 726              		.align	2
 727              	.L31:
 728 004c 00804C40 		.word	1078755328
 729 0050 00007041 		.word	1097859072
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 17


 730              		.cfi_endproc
 731              	.LFE71:
 732              		.size	quadCountToRPM, .-quadCountToRPM
 733              		.section	.text.ResetSensorFlags,"ax",%progbits
 734              		.align	2
 735              		.global	ResetSensorFlags
 736              		.thumb
 737              		.thumb_func
 738              		.type	ResetSensorFlags, %function
 739              	ResetSensorFlags:
 740              	.LFB72:
 171:main.c        **** 
 172:main.c        **** // Resets all sensor flags to 0 - i.e. currently out of map
 173:main.c        **** void ResetSensorFlags() {
 741              		.loc 1 173 0
 742              		.cfi_startproc
 743              		@ args = 0, pretend = 0, frame = 0
 744              		@ frame_needed = 1, uses_anonymous_args = 0
 745              		@ link register save eliminated.
 746 0000 80B4     		push	{r7}
 747              		.cfi_def_cfa_offset 4
 748              		.cfi_offset 7, -4
 749 0002 00AF     		add	r7, sp, #0
 750              		.cfi_def_cfa_register 7
 174:main.c        ****     s3 = 0;
 751              		.loc 1 174 0
 752 0004 074B     		ldr	r3, .L34
 753 0006 0022     		movs	r2, #0
 754 0008 1A70     		strb	r2, [r3]
 175:main.c        ****     s4 = 0;
 755              		.loc 1 175 0
 756 000a 074B     		ldr	r3, .L34+4
 757 000c 0022     		movs	r2, #0
 758 000e 1A70     		strb	r2, [r3]
 176:main.c        ****     s5 = 0;
 759              		.loc 1 176 0
 760 0010 064B     		ldr	r3, .L34+8
 761 0012 0022     		movs	r2, #0
 762 0014 1A70     		strb	r2, [r3]
 177:main.c        ****     s6 = 0;
 763              		.loc 1 177 0
 764 0016 064B     		ldr	r3, .L34+12
 765 0018 0022     		movs	r2, #0
 766 001a 1A70     		strb	r2, [r3]
 178:main.c        **** }
 767              		.loc 1 178 0
 768 001c 00BF     		nop
 769 001e BD46     		mov	sp, r7
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 0020 80BC     		pop	{r7}
 773              		.cfi_restore 7
 774              		.cfi_def_cfa_offset 0
 775 0022 7047     		bx	lr
 776              	.L35:
 777              		.align	2
 778              	.L34:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 18


 779 0024 00000000 		.word	s3
 780 0028 00000000 		.word	s4
 781 002c 00000000 		.word	s5
 782 0030 00000000 		.word	s6
 783              		.cfi_endproc
 784              	.LFE72:
 785              		.size	ResetSensorFlags, .-ResetSensorFlags
 786              		.global	xBlocksize
 787              		.data
 788 0045 000000   		.align	2
 789              		.type	xBlocksize, %object
 790              		.size	xBlocksize, 4
 791              	xBlocksize:
 792 0048 0000F442 		.word	1123287040
 793              		.global	yBlocksize
 794              		.align	2
 795              		.type	yBlocksize, %object
 796              		.size	yBlocksize, 4
 797              	yBlocksize:
 798 004c 0000A042 		.word	1117782016
 799              		.global	currentRow
 800              		.type	currentRow, %object
 801              		.size	currentRow, 1
 802              	currentRow:
 803 0050 01       		.byte	1
 804              		.global	currentCol
 805              		.type	currentCol, %object
 806              		.size	currentCol, 1
 807              	currentCol:
 808 0051 01       		.byte	1
 809              		.global	stoppedAfterTurn
 810              		.bss
 811              		.type	stoppedAfterTurn, %object
 812              		.size	stoppedAfterTurn, 1
 813              	stoppedAfterTurn:
 814 003c 00       		.space	1
 815              		.global	ignoreSensor
 816              		.type	ignoreSensor, %object
 817              		.size	ignoreSensor, 1
 818              	ignoreSensor:
 819 003d 00       		.space	1
 820              		.section	.text.ForwardCourseCorrection,"ax",%progbits
 821              		.align	2
 822              		.global	ForwardCourseCorrection
 823              		.thumb
 824              		.thumb_func
 825              		.type	ForwardCourseCorrection, %function
 826              	ForwardCourseCorrection:
 827              	.LFB73:
 179:main.c        **** 
 180:main.c        **** float xBlocksize = 122; // 122 mm
 181:main.c        **** float yBlocksize = 80; // 80 mm
 182:main.c        **** uint8 currentRow = 1;
 183:main.c        **** uint8 currentCol = 1;
 184:main.c        **** 
 185:main.c        **** /*enum DirectionState GetNextStep() {
 186:main.c        ****     enum DirectionState directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 19


 187:main.c        ****     // Determines robot movement and orientation to follow optimal path
 188:main.c        ****     // enum DirectionState directionState = Stop;
 189:main.c        ****     previousOrientation = currentOrientation;
 190:main.c        ****     
 191:main.c        ****     if(map[currentRow][currentCol] == 9) {
 192:main.c        ****         directionState = Stop; // reached target
 193:main.c        ****         return directionState;
 194:main.c        ****     }
 195:main.c        ****         
 196:main.c        ****     switch (previousOrientation) {
 197:main.c        ****             case Up:
 198:main.c        ****                 if(map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] == 9) {
 199:main.c        ****                     currentOrientation = Up; 
 200:main.c        ****                     directionState = Forward;
 201:main.c        ****                     currentRow--;// update position
 202:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 203:main.c        ****                     currentOrientation = Left;
 204:main.c        ****                     directionState = waitForLeftTurn;
 205:main.c        ****                     //currentRow--;
 206:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 207:main.c        ****                     currentOrientation = Right;
 208:main.c        ****                     directionState = waitForRightTurn;
 209:main.c        ****                     //currentRow++; // update position
 210:main.c        ****                 }
 211:main.c        ****                 break;
 212:main.c        ****             case Down:
 213:main.c        ****                 if(map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] == 9) {
 214:main.c        ****                     currentOrientation = Down;
 215:main.c        ****                     directionState = Forward;
 216:main.c        ****                     currentRow++;
 217:main.c        ****                 } else if (map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] 
 218:main.c        ****                     currentOrientation = Left;
 219:main.c        ****                     directionState = waitForRightTurn;
 220:main.c        ****                 } else if (map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] 
 221:main.c        ****                     currentOrientation = Right;
 222:main.c        ****                     directionState = waitForLeftTurn;
 223:main.c        ****                 }
 224:main.c        ****                 break;
 225:main.c        ****             case Left:
 226:main.c        ****                 if(map[currentRow][currentCol - 1] == 8 || map[currentRow][currentCol - 1] == 9) {
 227:main.c        ****                     currentOrientation = Left;
 228:main.c        ****                     directionState = Forward;
 229:main.c        ****                     currentCol--; // update position
 230:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
 231:main.c        ****                     currentOrientation = Up;
 232:main.c        ****                     directionState = waitForRightTurn;
 233:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 234:main.c        ****                     currentOrientation = Down;
 235:main.c        ****                     directionState = waitForLeftTurn;
 236:main.c        ****                 }
 237:main.c        ****                 break;
 238:main.c        ****             case Right:
 239:main.c        ****                 if(map[currentRow][currentCol + 1] == 8 || map[currentRow][currentCol + 1] == 9) {
 240:main.c        ****                     currentOrientation = Right;
 241:main.c        ****                     directionState = Forward;
 242:main.c        ****                     currentCol++; // update position
 243:main.c        ****                 } else if (map[currentRow - 1][currentCol] == 8 || map[currentRow - 1][currentCol] 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 20


 244:main.c        ****                     currentOrientation = Up;
 245:main.c        ****                     directionState = waitForLeftTurn;
 246:main.c        ****                     //currentCol++; // update position
 247:main.c        ****                 } else if (map[currentRow + 1][currentCol] == 8 || map[currentRow + 1][currentCol] 
 248:main.c        ****                     currentOrientation = Down;
 249:main.c        ****                     directionState = waitForRightTurn;
 250:main.c        ****                     //currentCol--; // update position
 251:main.c        ****                 }
 252:main.c        ****                 break;
 253:main.c        ****             default:
 254:main.c        ****                 break;
 255:main.c        ****         }
 256:main.c        ****     
 257:main.c        ****     return directionState;
 258:main.c        **** }
 259:main.c        **** */
 260:main.c        **** uint8 stoppedAfterTurn = 0;
 261:main.c        **** uint8 ignoreSensor = 0;
 262:main.c        **** // needs to make sure robot is going in the correct direction (supplied from instruction)
 263:main.c        **** /*
 264:main.c        **** enum RobotMovement CheckSensorDirection() {
 265:main.c        ****     float blocksize;
 266:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 267:main.c        ****         blocksize = yBlocksize;
 268:main.c        ****     } else {
 269:main.c        ****         blocksize = xBlocksize;
 270:main.c        ****     }
 271:main.c        ****     //if(currentInstruction)
 272:main.c        ****     enum RobotMovement directionState = Stop; // initialise state as stop
 273:main.c        ****     
 274:main.c        ****     if (stoppedAfterTurn == 1) {
 275:main.c        ****         if (stopBuffer <= 50) {
 276:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 277:main.c        ****             previousDirection = directionState;
 278:main.c        ****             return directionState;
 279:main.c        ****         }
 280:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 281:main.c        ****         totalDistance = 0; // reset distance
 282:main.c        ****         previousDirection = directionState;
 283:main.c        ****         stoppedAfterTurn = 0;
 284:main.c        ****         return directionState;
 285:main.c        ****     }
 286:main.c        ****     if (totalDistance >= blocksize) {
 287:main.c        ****         //directionState = GetNextStep(); // get next step at each block
 288:main.c        ****         totalDistance = 0; // reset distance
 289:main.c        ****         previousDirection = directionState;
 290:main.c        ****         return directionState;
 291:main.c        ****     }
 292:main.c        ****     
 293:main.c        ****     // STOP BUFFER * ========================================
 294:main.c        ****     if (previousDirection == Stop) {
 295:main.c        ****         if (stopBuffer <= 50) {
 296:main.c        ****             directionState = Stop; // stop buffer- prevents overturning
 297:main.c        ****             previousDirection = directionState;
 298:main.c        ****         } else {
 299:main.c        ****             //directionState = ForwardAfterTurn;
 300:main.c        ****         }
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 21


 301:main.c        ****         return directionState;
 302:main.c        ****     }
 303:main.c        **** 
 304:main.c        ****     // TURNING * ========================================    
 305:main.c        ****     if (previousDirection == ForwardAfterTurn) {
 306:main.c        ****         if (s3 || s4) {
 307:main.c        ****             //ignoreSensor = 0;
 308:main.c        ****             //usbPutString("Forward\n");
 309:main.c        ****             directionState = Forward; // turns when robot has rotated 90º
 310:main.c        ****             previousDirection = directionState;
 311:main.c        ****             return directionState;
 312:main.c        ****         }
 313:main.c        ****     }
 314:main.c        **** 
 315:main.c        ****     if(previousDirection == waitForRightTurn) {
 316:main.c        ****         //ignoreSensor = 0;
 317:main.c        ****         if(!s4) {
 318:main.c        ****             //usbPutString("Turn Right\n");
 319:main.c        ****             directionState = TurnRight;
 320:main.c        ****             previousDirection = directionState;
 321:main.c        ****             return directionState;
 322:main.c        ****         } else {
 323:main.c        ****             //usbPutString("Wait for Right Turn\n");
 324:main.c        ****             directionState = waitForRightTurn;
 325:main.c        ****             previousDirection = directionState;
 326:main.c        ****             return directionState;
 327:main.c        ****         }
 328:main.c        ****     }
 329:main.c        **** 
 330:main.c        ****     if(previousDirection == waitForLeftTurn) {
 331:main.c        ****         //ignoreSensor = 0;
 332:main.c        ****         if(!s3) {
 333:main.c        ****             //usbPutString("Turn Left\n");
 334:main.c        ****             directionState = TurnLeft;
 335:main.c        ****             previousDirection = directionState;
 336:main.c        ****             return directionState;
 337:main.c        ****         } else {
 338:main.c        ****             //usbPutString("Wait for Left Turn\n");
 339:main.c        ****             directionState = waitForLeftTurn;
 340:main.c        ****             previousDirection = directionState;
 341:main.c        ****             return directionState;
 342:main.c        ****         }
 343:main.c        ****     }
 344:main.c        **** 
 345:main.c        ****     if(previousDirection == TurnRight) {
 346:main.c        ****         if(s5 && s6) {
 347:main.c        ****             //usbPutString("Turn Right\n");
 348:main.c        ****             directionState = TurnRight; // keep turning while s5 & s6 are high
 349:main.c        ****             previousDirection = directionState;
 350:main.c        ****             return directionState;
 351:main.c        ****         } 
 352:main.c        ****         else if (!s5 || !s6) {
 353:main.c        ****             //ignoreSensor = 1; // ignore turn check after turn completed
 354:main.c        ****             //usbPutString("Stop after Right Turn");
 355:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 356:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 357:main.c        ****             previousDirection = directionState;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 22


 358:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 359:main.c        ****             return directionState;
 360:main.c        ****         }
 361:main.c        ****     }    
 362:main.c        **** 
 363:main.c        ****     if(previousDirection == TurnLeft) {
 364:main.c        ****         if(s5 && s6) {
 365:main.c        ****             //usbPutString("Turn Left\n");
 366:main.c        ****             directionState = TurnLeft; // keep turning while s5 & s6 are high
 367:main.c        ****             previousDirection = directionState;
 368:main.c        ****             return directionState;
 369:main.c        ****         } 
 370:main.c        ****         else if (!s5 || !s6) {
 371:main.c        ****             //ignoreSensor = 1; // ignore sensor after turn
 372:main.c        ****            // usbPutString("Stop after Left Turn\n");
 373:main.c        ****             directionState = Stop; // stop turning when s5 & s6 are low
 374:main.c        ****             totalDistance = 0; // correct/ RESET totalDistance
 375:main.c        ****             previousDirection = directionState;
 376:main.c        ****             stoppedAfterTurn = 1; // set flag- differentiate from stop at targetLocation
 377:main.c        ****             return directionState;
 378:main.c        ****         }
 379:main.c        ****     }
 380:main.c        ****     
 381:main.c        ****     // COURSE CORRECTION * ========================================
 382:main.c        ****     if (previousDirection == Forward || previousDirection == AdjustToTheLeft || previousDirection =
 383:main.c        ****         //ignoreSensor = 0;
 384:main.c        ****         if(s6) {
 385:main.c        ****             //usbPutString("Adjust to the left\n");
 386:main.c        ****             directionState = AdjustToTheLeft; // keep adjusting to the left
 387:main.c        ****             previousDirection = directionState;
 388:main.c        ****             return directionState;
 389:main.c        ****         }
 390:main.c        ****         if(s5) {
 391:main.c        ****             //usbPutString("Adjust to the right\n");
 392:main.c        ****             directionState = AdjustToTheRight; // keep adjusting to the right
 393:main.c        ****             previousDirection = directionState;
 394:main.c        ****             return directionState;
 395:main.c        ****         }
 396:main.c        ****     }
 397:main.c        ****     
 398:main.c        ****     // FORWARD * ========================================
 399:main.c        ****     if (s3 && s4 && !s5 && !s6) {
 400:main.c        ****         //usbPutString("Forward\n");
 401:main.c        ****         directionState = Forward;
 402:main.c        ****         previousDirection = directionState;
 403:main.c        ****         return directionState;   
 404:main.c        ****     }
 405:main.c        **** 
 406:main.c        ****     // If currentDirection is Unknown, we continue with the previous direction.
 407:main.c        ****     // However, if the previous direction is also Unknown, we will just move forward.
 408:main.c        ****     if (previousDirection == Unknown) {
 409:main.c        ****         directionState = Forward;
 410:main.c        ****         previousDirection = directionState;
 411:main.c        ****         return directionState;
 412:main.c        ****     }
 413:main.c        **** 
 414:main.c        ****     // Possible reason
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 23


 415:main.c        ****     previousDirection = currentDirection;
 416:main.c        ****     return previousDirection;
 417:main.c        **** }
 418:main.c        **** */
 419:main.c        **** 
 420:main.c        **** enum RobotMovement ForwardCourseCorrection();
 421:main.c        **** enum RobotMovement ForwardCourseCorrection() {
 828              		.loc 1 421 0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 1, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 833 0000 80B4     		push	{r7}
 834              		.cfi_def_cfa_offset 4
 835              		.cfi_offset 7, -4
 836 0002 00AF     		add	r7, sp, #0
 837              		.cfi_def_cfa_register 7
 422:main.c        ****     // if S5 and S6 are on black, move forward
 423:main.c        ****     if (!s5 && !s6) {
 838              		.loc 1 423 0
 839 0004 1C4B     		ldr	r3, .L44
 840 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 841 0008 002B     		cmp	r3, #0
 842 000a 0FD1     		bne	.L37
 843              		.loc 1 423 0 is_stmt 0 discriminator 1
 844 000c 1B4B     		ldr	r3, .L44+4
 845 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 846 0010 002B     		cmp	r3, #0
 847 0012 0BD1     		bne	.L37
 424:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 848              		.loc 1 424 0 is_stmt 1
 849 0014 1A4B     		ldr	r3, .L44+8
 850 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 851 0018 032B     		cmp	r3, #3
 852 001a 01D0     		beq	.L38
 425:main.c        ****             return AdjustToTheLeft;
 853              		.loc 1 425 0
 854 001c 0323     		movs	r3, #3
 855 001e 26E0     		b	.L39
 856              	.L38:
 426:main.c        ****         }
 427:main.c        ****         if (previousDirection != AdjustToTheRight) {
 857              		.loc 1 427 0
 858 0020 174B     		ldr	r3, .L44+8
 859 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 860 0024 042B     		cmp	r3, #4
 861 0026 01D0     		beq	.L37
 428:main.c        ****             return AdjustToTheRight;    
 862              		.loc 1 428 0
 863 0028 0423     		movs	r3, #4
 864 002a 20E0     		b	.L39
 865              	.L37:
 429:main.c        ****         }
 430:main.c        ****     }
 431:main.c        ****     
 432:main.c        ****     // ATTEMPTED COURSE CORRECTION WHEN BOTH ON WHITE
 433:main.c        ****     if (s5 && s6) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 24


 866              		.loc 1 433 0
 867 002c 124B     		ldr	r3, .L44
 868 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 869 0030 002B     		cmp	r3, #0
 870 0032 0FD0     		beq	.L40
 871              		.loc 1 433 0 is_stmt 0 discriminator 1
 872 0034 114B     		ldr	r3, .L44+4
 873 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 874 0038 002B     		cmp	r3, #0
 875 003a 0BD0     		beq	.L40
 434:main.c        ****         if (previousDirection != AdjustToTheLeft) {
 876              		.loc 1 434 0 is_stmt 1
 877 003c 104B     		ldr	r3, .L44+8
 878 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 879 0040 032B     		cmp	r3, #3
 880 0042 01D0     		beq	.L41
 435:main.c        ****             return AdjustToTheLeft;
 881              		.loc 1 435 0
 882 0044 0323     		movs	r3, #3
 883 0046 12E0     		b	.L39
 884              	.L41:
 436:main.c        ****         }
 437:main.c        ****         if (previousDirection != AdjustToTheRight) {
 885              		.loc 1 437 0
 886 0048 0D4B     		ldr	r3, .L44+8
 887 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 888 004c 042B     		cmp	r3, #4
 889 004e 01D0     		beq	.L40
 438:main.c        ****             return AdjustToTheRight;    
 890              		.loc 1 438 0
 891 0050 0423     		movs	r3, #4
 892 0052 0CE0     		b	.L39
 893              	.L40:
 439:main.c        ****         }
 440:main.c        ****     }
 441:main.c        **** 
 442:main.c        ****     // if S5 OR S6 are on white, adjust accordingly
 443:main.c        ****     if (s5) {
 894              		.loc 1 443 0
 895 0054 084B     		ldr	r3, .L44
 896 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 897 0058 002B     		cmp	r3, #0
 898 005a 01D0     		beq	.L42
 444:main.c        ****         return AdjustToTheRight;    
 899              		.loc 1 444 0
 900 005c 0423     		movs	r3, #4
 901 005e 06E0     		b	.L39
 902              	.L42:
 445:main.c        ****     }
 446:main.c        ****     if (s6) {
 903              		.loc 1 446 0
 904 0060 064B     		ldr	r3, .L44+4
 905 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 906 0064 002B     		cmp	r3, #0
 907 0066 01D0     		beq	.L43
 447:main.c        ****         return AdjustToTheLeft;    
 908              		.loc 1 447 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 25


 909 0068 0323     		movs	r3, #3
 910 006a 00E0     		b	.L39
 911              	.L43:
 448:main.c        ****     }
 449:main.c        ****    
 450:main.c        ****     // We should never actually get to this point
 451:main.c        ****     // If S5 and S6 condition are GONE, then we will reach this point.
 452:main.c        ****     return Stop;
 912              		.loc 1 452 0
 913 006c 0523     		movs	r3, #5
 914              	.L39:
 453:main.c        **** }
 915              		.loc 1 453 0
 916 006e 1846     		mov	r0, r3
 917 0070 BD46     		mov	sp, r7
 918              		.cfi_def_cfa_register 13
 919              		@ sp needed
 920 0072 80BC     		pop	{r7}
 921              		.cfi_restore 7
 922              		.cfi_def_cfa_offset 0
 923 0074 7047     		bx	lr
 924              	.L45:
 925 0076 00BF     		.align	2
 926              	.L44:
 927 0078 00000000 		.word	s5
 928 007c 00000000 		.word	s6
 929 0080 00000000 		.word	previousDirection
 930              		.cfi_endproc
 931              	.LFE73:
 932              		.size	ForwardCourseCorrection, .-ForwardCourseCorrection
 933              		.global	__aeabi_fcmpge
 934              		.section	.text.GetMovementAccordingToInstruction,"ax",%progbits
 935              		.align	2
 936              		.global	GetMovementAccordingToInstruction
 937              		.thumb
 938              		.thumb_func
 939              		.type	GetMovementAccordingToInstruction, %function
 940              	GetMovementAccordingToInstruction:
 941              	.LFB74:
 454:main.c        **** 
 455:main.c        **** enum RobotMovement GetMovementAccordingToInstruction() {
 942              		.loc 1 455 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 8
 945              		@ frame_needed = 1, uses_anonymous_args = 0
 946 0000 80B5     		push	{r7, lr}
 947              		.cfi_def_cfa_offset 8
 948              		.cfi_offset 7, -8
 949              		.cfi_offset 14, -4
 950 0002 82B0     		sub	sp, sp, #8
 951              		.cfi_def_cfa_offset 16
 952 0004 00AF     		add	r7, sp, #0
 953              		.cfi_def_cfa_register 7
 456:main.c        ****     float blocksize;
 457:main.c        ****     if(currentRobotOrientation == Up || currentRobotOrientation == Down) {
 954              		.loc 1 457 0
 955 0006 804B     		ldr	r3, .L80
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 26


 956 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 957 000a 002B     		cmp	r3, #0
 958 000c 03D0     		beq	.L47
 959              		.loc 1 457 0 is_stmt 0 discriminator 1
 960 000e 7E4B     		ldr	r3, .L80
 961 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962 0012 012B     		cmp	r3, #1
 963 0014 03D1     		bne	.L48
 964              	.L47:
 458:main.c        ****         blocksize = yBlocksize;
 965              		.loc 1 458 0 is_stmt 1
 966 0016 7D4B     		ldr	r3, .L80+4
 967 0018 1B68     		ldr	r3, [r3]	@ float
 968 001a 7B60     		str	r3, [r7, #4]	@ float
 969 001c 02E0     		b	.L49
 970              	.L48:
 459:main.c        ****     } else {
 460:main.c        ****         blocksize = xBlocksize;
 971              		.loc 1 460 0
 972 001e 7C4B     		ldr	r3, .L80+8
 973 0020 1B68     		ldr	r3, [r3]	@ float
 974 0022 7B60     		str	r3, [r7, #4]	@ float
 975              	.L49:
 461:main.c        ****     }
 462:main.c        ****     
 463:main.c        ****     // This function makes it so that it will return a robotmovement direction according to the cur
 464:main.c        ****     // AND move to the next instruction when EITHER totalDistance >= blocksize, 
 465:main.c        ****         // OR an EVENT happens in the current instruction
 466:main.c        ****         // e.g. CurrentInstruction: GoForward 
 467:main.c        ****         //      S3 on BLACK
 468:main.c        ****         //      Check Ignore Count
 469:main.c        ****         //      If Ignore Count = 0, move to next instruction.
 470:main.c        ****     
 471:main.c        ****     enum InstructionDirection currentInstructionDirection = currentInstruction.direction;
 976              		.loc 1 471 0
 977 0024 7B4B     		ldr	r3, .L80+12
 978 0026 1B78     		ldrb	r3, [r3]
 979 0028 FB70     		strb	r3, [r7, #3]
 472:main.c        ****     
 473:main.c        ****     switch (currentInstructionDirection) {
 980              		.loc 1 473 0
 981 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 982 002c 052B     		cmp	r3, #5
 983 002e 00F2E680 		bhi	.L50
 984 0032 01A2     		adr	r2, .L52
 985 0034 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 986              		.p2align 2
 987              	.L52:
 988 0038 51000000 		.word	.L51+1
 989 003c 89000000 		.word	.L53+1
 990 0040 0B010000 		.word	.L54+1
 991 0044 FF010000 		.word	.L50+1
 992 0048 8D010000 		.word	.L55+1
 993 004c D9010000 		.word	.L56+1
 994              		.p2align 1
 995              	.L51:
 474:main.c        ****         case GoForward:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 27


 475:main.c        ****             // if s3 or s4 go off, check ignoreCount
 476:main.c        ****             //      if ignoreCount == 0, go to next direction
 477:main.c        ****             //      return stop
 478:main.c        ****             if (!s3) {
 996              		.loc 1 478 0
 997 0050 714B     		ldr	r3, .L80+16
 998 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 999 0054 002B     		cmp	r3, #0
 1000 0056 07D1     		bne	.L57
 479:main.c        ****                 if (currentInstruction.ignoreL == 0) {
 1001              		.loc 1 479 0
 1002 0058 6E4B     		ldr	r3, .L80+12
 1003 005a 5B68     		ldr	r3, [r3, #4]
 1004 005c 002B     		cmp	r3, #0
 1005 005e 03D1     		bne	.L57
 480:main.c        ****                     MoveToNextInstruction();
 1006              		.loc 1 480 0
 1007 0060 FFF7FEFF 		bl	MoveToNextInstruction
 481:main.c        ****                     return Stop;
 1008              		.loc 1 481 0
 1009 0064 0523     		movs	r3, #5
 1010 0066 CBE0     		b	.L58
 1011              	.L57:
 482:main.c        ****                 }
 483:main.c        ****             }
 484:main.c        ****             
 485:main.c        ****             if (!s4) {
 1012              		.loc 1 485 0
 1013 0068 6C4B     		ldr	r3, .L80+20
 1014 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1015 006c 002B     		cmp	r3, #0
 1016 006e 07D1     		bne	.L59
 486:main.c        ****                 if (currentInstruction.ignoreR == 0) {
 1017              		.loc 1 486 0
 1018 0070 684B     		ldr	r3, .L80+12
 1019 0072 9B68     		ldr	r3, [r3, #8]
 1020 0074 002B     		cmp	r3, #0
 1021 0076 03D1     		bne	.L59
 487:main.c        ****                     MoveToNextInstruction();
 1022              		.loc 1 487 0
 1023 0078 FFF7FEFF 		bl	MoveToNextInstruction
 488:main.c        ****                     return Stop;
 1024              		.loc 1 488 0
 1025 007c 0523     		movs	r3, #5
 1026 007e BFE0     		b	.L58
 1027              	.L59:
 489:main.c        ****                 }
 490:main.c        ****             }
 491:main.c        ****             return ForwardCourseCorrection();
 1028              		.loc 1 491 0
 1029 0080 FFF7FEFF 		bl	ForwardCourseCorrection
 1030 0084 0346     		mov	r3, r0
 1031 0086 BBE0     		b	.L58
 1032              	.L53:
 492:main.c        ****             break;
 493:main.c        ****         case waitForLeftTurn:
 494:main.c        ****             // continue moving forward until s3 goes on black
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 28


 495:main.c        ****             // if we are turning left already
 496:main.c        ****                 // wait until s5 || s6 are on black
 497:main.c        ****                 // return stop
 498:main.c        ****             if (turnFinishedFlag) {
 1033              		.loc 1 498 0
 1034 0088 654B     		ldr	r3, .L80+24
 1035 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 008c 002B     		cmp	r3, #0
 1037 008e 11D0     		beq	.L60
 499:main.c        ****                 if (turnFinishedFlag) {
 1038              		.loc 1 499 0
 1039 0090 634B     		ldr	r3, .L80+24
 1040 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1041 0094 002B     		cmp	r3, #0
 1042 0096 0DD0     		beq	.L60
 500:main.c        ****                     if (s3) {
 1043              		.loc 1 500 0
 1044 0098 5F4B     		ldr	r3, .L80+16
 1045 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1046 009c 002B     		cmp	r3, #0
 1047 009e 05D0     		beq	.L61
 501:main.c        ****                         turnFinishedFlag = 0;
 1048              		.loc 1 501 0
 1049 00a0 5F4B     		ldr	r3, .L80+24
 1050 00a2 0022     		movs	r2, #0
 1051 00a4 1A70     		strb	r2, [r3]
 502:main.c        ****                         MoveToNextInstruction();    
 1052              		.loc 1 502 0
 1053 00a6 FFF7FEFF 		bl	MoveToNextInstruction
 1054 00aa 03E0     		b	.L60
 1055              	.L61:
 503:main.c        ****                     }
 504:main.c        ****                     else {
 505:main.c        ****                         return ForwardCourseCorrection();        
 1056              		.loc 1 505 0
 1057 00ac FFF7FEFF 		bl	ForwardCourseCorrection
 1058 00b0 0346     		mov	r3, r0
 1059 00b2 A5E0     		b	.L58
 1060              	.L60:
 506:main.c        ****                     }
 507:main.c        ****                 }
 508:main.c        ****             }
 509:main.c        ****             
 510:main.c        ****             if (currentDirection == Stop) {
 1061              		.loc 1 510 0
 1062 00b4 5B4B     		ldr	r3, .L80+28
 1063 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1064 00b8 052B     		cmp	r3, #5
 1065 00ba 09D1     		bne	.L62
 511:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 512:main.c        ****                 if (stopBuffer <= 50) {
 1066              		.loc 1 512 0
 1067 00bc 5A4B     		ldr	r3, .L80+32
 1068 00be 1B68     		ldr	r3, [r3]
 1069 00c0 322B     		cmp	r3, #50
 1070 00c2 01D8     		bhi	.L63
 513:main.c        ****                     return Stop;   
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 29


 1071              		.loc 1 513 0
 1072 00c4 0523     		movs	r3, #5
 1073 00c6 9BE0     		b	.L58
 1074              	.L63:
 514:main.c        ****                 }
 515:main.c        ****                 return ForwardCourseCorrection();
 1075              		.loc 1 515 0
 1076 00c8 FFF7FEFF 		bl	ForwardCourseCorrection
 1077 00cc 0346     		mov	r3, r0
 1078 00ce 97E0     		b	.L58
 1079              	.L62:
 516:main.c        ****             }
 517:main.c        ****          
 518:main.c        ****             // if we are already turning left, then check if s5 && s6 are on black
 519:main.c        ****             if (currentDirection == TurnLeft) {
 1080              		.loc 1 519 0
 1081 00d0 544B     		ldr	r3, .L80+28
 1082 00d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1083 00d4 022B     		cmp	r3, #2
 1084 00d6 0ED1     		bne	.L64
 520:main.c        ****                 if (!s5 && !s6) {
 1085              		.loc 1 520 0
 1086 00d8 544B     		ldr	r3, .L80+36
 1087 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1088 00dc 002B     		cmp	r3, #0
 1089 00de 08D1     		bne	.L65
 1090              		.loc 1 520 0 is_stmt 0 discriminator 1
 1091 00e0 534B     		ldr	r3, .L80+40
 1092 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1093 00e4 002B     		cmp	r3, #0
 1094 00e6 04D1     		bne	.L65
 521:main.c        ****                     turnFinishedFlag = 1;
 1095              		.loc 1 521 0 is_stmt 1
 1096 00e8 4D4B     		ldr	r3, .L80+24
 1097 00ea 0122     		movs	r2, #1
 1098 00ec 1A70     		strb	r2, [r3]
 522:main.c        ****                     return Stop;
 1099              		.loc 1 522 0
 1100 00ee 0523     		movs	r3, #5
 1101 00f0 86E0     		b	.L58
 1102              	.L65:
 523:main.c        ****                 }
 524:main.c        ****                 else
 525:main.c        ****                 {
 526:main.c        ****                     return TurnLeft;
 1103              		.loc 1 526 0
 1104 00f2 0223     		movs	r3, #2
 1105 00f4 84E0     		b	.L58
 1106              	.L64:
 527:main.c        ****                 }
 528:main.c        ****             }
 529:main.c        ****             
 530:main.c        ****             // If we are not already turning left then once s3 goes on BLACK, turn left
 531:main.c        ****             if (!s3) {
 1107              		.loc 1 531 0
 1108 00f6 484B     		ldr	r3, .L80+16
 1109 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 30


 1110 00fa 002B     		cmp	r3, #0
 1111 00fc 01D1     		bne	.L66
 532:main.c        ****                 return TurnLeft;
 1112              		.loc 1 532 0
 1113 00fe 0223     		movs	r3, #2
 1114 0100 7EE0     		b	.L58
 1115              	.L66:
 533:main.c        ****             }
 534:main.c        ****             
 535:main.c        ****             // Otherwise, keep going forward
 536:main.c        ****             return ForwardCourseCorrection(); 
 1116              		.loc 1 536 0
 1117 0102 FFF7FEFF 		bl	ForwardCourseCorrection
 1118 0106 0346     		mov	r3, r0
 1119 0108 7AE0     		b	.L58
 1120              	.L54:
 537:main.c        ****             break;
 538:main.c        ****         case waitForRightTurn:
 539:main.c        ****             // continue moving forward until s4 goes on black
 540:main.c        ****             // if we are turning left already
 541:main.c        ****                 // wait until s5 || s6 are on black
 542:main.c        ****                 // return stop
 543:main.c        ****             if (turnFinishedFlag) {
 1121              		.loc 1 543 0
 1122 010a 454B     		ldr	r3, .L80+24
 1123 010c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1124 010e 002B     		cmp	r3, #0
 1125 0110 11D0     		beq	.L67
 544:main.c        ****                 if (turnFinishedFlag) {
 1126              		.loc 1 544 0
 1127 0112 434B     		ldr	r3, .L80+24
 1128 0114 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1129 0116 002B     		cmp	r3, #0
 1130 0118 0DD0     		beq	.L67
 545:main.c        ****                     if (s3) {
 1131              		.loc 1 545 0
 1132 011a 3F4B     		ldr	r3, .L80+16
 1133 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1134 011e 002B     		cmp	r3, #0
 1135 0120 05D0     		beq	.L68
 546:main.c        ****                         turnFinishedFlag = 0;
 1136              		.loc 1 546 0
 1137 0122 3F4B     		ldr	r3, .L80+24
 1138 0124 0022     		movs	r2, #0
 1139 0126 1A70     		strb	r2, [r3]
 547:main.c        ****                         MoveToNextInstruction();    
 1140              		.loc 1 547 0
 1141 0128 FFF7FEFF 		bl	MoveToNextInstruction
 1142 012c 03E0     		b	.L67
 1143              	.L68:
 548:main.c        ****                     }
 549:main.c        ****                     else {
 550:main.c        ****                         return ForwardCourseCorrection();        
 1144              		.loc 1 550 0
 1145 012e FFF7FEFF 		bl	ForwardCourseCorrection
 1146 0132 0346     		mov	r3, r0
 1147 0134 64E0     		b	.L58
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 31


 1148              	.L67:
 551:main.c        ****                     }
 552:main.c        ****                 }
 553:main.c        ****             }
 554:main.c        ****             
 555:main.c        ****             if (currentDirection == Stop) {
 1149              		.loc 1 555 0
 1150 0136 3B4B     		ldr	r3, .L80+28
 1151 0138 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1152 013a 052B     		cmp	r3, #5
 1153 013c 09D1     		bne	.L69
 556:main.c        ****                 // We should be facing a different direction now so we move to the next instruction
 557:main.c        ****                 if (stopBuffer <= 50) {
 1154              		.loc 1 557 0
 1155 013e 3A4B     		ldr	r3, .L80+32
 1156 0140 1B68     		ldr	r3, [r3]
 1157 0142 322B     		cmp	r3, #50
 1158 0144 01D8     		bhi	.L70
 558:main.c        ****                     return Stop;   
 1159              		.loc 1 558 0
 1160 0146 0523     		movs	r3, #5
 1161 0148 5AE0     		b	.L58
 1162              	.L70:
 559:main.c        ****                 }
 560:main.c        **** 
 561:main.c        ****                 return ForwardCourseCorrection();
 1163              		.loc 1 561 0
 1164 014a FFF7FEFF 		bl	ForwardCourseCorrection
 1165 014e 0346     		mov	r3, r0
 1166 0150 56E0     		b	.L58
 1167              	.L69:
 562:main.c        ****             }
 563:main.c        ****                       
 564:main.c        ****             // if we are already turning right, then check if s5 && s6 are on black
 565:main.c        ****             if (currentDirection == TurnRight) {
 1168              		.loc 1 565 0
 1169 0152 344B     		ldr	r3, .L80+28
 1170 0154 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1171 0156 012B     		cmp	r3, #1
 1172 0158 0ED1     		bne	.L71
 566:main.c        ****                 if (!s5 && !s6) {
 1173              		.loc 1 566 0
 1174 015a 344B     		ldr	r3, .L80+36
 1175 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1176 015e 002B     		cmp	r3, #0
 1177 0160 08D1     		bne	.L72
 1178              		.loc 1 566 0 is_stmt 0 discriminator 1
 1179 0162 334B     		ldr	r3, .L80+40
 1180 0164 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1181 0166 002B     		cmp	r3, #0
 1182 0168 04D1     		bne	.L72
 567:main.c        ****                     turnFinishedFlag = 1;
 1183              		.loc 1 567 0 is_stmt 1
 1184 016a 2D4B     		ldr	r3, .L80+24
 1185 016c 0122     		movs	r2, #1
 1186 016e 1A70     		strb	r2, [r3]
 568:main.c        ****                     return Stop;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 32


 1187              		.loc 1 568 0
 1188 0170 0523     		movs	r3, #5
 1189 0172 45E0     		b	.L58
 1190              	.L72:
 569:main.c        ****                 }
 570:main.c        ****                 else
 571:main.c        ****                 {
 572:main.c        ****                     return TurnRight;
 1191              		.loc 1 572 0
 1192 0174 0123     		movs	r3, #1
 1193 0176 43E0     		b	.L58
 1194              	.L71:
 573:main.c        ****                 }
 574:main.c        ****             }
 575:main.c        ****             
 576:main.c        ****             // If we are not already turning right then once s4 goes on BLACK, turn left
 577:main.c        ****             if (!s4) {
 1195              		.loc 1 577 0
 1196 0178 284B     		ldr	r3, .L80+20
 1197 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1198 017c 002B     		cmp	r3, #0
 1199 017e 01D1     		bne	.L73
 578:main.c        ****                 return TurnRight;
 1200              		.loc 1 578 0
 1201 0180 0123     		movs	r3, #1
 1202 0182 3DE0     		b	.L58
 1203              	.L73:
 579:main.c        ****             }
 580:main.c        ****             
 581:main.c        ****             // Otherwise, keep going forward
 582:main.c        ****             return ForwardCourseCorrection(); 
 1204              		.loc 1 582 0
 1205 0184 FFF7FEFF 		bl	ForwardCourseCorrection
 1206 0188 0346     		mov	r3, r0
 1207 018a 39E0     		b	.L58
 1208              	.L55:
 583:main.c        ****             break;
 584:main.c        ****         case ForwardUntilTarget:
 585:main.c        ****             // Reset distance on first iteration of this instruction
 586:main.c        ****             if (!forwardUntilTargetStartedFlag) {
 1209              		.loc 1 586 0
 1210 018c 294B     		ldr	r3, .L80+44
 1211 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1212 0190 002B     		cmp	r3, #0
 1213 0192 0ED1     		bne	.L74
 587:main.c        ****                 forwardUntilTargetStartedFlag = 1;
 1214              		.loc 1 587 0
 1215 0194 274B     		ldr	r3, .L80+44
 1216 0196 0122     		movs	r2, #1
 1217 0198 1A70     		strb	r2, [r3]
 588:main.c        ****                 totalDistance = 0;
 1218              		.loc 1 588 0
 1219 019a 274B     		ldr	r3, .L80+48
 1220 019c 4FF00002 		mov	r2, #0
 1221 01a0 1A60     		str	r2, [r3]	@ float
 589:main.c        **** 
 590:main.c        ****                 blockSizeTotal = blocksize * 6;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 33


 1222              		.loc 1 590 0
 1223 01a2 2649     		ldr	r1, .L80+52
 1224 01a4 7868     		ldr	r0, [r7, #4]	@ float
 1225 01a6 FFF7FEFF 		bl	__aeabi_fmul
 1226 01aa 0346     		mov	r3, r0
 1227 01ac 1A46     		mov	r2, r3
 1228 01ae 244B     		ldr	r3, .L80+56
 1229 01b0 1A60     		str	r2, [r3]	@ float
 1230              	.L74:
 591:main.c        ****             }
 592:main.c        ****             
 593:main.c        ****             // If totalDistance >= blockSizeTotal then we should be at target
 594:main.c        ****             if (totalDistance >= blockSizeTotal) {
 1231              		.loc 1 594 0
 1232 01b2 214B     		ldr	r3, .L80+48
 1233 01b4 1A68     		ldr	r2, [r3]	@ float
 1234 01b6 224B     		ldr	r3, .L80+56
 1235 01b8 1B68     		ldr	r3, [r3]	@ float
 1236 01ba 1946     		mov	r1, r3
 1237 01bc 1046     		mov	r0, r2
 1238 01be FFF7FEFF 		bl	__aeabi_fcmpge
 1239 01c2 0346     		mov	r3, r0
 1240 01c4 002B     		cmp	r3, #0
 1241 01c6 03D0     		beq	.L79
 595:main.c        ****                 // Get next instruction
 596:main.c        ****                 MoveToNextInstruction();
 1242              		.loc 1 596 0
 1243 01c8 FFF7FEFF 		bl	MoveToNextInstruction
 597:main.c        **** 
 598:main.c        ****                 
 599:main.c        ****                 return Stop;
 1244              		.loc 1 599 0
 1245 01cc 0523     		movs	r3, #5
 1246 01ce 17E0     		b	.L58
 1247              	.L79:
 600:main.c        ****             }
 601:main.c        ****             
 602:main.c        ****             return ForwardCourseCorrection();
 1248              		.loc 1 602 0
 1249 01d0 FFF7FEFF 		bl	ForwardCourseCorrection
 1250 01d4 0346     		mov	r3, r0
 1251 01d6 13E0     		b	.L58
 1252              	.L56:
 603:main.c        ****             break;
 604:main.c        ****         case StopAtTarget:
 605:main.c        ****             // Reset Forward Until Target Flags (Had to move in here to make it work)
 606:main.c        ****             // Reset flags
 607:main.c        ****             totalDistance = 0;
 1253              		.loc 1 607 0
 1254 01d8 174B     		ldr	r3, .L80+48
 1255 01da 4FF00002 		mov	r2, #0
 1256 01de 1A60     		str	r2, [r3]	@ float
 608:main.c        ****             forwardUntilTargetStartedFlag = 0;
 1257              		.loc 1 608 0
 1258 01e0 144B     		ldr	r3, .L80+44
 1259 01e2 0022     		movs	r2, #0
 1260 01e4 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 34


 609:main.c        ****             blockSizeTotal = 0;
 1261              		.loc 1 609 0
 1262 01e6 164B     		ldr	r3, .L80+56
 1263 01e8 4FF00002 		mov	r2, #0
 1264 01ec 1A60     		str	r2, [r3]	@ float
 610:main.c        ****             
 611:main.c        ****             if (stopBuffer <= 200) {
 1265              		.loc 1 611 0
 1266 01ee 0E4B     		ldr	r3, .L80+32
 1267 01f0 1B68     		ldr	r3, [r3]
 1268 01f2 C82B     		cmp	r3, #200
 1269 01f4 01D8     		bhi	.L77
 612:main.c        ****                 return Stop;    
 1270              		.loc 1 612 0
 1271 01f6 0523     		movs	r3, #5
 1272 01f8 02E0     		b	.L58
 1273              	.L77:
 613:main.c        ****             }
 614:main.c        ****             return TurnRight;
 1274              		.loc 1 614 0
 1275 01fa 0123     		movs	r3, #1
 1276 01fc 00E0     		b	.L58
 1277              	.L50:
 615:main.c        ****             break;
 616:main.c        ****         default:
 617:main.c        ****             return Stop;
 1278              		.loc 1 617 0
 1279 01fe 0523     		movs	r3, #5
 1280              	.L58:
 618:main.c        ****             break;
 619:main.c        ****     }
 620:main.c        ****     return Stop;
 621:main.c        **** }
 1281              		.loc 1 621 0
 1282 0200 1846     		mov	r0, r3
 1283 0202 0837     		adds	r7, r7, #8
 1284              		.cfi_def_cfa_offset 8
 1285 0204 BD46     		mov	sp, r7
 1286              		.cfi_def_cfa_register 13
 1287              		@ sp needed
 1288 0206 80BD     		pop	{r7, pc}
 1289              	.L81:
 1290              		.align	2
 1291              	.L80:
 1292 0208 00000000 		.word	currentRobotOrientation
 1293 020c 00000000 		.word	yBlocksize
 1294 0210 00000000 		.word	xBlocksize
 1295 0214 00000000 		.word	currentInstruction
 1296 0218 00000000 		.word	s3
 1297 021c 00000000 		.word	s4
 1298 0220 00000000 		.word	turnFinishedFlag
 1299 0224 00000000 		.word	currentDirection
 1300 0228 00000000 		.word	stopBuffer
 1301 022c 00000000 		.word	s5
 1302 0230 00000000 		.word	s6
 1303 0234 00000000 		.word	forwardUntilTargetStartedFlag
 1304 0238 00000000 		.word	totalDistance
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 35


 1305 023c 0000C040 		.word	1086324736
 1306 0240 00000000 		.word	blockSizeTotal
 1307              		.cfi_endproc
 1308              	.LFE74:
 1309              		.size	GetMovementAccordingToInstruction, .-GetMovementAccordingToInstruction
 1310              		.global	__aeabi_i2f
 1311              		.section	.text.CalculateDistanceToTravel,"ax",%progbits
 1312              		.align	2
 1313              		.global	CalculateDistanceToTravel
 1314              		.thumb
 1315              		.thumb_func
 1316              		.type	CalculateDistanceToTravel, %function
 1317              	CalculateDistanceToTravel:
 1318              	.LFB75:
 622:main.c        **** 
 623:main.c        **** // Calculate total blocksize to travel until target
 624:main.c        **** float CalculateDistanceToTravel(float blockSize) {
 1319              		.loc 1 624 0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 40
 1322              		@ frame_needed = 1, uses_anonymous_args = 0
 1323 0000 80B5     		push	{r7, lr}
 1324              		.cfi_def_cfa_offset 8
 1325              		.cfi_offset 7, -8
 1326              		.cfi_offset 14, -4
 1327 0002 8AB0     		sub	sp, sp, #40
 1328              		.cfi_def_cfa_offset 48
 1329 0004 00AF     		add	r7, sp, #0
 1330              		.cfi_def_cfa_register 7
 1331 0006 7860     		str	r0, [r7, #4]	@ float
 625:main.c        ****     float totalBlockSize;
 626:main.c        ****     
 627:main.c        ****     // Check for Row, Col that target is 
 628:main.c        ****     int targetRow = food_list[0][0];
 1332              		.loc 1 628 0
 1333 0008 9D4B     		ldr	r3, .L127
 1334 000a 1B68     		ldr	r3, [r3]
 1335 000c 3B61     		str	r3, [r7, #16]
 629:main.c        ****     int targetCol = food_list[0][1];
 1336              		.loc 1 629 0
 1337 000e 9C4B     		ldr	r3, .L127
 1338 0010 5B68     		ldr	r3, [r3, #4]
 1339 0012 FB60     		str	r3, [r7, #12]
 630:main.c        ****     
 631:main.c        ****     int pathCount = 0;
 1340              		.loc 1 631 0
 1341 0014 0023     		movs	r3, #0
 1342 0016 7B62     		str	r3, [r7, #36]
 632:main.c        ****     
 633:main.c        ****     // Depending on the robot orientation
 634:main.c        ****     // count++ if row, col is 8
 635:main.c        ****     // count reset if row, col is 1 or 0
 636:main.c        ****     // save count if row, col is 9
 637:main.c        ****     switch (currentRobotOrientation) {
 1343              		.loc 1 637 0
 1344 0018 9A4B     		ldr	r3, .L127+4
 1345 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 36


 1346 001c 032B     		cmp	r3, #3
 1347 001e 00F21F81 		bhi	.L83
 1348 0022 01A2     		adr	r2, .L85
 1349 0024 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1350              		.p2align 2
 1351              	.L85:
 1352 0028 39000000 		.word	.L84+1
 1353 002c C3000000 		.word	.L86+1
 1354 0030 4D010000 		.word	.L87+1
 1355 0034 D7010000 		.word	.L88+1
 1356              		.p2align 1
 1357              	.L84:
 1358              	.LBB3:
 638:main.c        ****         case Up:
 639:main.c        ****             // Column
 640:main.c        ****             // Start from Bottom (since we're facing up)
 641:main.c        ****             for (int i = MAX_ROWS; i >= 0; i--) {
 1359              		.loc 1 641 0
 1360 0038 0F23     		movs	r3, #15
 1361 003a 3B62     		str	r3, [r7, #32]
 1362 003c 3BE0     		b	.L89
 1363              	.L95:
 642:main.c        ****                 if (map[i][targetCol] == 9) {
 1364              		.loc 1 642 0
 1365 003e 9249     		ldr	r1, .L127+8
 1366 0040 3A6A     		ldr	r2, [r7, #32]
 1367 0042 1346     		mov	r3, r2
 1368 0044 DB00     		lsls	r3, r3, #3
 1369 0046 1344     		add	r3, r3, r2
 1370 0048 5B00     		lsls	r3, r3, #1
 1371 004a 1344     		add	r3, r3, r2
 1372 004c FA68     		ldr	r2, [r7, #12]
 1373 004e 1344     		add	r3, r3, r2
 1374 0050 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1375 0054 092B     		cmp	r3, #9
 1376 0056 32D0     		beq	.L122
 643:main.c        ****                     break;    
 644:main.c        ****                 }
 645:main.c        ****                 if (map[i][targetCol] == 8) {
 1377              		.loc 1 645 0
 1378 0058 8B49     		ldr	r1, .L127+8
 1379 005a 3A6A     		ldr	r2, [r7, #32]
 1380 005c 1346     		mov	r3, r2
 1381 005e DB00     		lsls	r3, r3, #3
 1382 0060 1344     		add	r3, r3, r2
 1383 0062 5B00     		lsls	r3, r3, #1
 1384 0064 1344     		add	r3, r3, r2
 1385 0066 FA68     		ldr	r2, [r7, #12]
 1386 0068 1344     		add	r3, r3, r2
 1387 006a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1388 006e 082B     		cmp	r3, #8
 1389 0070 02D1     		bne	.L92
 646:main.c        ****                     pathCount++;    
 1390              		.loc 1 646 0
 1391 0072 7B6A     		ldr	r3, [r7, #36]
 1392 0074 0133     		adds	r3, r3, #1
 1393 0076 7B62     		str	r3, [r7, #36]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 37


 1394              	.L92:
 647:main.c        ****                 }
 648:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1395              		.loc 1 648 0
 1396 0078 8349     		ldr	r1, .L127+8
 1397 007a 3A6A     		ldr	r2, [r7, #32]
 1398 007c 1346     		mov	r3, r2
 1399 007e DB00     		lsls	r3, r3, #3
 1400 0080 1344     		add	r3, r3, r2
 1401 0082 5B00     		lsls	r3, r3, #1
 1402 0084 1344     		add	r3, r3, r2
 1403 0086 FA68     		ldr	r2, [r7, #12]
 1404 0088 1344     		add	r3, r3, r2
 1405 008a 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1406 008e 002B     		cmp	r3, #0
 1407 0090 0CD0     		beq	.L93
 1408              		.loc 1 648 0 is_stmt 0 discriminator 1
 1409 0092 7D49     		ldr	r1, .L127+8
 1410 0094 3A6A     		ldr	r2, [r7, #32]
 1411 0096 1346     		mov	r3, r2
 1412 0098 DB00     		lsls	r3, r3, #3
 1413 009a 1344     		add	r3, r3, r2
 1414 009c 5B00     		lsls	r3, r3, #1
 1415 009e 1344     		add	r3, r3, r2
 1416 00a0 FA68     		ldr	r2, [r7, #12]
 1417 00a2 1344     		add	r3, r3, r2
 1418 00a4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1419 00a8 012B     		cmp	r3, #1
 1420 00aa 01D1     		bne	.L94
 1421              	.L93:
 649:main.c        ****                     pathCount = 0;
 1422              		.loc 1 649 0 is_stmt 1
 1423 00ac 0023     		movs	r3, #0
 1424 00ae 7B62     		str	r3, [r7, #36]
 1425              	.L94:
 641:main.c        ****                 if (map[i][targetCol] == 9) {
 1426              		.loc 1 641 0 discriminator 2
 1427 00b0 3B6A     		ldr	r3, [r7, #32]
 1428 00b2 013B     		subs	r3, r3, #1
 1429 00b4 3B62     		str	r3, [r7, #32]
 1430              	.L89:
 641:main.c        ****                 if (map[i][targetCol] == 9) {
 1431              		.loc 1 641 0 is_stmt 0 discriminator 1
 1432 00b6 3B6A     		ldr	r3, [r7, #32]
 1433 00b8 002B     		cmp	r3, #0
 1434 00ba C0DA     		bge	.L95
 1435              	.LBE3:
 650:main.c        ****                 }
 651:main.c        ****             }
 652:main.c        ****             break;
 1436              		.loc 1 652 0 is_stmt 1
 1437 00bc D0E0     		b	.L83
 1438              	.L122:
 1439              	.LBB4:
 643:main.c        ****                 }
 1440              		.loc 1 643 0
 1441 00be 00BF     		nop
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 38


 1442              	.LBE4:
 1443              		.loc 1 652 0
 1444 00c0 CEE0     		b	.L83
 1445              	.L86:
 1446              	.LBB5:
 653:main.c        ****         case Down:
 654:main.c        ****             // Target Column, Check Row
 655:main.c        ****             // Start from Top
 656:main.c        ****             for (int i = 0; i < MAX_ROWS; i++) {
 1447              		.loc 1 656 0
 1448 00c2 0023     		movs	r3, #0
 1449 00c4 FB61     		str	r3, [r7, #28]
 1450 00c6 3BE0     		b	.L96
 1451              	.L102:
 657:main.c        ****                 if (map[i][targetCol] == 9) {
 1452              		.loc 1 657 0
 1453 00c8 6F49     		ldr	r1, .L127+8
 1454 00ca FA69     		ldr	r2, [r7, #28]
 1455 00cc 1346     		mov	r3, r2
 1456 00ce DB00     		lsls	r3, r3, #3
 1457 00d0 1344     		add	r3, r3, r2
 1458 00d2 5B00     		lsls	r3, r3, #1
 1459 00d4 1344     		add	r3, r3, r2
 1460 00d6 FA68     		ldr	r2, [r7, #12]
 1461 00d8 1344     		add	r3, r3, r2
 1462 00da 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1463 00de 092B     		cmp	r3, #9
 1464 00e0 32D0     		beq	.L123
 658:main.c        ****                     break;    
 659:main.c        ****                 }
 660:main.c        ****                 if (map[i][targetCol] == 8) {
 1465              		.loc 1 660 0
 1466 00e2 6949     		ldr	r1, .L127+8
 1467 00e4 FA69     		ldr	r2, [r7, #28]
 1468 00e6 1346     		mov	r3, r2
 1469 00e8 DB00     		lsls	r3, r3, #3
 1470 00ea 1344     		add	r3, r3, r2
 1471 00ec 5B00     		lsls	r3, r3, #1
 1472 00ee 1344     		add	r3, r3, r2
 1473 00f0 FA68     		ldr	r2, [r7, #12]
 1474 00f2 1344     		add	r3, r3, r2
 1475 00f4 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1476 00f8 082B     		cmp	r3, #8
 1477 00fa 02D1     		bne	.L99
 661:main.c        ****                     pathCount++;    
 1478              		.loc 1 661 0
 1479 00fc 7B6A     		ldr	r3, [r7, #36]
 1480 00fe 0133     		adds	r3, r3, #1
 1481 0100 7B62     		str	r3, [r7, #36]
 1482              	.L99:
 662:main.c        ****                 }
 663:main.c        ****                 if (map[i][targetCol] == 0 || map[i][targetCol] == 1) {
 1483              		.loc 1 663 0
 1484 0102 6149     		ldr	r1, .L127+8
 1485 0104 FA69     		ldr	r2, [r7, #28]
 1486 0106 1346     		mov	r3, r2
 1487 0108 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 39


 1488 010a 1344     		add	r3, r3, r2
 1489 010c 5B00     		lsls	r3, r3, #1
 1490 010e 1344     		add	r3, r3, r2
 1491 0110 FA68     		ldr	r2, [r7, #12]
 1492 0112 1344     		add	r3, r3, r2
 1493 0114 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1494 0118 002B     		cmp	r3, #0
 1495 011a 0CD0     		beq	.L100
 1496              		.loc 1 663 0 is_stmt 0 discriminator 1
 1497 011c 5A49     		ldr	r1, .L127+8
 1498 011e FA69     		ldr	r2, [r7, #28]
 1499 0120 1346     		mov	r3, r2
 1500 0122 DB00     		lsls	r3, r3, #3
 1501 0124 1344     		add	r3, r3, r2
 1502 0126 5B00     		lsls	r3, r3, #1
 1503 0128 1344     		add	r3, r3, r2
 1504 012a FA68     		ldr	r2, [r7, #12]
 1505 012c 1344     		add	r3, r3, r2
 1506 012e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1507 0132 012B     		cmp	r3, #1
 1508 0134 01D1     		bne	.L101
 1509              	.L100:
 664:main.c        ****                     pathCount = 0;
 1510              		.loc 1 664 0 is_stmt 1
 1511 0136 0023     		movs	r3, #0
 1512 0138 7B62     		str	r3, [r7, #36]
 1513              	.L101:
 656:main.c        ****                 if (map[i][targetCol] == 9) {
 1514              		.loc 1 656 0 discriminator 2
 1515 013a FB69     		ldr	r3, [r7, #28]
 1516 013c 0133     		adds	r3, r3, #1
 1517 013e FB61     		str	r3, [r7, #28]
 1518              	.L96:
 656:main.c        ****                 if (map[i][targetCol] == 9) {
 1519              		.loc 1 656 0 is_stmt 0 discriminator 1
 1520 0140 FB69     		ldr	r3, [r7, #28]
 1521 0142 0E2B     		cmp	r3, #14
 1522 0144 C0DD     		ble	.L102
 1523              	.LBE5:
 665:main.c        ****                 }
 666:main.c        ****             }
 667:main.c        ****             break;
 1524              		.loc 1 667 0 is_stmt 1
 1525 0146 8BE0     		b	.L83
 1526              	.L123:
 1527              	.LBB6:
 658:main.c        ****                 }
 1528              		.loc 1 658 0
 1529 0148 00BF     		nop
 1530              	.LBE6:
 1531              		.loc 1 667 0
 1532 014a 89E0     		b	.L83
 1533              	.L87:
 1534              	.LBB7:
 668:main.c        ****         case Left:
 669:main.c        ****             // Target Row, Check Col
 670:main.c        ****             // Start from Right
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 40


 671:main.c        ****             for (int i = MAX_COLS; i >= 0; i--) {
 1535              		.loc 1 671 0
 1536 014c 1323     		movs	r3, #19
 1537 014e BB61     		str	r3, [r7, #24]
 1538 0150 3BE0     		b	.L103
 1539              	.L109:
 672:main.c        ****                 if (map[targetRow][i] == 9) {
 1540              		.loc 1 672 0
 1541 0152 4D49     		ldr	r1, .L127+8
 1542 0154 3A69     		ldr	r2, [r7, #16]
 1543 0156 1346     		mov	r3, r2
 1544 0158 DB00     		lsls	r3, r3, #3
 1545 015a 1344     		add	r3, r3, r2
 1546 015c 5B00     		lsls	r3, r3, #1
 1547 015e 1344     		add	r3, r3, r2
 1548 0160 BA69     		ldr	r2, [r7, #24]
 1549 0162 1344     		add	r3, r3, r2
 1550 0164 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1551 0168 092B     		cmp	r3, #9
 1552 016a 32D0     		beq	.L124
 673:main.c        ****                     break;    
 674:main.c        ****                 }
 675:main.c        ****                 if (map[targetRow][i] == 8) {
 1553              		.loc 1 675 0
 1554 016c 4649     		ldr	r1, .L127+8
 1555 016e 3A69     		ldr	r2, [r7, #16]
 1556 0170 1346     		mov	r3, r2
 1557 0172 DB00     		lsls	r3, r3, #3
 1558 0174 1344     		add	r3, r3, r2
 1559 0176 5B00     		lsls	r3, r3, #1
 1560 0178 1344     		add	r3, r3, r2
 1561 017a BA69     		ldr	r2, [r7, #24]
 1562 017c 1344     		add	r3, r3, r2
 1563 017e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1564 0182 082B     		cmp	r3, #8
 1565 0184 02D1     		bne	.L106
 676:main.c        ****                     pathCount++;    
 1566              		.loc 1 676 0
 1567 0186 7B6A     		ldr	r3, [r7, #36]
 1568 0188 0133     		adds	r3, r3, #1
 1569 018a 7B62     		str	r3, [r7, #36]
 1570              	.L106:
 677:main.c        ****                 }
 678:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1571              		.loc 1 678 0
 1572 018c 3E49     		ldr	r1, .L127+8
 1573 018e 3A69     		ldr	r2, [r7, #16]
 1574 0190 1346     		mov	r3, r2
 1575 0192 DB00     		lsls	r3, r3, #3
 1576 0194 1344     		add	r3, r3, r2
 1577 0196 5B00     		lsls	r3, r3, #1
 1578 0198 1344     		add	r3, r3, r2
 1579 019a BA69     		ldr	r2, [r7, #24]
 1580 019c 1344     		add	r3, r3, r2
 1581 019e 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1582 01a2 002B     		cmp	r3, #0
 1583 01a4 0CD0     		beq	.L107
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 41


 1584              		.loc 1 678 0 is_stmt 0 discriminator 1
 1585 01a6 3849     		ldr	r1, .L127+8
 1586 01a8 BA69     		ldr	r2, [r7, #24]
 1587 01aa 1346     		mov	r3, r2
 1588 01ac DB00     		lsls	r3, r3, #3
 1589 01ae 1344     		add	r3, r3, r2
 1590 01b0 5B00     		lsls	r3, r3, #1
 1591 01b2 1344     		add	r3, r3, r2
 1592 01b4 FA68     		ldr	r2, [r7, #12]
 1593 01b6 1344     		add	r3, r3, r2
 1594 01b8 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1595 01bc 012B     		cmp	r3, #1
 1596 01be 01D1     		bne	.L108
 1597              	.L107:
 679:main.c        ****                     pathCount = 0;
 1598              		.loc 1 679 0 is_stmt 1
 1599 01c0 0023     		movs	r3, #0
 1600 01c2 7B62     		str	r3, [r7, #36]
 1601              	.L108:
 671:main.c        ****                 if (map[targetRow][i] == 9) {
 1602              		.loc 1 671 0 discriminator 2
 1603 01c4 BB69     		ldr	r3, [r7, #24]
 1604 01c6 013B     		subs	r3, r3, #1
 1605 01c8 BB61     		str	r3, [r7, #24]
 1606              	.L103:
 671:main.c        ****                 if (map[targetRow][i] == 9) {
 1607              		.loc 1 671 0 is_stmt 0 discriminator 1
 1608 01ca BB69     		ldr	r3, [r7, #24]
 1609 01cc 002B     		cmp	r3, #0
 1610 01ce C0DA     		bge	.L109
 1611              	.LBE7:
 680:main.c        ****                 }
 681:main.c        ****             }
 682:main.c        ****             break;
 1612              		.loc 1 682 0 is_stmt 1
 1613 01d0 46E0     		b	.L83
 1614              	.L124:
 1615              	.LBB8:
 673:main.c        ****                 }
 1616              		.loc 1 673 0
 1617 01d2 00BF     		nop
 1618              	.LBE8:
 1619              		.loc 1 682 0
 1620 01d4 44E0     		b	.L83
 1621              	.L88:
 1622              	.LBB9:
 683:main.c        ****         
 684:main.c        ****         case Right:
 685:main.c        ****             // Target Row, Check Col
 686:main.c        ****             // Start from Left
 687:main.c        ****             for (int i = 0; i < MAX_COLS; i++) {
 1623              		.loc 1 687 0
 1624 01d6 0023     		movs	r3, #0
 1625 01d8 7B61     		str	r3, [r7, #20]
 1626 01da 3BE0     		b	.L110
 1627              	.L116:
 688:main.c        ****                 if (map[targetRow][i] == 9) {
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 42


 1628              		.loc 1 688 0
 1629 01dc 2A49     		ldr	r1, .L127+8
 1630 01de 3A69     		ldr	r2, [r7, #16]
 1631 01e0 1346     		mov	r3, r2
 1632 01e2 DB00     		lsls	r3, r3, #3
 1633 01e4 1344     		add	r3, r3, r2
 1634 01e6 5B00     		lsls	r3, r3, #1
 1635 01e8 1344     		add	r3, r3, r2
 1636 01ea 7A69     		ldr	r2, [r7, #20]
 1637 01ec 1344     		add	r3, r3, r2
 1638 01ee 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1639 01f2 092B     		cmp	r3, #9
 1640 01f4 32D0     		beq	.L125
 689:main.c        ****                     break;    
 690:main.c        ****                 }
 691:main.c        ****                 if (map[targetRow][i] == 8) {
 1641              		.loc 1 691 0
 1642 01f6 2449     		ldr	r1, .L127+8
 1643 01f8 3A69     		ldr	r2, [r7, #16]
 1644 01fa 1346     		mov	r3, r2
 1645 01fc DB00     		lsls	r3, r3, #3
 1646 01fe 1344     		add	r3, r3, r2
 1647 0200 5B00     		lsls	r3, r3, #1
 1648 0202 1344     		add	r3, r3, r2
 1649 0204 7A69     		ldr	r2, [r7, #20]
 1650 0206 1344     		add	r3, r3, r2
 1651 0208 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1652 020c 082B     		cmp	r3, #8
 1653 020e 02D1     		bne	.L113
 692:main.c        ****                     pathCount++;    
 1654              		.loc 1 692 0
 1655 0210 7B6A     		ldr	r3, [r7, #36]
 1656 0212 0133     		adds	r3, r3, #1
 1657 0214 7B62     		str	r3, [r7, #36]
 1658              	.L113:
 693:main.c        ****                 }
 694:main.c        ****                 if (map[targetRow][i] == 0 || map[i][targetCol] == 1) {
 1659              		.loc 1 694 0
 1660 0216 1C49     		ldr	r1, .L127+8
 1661 0218 3A69     		ldr	r2, [r7, #16]
 1662 021a 1346     		mov	r3, r2
 1663 021c DB00     		lsls	r3, r3, #3
 1664 021e 1344     		add	r3, r3, r2
 1665 0220 5B00     		lsls	r3, r3, #1
 1666 0222 1344     		add	r3, r3, r2
 1667 0224 7A69     		ldr	r2, [r7, #20]
 1668 0226 1344     		add	r3, r3, r2
 1669 0228 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1670 022c 002B     		cmp	r3, #0
 1671 022e 0CD0     		beq	.L114
 1672              		.loc 1 694 0 is_stmt 0 discriminator 1
 1673 0230 1549     		ldr	r1, .L127+8
 1674 0232 7A69     		ldr	r2, [r7, #20]
 1675 0234 1346     		mov	r3, r2
 1676 0236 DB00     		lsls	r3, r3, #3
 1677 0238 1344     		add	r3, r3, r2
 1678 023a 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 43


 1679 023c 1344     		add	r3, r3, r2
 1680 023e FA68     		ldr	r2, [r7, #12]
 1681 0240 1344     		add	r3, r3, r2
 1682 0242 51F82330 		ldr	r3, [r1, r3, lsl #2]
 1683 0246 012B     		cmp	r3, #1
 1684 0248 01D1     		bne	.L115
 1685              	.L114:
 695:main.c        ****                     pathCount = 0;
 1686              		.loc 1 695 0 is_stmt 1
 1687 024a 0023     		movs	r3, #0
 1688 024c 7B62     		str	r3, [r7, #36]
 1689              	.L115:
 687:main.c        ****                 if (map[targetRow][i] == 9) {
 1690              		.loc 1 687 0 discriminator 2
 1691 024e 7B69     		ldr	r3, [r7, #20]
 1692 0250 0133     		adds	r3, r3, #1
 1693 0252 7B61     		str	r3, [r7, #20]
 1694              	.L110:
 687:main.c        ****                 if (map[targetRow][i] == 9) {
 1695              		.loc 1 687 0 is_stmt 0 discriminator 1
 1696 0254 7B69     		ldr	r3, [r7, #20]
 1697 0256 122B     		cmp	r3, #18
 1698 0258 C0DD     		ble	.L116
 1699              	.LBE9:
 696:main.c        ****                 }
 697:main.c        **** 
 698:main.c        ****             }
 699:main.c        ****             break;
 1700              		.loc 1 699 0 is_stmt 1
 1701 025a 00E0     		b	.L126
 1702              	.L125:
 1703              	.LBB10:
 689:main.c        ****                 }
 1704              		.loc 1 689 0
 1705 025c 00BF     		nop
 1706              	.L126:
 1707              	.LBE10:
 1708              		.loc 1 699 0
 1709 025e 00BF     		nop
 1710              	.L83:
 700:main.c        ****         
 701:main.c        ****     }
 702:main.c        ****     totalBlockSize = blockSize * pathCount;
 1711              		.loc 1 702 0
 1712 0260 786A     		ldr	r0, [r7, #36]
 1713 0262 FFF7FEFF 		bl	__aeabi_i2f
 1714 0266 0346     		mov	r3, r0
 1715 0268 7968     		ldr	r1, [r7, #4]	@ float
 1716 026a 1846     		mov	r0, r3
 1717 026c FFF7FEFF 		bl	__aeabi_fmul
 1718 0270 0346     		mov	r3, r0
 1719 0272 BB60     		str	r3, [r7, #8]	@ float
 703:main.c        ****     return totalBlockSize;
 1720              		.loc 1 703 0
 1721 0274 BB68     		ldr	r3, [r7, #8]	@ float
 704:main.c        **** }
 1722              		.loc 1 704 0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 44


 1723 0276 1846     		mov	r0, r3
 1724 0278 2837     		adds	r7, r7, #40
 1725              		.cfi_def_cfa_offset 8
 1726 027a BD46     		mov	sp, r7
 1727              		.cfi_def_cfa_register 13
 1728              		@ sp needed
 1729 027c 80BD     		pop	{r7, pc}
 1730              	.L128:
 1731 027e 00BF     		.align	2
 1732              	.L127:
 1733 0280 00000000 		.word	food_list
 1734 0284 00000000 		.word	currentRobotOrientation
 1735 0288 00000000 		.word	map
 1736              		.cfi_endproc
 1737              	.LFE75:
 1738              		.size	CalculateDistanceToTravel, .-CalculateDistanceToTravel
 1739              		.section	.text.MoveToNextInstruction,"ax",%progbits
 1740              		.align	2
 1741              		.global	MoveToNextInstruction
 1742              		.thumb
 1743              		.thumb_func
 1744              		.type	MoveToNextInstruction, %function
 1745              	MoveToNextInstruction:
 1746              	.LFB76:
 705:main.c        **** 
 706:main.c        **** // get next instruction
 707:main.c        **** void MoveToNextInstruction() {
 1747              		.loc 1 707 0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 1, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 1752 0000 80B4     		push	{r7}
 1753              		.cfi_def_cfa_offset 4
 1754              		.cfi_offset 7, -4
 1755 0002 00AF     		add	r7, sp, #0
 1756              		.cfi_def_cfa_register 7
 708:main.c        ****     instructionIndex++;
 1757              		.loc 1 708 0
 1758 0004 044B     		ldr	r3, .L130
 1759 0006 1B68     		ldr	r3, [r3]
 1760 0008 0133     		adds	r3, r3, #1
 1761 000a 034A     		ldr	r2, .L130
 1762 000c 1360     		str	r3, [r2]
 709:main.c        **** }
 1763              		.loc 1 709 0
 1764 000e 00BF     		nop
 1765 0010 BD46     		mov	sp, r7
 1766              		.cfi_def_cfa_register 13
 1767              		@ sp needed
 1768 0012 80BC     		pop	{r7}
 1769              		.cfi_restore 7
 1770              		.cfi_def_cfa_offset 0
 1771 0014 7047     		bx	lr
 1772              	.L131:
 1773 0016 00BF     		.align	2
 1774              	.L130:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 45


 1775 0018 00000000 		.word	instructionIndex
 1776              		.cfi_endproc
 1777              	.LFE76:
 1778              		.size	MoveToNextInstruction, .-MoveToNextInstruction
 1779              		.section	.text.GetInstructionAtIndex,"ax",%progbits
 1780              		.align	2
 1781              		.global	GetInstructionAtIndex
 1782              		.thumb
 1783              		.thumb_func
 1784              		.type	GetInstructionAtIndex, %function
 1785              	GetInstructionAtIndex:
 1786              	.LFB77:
 710:main.c        **** 
 711:main.c        **** 
 712:main.c        **** Instruction GetInstructionAtIndex(int numSteps, Instruction instructionList[numSteps], int instruct
 1787              		.loc 1 712 0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 32
 1790              		@ frame_needed = 1, uses_anonymous_args = 0
 1791              		@ link register save eliminated.
 1792 0000 90B4     		push	{r4, r7}
 1793              		.cfi_def_cfa_offset 8
 1794              		.cfi_offset 4, -8
 1795              		.cfi_offset 7, -4
 1796 0002 88B0     		sub	sp, sp, #32
 1797              		.cfi_def_cfa_offset 40
 1798 0004 00AF     		add	r7, sp, #0
 1799              		.cfi_def_cfa_register 7
 1800 0006 F860     		str	r0, [r7, #12]
 1801 0008 B960     		str	r1, [r7, #8]
 1802 000a 7A60     		str	r2, [r7, #4]
 1803 000c 3B60     		str	r3, [r7]
 1804              	.LBB11:
 713:main.c        ****     Instruction nextInstruction;
 714:main.c        ****     // input is list of instructions and robot will react accordingly
 715:main.c        ****     for(int i = instructionIndex; i < numSteps; i++) {
 1805              		.loc 1 715 0
 1806 000e 3B68     		ldr	r3, [r7]
 1807 0010 FB61     		str	r3, [r7, #28]
 1808 0012 36E0     		b	.L133
 1809              	.L136:
 716:main.c        ****         if(instructionList[i].direction != Skip) {
 1810              		.loc 1 716 0
 1811 0014 FA69     		ldr	r2, [r7, #28]
 1812 0016 1346     		mov	r3, r2
 1813 0018 5B00     		lsls	r3, r3, #1
 1814 001a 1344     		add	r3, r3, r2
 1815 001c 9B00     		lsls	r3, r3, #2
 1816 001e 1A46     		mov	r2, r3
 1817 0020 7B68     		ldr	r3, [r7, #4]
 1818 0022 1344     		add	r3, r3, r2
 1819 0024 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1820 0026 062B     		cmp	r3, #6
 1821 0028 26D0     		beq	.L134
 717:main.c        ****             nextInstruction.direction = instructionList[i].direction;
 1822              		.loc 1 717 0
 1823 002a FA69     		ldr	r2, [r7, #28]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 46


 1824 002c 1346     		mov	r3, r2
 1825 002e 5B00     		lsls	r3, r3, #1
 1826 0030 1344     		add	r3, r3, r2
 1827 0032 9B00     		lsls	r3, r3, #2
 1828 0034 1A46     		mov	r2, r3
 1829 0036 7B68     		ldr	r3, [r7, #4]
 1830 0038 1344     		add	r3, r3, r2
 1831 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1832 003c 3B74     		strb	r3, [r7, #16]
 718:main.c        ****             nextInstruction.ignoreL = instructionList[i].ignoreL;
 1833              		.loc 1 718 0
 1834 003e FA69     		ldr	r2, [r7, #28]
 1835 0040 1346     		mov	r3, r2
 1836 0042 5B00     		lsls	r3, r3, #1
 1837 0044 1344     		add	r3, r3, r2
 1838 0046 9B00     		lsls	r3, r3, #2
 1839 0048 1A46     		mov	r2, r3
 1840 004a 7B68     		ldr	r3, [r7, #4]
 1841 004c 1344     		add	r3, r3, r2
 1842 004e 5B68     		ldr	r3, [r3, #4]
 1843 0050 7B61     		str	r3, [r7, #20]
 719:main.c        ****             nextInstruction.ignoreR = instructionList[i].ignoreR;
 1844              		.loc 1 719 0
 1845 0052 FA69     		ldr	r2, [r7, #28]
 1846 0054 1346     		mov	r3, r2
 1847 0056 5B00     		lsls	r3, r3, #1
 1848 0058 1344     		add	r3, r3, r2
 1849 005a 9B00     		lsls	r3, r3, #2
 1850 005c 1A46     		mov	r2, r3
 1851 005e 7B68     		ldr	r3, [r7, #4]
 1852 0060 1344     		add	r3, r3, r2
 1853 0062 9B68     		ldr	r3, [r3, #8]
 1854 0064 BB61     		str	r3, [r7, #24]
 720:main.c        ****             return nextInstruction; // return next instruction
 1855              		.loc 1 720 0
 1856 0066 FB68     		ldr	r3, [r7, #12]
 1857 0068 1C46     		mov	r4, r3
 1858 006a 07F11003 		add	r3, r7, #16
 1859 006e 93E80700 		ldmia	r3, {r0, r1, r2}
 1860 0072 84E80700 		stmia	r4, {r0, r1, r2}
 1861 0076 10E0     		b	.L132
 1862              	.L134:
 721:main.c        ****         }
 722:main.c        ****         instructionIndex = i;
 1863              		.loc 1 722 0 discriminator 2
 1864 0078 FB69     		ldr	r3, [r7, #28]
 1865 007a 3B60     		str	r3, [r7]
 715:main.c        ****         if(instructionList[i].direction != Skip) {
 1866              		.loc 1 715 0 discriminator 2
 1867 007c FB69     		ldr	r3, [r7, #28]
 1868 007e 0133     		adds	r3, r3, #1
 1869 0080 FB61     		str	r3, [r7, #28]
 1870              	.L133:
 715:main.c        ****         if(instructionList[i].direction != Skip) {
 1871              		.loc 1 715 0 is_stmt 0 discriminator 1
 1872 0082 FA69     		ldr	r2, [r7, #28]
 1873 0084 BB68     		ldr	r3, [r7, #8]
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 47


 1874 0086 9A42     		cmp	r2, r3
 1875 0088 C4DB     		blt	.L136
 1876              	.LBE11:
 723:main.c        ****     }
 724:main.c        ****     return nextInstruction;
 1877              		.loc 1 724 0 is_stmt 1
 1878 008a FB68     		ldr	r3, [r7, #12]
 1879 008c 1C46     		mov	r4, r3
 1880 008e 07F11003 		add	r3, r7, #16
 1881 0092 93E80700 		ldmia	r3, {r0, r1, r2}
 1882 0096 84E80700 		stmia	r4, {r0, r1, r2}
 1883              	.L132:
 725:main.c        **** }
 1884              		.loc 1 725 0
 1885 009a F868     		ldr	r0, [r7, #12]
 1886 009c 2037     		adds	r7, r7, #32
 1887              		.cfi_def_cfa_offset 8
 1888 009e BD46     		mov	sp, r7
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 00a0 90BC     		pop	{r4, r7}
 1892              		.cfi_restore 7
 1893              		.cfi_restore 4
 1894              		.cfi_def_cfa_offset 0
 1895 00a2 7047     		bx	lr
 1896              		.cfi_endproc
 1897              	.LFE77:
 1898              		.size	GetInstructionAtIndex, .-GetInstructionAtIndex
 1899              		.section	.text.SetRobotMovement,"ax",%progbits
 1900              		.align	2
 1901              		.global	SetRobotMovement
 1902              		.thumb
 1903              		.thumb_func
 1904              		.type	SetRobotMovement, %function
 1905              	SetRobotMovement:
 1906              	.LFB78:
 726:main.c        **** 
 727:main.c        **** // Sets robot movement direction state according to currentDirection which is set by Check
 728:main.c        **** void SetRobotMovement() {
 1907              		.loc 1 728 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 24
 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911 0000 90B5     		push	{r4, r7, lr}
 1912              		.cfi_def_cfa_offset 12
 1913              		.cfi_offset 4, -12
 1914              		.cfi_offset 7, -8
 1915              		.cfi_offset 14, -4
 1916 0002 87B0     		sub	sp, sp, #28
 1917              		.cfi_def_cfa_offset 40
 1918 0004 00AF     		add	r7, sp, #0
 1919              		.cfi_def_cfa_register 7
 729:main.c        ****     float blockTotal = CalculateDistanceToTravel(xBlocksize);
 1920              		.loc 1 729 0
 1921 0006 2C4B     		ldr	r3, .L153
 1922 0008 1B68     		ldr	r3, [r3]	@ float
 1923 000a 1846     		mov	r0, r3
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 48


 1924 000c FFF7FEFF 		bl	CalculateDistanceToTravel
 1925 0010 7861     		str	r0, [r7, #20]	@ float
 730:main.c        ****     currentInstruction = GetInstructionAtIndex(numSteps, instructionList, instructionIndex); // get
 1926              		.loc 1 730 0
 1927 0012 2A4B     		ldr	r3, .L153+4
 1928 0014 1968     		ldr	r1, [r3]
 1929 0016 2A4B     		ldr	r3, .L153+8
 1930 0018 1A68     		ldr	r2, [r3]
 1931 001a 2A4B     		ldr	r3, .L153+12
 1932 001c 1B68     		ldr	r3, [r3]
 1933 001e 2A4C     		ldr	r4, .L153+16
 1934 0020 3846     		mov	r0, r7
 1935 0022 FFF7FEFF 		bl	GetInstructionAtIndex
 1936 0026 3B46     		mov	r3, r7
 1937 0028 93E80700 		ldmia	r3, {r0, r1, r2}
 1938 002c 84E80700 		stmia	r4, {r0, r1, r2}
 731:main.c        ****     previousDirection = currentDirection;
 1939              		.loc 1 731 0
 1940 0030 264B     		ldr	r3, .L153+20
 1941 0032 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1942 0034 264B     		ldr	r3, .L153+24
 1943 0036 1A70     		strb	r2, [r3]
 732:main.c        ****     currentDirection = GetMovementAccordingToInstruction(); // check sensors, adjust robot movement
 1944              		.loc 1 732 0
 1945 0038 FFF7FEFF 		bl	GetMovementAccordingToInstruction
 1946 003c 0346     		mov	r3, r0
 1947 003e 1A46     		mov	r2, r3
 1948 0040 224B     		ldr	r3, .L153+20
 1949 0042 1A70     		strb	r2, [r3]
 733:main.c        ****     // move robot depending on sensors
 734:main.c        ****     switch (currentDirection) {
 1950              		.loc 1 734 0
 1951 0044 214B     		ldr	r3, .L153+20
 1952 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1953 0048 092B     		cmp	r3, #9
 1954 004a 30D8     		bhi	.L151
 1955 004c 01A2     		adr	r2, .L141
 1956 004e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1957 0052 00BF     		.p2align 2
 1958              	.L141:
 1959 0054 7D000000 		.word	.L140+1
 1960 0058 83000000 		.word	.L142+1
 1961 005c 89000000 		.word	.L143+1
 1962 0060 95000000 		.word	.L144+1
 1963 0064 8F000000 		.word	.L145+1
 1964 0068 9B000000 		.word	.L146+1
 1965 006c AD000000 		.word	.L152+1
 1966 0070 AD000000 		.word	.L152+1
 1967 0074 A1000000 		.word	.L149+1
 1968 0078 A7000000 		.word	.L150+1
 1969              		.p2align 1
 1970              	.L140:
 735:main.c        ****         //Forward, TurnRight, TurnLeft, AdjustToTheRight, AdjustToTheLeft, Stop, Unknown
 736:main.c        ****         case Forward:
 737:main.c        ****             moveForward();
 1971              		.loc 1 737 0
 1972 007c FFF7FEFF 		bl	moveForward
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 49


 738:main.c        ****             break;
 1973              		.loc 1 738 0
 1974 0080 15E0     		b	.L139
 1975              	.L142:
 739:main.c        ****         case TurnRight:
 740:main.c        ****             turnRight();
 1976              		.loc 1 740 0
 1977 0082 FFF7FEFF 		bl	turnRight
 741:main.c        ****             break;
 1978              		.loc 1 741 0
 1979 0086 12E0     		b	.L139
 1980              	.L143:
 742:main.c        ****         case TurnLeft:
 743:main.c        ****             turnLeft(); // try course correction methods for L/R turn
 1981              		.loc 1 743 0
 1982 0088 FFF7FEFF 		bl	turnLeft
 744:main.c        ****             break;
 1983              		.loc 1 744 0
 1984 008c 0FE0     		b	.L139
 1985              	.L145:
 745:main.c        ****         case AdjustToTheRight:
 746:main.c        ****             adjustRight();
 1986              		.loc 1 746 0
 1987 008e FFF7FEFF 		bl	adjustRight
 747:main.c        ****             break;
 1988              		.loc 1 747 0
 1989 0092 0CE0     		b	.L139
 1990              	.L144:
 748:main.c        ****         case AdjustToTheLeft:
 749:main.c        ****             adjustLeft();
 1991              		.loc 1 749 0
 1992 0094 FFF7FEFF 		bl	adjustLeft
 750:main.c        ****             break;
 1993              		.loc 1 750 0
 1994 0098 09E0     		b	.L139
 1995              	.L146:
 751:main.c        ****         case Stop:
 752:main.c        ****             stopMoving();
 1996              		.loc 1 752 0
 1997 009a FFF7FEFF 		bl	stopMoving
 753:main.c        ****             break;
 1998              		.loc 1 753 0
 1999 009e 06E0     		b	.L139
 2000              	.L149:
 754:main.c        ****         case ForwardAfterTurn:
 755:main.c        ****             moveForward();
 2001              		.loc 1 755 0
 2002 00a0 FFF7FEFF 		bl	moveForward
 756:main.c        ****             break;
 2003              		.loc 1 756 0
 2004 00a4 03E0     		b	.L139
 2005              	.L150:
 757:main.c        ****         case Backward:
 758:main.c        ****             moveBackward();
 2006              		.loc 1 758 0
 2007 00a6 FFF7FEFF 		bl	moveBackward
 759:main.c        ****             break;
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 50


 2008              		.loc 1 759 0
 2009 00aa 00E0     		b	.L139
 2010              	.L152:
 760:main.c        ****         case waitForTurn:
 761:main.c        ****             break;
 762:main.c        ****         /*case waitForLeftTurn:
 763:main.c        ****             moveForward();
 764:main.c        ****             break;
 765:main.c        ****         case waitForRightTurn:
 766:main.c        ****             moveForward();
 767:main.c        ****             break;*/
 768:main.c        ****         case Unknown:
 769:main.c        ****             // UNKNOWN CONFIGURATION
 770:main.c        ****             break;  
 2011              		.loc 1 770 0
 2012 00ac 00BF     		nop
 2013              	.L139:
 2014              	.L151:
 771:main.c        ****     }
 772:main.c        **** }...
 2015              		.loc 1 772 0
 2016 00ae 00BF     		nop
 2017 00b0 1C37     		adds	r7, r7, #28
 2018              		.cfi_def_cfa_offset 12
 2019 00b2 BD46     		mov	sp, r7
 2020              		.cfi_def_cfa_register 13
 2021              		@ sp needed
 2022 00b4 90BD     		pop	{r4, r7, pc}
 2023              	.L154:
 2024 00b6 00BF     		.align	2
 2025              	.L153:
 2026 00b8 00000000 		.word	xBlocksize
 2027 00bc 00000000 		.word	numSteps
 2028 00c0 00000000 		.word	instructionList
 2029 00c4 00000000 		.word	instructionIndex
 2030 00c8 00000000 		.word	currentInstruction
 2031 00cc 00000000 		.word	currentDirection
 2032 00d0 00000000 		.word	previousDirection
 2033              		.cfi_endproc
 2034              	.LFE78:
 2035              		.size	SetRobotMovement, .-SetRobotMovement
 2036              		.text
 2037              	.Letext0:
 2038              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2039              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.2\\psoc creator\\import\\gnu\\arm\\5.4.
 2040              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2041              		.file 5 "vars.h"
 2042              		.file 6 "pathfinding.h"
 2043              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2044              		.file 8 "map.h"
 2045              		.section	.debug_info,"",%progbits
 2046              	.Ldebug_info0:
 2047 0000 E7080000 		.4byte	0x8e7
 2048 0004 0400     		.2byte	0x4
 2049 0006 00000000 		.4byte	.Ldebug_abbrev0
 2050 000a 04       		.byte	0x4
 2051 000b 01       		.uleb128 0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 51


 2052 000c 82000000 		.4byte	.LASF135
 2053 0010 0C       		.byte	0xc
 2054 0011 30000000 		.4byte	.LASF136
 2055 0015 62050000 		.4byte	.LASF137
 2056 0019 60000000 		.4byte	.Ldebug_ranges0+0x60
 2057 001d 00000000 		.4byte	0
 2058 0021 00000000 		.4byte	.Ldebug_line0
 2059 0025 02       		.uleb128 0x2
 2060 0026 01       		.byte	0x1
 2061 0027 06       		.byte	0x6
 2062 0028 99060000 		.4byte	.LASF0
 2063 002c 02       		.uleb128 0x2
 2064 002d 01       		.byte	0x1
 2065 002e 08       		.byte	0x8
 2066 002f EF050000 		.4byte	.LASF1
 2067 0033 02       		.uleb128 0x2
 2068 0034 02       		.byte	0x2
 2069 0035 05       		.byte	0x5
 2070 0036 B3040000 		.4byte	.LASF2
 2071 003a 02       		.uleb128 0x2
 2072 003b 02       		.byte	0x2
 2073 003c 07       		.byte	0x7
 2074 003d B0060000 		.4byte	.LASF3
 2075 0041 03       		.uleb128 0x3
 2076 0042 55000000 		.4byte	.LASF12
 2077 0046 02       		.byte	0x2
 2078 0047 3F       		.byte	0x3f
 2079 0048 4C000000 		.4byte	0x4c
 2080 004c 02       		.uleb128 0x2
 2081 004d 04       		.byte	0x4
 2082 004e 05       		.byte	0x5
 2083 004f D5040000 		.4byte	.LASF4
 2084 0053 02       		.uleb128 0x2
 2085 0054 04       		.byte	0x4
 2086 0055 07       		.byte	0x7
 2087 0056 AB050000 		.4byte	.LASF5
 2088 005a 02       		.uleb128 0x2
 2089 005b 08       		.byte	0x8
 2090 005c 05       		.byte	0x5
 2091 005d A7030000 		.4byte	.LASF6
 2092 0061 02       		.uleb128 0x2
 2093 0062 08       		.byte	0x8
 2094 0063 07       		.byte	0x7
 2095 0064 3F020000 		.4byte	.LASF7
 2096 0068 04       		.uleb128 0x4
 2097 0069 04       		.byte	0x4
 2098 006a 05       		.byte	0x5
 2099 006b 696E7400 		.ascii	"int\000"
 2100 006f 02       		.uleb128 0x2
 2101 0070 04       		.byte	0x4
 2102 0071 07       		.byte	0x7
 2103 0072 48000000 		.4byte	.LASF8
 2104 0076 02       		.uleb128 0x2
 2105 0077 08       		.byte	0x8
 2106 0078 04       		.byte	0x4
 2107 0079 77040000 		.4byte	.LASF9
 2108 007d 02       		.uleb128 0x2
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 52


 2109 007e 04       		.byte	0x4
 2110 007f 07       		.byte	0x7
 2111 0080 A2050000 		.4byte	.LASF10
 2112 0084 02       		.uleb128 0x2
 2113 0085 01       		.byte	0x1
 2114 0086 08       		.byte	0x8
 2115 0087 19030000 		.4byte	.LASF11
 2116 008b 03       		.uleb128 0x3
 2117 008c C8050000 		.4byte	.LASF13
 2118 0090 03       		.byte	0x3
 2119 0091 2C       		.byte	0x2c
 2120 0092 41000000 		.4byte	0x41
 2121 0096 05       		.uleb128 0x5
 2122 0097 06070000 		.4byte	.LASF14
 2123 009b 04       		.byte	0x4
 2124 009c E701     		.2byte	0x1e7
 2125 009e 2C000000 		.4byte	0x2c
 2126 00a2 05       		.uleb128 0x5
 2127 00a3 48030000 		.4byte	.LASF15
 2128 00a7 04       		.byte	0x4
 2129 00a8 E801     		.2byte	0x1e8
 2130 00aa 3A000000 		.4byte	0x3a
 2131 00ae 05       		.uleb128 0x5
 2132 00af 27040000 		.4byte	.LASF16
 2133 00b3 04       		.byte	0x4
 2134 00b4 E901     		.2byte	0x1e9
 2135 00b6 53000000 		.4byte	0x53
 2136 00ba 05       		.uleb128 0x5
 2137 00bb 4F030000 		.4byte	.LASF17
 2138 00bf 04       		.byte	0x4
 2139 00c0 EA01     		.2byte	0x1ea
 2140 00c2 25000000 		.4byte	0x25
 2141 00c6 05       		.uleb128 0x5
 2142 00c7 5F000000 		.4byte	.LASF18
 2143 00cb 04       		.byte	0x4
 2144 00cc EB01     		.2byte	0x1eb
 2145 00ce 33000000 		.4byte	0x33
 2146 00d2 02       		.uleb128 0x2
 2147 00d3 04       		.byte	0x4
 2148 00d4 04       		.byte	0x4
 2149 00d5 07020000 		.4byte	.LASF19
 2150 00d9 02       		.uleb128 0x2
 2151 00da 08       		.byte	0x8
 2152 00db 04       		.byte	0x4
 2153 00dc 0C070000 		.4byte	.LASF20
 2154 00e0 06       		.uleb128 0x6
 2155 00e1 49040000 		.4byte	.LASF45
 2156 00e5 20       		.byte	0x20
 2157 00e6 05       		.byte	0x5
 2158 00e7 28       		.byte	0x28
 2159 00e8 B9010000 		.4byte	0x1b9
 2160 00ec 07       		.uleb128 0x7
 2161 00ed 53040000 		.4byte	.LASF21
 2162 00f1 05       		.byte	0x5
 2163 00f2 2A       		.byte	0x2a
 2164 00f3 BA000000 		.4byte	0xba
 2165 00f7 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 53


 2166 00f8 07       		.uleb128 0x7
 2167 00f9 39020000 		.4byte	.LASF22
 2168 00fd 05       		.byte	0x5
 2169 00fe 2B       		.byte	0x2b
 2170 00ff 96000000 		.4byte	0x96
 2171 0103 01       		.byte	0x1
 2172 0104 07       		.uleb128 0x7
 2173 0105 D0050000 		.4byte	.LASF23
 2174 0109 05       		.byte	0x5
 2175 010a 2C       		.byte	0x2c
 2176 010b C6000000 		.4byte	0xc6
 2177 010f 02       		.byte	0x2
 2178 0110 07       		.uleb128 0x7
 2179 0111 03030000 		.4byte	.LASF24
 2180 0115 05       		.byte	0x5
 2181 0116 2D       		.byte	0x2d
 2182 0117 C6000000 		.4byte	0xc6
 2183 011b 04       		.byte	0x4
 2184 011c 07       		.uleb128 0x7
 2185 011d C3060000 		.4byte	.LASF25
 2186 0121 05       		.byte	0x5
 2187 0122 2E       		.byte	0x2e
 2188 0123 C6000000 		.4byte	0xc6
 2189 0127 06       		.byte	0x6
 2190 0128 07       		.uleb128 0x7
 2191 0129 2D070000 		.4byte	.LASF26
 2192 012d 05       		.byte	0x5
 2193 012e 2F       		.byte	0x2f
 2194 012f C6000000 		.4byte	0xc6
 2195 0133 08       		.byte	0x8
 2196 0134 07       		.uleb128 0x7
 2197 0135 FB030000 		.4byte	.LASF27
 2198 0139 05       		.byte	0x5
 2199 013a 30       		.byte	0x30
 2200 013b C6000000 		.4byte	0xc6
 2201 013f 0A       		.byte	0xa
 2202 0140 07       		.uleb128 0x7
 2203 0141 1E030000 		.4byte	.LASF28
 2204 0145 05       		.byte	0x5
 2205 0146 31       		.byte	0x31
 2206 0147 C6000000 		.4byte	0xc6
 2207 014b 0C       		.byte	0xc
 2208 014c 07       		.uleb128 0x7
 2209 014d 58040000 		.4byte	.LASF29
 2210 0151 05       		.byte	0x5
 2211 0152 32       		.byte	0x32
 2212 0153 C6000000 		.4byte	0xc6
 2213 0157 0E       		.byte	0xe
 2214 0158 07       		.uleb128 0x7
 2215 0159 B5030000 		.4byte	.LASF30
 2216 015d 05       		.byte	0x5
 2217 015e 33       		.byte	0x33
 2218 015f C6000000 		.4byte	0xc6
 2219 0163 10       		.byte	0x10
 2220 0164 07       		.uleb128 0x7
 2221 0165 49050000 		.4byte	.LASF31
 2222 0169 05       		.byte	0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 54


 2223 016a 34       		.byte	0x34
 2224 016b C6000000 		.4byte	0xc6
 2225 016f 12       		.byte	0x12
 2226 0170 07       		.uleb128 0x7
 2227 0171 4D070000 		.4byte	.LASF32
 2228 0175 05       		.byte	0x5
 2229 0176 35       		.byte	0x35
 2230 0177 C6000000 		.4byte	0xc6
 2231 017b 14       		.byte	0x14
 2232 017c 07       		.uleb128 0x7
 2233 017d 5F030000 		.4byte	.LASF33
 2234 0181 05       		.byte	0x5
 2235 0182 36       		.byte	0x36
 2236 0183 C6000000 		.4byte	0xc6
 2237 0187 16       		.byte	0x16
 2238 0188 07       		.uleb128 0x7
 2239 0189 2A010000 		.4byte	.LASF34
 2240 018d 05       		.byte	0x5
 2241 018e 37       		.byte	0x37
 2242 018f C6000000 		.4byte	0xc6
 2243 0193 18       		.byte	0x18
 2244 0194 07       		.uleb128 0x7
 2245 0195 0F050000 		.4byte	.LASF35
 2246 0199 05       		.byte	0x5
 2247 019a 38       		.byte	0x38
 2248 019b C6000000 		.4byte	0xc6
 2249 019f 1A       		.byte	0x1a
 2250 01a0 07       		.uleb128 0x7
 2251 01a1 F2030000 		.4byte	.LASF36
 2252 01a5 05       		.byte	0x5
 2253 01a6 39       		.byte	0x39
 2254 01a7 C6000000 		.4byte	0xc6
 2255 01ab 1C       		.byte	0x1c
 2256 01ac 07       		.uleb128 0x7
 2257 01ad E2010000 		.4byte	.LASF37
 2258 01b1 05       		.byte	0x5
 2259 01b2 3A       		.byte	0x3a
 2260 01b3 C6000000 		.4byte	0xc6
 2261 01b7 1E       		.byte	0x1e
 2262 01b8 00       		.byte	0
 2263 01b9 08       		.uleb128 0x8
 2264 01ba 1B000000 		.4byte	.LASF50
 2265 01be 01       		.byte	0x1
 2266 01bf 2C000000 		.4byte	0x2c
 2267 01c3 06       		.byte	0x6
 2268 01c4 0D       		.byte	0xd
 2269 01c5 F4010000 		.4byte	0x1f4
 2270 01c9 09       		.uleb128 0x9
 2271 01ca 83060000 		.4byte	.LASF38
 2272 01ce 00       		.byte	0
 2273 01cf 09       		.uleb128 0x9
 2274 01d0 97030000 		.4byte	.LASF39
 2275 01d4 01       		.byte	0x1
 2276 01d5 09       		.uleb128 0x9
 2277 01d6 2E040000 		.4byte	.LASF40
 2278 01da 02       		.byte	0x2
 2279 01db 09       		.uleb128 0x9
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 55


 2280 01dc E0030000 		.4byte	.LASF41
 2281 01e0 03       		.byte	0x3
 2282 01e1 09       		.uleb128 0x9
 2283 01e2 96020000 		.4byte	.LASF42
 2284 01e6 04       		.byte	0x4
 2285 01e7 09       		.uleb128 0x9
 2286 01e8 EA020000 		.4byte	.LASF43
 2287 01ec 05       		.byte	0x5
 2288 01ed 09       		.uleb128 0x9
 2289 01ee 70060000 		.4byte	.LASF44
 2290 01f2 06       		.byte	0x6
 2291 01f3 00       		.byte	0
 2292 01f4 06       		.uleb128 0x6
 2293 01f5 56020000 		.4byte	.LASF46
 2294 01f9 0C       		.byte	0xc
 2295 01fa 06       		.byte	0x6
 2296 01fb 0E       		.byte	0xe
 2297 01fc 25020000 		.4byte	0x225
 2298 0200 07       		.uleb128 0x7
 2299 0201 00000000 		.4byte	.LASF47
 2300 0205 06       		.byte	0x6
 2301 0206 0F       		.byte	0xf
 2302 0207 B9010000 		.4byte	0x1b9
 2303 020b 00       		.byte	0
 2304 020c 07       		.uleb128 0x7
 2305 020d 61070000 		.4byte	.LASF48
 2306 0211 06       		.byte	0x6
 2307 0212 10       		.byte	0x10
 2308 0213 68000000 		.4byte	0x68
 2309 0217 04       		.byte	0x4
 2310 0218 07       		.uleb128 0x7
 2311 0219 69070000 		.4byte	.LASF49
 2312 021d 06       		.byte	0x6
 2313 021e 11       		.byte	0x11
 2314 021f 68000000 		.4byte	0x68
 2315 0223 08       		.byte	0x8
 2316 0224 00       		.byte	0
 2317 0225 03       		.uleb128 0x3
 2318 0226 56020000 		.4byte	.LASF46
 2319 022a 06       		.byte	0x6
 2320 022b 12       		.byte	0x12
 2321 022c F4010000 		.4byte	0x1f4
 2322 0230 08       		.uleb128 0x8
 2323 0231 2D050000 		.4byte	.LASF51
 2324 0235 01       		.byte	0x1
 2325 0236 2C000000 		.4byte	0x2c
 2326 023a 06       		.byte	0x6
 2327 023b 14       		.byte	0x14
 2328 023c 58020000 		.4byte	0x258
 2329 0240 0A       		.uleb128 0xa
 2330 0241 557000   		.ascii	"Up\000"
 2331 0244 00       		.byte	0
 2332 0245 09       		.uleb128 0x9
 2333 0246 3E050000 		.4byte	.LASF52
 2334 024a 01       		.byte	0x1
 2335 024b 09       		.uleb128 0x9
 2336 024c 6C030000 		.4byte	.LASF53
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 56


 2337 0250 02       		.byte	0x2
 2338 0251 09       		.uleb128 0x9
 2339 0252 43050000 		.4byte	.LASF54
 2340 0256 03       		.byte	0x3
 2341 0257 00       		.byte	0
 2342 0258 08       		.uleb128 0x8
 2343 0259 E1050000 		.4byte	.LASF55
 2344 025d 01       		.byte	0x1
 2345 025e 2C000000 		.4byte	0x2c
 2346 0262 01       		.byte	0x1
 2347 0263 18       		.byte	0x18
 2348 0264 A5020000 		.4byte	0x2a5
 2349 0268 09       		.uleb128 0x9
 2350 0269 F5040000 		.4byte	.LASF56
 2351 026d 00       		.byte	0
 2352 026e 09       		.uleb128 0x9
 2353 026f 3F040000 		.4byte	.LASF57
 2354 0273 01       		.byte	0x1
 2355 0274 09       		.uleb128 0x9
 2356 0275 0D040000 		.4byte	.LASF58
 2357 0279 02       		.byte	0x2
 2358 027a 09       		.uleb128 0x9
 2359 027b ED060000 		.4byte	.LASF59
 2360 027f 03       		.byte	0x3
 2361 0280 09       		.uleb128 0x9
 2362 0281 2D060000 		.4byte	.LASF60
 2363 0285 04       		.byte	0x4
 2364 0286 09       		.uleb128 0x9
 2365 0287 3E060000 		.4byte	.LASF61
 2366 028b 05       		.byte	0x5
 2367 028c 09       		.uleb128 0x9
 2368 028d 1F040000 		.4byte	.LASF62
 2369 0291 06       		.byte	0x6
 2370 0292 09       		.uleb128 0x9
 2371 0293 F7020000 		.4byte	.LASF63
 2372 0297 07       		.byte	0x7
 2373 0298 09       		.uleb128 0x9
 2374 0299 0A000000 		.4byte	.LASF64
 2375 029d 08       		.byte	0x8
 2376 029e 09       		.uleb128 0x9
 2377 029f FD060000 		.4byte	.LASF65
 2378 02a3 09       		.byte	0x9
 2379 02a4 00       		.byte	0
 2380 02a5 0B       		.uleb128 0xb
 2381 02a6 71030000 		.4byte	.LASF74
 2382 02aa 01       		.byte	0x1
 2383 02ab 38       		.byte	0x38
 2384 02ac 00000000 		.4byte	.LFB64
 2385 02b0 EC000000 		.4byte	.LFE64-.LFB64
 2386 02b4 01       		.uleb128 0x1
 2387 02b5 9C       		.byte	0x9c
 2388 02b6 D3020000 		.4byte	0x2d3
 2389 02ba 0C       		.uleb128 0xc
 2390 02bb 50000000 		.4byte	.LBB2
 2391 02bf 62000000 		.4byte	.LBE2-.LBB2
 2392 02c3 0D       		.uleb128 0xd
 2393 02c4 E6030000 		.4byte	.LASF72
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 57


 2394 02c8 01       		.byte	0x1
 2395 02c9 45       		.byte	0x45
 2396 02ca D2000000 		.4byte	0xd2
 2397 02ce 02       		.uleb128 0x2
 2398 02cf 91       		.byte	0x91
 2399 02d0 6C       		.sleb128 -20
 2400 02d1 00       		.byte	0
 2401 02d2 00       		.byte	0
 2402 02d3 0E       		.uleb128 0xe
 2403 02d4 C9040000 		.4byte	.LASF66
 2404 02d8 01       		.byte	0x1
 2405 02d9 50       		.byte	0x50
 2406 02da 00000000 		.4byte	.LFB65
 2407 02de 18000000 		.4byte	.LFE65-.LFB65
 2408 02e2 01       		.uleb128 0x1
 2409 02e3 9C       		.byte	0x9c
 2410 02e4 0E       		.uleb128 0xe
 2411 02e5 BD040000 		.4byte	.LASF67
 2412 02e9 01       		.byte	0x1
 2413 02ea 56       		.byte	0x56
 2414 02eb 00000000 		.4byte	.LFB66
 2415 02ef 18000000 		.4byte	.LFE66-.LFB66
 2416 02f3 01       		.uleb128 0x1
 2417 02f4 9C       		.byte	0x9c
 2418 02f5 0E       		.uleb128 0xe
 2419 02f6 8D060000 		.4byte	.LASF68
 2420 02fa 01       		.byte	0x1
 2421 02fb 5C       		.byte	0x5c
 2422 02fc 00000000 		.4byte	.LFB67
 2423 0300 18000000 		.4byte	.LFE67-.LFB67
 2424 0304 01       		.uleb128 0x1
 2425 0305 9C       		.byte	0x9c
 2426 0306 0E       		.uleb128 0xe
 2427 0307 10010000 		.4byte	.LASF69
 2428 030b 01       		.byte	0x1
 2429 030c 62       		.byte	0x62
 2430 030d 00000000 		.4byte	.LFB68
 2431 0311 18000000 		.4byte	.LFE68-.LFB68
 2432 0315 01       		.uleb128 0x1
 2433 0316 9C       		.byte	0x9c
 2434 0317 0F       		.uleb128 0xf
 2435 0318 7F020000 		.4byte	.LASF70
 2436 031c 01       		.byte	0x1
 2437 031d 68       		.byte	0x68
 2438 031e 00000000 		.4byte	.LFB69
 2439 0322 38000000 		.4byte	.LFE69-.LFB69
 2440 0326 01       		.uleb128 0x1
 2441 0327 9C       		.byte	0x9c
 2442 0328 10       		.uleb128 0x10
 2443 0329 D5060000 		.4byte	.LASF71
 2444 032d 01       		.byte	0x1
 2445 032e 74       		.byte	0x74
 2446 032f 68000000 		.4byte	0x68
 2447 0333 00000000 		.4byte	.LFB70
 2448 0337 C0000000 		.4byte	.LFE70-.LFB70
 2449 033b 01       		.uleb128 0x1
 2450 033c 9C       		.byte	0x9c
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 58


 2451 033d 11       		.uleb128 0x11
 2452 033e C4020000 		.4byte	.LASF78
 2453 0342 01       		.byte	0x1
 2454 0343 A2       		.byte	0xa2
 2455 0344 C6000000 		.4byte	0xc6
 2456 0348 00000000 		.4byte	.LFB71
 2457 034c 54000000 		.4byte	.LFE71-.LFB71
 2458 0350 01       		.uleb128 0x1
 2459 0351 9C       		.byte	0x9c
 2460 0352 81030000 		.4byte	0x381
 2461 0356 12       		.uleb128 0x12
 2462 0357 33020000 		.4byte	.LASF80
 2463 035b 01       		.byte	0x1
 2464 035c A2       		.byte	0xa2
 2465 035d A2000000 		.4byte	0xa2
 2466 0361 02       		.uleb128 0x2
 2467 0362 91       		.byte	0x91
 2468 0363 66       		.sleb128 -26
 2469 0364 13       		.uleb128 0x13
 2470 0365 63707300 		.ascii	"cps\000"
 2471 0369 01       		.byte	0x1
 2472 036a A4       		.byte	0xa4
 2473 036b D2000000 		.4byte	0xd2
 2474 036f 02       		.uleb128 0x2
 2475 0370 91       		.byte	0x91
 2476 0371 6C       		.sleb128 -20
 2477 0372 13       		.uleb128 0x13
 2478 0373 72706D00 		.ascii	"rpm\000"
 2479 0377 01       		.byte	0x1
 2480 0378 A5       		.byte	0xa5
 2481 0379 C6000000 		.4byte	0xc6
 2482 037d 02       		.uleb128 0x2
 2483 037e 91       		.byte	0x91
 2484 037f 6A       		.sleb128 -22
 2485 0380 00       		.byte	0
 2486 0381 14       		.uleb128 0x14
 2487 0382 D1010000 		.4byte	.LASF86
 2488 0386 01       		.byte	0x1
 2489 0387 AD       		.byte	0xad
 2490 0388 00000000 		.4byte	.LFB72
 2491 038c 34000000 		.4byte	.LFE72-.LFB72
 2492 0390 01       		.uleb128 0x1
 2493 0391 9C       		.byte	0x9c
 2494 0392 15       		.uleb128 0x15
 2495 0393 A1010000 		.4byte	.LASF73
 2496 0397 01       		.byte	0x1
 2497 0398 A501     		.2byte	0x1a5
 2498 039a 58020000 		.4byte	0x258
 2499 039e 00000000 		.4byte	.LFB73
 2500 03a2 84000000 		.4byte	.LFE73-.LFB73
 2501 03a6 01       		.uleb128 0x1
 2502 03a7 9C       		.byte	0x9c
 2503 03a8 16       		.uleb128 0x16
 2504 03a9 63010000 		.4byte	.LASF75
 2505 03ad 01       		.byte	0x1
 2506 03ae C701     		.2byte	0x1c7
 2507 03b0 58020000 		.4byte	0x258
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 59


 2508 03b4 00000000 		.4byte	.LFB74
 2509 03b8 44020000 		.4byte	.LFE74-.LFB74
 2510 03bc 01       		.uleb128 0x1
 2511 03bd 9C       		.byte	0x9c
 2512 03be E1030000 		.4byte	0x3e1
 2513 03c2 17       		.uleb128 0x17
 2514 03c3 37000000 		.4byte	.LASF76
 2515 03c7 01       		.byte	0x1
 2516 03c8 C801     		.2byte	0x1c8
 2517 03ca D2000000 		.4byte	0xd2
 2518 03ce 02       		.uleb128 0x2
 2519 03cf 91       		.byte	0x91
 2520 03d0 74       		.sleb128 -12
 2521 03d1 17       		.uleb128 0x17
 2522 03d2 0D020000 		.4byte	.LASF77
 2523 03d6 01       		.byte	0x1
 2524 03d7 D701     		.2byte	0x1d7
 2525 03d9 B9010000 		.4byte	0x1b9
 2526 03dd 02       		.uleb128 0x2
 2527 03de 91       		.byte	0x91
 2528 03df 73       		.sleb128 -13
 2529 03e0 00       		.byte	0
 2530 03e1 18       		.uleb128 0x18
 2531 03e2 13060000 		.4byte	.LASF79
 2532 03e6 01       		.byte	0x1
 2533 03e7 7002     		.2byte	0x270
 2534 03e9 D2000000 		.4byte	0xd2
 2535 03ed 00000000 		.4byte	.LFB75
 2536 03f1 8C020000 		.4byte	.LFE75-.LFB75
 2537 03f5 01       		.uleb128 0x1
 2538 03f6 9C       		.byte	0x9c
 2539 03f7 9F040000 		.4byte	0x49f
 2540 03fb 19       		.uleb128 0x19
 2541 03fc D3020000 		.4byte	.LASF81
 2542 0400 01       		.byte	0x1
 2543 0401 7002     		.2byte	0x270
 2544 0403 D2000000 		.4byte	0xd2
 2545 0407 02       		.uleb128 0x2
 2546 0408 91       		.byte	0x91
 2547 0409 54       		.sleb128 -44
 2548 040a 17       		.uleb128 0x17
 2549 040b 1E070000 		.4byte	.LASF82
 2550 040f 01       		.byte	0x1
 2551 0410 7102     		.2byte	0x271
 2552 0412 D2000000 		.4byte	0xd2
 2553 0416 02       		.uleb128 0x2
 2554 0417 91       		.byte	0x91
 2555 0418 58       		.sleb128 -40
 2556 0419 17       		.uleb128 0x17
 2557 041a 59010000 		.4byte	.LASF83
 2558 041e 01       		.byte	0x1
 2559 041f 7402     		.2byte	0x274
 2560 0421 68000000 		.4byte	0x68
 2561 0425 02       		.uleb128 0x2
 2562 0426 91       		.byte	0x91
 2563 0427 60       		.sleb128 -32
 2564 0428 17       		.uleb128 0x17
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 60


 2565 0429 EF010000 		.4byte	.LASF84
 2566 042d 01       		.byte	0x1
 2567 042e 7502     		.2byte	0x275
 2568 0430 68000000 		.4byte	0x68
 2569 0434 02       		.uleb128 0x2
 2570 0435 91       		.byte	0x91
 2571 0436 5C       		.sleb128 -36
 2572 0437 17       		.uleb128 0x17
 2573 0438 7C030000 		.4byte	.LASF85
 2574 043c 01       		.byte	0x1
 2575 043d 7702     		.2byte	0x277
 2576 043f 68000000 		.4byte	0x68
 2577 0443 02       		.uleb128 0x2
 2578 0444 91       		.byte	0x91
 2579 0445 74       		.sleb128 -12
 2580 0446 1A       		.uleb128 0x1a
 2581 0447 00000000 		.4byte	.Ldebug_ranges0+0
 2582 044b 5D040000 		.4byte	0x45d
 2583 044f 1B       		.uleb128 0x1b
 2584 0450 6900     		.ascii	"i\000"
 2585 0452 01       		.byte	0x1
 2586 0453 8102     		.2byte	0x281
 2587 0455 68000000 		.4byte	0x68
 2588 0459 02       		.uleb128 0x2
 2589 045a 91       		.byte	0x91
 2590 045b 70       		.sleb128 -16
 2591 045c 00       		.byte	0
 2592 045d 1A       		.uleb128 0x1a
 2593 045e 18000000 		.4byte	.Ldebug_ranges0+0x18
 2594 0462 74040000 		.4byte	0x474
 2595 0466 1B       		.uleb128 0x1b
 2596 0467 6900     		.ascii	"i\000"
 2597 0469 01       		.byte	0x1
 2598 046a 9002     		.2byte	0x290
 2599 046c 68000000 		.4byte	0x68
 2600 0470 02       		.uleb128 0x2
 2601 0471 91       		.byte	0x91
 2602 0472 6C       		.sleb128 -20
 2603 0473 00       		.byte	0
 2604 0474 1A       		.uleb128 0x1a
 2605 0475 30000000 		.4byte	.Ldebug_ranges0+0x30
 2606 0479 8B040000 		.4byte	0x48b
 2607 047d 1B       		.uleb128 0x1b
 2608 047e 6900     		.ascii	"i\000"
 2609 0480 01       		.byte	0x1
 2610 0481 9F02     		.2byte	0x29f
 2611 0483 68000000 		.4byte	0x68
 2612 0487 02       		.uleb128 0x2
 2613 0488 91       		.byte	0x91
 2614 0489 68       		.sleb128 -24
 2615 048a 00       		.byte	0
 2616 048b 1C       		.uleb128 0x1c
 2617 048c 48000000 		.4byte	.Ldebug_ranges0+0x48
 2618 0490 1B       		.uleb128 0x1b
 2619 0491 6900     		.ascii	"i\000"
 2620 0493 01       		.byte	0x1
 2621 0494 AF02     		.2byte	0x2af
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 61


 2622 0496 68000000 		.4byte	0x68
 2623 049a 02       		.uleb128 0x2
 2624 049b 91       		.byte	0x91
 2625 049c 64       		.sleb128 -28
 2626 049d 00       		.byte	0
 2627 049e 00       		.byte	0
 2628 049f 1D       		.uleb128 0x1d
 2629 04a0 17050000 		.4byte	.LASF87
 2630 04a4 01       		.byte	0x1
 2631 04a5 C302     		.2byte	0x2c3
 2632 04a7 00000000 		.4byte	.LFB76
 2633 04ab 1C000000 		.4byte	.LFE76-.LFB76
 2634 04af 01       		.uleb128 0x1
 2635 04b0 9C       		.byte	0x9c
 2636 04b1 1E       		.uleb128 0x1e
 2637 04b2 43060000 		.4byte	.LASF88
 2638 04b6 01       		.byte	0x1
 2639 04b7 C802     		.2byte	0x2c8
 2640 04b9 25020000 		.4byte	0x225
 2641 04bd 00000000 		.4byte	.LFB77
 2642 04c1 A4000000 		.4byte	.LFE77-.LFB77
 2643 04c5 01       		.uleb128 0x1
 2644 04c6 9C       		.byte	0x9c
 2645 04c7 1F050000 		.4byte	0x51f
 2646 04cb 19       		.uleb128 0x19
 2647 04cc 50010000 		.4byte	.LASF89
 2648 04d0 01       		.byte	0x1
 2649 04d1 C802     		.2byte	0x2c8
 2650 04d3 68000000 		.4byte	0x68
 2651 04d7 02       		.uleb128 0x2
 2652 04d8 91       		.byte	0x91
 2653 04d9 60       		.sleb128 -32
 2654 04da 19       		.uleb128 0x19
 2655 04db 27030000 		.4byte	.LASF90
 2656 04df 01       		.byte	0x1
 2657 04e0 C802     		.2byte	0x2c8
 2658 04e2 1F050000 		.4byte	0x51f
 2659 04e6 02       		.uleb128 0x2
 2660 04e7 91       		.byte	0x91
 2661 04e8 5C       		.sleb128 -36
 2662 04e9 19       		.uleb128 0x19
 2663 04ea 37030000 		.4byte	.LASF91
 2664 04ee 01       		.byte	0x1
 2665 04ef C802     		.2byte	0x2c8
 2666 04f1 68000000 		.4byte	0x68
 2667 04f5 02       		.uleb128 0x2
 2668 04f6 91       		.byte	0x91
 2669 04f7 58       		.sleb128 -40
 2670 04f8 17       		.uleb128 0x17
 2671 04f9 72000000 		.4byte	.LASF92
 2672 04fd 01       		.byte	0x1
 2673 04fe C902     		.2byte	0x2c9
 2674 0500 25020000 		.4byte	0x225
 2675 0504 02       		.uleb128 0x2
 2676 0505 91       		.byte	0x91
 2677 0506 68       		.sleb128 -24
 2678 0507 0C       		.uleb128 0xc
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 62


 2679 0508 0E000000 		.4byte	.LBB11
 2680 050c 7C000000 		.4byte	.LBE11-.LBB11
 2681 0510 1B       		.uleb128 0x1b
 2682 0511 6900     		.ascii	"i\000"
 2683 0513 01       		.byte	0x1
 2684 0514 CB02     		.2byte	0x2cb
 2685 0516 68000000 		.4byte	0x68
 2686 051a 02       		.uleb128 0x2
 2687 051b 91       		.byte	0x91
 2688 051c 74       		.sleb128 -12
 2689 051d 00       		.byte	0
 2690 051e 00       		.byte	0
 2691 051f 1F       		.uleb128 0x1f
 2692 0520 04       		.byte	0x4
 2693 0521 25020000 		.4byte	0x225
 2694 0525 20       		.uleb128 0x20
 2695 0526 6E020000 		.4byte	.LASF138
 2696 052a 01       		.byte	0x1
 2697 052b D802     		.2byte	0x2d8
 2698 052d 00000000 		.4byte	.LFB78
 2699 0531 D4000000 		.4byte	.LFE78-.LFB78
 2700 0535 01       		.uleb128 0x1
 2701 0536 9C       		.byte	0x9c
 2702 0537 4B050000 		.4byte	0x54b
 2703 053b 17       		.uleb128 0x17
 2704 053c 56070000 		.4byte	.LASF93
 2705 0540 01       		.byte	0x1
 2706 0541 D902     		.2byte	0x2d9
 2707 0543 D2000000 		.4byte	0xd2
 2708 0547 02       		.uleb128 0x2
 2709 0548 91       		.byte	0x91
 2710 0549 6C       		.sleb128 -20
 2711 054a 00       		.byte	0
 2712 054b 21       		.uleb128 0x21
 2713 054c DE040000 		.4byte	.LASF94
 2714 0550 07       		.byte	0x7
 2715 0551 1207     		.2byte	0x712
 2716 0553 57050000 		.4byte	0x557
 2717 0557 22       		.uleb128 0x22
 2718 0558 8B000000 		.4byte	0x8b
 2719 055c 23       		.uleb128 0x23
 2720 055d 747300   		.ascii	"ts\000"
 2721 0560 05       		.byte	0x5
 2722 0561 10       		.byte	0x10
 2723 0562 96000000 		.4byte	0x96
 2724 0566 05       		.uleb128 0x5
 2725 0567 03       		.byte	0x3
 2726 0568 00000000 		.4byte	ts
 2727 056c 24       		.uleb128 0x24
 2728 056d 59060000 		.4byte	.LASF95
 2729 0571 05       		.byte	0x5
 2730 0572 11       		.byte	0x11
 2731 0573 A2000000 		.4byte	0xa2
 2732 0577 05       		.uleb128 0x5
 2733 0578 03       		.byte	0x3
 2734 0579 00000000 		.4byte	ts_enc
 2735 057d 24       		.uleb128 0x24
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 63


 2736 057e EB040000 		.4byte	.LASF96
 2737 0582 05       		.byte	0x5
 2738 0583 12       		.byte	0x12
 2739 0584 A2000000 		.4byte	0xa2
 2740 0588 05       		.uleb128 0x5
 2741 0589 03       		.byte	0x3
 2742 058a 00000000 		.4byte	ts_update
 2743 058e 24       		.uleb128 0x24
 2744 058f 16040000 		.4byte	.LASF97
 2745 0593 05       		.byte	0x5
 2746 0594 13       		.byte	0x13
 2747 0595 A2000000 		.4byte	0xa2
 2748 0599 05       		.uleb128 0x5
 2749 059a 03       		.byte	0x3
 2750 059b 00000000 		.4byte	ts_speed
 2751 059f 24       		.uleb128 0x24
 2752 05a0 0E030000 		.4byte	.LASF98
 2753 05a4 05       		.byte	0x5
 2754 05a5 14       		.byte	0x14
 2755 05a6 A2000000 		.4byte	0xa2
 2756 05aa 05       		.uleb128 0x5
 2757 05ab 03       		.byte	0x3
 2758 05ac 00000000 		.4byte	ts_display
 2759 05b0 24       		.uleb128 0x24
 2760 05b1 B8020000 		.4byte	.LASF99
 2761 05b5 05       		.byte	0x5
 2762 05b6 16       		.byte	0x16
 2763 05b7 96000000 		.4byte	0x96
 2764 05bb 05       		.uleb128 0x5
 2765 05bc 03       		.byte	0x3
 2766 05bd 00000000 		.4byte	flag_ts_enc
 2767 05c1 24       		.uleb128 0x24
 2768 05c2 A9020000 		.4byte	.LASF100
 2769 05c6 05       		.byte	0x5
 2770 05c7 17       		.byte	0x17
 2771 05c8 96000000 		.4byte	0x96
 2772 05cc 05       		.uleb128 0x5
 2773 05cd 03       		.byte	0x3
 2774 05ce 00000000 		.4byte	flag_ts_update
 2775 05d2 24       		.uleb128 0x24
 2776 05d3 83040000 		.4byte	.LASF101
 2777 05d7 05       		.byte	0x5
 2778 05d8 18       		.byte	0x18
 2779 05d9 96000000 		.4byte	0x96
 2780 05dd 05       		.uleb128 0x5
 2781 05de 03       		.byte	0x3
 2782 05df 00000000 		.4byte	flag_ts_speed
 2783 05e3 24       		.uleb128 0x24
 2784 05e4 60060000 		.4byte	.LASF102
 2785 05e8 05       		.byte	0x5
 2786 05e9 19       		.byte	0x19
 2787 05ea 96000000 		.4byte	0x96
 2788 05ee 05       		.uleb128 0x5
 2789 05ef 03       		.byte	0x3
 2790 05f0 00000000 		.4byte	flag_ts_display
 2791 05f4 24       		.uleb128 0x24
 2792 05f5 A0040000 		.4byte	.LASF103
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 64


 2793 05f9 05       		.byte	0x5
 2794 05fa 1B       		.byte	0x1b
 2795 05fb 96000000 		.4byte	0x96
 2796 05ff 05       		.uleb128 0x5
 2797 0600 03       		.byte	0x3
 2798 0601 00000000 		.4byte	flag_rx
 2799 0605 24       		.uleb128 0x24
 2800 0606 62020000 		.4byte	.LASF104
 2801 060a 05       		.byte	0x5
 2802 060b 1C       		.byte	0x1c
 2803 060c 96000000 		.4byte	0x96
 2804 0610 05       		.uleb128 0x5
 2805 0611 03       		.byte	0x3
 2806 0612 00000000 		.4byte	flag_packet
 2807 0616 24       		.uleb128 0x24
 2808 0617 3E070000 		.4byte	.LASF105
 2809 061b 05       		.byte	0x5
 2810 061c 1D       		.byte	0x1d
 2811 061d 96000000 		.4byte	0x96
 2812 0621 05       		.uleb128 0x5
 2813 0622 03       		.byte	0x3
 2814 0623 00000000 		.4byte	flag_KB_string
 2815 0627 24       		.uleb128 0x24
 2816 0628 91040000 		.4byte	.LASF106
 2817 062c 05       		.byte	0x5
 2818 062d 1F       		.byte	0x1f
 2819 062e 96000000 		.4byte	0x96
 2820 0632 05       		.uleb128 0x5
 2821 0633 03       		.byte	0x3
 2822 0634 00000000 		.4byte	dataready_flag
 2823 0638 24       		.uleb128 0x24
 2824 0639 85010000 		.4byte	.LASF107
 2825 063d 05       		.byte	0x5
 2826 063e 21       		.byte	0x21
 2827 063f 96000000 		.4byte	0x96
 2828 0643 05       		.uleb128 0x5
 2829 0644 03       		.byte	0x3
 2830 0645 00000000 		.4byte	flag_rf_transmission_active
 2831 0649 25       		.uleb128 0x25
 2832 064a 84000000 		.4byte	0x84
 2833 064e 59060000 		.4byte	0x659
 2834 0652 26       		.uleb128 0x26
 2835 0653 7D000000 		.4byte	0x7d
 2836 0657 3F       		.byte	0x3f
 2837 0658 00       		.byte	0
 2838 0659 24       		.uleb128 0x24
 2839 065a 75060000 		.4byte	.LASF108
 2840 065e 05       		.byte	0x5
 2841 065f 24       		.byte	0x24
 2842 0660 49060000 		.4byte	0x649
 2843 0664 05       		.uleb128 0x5
 2844 0665 03       		.byte	0x3
 2845 0666 00000000 		.4byte	displaystring
 2846 066a 24       		.uleb128 0x24
 2847 066b 0E060000 		.4byte	.LASF109
 2848 066f 05       		.byte	0x5
 2849 0670 25       		.byte	0x25
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 65


 2850 0671 49060000 		.4byte	0x649
 2851 0675 05       		.uleb128 0x5
 2852 0676 03       		.byte	0x3
 2853 0677 00000000 		.4byte	line
 2854 067b 24       		.uleb128 0x24
 2855 067c DB050000 		.4byte	.LASF110
 2856 0680 05       		.byte	0x5
 2857 0681 25       		.byte	0x25
 2858 0682 49060000 		.4byte	0x649
 2859 0686 05       		.uleb128 0x5
 2860 0687 03       		.byte	0x3
 2861 0688 00000000 		.4byte	entry
 2862 068c 25       		.uleb128 0x25
 2863 068d 96000000 		.4byte	0x96
 2864 0691 9C060000 		.4byte	0x69c
 2865 0695 26       		.uleb128 0x26
 2866 0696 7D000000 		.4byte	0x7d
 2867 069a 3F       		.byte	0x3f
 2868 069b 00       		.byte	0
 2869 069c 24       		.uleb128 0x24
 2870 069d 29020000 		.4byte	.LASF111
 2871 06a1 05       		.byte	0x5
 2872 06a2 26       		.byte	0x26
 2873 06a3 8C060000 		.4byte	0x68c
 2874 06a7 05       		.uleb128 0x5
 2875 06a8 03       		.byte	0x3
 2876 06a9 00000000 		.4byte	usbBuffer
 2877 06ad 24       		.uleb128 0x24
 2878 06ae 65000000 		.4byte	.LASF112
 2879 06b2 05       		.byte	0x5
 2880 06b3 3C       		.byte	0x3c
 2881 06b4 E0000000 		.4byte	0xe0
 2882 06b8 05       		.uleb128 0x5
 2883 06b9 03       		.byte	0x3
 2884 06ba 00000000 		.4byte	system_state
 2885 06be 25       		.uleb128 0x25
 2886 06bf 68000000 		.4byte	0x68
 2887 06c3 D4060000 		.4byte	0x6d4
 2888 06c7 26       		.uleb128 0x26
 2889 06c8 7D000000 		.4byte	0x7d
 2890 06cc 0E       		.byte	0xe
 2891 06cd 26       		.uleb128 0x26
 2892 06ce 7D000000 		.4byte	0x7d
 2893 06d2 12       		.byte	0x12
 2894 06d3 00       		.byte	0
 2895 06d4 27       		.uleb128 0x27
 2896 06d5 6D617000 		.ascii	"map\000"
 2897 06d9 08       		.byte	0x8
 2898 06da 04       		.byte	0x4
 2899 06db BE060000 		.4byte	0x6be
 2900 06df 25       		.uleb128 0x25
 2901 06e0 68000000 		.4byte	0x68
 2902 06e4 F5060000 		.4byte	0x6f5
 2903 06e8 26       		.uleb128 0x26
 2904 06e9 7D000000 		.4byte	0x7d
 2905 06ed 04       		.byte	0x4
 2906 06ee 26       		.uleb128 0x26
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 66


 2907 06ef 7D000000 		.4byte	0x7d
 2908 06f3 01       		.byte	0x1
 2909 06f4 00       		.byte	0
 2910 06f5 28       		.uleb128 0x28
 2911 06f6 03040000 		.4byte	.LASF113
 2912 06fa 08       		.byte	0x8
 2913 06fb 05       		.byte	0x5
 2914 06fc DF060000 		.4byte	0x6df
 2915 0700 24       		.uleb128 0x24
 2916 0701 51050000 		.4byte	.LASF114
 2917 0705 01       		.byte	0x1
 2918 0706 19       		.byte	0x19
 2919 0707 58020000 		.4byte	0x258
 2920 070b 05       		.uleb128 0x5
 2921 070c 03       		.byte	0x3
 2922 070d 00000000 		.4byte	currentDirection
 2923 0711 24       		.uleb128 0x24
 2924 0712 65040000 		.4byte	.LASF115
 2925 0716 01       		.byte	0x1
 2926 0717 19       		.byte	0x19
 2927 0718 58020000 		.4byte	0x258
 2928 071c 05       		.uleb128 0x5
 2929 071d 03       		.byte	0x3
 2930 071e 00000000 		.4byte	previousDirection
 2931 0722 24       		.uleb128 0x24
 2932 0723 B9010000 		.4byte	.LASF116
 2933 0727 01       		.byte	0x1
 2934 0728 1B       		.byte	0x1b
 2935 0729 30020000 		.4byte	0x230
 2936 072d 05       		.uleb128 0x5
 2937 072e 03       		.byte	0x3
 2938 072f 00000000 		.4byte	currentRobotOrientation
 2939 0733 24       		.uleb128 0x24
 2940 0734 CC030000 		.4byte	.LASF117
 2941 0738 01       		.byte	0x1
 2942 0739 1B       		.byte	0x1b
 2943 073a 30020000 		.4byte	0x230
 2944 073e 05       		.uleb128 0x5
 2945 073f 03       		.byte	0x3
 2946 0740 00000000 		.4byte	previousOrientation
 2947 0744 24       		.uleb128 0x24
 2948 0745 DA060000 		.4byte	.LASF118
 2949 0749 01       		.byte	0x1
 2950 074a 1C       		.byte	0x1c
 2951 074b 25020000 		.4byte	0x225
 2952 074f 05       		.uleb128 0x5
 2953 0750 03       		.byte	0x3
 2954 0751 00000000 		.4byte	currentInstruction
 2955 0755 24       		.uleb128 0x24
 2956 0756 50010000 		.4byte	.LASF89
 2957 075a 01       		.byte	0x1
 2958 075b 1D       		.byte	0x1d
 2959 075c 68000000 		.4byte	0x68
 2960 0760 05       		.uleb128 0x5
 2961 0761 03       		.byte	0x3
 2962 0762 00000000 		.4byte	numSteps
 2963 0766 24       		.uleb128 0x24
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 67


 2964 0767 27030000 		.4byte	.LASF90
 2965 076b 01       		.byte	0x1
 2966 076c 1F       		.byte	0x1f
 2967 076d 1F050000 		.4byte	0x51f
 2968 0771 05       		.uleb128 0x5
 2969 0772 03       		.byte	0x3
 2970 0773 00000000 		.4byte	instructionList
 2971 0777 24       		.uleb128 0x24
 2972 0778 37030000 		.4byte	.LASF91
 2973 077c 01       		.byte	0x1
 2974 077d 20       		.byte	0x20
 2975 077e AE000000 		.4byte	0xae
 2976 0782 05       		.uleb128 0x5
 2977 0783 03       		.byte	0x3
 2978 0784 00000000 		.4byte	instructionIndex
 2979 0788 23       		.uleb128 0x23
 2980 0789 733300   		.ascii	"s3\000"
 2981 078c 01       		.byte	0x1
 2982 078d 25       		.byte	0x25
 2983 078e 96000000 		.4byte	0x96
 2984 0792 05       		.uleb128 0x5
 2985 0793 03       		.byte	0x3
 2986 0794 00000000 		.4byte	s3
 2987 0798 23       		.uleb128 0x23
 2988 0799 733400   		.ascii	"s4\000"
 2989 079c 01       		.byte	0x1
 2990 079d 25       		.byte	0x25
 2991 079e 96000000 		.4byte	0x96
 2992 07a2 05       		.uleb128 0x5
 2993 07a3 03       		.byte	0x3
 2994 07a4 00000000 		.4byte	s4
 2995 07a8 23       		.uleb128 0x23
 2996 07a9 733500   		.ascii	"s5\000"
 2997 07ac 01       		.byte	0x1
 2998 07ad 25       		.byte	0x25
 2999 07ae 96000000 		.4byte	0x96
 3000 07b2 05       		.uleb128 0x5
 3001 07b3 03       		.byte	0x3
 3002 07b4 00000000 		.4byte	s5
 3003 07b8 23       		.uleb128 0x23
 3004 07b9 733600   		.ascii	"s6\000"
 3005 07bc 01       		.byte	0x1
 3006 07bd 25       		.byte	0x25
 3007 07be 96000000 		.4byte	0x96
 3008 07c2 05       		.uleb128 0x5
 3009 07c3 03       		.byte	0x3
 3010 07c4 00000000 		.4byte	s6
 3011 07c8 24       		.uleb128 0x24
 3012 07c9 FD040000 		.4byte	.LASF119
 3013 07cd 01       		.byte	0x1
 3014 07ce 2A       		.byte	0x2a
 3015 07cf AE000000 		.4byte	0xae
 3016 07d3 05       		.uleb128 0x5
 3017 07d4 03       		.byte	0x3
 3018 07d5 00000000 		.4byte	totalMilliseconds
 3019 07d9 24       		.uleb128 0x24
 3020 07da 1C010000 		.4byte	.LASF120
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 68


 3021 07de 01       		.byte	0x1
 3022 07df 2B       		.byte	0x2b
 3023 07e0 D2000000 		.4byte	0xd2
 3024 07e4 05       		.uleb128 0x5
 3025 07e5 03       		.byte	0x3
 3026 07e6 00000000 		.4byte	totalDistance
 3027 07ea 25       		.uleb128 0x25
 3028 07eb 84000000 		.4byte	0x84
 3029 07ef FA070000 		.4byte	0x7fa
 3030 07f3 26       		.uleb128 0x26
 3031 07f4 7D000000 		.4byte	0x7d
 3032 07f8 44       		.byte	0x44
 3033 07f9 00       		.byte	0
 3034 07fa 24       		.uleb128 0x24
 3035 07fb 41000000 		.4byte	.LASF121
 3036 07ff 01       		.byte	0x1
 3037 0800 2D       		.byte	0x2d
 3038 0801 EA070000 		.4byte	0x7ea
 3039 0805 05       		.uleb128 0x5
 3040 0806 03       		.byte	0x3
 3041 0807 00000000 		.4byte	buffer
 3042 080b 24       		.uleb128 0x24
 3043 080c F9010000 		.4byte	.LASF122
 3044 0810 01       		.byte	0x1
 3045 0811 2E       		.byte	0x2e
 3046 0812 68000000 		.4byte	0x68
 3047 0816 05       		.uleb128 0x5
 3048 0817 03       		.byte	0x3
 3049 0818 00000000 		.4byte	quadDec2Count
 3050 081c 24       		.uleb128 0x24
 3051 081d 35070000 		.4byte	.LASF123
 3052 0821 01       		.byte	0x1
 3053 0822 2F       		.byte	0x2f
 3054 0823 68000000 		.4byte	0x68
 3055 0827 05       		.uleb128 0x5
 3056 0828 03       		.byte	0x3
 3057 0829 00000000 		.4byte	timerInt
 3058 082d 24       		.uleb128 0x24
 3059 082e 8C020000 		.4byte	.LASF124
 3060 0832 01       		.byte	0x1
 3061 0833 30       		.byte	0x30
 3062 0834 68000000 		.4byte	0x68
 3063 0838 05       		.uleb128 0x5
 3064 0839 03       		.byte	0x3
 3065 083a 00000000 		.4byte	keepLedOn
 3066 083e 24       		.uleb128 0x24
 3067 083f BD050000 		.4byte	.LASF125
 3068 0843 01       		.byte	0x1
 3069 0844 32       		.byte	0x32
 3070 0845 AE000000 		.4byte	0xae
 3071 0849 05       		.uleb128 0x5
 3072 084a 03       		.byte	0x3
 3073 084b 00000000 		.4byte	stopBuffer
 3074 084f 24       		.uleb128 0x24
 3075 0850 86030000 		.4byte	.LASF126
 3076 0854 01       		.byte	0x1
 3077 0855 33       		.byte	0x33
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 69


 3078 0856 96000000 		.4byte	0x96
 3079 085a 05       		.uleb128 0x5
 3080 085b 03       		.byte	0x3
 3081 085c 00000000 		.4byte	turnFinishedFlag
 3082 0860 24       		.uleb128 0x24
 3083 0861 32010000 		.4byte	.LASF127
 3084 0865 01       		.byte	0x1
 3085 0866 34       		.byte	0x34
 3086 0867 96000000 		.4byte	0x96
 3087 086b 05       		.uleb128 0x5
 3088 086c 03       		.byte	0x3
 3089 086d 00000000 		.4byte	forwardUntilTargetStartedFlag
 3090 0871 24       		.uleb128 0x24
 3091 0872 BD030000 		.4byte	.LASF128
 3092 0876 01       		.byte	0x1
 3093 0877 35       		.byte	0x35
 3094 0878 D2000000 		.4byte	0xd2
 3095 087c 05       		.uleb128 0x5
 3096 087d 03       		.byte	0x3
 3097 087e 00000000 		.4byte	blockSizeTotal
 3098 0882 24       		.uleb128 0x24
 3099 0883 54030000 		.4byte	.LASF129
 3100 0887 01       		.byte	0x1
 3101 0888 B4       		.byte	0xb4
 3102 0889 D2000000 		.4byte	0xd2
 3103 088d 05       		.uleb128 0x5
 3104 088e 03       		.byte	0x3
 3105 088f 00000000 		.4byte	xBlocksize
 3106 0893 24       		.uleb128 0x24
 3107 0894 A8040000 		.4byte	.LASF130
 3108 0898 01       		.byte	0x1
 3109 0899 B5       		.byte	0xb5
 3110 089a D2000000 		.4byte	0xd2
 3111 089e 05       		.uleb128 0x5
 3112 089f 03       		.byte	0x3
 3113 08a0 00000000 		.4byte	yBlocksize
 3114 08a4 24       		.uleb128 0x24
 3115 08a5 A5060000 		.4byte	.LASF131
 3116 08a9 01       		.byte	0x1
 3117 08aa B6       		.byte	0xb6
 3118 08ab 96000000 		.4byte	0x96
 3119 08af 05       		.uleb128 0x5
 3120 08b0 03       		.byte	0x3
 3121 08b1 00000000 		.4byte	currentRow
 3122 08b5 24       		.uleb128 0x24
 3123 08b6 13070000 		.4byte	.LASF132
 3124 08ba 01       		.byte	0x1
 3125 08bb B7       		.byte	0xb7
 3126 08bc 96000000 		.4byte	0x96
 3127 08c0 05       		.uleb128 0x5
 3128 08c1 03       		.byte	0x3
 3129 08c2 00000000 		.4byte	currentCol
 3130 08c6 29       		.uleb128 0x29
 3131 08c7 FD050000 		.4byte	.LASF133
 3132 08cb 01       		.byte	0x1
 3133 08cc 0401     		.2byte	0x104
 3134 08ce 96000000 		.4byte	0x96
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 70


 3135 08d2 05       		.uleb128 0x5
 3136 08d3 03       		.byte	0x3
 3137 08d4 00000000 		.4byte	stoppedAfterTurn
 3138 08d8 29       		.uleb128 0x29
 3139 08d9 DD020000 		.4byte	.LASF134
 3140 08dd 01       		.byte	0x1
 3141 08de 0501     		.2byte	0x105
 3142 08e0 96000000 		.4byte	0x96
 3143 08e4 05       		.uleb128 0x5
 3144 08e5 03       		.byte	0x3
 3145 08e6 00000000 		.4byte	ignoreSensor
 3146 08ea 00       		.byte	0
 3147              		.section	.debug_abbrev,"",%progbits
 3148              	.Ldebug_abbrev0:
 3149 0000 01       		.uleb128 0x1
 3150 0001 11       		.uleb128 0x11
 3151 0002 01       		.byte	0x1
 3152 0003 25       		.uleb128 0x25
 3153 0004 0E       		.uleb128 0xe
 3154 0005 13       		.uleb128 0x13
 3155 0006 0B       		.uleb128 0xb
 3156 0007 03       		.uleb128 0x3
 3157 0008 0E       		.uleb128 0xe
 3158 0009 1B       		.uleb128 0x1b
 3159 000a 0E       		.uleb128 0xe
 3160 000b 55       		.uleb128 0x55
 3161 000c 17       		.uleb128 0x17
 3162 000d 11       		.uleb128 0x11
 3163 000e 01       		.uleb128 0x1
 3164 000f 10       		.uleb128 0x10
 3165 0010 17       		.uleb128 0x17
 3166 0011 00       		.byte	0
 3167 0012 00       		.byte	0
 3168 0013 02       		.uleb128 0x2
 3169 0014 24       		.uleb128 0x24
 3170 0015 00       		.byte	0
 3171 0016 0B       		.uleb128 0xb
 3172 0017 0B       		.uleb128 0xb
 3173 0018 3E       		.uleb128 0x3e
 3174 0019 0B       		.uleb128 0xb
 3175 001a 03       		.uleb128 0x3
 3176 001b 0E       		.uleb128 0xe
 3177 001c 00       		.byte	0
 3178 001d 00       		.byte	0
 3179 001e 03       		.uleb128 0x3
 3180 001f 16       		.uleb128 0x16
 3181 0020 00       		.byte	0
 3182 0021 03       		.uleb128 0x3
 3183 0022 0E       		.uleb128 0xe
 3184 0023 3A       		.uleb128 0x3a
 3185 0024 0B       		.uleb128 0xb
 3186 0025 3B       		.uleb128 0x3b
 3187 0026 0B       		.uleb128 0xb
 3188 0027 49       		.uleb128 0x49
 3189 0028 13       		.uleb128 0x13
 3190 0029 00       		.byte	0
 3191 002a 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 71


 3192 002b 04       		.uleb128 0x4
 3193 002c 24       		.uleb128 0x24
 3194 002d 00       		.byte	0
 3195 002e 0B       		.uleb128 0xb
 3196 002f 0B       		.uleb128 0xb
 3197 0030 3E       		.uleb128 0x3e
 3198 0031 0B       		.uleb128 0xb
 3199 0032 03       		.uleb128 0x3
 3200 0033 08       		.uleb128 0x8
 3201 0034 00       		.byte	0
 3202 0035 00       		.byte	0
 3203 0036 05       		.uleb128 0x5
 3204 0037 16       		.uleb128 0x16
 3205 0038 00       		.byte	0
 3206 0039 03       		.uleb128 0x3
 3207 003a 0E       		.uleb128 0xe
 3208 003b 3A       		.uleb128 0x3a
 3209 003c 0B       		.uleb128 0xb
 3210 003d 3B       		.uleb128 0x3b
 3211 003e 05       		.uleb128 0x5
 3212 003f 49       		.uleb128 0x49
 3213 0040 13       		.uleb128 0x13
 3214 0041 00       		.byte	0
 3215 0042 00       		.byte	0
 3216 0043 06       		.uleb128 0x6
 3217 0044 13       		.uleb128 0x13
 3218 0045 01       		.byte	0x1
 3219 0046 03       		.uleb128 0x3
 3220 0047 0E       		.uleb128 0xe
 3221 0048 0B       		.uleb128 0xb
 3222 0049 0B       		.uleb128 0xb
 3223 004a 3A       		.uleb128 0x3a
 3224 004b 0B       		.uleb128 0xb
 3225 004c 3B       		.uleb128 0x3b
 3226 004d 0B       		.uleb128 0xb
 3227 004e 01       		.uleb128 0x1
 3228 004f 13       		.uleb128 0x13
 3229 0050 00       		.byte	0
 3230 0051 00       		.byte	0
 3231 0052 07       		.uleb128 0x7
 3232 0053 0D       		.uleb128 0xd
 3233 0054 00       		.byte	0
 3234 0055 03       		.uleb128 0x3
 3235 0056 0E       		.uleb128 0xe
 3236 0057 3A       		.uleb128 0x3a
 3237 0058 0B       		.uleb128 0xb
 3238 0059 3B       		.uleb128 0x3b
 3239 005a 0B       		.uleb128 0xb
 3240 005b 49       		.uleb128 0x49
 3241 005c 13       		.uleb128 0x13
 3242 005d 38       		.uleb128 0x38
 3243 005e 0B       		.uleb128 0xb
 3244 005f 00       		.byte	0
 3245 0060 00       		.byte	0
 3246 0061 08       		.uleb128 0x8
 3247 0062 04       		.uleb128 0x4
 3248 0063 01       		.byte	0x1
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 72


 3249 0064 03       		.uleb128 0x3
 3250 0065 0E       		.uleb128 0xe
 3251 0066 0B       		.uleb128 0xb
 3252 0067 0B       		.uleb128 0xb
 3253 0068 49       		.uleb128 0x49
 3254 0069 13       		.uleb128 0x13
 3255 006a 3A       		.uleb128 0x3a
 3256 006b 0B       		.uleb128 0xb
 3257 006c 3B       		.uleb128 0x3b
 3258 006d 0B       		.uleb128 0xb
 3259 006e 01       		.uleb128 0x1
 3260 006f 13       		.uleb128 0x13
 3261 0070 00       		.byte	0
 3262 0071 00       		.byte	0
 3263 0072 09       		.uleb128 0x9
 3264 0073 28       		.uleb128 0x28
 3265 0074 00       		.byte	0
 3266 0075 03       		.uleb128 0x3
 3267 0076 0E       		.uleb128 0xe
 3268 0077 1C       		.uleb128 0x1c
 3269 0078 0B       		.uleb128 0xb
 3270 0079 00       		.byte	0
 3271 007a 00       		.byte	0
 3272 007b 0A       		.uleb128 0xa
 3273 007c 28       		.uleb128 0x28
 3274 007d 00       		.byte	0
 3275 007e 03       		.uleb128 0x3
 3276 007f 08       		.uleb128 0x8
 3277 0080 1C       		.uleb128 0x1c
 3278 0081 0B       		.uleb128 0xb
 3279 0082 00       		.byte	0
 3280 0083 00       		.byte	0
 3281 0084 0B       		.uleb128 0xb
 3282 0085 2E       		.uleb128 0x2e
 3283 0086 01       		.byte	0x1
 3284 0087 3F       		.uleb128 0x3f
 3285 0088 19       		.uleb128 0x19
 3286 0089 03       		.uleb128 0x3
 3287 008a 0E       		.uleb128 0xe
 3288 008b 3A       		.uleb128 0x3a
 3289 008c 0B       		.uleb128 0xb
 3290 008d 3B       		.uleb128 0x3b
 3291 008e 0B       		.uleb128 0xb
 3292 008f 27       		.uleb128 0x27
 3293 0090 19       		.uleb128 0x19
 3294 0091 11       		.uleb128 0x11
 3295 0092 01       		.uleb128 0x1
 3296 0093 12       		.uleb128 0x12
 3297 0094 06       		.uleb128 0x6
 3298 0095 40       		.uleb128 0x40
 3299 0096 18       		.uleb128 0x18
 3300 0097 9642     		.uleb128 0x2116
 3301 0099 19       		.uleb128 0x19
 3302 009a 01       		.uleb128 0x1
 3303 009b 13       		.uleb128 0x13
 3304 009c 00       		.byte	0
 3305 009d 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 73


 3306 009e 0C       		.uleb128 0xc
 3307 009f 0B       		.uleb128 0xb
 3308 00a0 01       		.byte	0x1
 3309 00a1 11       		.uleb128 0x11
 3310 00a2 01       		.uleb128 0x1
 3311 00a3 12       		.uleb128 0x12
 3312 00a4 06       		.uleb128 0x6
 3313 00a5 00       		.byte	0
 3314 00a6 00       		.byte	0
 3315 00a7 0D       		.uleb128 0xd
 3316 00a8 34       		.uleb128 0x34
 3317 00a9 00       		.byte	0
 3318 00aa 03       		.uleb128 0x3
 3319 00ab 0E       		.uleb128 0xe
 3320 00ac 3A       		.uleb128 0x3a
 3321 00ad 0B       		.uleb128 0xb
 3322 00ae 3B       		.uleb128 0x3b
 3323 00af 0B       		.uleb128 0xb
 3324 00b0 49       		.uleb128 0x49
 3325 00b1 13       		.uleb128 0x13
 3326 00b2 02       		.uleb128 0x2
 3327 00b3 18       		.uleb128 0x18
 3328 00b4 00       		.byte	0
 3329 00b5 00       		.byte	0
 3330 00b6 0E       		.uleb128 0xe
 3331 00b7 2E       		.uleb128 0x2e
 3332 00b8 00       		.byte	0
 3333 00b9 3F       		.uleb128 0x3f
 3334 00ba 19       		.uleb128 0x19
 3335 00bb 03       		.uleb128 0x3
 3336 00bc 0E       		.uleb128 0xe
 3337 00bd 3A       		.uleb128 0x3a
 3338 00be 0B       		.uleb128 0xb
 3339 00bf 3B       		.uleb128 0x3b
 3340 00c0 0B       		.uleb128 0xb
 3341 00c1 27       		.uleb128 0x27
 3342 00c2 19       		.uleb128 0x19
 3343 00c3 11       		.uleb128 0x11
 3344 00c4 01       		.uleb128 0x1
 3345 00c5 12       		.uleb128 0x12
 3346 00c6 06       		.uleb128 0x6
 3347 00c7 40       		.uleb128 0x40
 3348 00c8 18       		.uleb128 0x18
 3349 00c9 9742     		.uleb128 0x2117
 3350 00cb 19       		.uleb128 0x19
 3351 00cc 00       		.byte	0
 3352 00cd 00       		.byte	0
 3353 00ce 0F       		.uleb128 0xf
 3354 00cf 2E       		.uleb128 0x2e
 3355 00d0 00       		.byte	0
 3356 00d1 3F       		.uleb128 0x3f
 3357 00d2 19       		.uleb128 0x19
 3358 00d3 03       		.uleb128 0x3
 3359 00d4 0E       		.uleb128 0xe
 3360 00d5 3A       		.uleb128 0x3a
 3361 00d6 0B       		.uleb128 0xb
 3362 00d7 3B       		.uleb128 0x3b
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 74


 3363 00d8 0B       		.uleb128 0xb
 3364 00d9 27       		.uleb128 0x27
 3365 00da 19       		.uleb128 0x19
 3366 00db 11       		.uleb128 0x11
 3367 00dc 01       		.uleb128 0x1
 3368 00dd 12       		.uleb128 0x12
 3369 00de 06       		.uleb128 0x6
 3370 00df 40       		.uleb128 0x40
 3371 00e0 18       		.uleb128 0x18
 3372 00e1 9642     		.uleb128 0x2116
 3373 00e3 19       		.uleb128 0x19
 3374 00e4 00       		.byte	0
 3375 00e5 00       		.byte	0
 3376 00e6 10       		.uleb128 0x10
 3377 00e7 2E       		.uleb128 0x2e
 3378 00e8 00       		.byte	0
 3379 00e9 3F       		.uleb128 0x3f
 3380 00ea 19       		.uleb128 0x19
 3381 00eb 03       		.uleb128 0x3
 3382 00ec 0E       		.uleb128 0xe
 3383 00ed 3A       		.uleb128 0x3a
 3384 00ee 0B       		.uleb128 0xb
 3385 00ef 3B       		.uleb128 0x3b
 3386 00f0 0B       		.uleb128 0xb
 3387 00f1 49       		.uleb128 0x49
 3388 00f2 13       		.uleb128 0x13
 3389 00f3 11       		.uleb128 0x11
 3390 00f4 01       		.uleb128 0x1
 3391 00f5 12       		.uleb128 0x12
 3392 00f6 06       		.uleb128 0x6
 3393 00f7 40       		.uleb128 0x40
 3394 00f8 18       		.uleb128 0x18
 3395 00f9 9642     		.uleb128 0x2116
 3396 00fb 19       		.uleb128 0x19
 3397 00fc 00       		.byte	0
 3398 00fd 00       		.byte	0
 3399 00fe 11       		.uleb128 0x11
 3400 00ff 2E       		.uleb128 0x2e
 3401 0100 01       		.byte	0x1
 3402 0101 3F       		.uleb128 0x3f
 3403 0102 19       		.uleb128 0x19
 3404 0103 03       		.uleb128 0x3
 3405 0104 0E       		.uleb128 0xe
 3406 0105 3A       		.uleb128 0x3a
 3407 0106 0B       		.uleb128 0xb
 3408 0107 3B       		.uleb128 0x3b
 3409 0108 0B       		.uleb128 0xb
 3410 0109 27       		.uleb128 0x27
 3411 010a 19       		.uleb128 0x19
 3412 010b 49       		.uleb128 0x49
 3413 010c 13       		.uleb128 0x13
 3414 010d 11       		.uleb128 0x11
 3415 010e 01       		.uleb128 0x1
 3416 010f 12       		.uleb128 0x12
 3417 0110 06       		.uleb128 0x6
 3418 0111 40       		.uleb128 0x40
 3419 0112 18       		.uleb128 0x18
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 75


 3420 0113 9642     		.uleb128 0x2116
 3421 0115 19       		.uleb128 0x19
 3422 0116 01       		.uleb128 0x1
 3423 0117 13       		.uleb128 0x13
 3424 0118 00       		.byte	0
 3425 0119 00       		.byte	0
 3426 011a 12       		.uleb128 0x12
 3427 011b 05       		.uleb128 0x5
 3428 011c 00       		.byte	0
 3429 011d 03       		.uleb128 0x3
 3430 011e 0E       		.uleb128 0xe
 3431 011f 3A       		.uleb128 0x3a
 3432 0120 0B       		.uleb128 0xb
 3433 0121 3B       		.uleb128 0x3b
 3434 0122 0B       		.uleb128 0xb
 3435 0123 49       		.uleb128 0x49
 3436 0124 13       		.uleb128 0x13
 3437 0125 02       		.uleb128 0x2
 3438 0126 18       		.uleb128 0x18
 3439 0127 00       		.byte	0
 3440 0128 00       		.byte	0
 3441 0129 13       		.uleb128 0x13
 3442 012a 34       		.uleb128 0x34
 3443 012b 00       		.byte	0
 3444 012c 03       		.uleb128 0x3
 3445 012d 08       		.uleb128 0x8
 3446 012e 3A       		.uleb128 0x3a
 3447 012f 0B       		.uleb128 0xb
 3448 0130 3B       		.uleb128 0x3b
 3449 0131 0B       		.uleb128 0xb
 3450 0132 49       		.uleb128 0x49
 3451 0133 13       		.uleb128 0x13
 3452 0134 02       		.uleb128 0x2
 3453 0135 18       		.uleb128 0x18
 3454 0136 00       		.byte	0
 3455 0137 00       		.byte	0
 3456 0138 14       		.uleb128 0x14
 3457 0139 2E       		.uleb128 0x2e
 3458 013a 00       		.byte	0
 3459 013b 3F       		.uleb128 0x3f
 3460 013c 19       		.uleb128 0x19
 3461 013d 03       		.uleb128 0x3
 3462 013e 0E       		.uleb128 0xe
 3463 013f 3A       		.uleb128 0x3a
 3464 0140 0B       		.uleb128 0xb
 3465 0141 3B       		.uleb128 0x3b
 3466 0142 0B       		.uleb128 0xb
 3467 0143 11       		.uleb128 0x11
 3468 0144 01       		.uleb128 0x1
 3469 0145 12       		.uleb128 0x12
 3470 0146 06       		.uleb128 0x6
 3471 0147 40       		.uleb128 0x40
 3472 0148 18       		.uleb128 0x18
 3473 0149 9742     		.uleb128 0x2117
 3474 014b 19       		.uleb128 0x19
 3475 014c 00       		.byte	0
 3476 014d 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 76


 3477 014e 15       		.uleb128 0x15
 3478 014f 2E       		.uleb128 0x2e
 3479 0150 00       		.byte	0
 3480 0151 3F       		.uleb128 0x3f
 3481 0152 19       		.uleb128 0x19
 3482 0153 03       		.uleb128 0x3
 3483 0154 0E       		.uleb128 0xe
 3484 0155 3A       		.uleb128 0x3a
 3485 0156 0B       		.uleb128 0xb
 3486 0157 3B       		.uleb128 0x3b
 3487 0158 05       		.uleb128 0x5
 3488 0159 49       		.uleb128 0x49
 3489 015a 13       		.uleb128 0x13
 3490 015b 11       		.uleb128 0x11
 3491 015c 01       		.uleb128 0x1
 3492 015d 12       		.uleb128 0x12
 3493 015e 06       		.uleb128 0x6
 3494 015f 40       		.uleb128 0x40
 3495 0160 18       		.uleb128 0x18
 3496 0161 9742     		.uleb128 0x2117
 3497 0163 19       		.uleb128 0x19
 3498 0164 00       		.byte	0
 3499 0165 00       		.byte	0
 3500 0166 16       		.uleb128 0x16
 3501 0167 2E       		.uleb128 0x2e
 3502 0168 01       		.byte	0x1
 3503 0169 3F       		.uleb128 0x3f
 3504 016a 19       		.uleb128 0x19
 3505 016b 03       		.uleb128 0x3
 3506 016c 0E       		.uleb128 0xe
 3507 016d 3A       		.uleb128 0x3a
 3508 016e 0B       		.uleb128 0xb
 3509 016f 3B       		.uleb128 0x3b
 3510 0170 05       		.uleb128 0x5
 3511 0171 49       		.uleb128 0x49
 3512 0172 13       		.uleb128 0x13
 3513 0173 11       		.uleb128 0x11
 3514 0174 01       		.uleb128 0x1
 3515 0175 12       		.uleb128 0x12
 3516 0176 06       		.uleb128 0x6
 3517 0177 40       		.uleb128 0x40
 3518 0178 18       		.uleb128 0x18
 3519 0179 9642     		.uleb128 0x2116
 3520 017b 19       		.uleb128 0x19
 3521 017c 01       		.uleb128 0x1
 3522 017d 13       		.uleb128 0x13
 3523 017e 00       		.byte	0
 3524 017f 00       		.byte	0
 3525 0180 17       		.uleb128 0x17
 3526 0181 34       		.uleb128 0x34
 3527 0182 00       		.byte	0
 3528 0183 03       		.uleb128 0x3
 3529 0184 0E       		.uleb128 0xe
 3530 0185 3A       		.uleb128 0x3a
 3531 0186 0B       		.uleb128 0xb
 3532 0187 3B       		.uleb128 0x3b
 3533 0188 05       		.uleb128 0x5
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 77


 3534 0189 49       		.uleb128 0x49
 3535 018a 13       		.uleb128 0x13
 3536 018b 02       		.uleb128 0x2
 3537 018c 18       		.uleb128 0x18
 3538 018d 00       		.byte	0
 3539 018e 00       		.byte	0
 3540 018f 18       		.uleb128 0x18
 3541 0190 2E       		.uleb128 0x2e
 3542 0191 01       		.byte	0x1
 3543 0192 3F       		.uleb128 0x3f
 3544 0193 19       		.uleb128 0x19
 3545 0194 03       		.uleb128 0x3
 3546 0195 0E       		.uleb128 0xe
 3547 0196 3A       		.uleb128 0x3a
 3548 0197 0B       		.uleb128 0xb
 3549 0198 3B       		.uleb128 0x3b
 3550 0199 05       		.uleb128 0x5
 3551 019a 27       		.uleb128 0x27
 3552 019b 19       		.uleb128 0x19
 3553 019c 49       		.uleb128 0x49
 3554 019d 13       		.uleb128 0x13
 3555 019e 11       		.uleb128 0x11
 3556 019f 01       		.uleb128 0x1
 3557 01a0 12       		.uleb128 0x12
 3558 01a1 06       		.uleb128 0x6
 3559 01a2 40       		.uleb128 0x40
 3560 01a3 18       		.uleb128 0x18
 3561 01a4 9642     		.uleb128 0x2116
 3562 01a6 19       		.uleb128 0x19
 3563 01a7 01       		.uleb128 0x1
 3564 01a8 13       		.uleb128 0x13
 3565 01a9 00       		.byte	0
 3566 01aa 00       		.byte	0
 3567 01ab 19       		.uleb128 0x19
 3568 01ac 05       		.uleb128 0x5
 3569 01ad 00       		.byte	0
 3570 01ae 03       		.uleb128 0x3
 3571 01af 0E       		.uleb128 0xe
 3572 01b0 3A       		.uleb128 0x3a
 3573 01b1 0B       		.uleb128 0xb
 3574 01b2 3B       		.uleb128 0x3b
 3575 01b3 05       		.uleb128 0x5
 3576 01b4 49       		.uleb128 0x49
 3577 01b5 13       		.uleb128 0x13
 3578 01b6 02       		.uleb128 0x2
 3579 01b7 18       		.uleb128 0x18
 3580 01b8 00       		.byte	0
 3581 01b9 00       		.byte	0
 3582 01ba 1A       		.uleb128 0x1a
 3583 01bb 0B       		.uleb128 0xb
 3584 01bc 01       		.byte	0x1
 3585 01bd 55       		.uleb128 0x55
 3586 01be 17       		.uleb128 0x17
 3587 01bf 01       		.uleb128 0x1
 3588 01c0 13       		.uleb128 0x13
 3589 01c1 00       		.byte	0
 3590 01c2 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 78


 3591 01c3 1B       		.uleb128 0x1b
 3592 01c4 34       		.uleb128 0x34
 3593 01c5 00       		.byte	0
 3594 01c6 03       		.uleb128 0x3
 3595 01c7 08       		.uleb128 0x8
 3596 01c8 3A       		.uleb128 0x3a
 3597 01c9 0B       		.uleb128 0xb
 3598 01ca 3B       		.uleb128 0x3b
 3599 01cb 05       		.uleb128 0x5
 3600 01cc 49       		.uleb128 0x49
 3601 01cd 13       		.uleb128 0x13
 3602 01ce 02       		.uleb128 0x2
 3603 01cf 18       		.uleb128 0x18
 3604 01d0 00       		.byte	0
 3605 01d1 00       		.byte	0
 3606 01d2 1C       		.uleb128 0x1c
 3607 01d3 0B       		.uleb128 0xb
 3608 01d4 01       		.byte	0x1
 3609 01d5 55       		.uleb128 0x55
 3610 01d6 17       		.uleb128 0x17
 3611 01d7 00       		.byte	0
 3612 01d8 00       		.byte	0
 3613 01d9 1D       		.uleb128 0x1d
 3614 01da 2E       		.uleb128 0x2e
 3615 01db 00       		.byte	0
 3616 01dc 3F       		.uleb128 0x3f
 3617 01dd 19       		.uleb128 0x19
 3618 01de 03       		.uleb128 0x3
 3619 01df 0E       		.uleb128 0xe
 3620 01e0 3A       		.uleb128 0x3a
 3621 01e1 0B       		.uleb128 0xb
 3622 01e2 3B       		.uleb128 0x3b
 3623 01e3 05       		.uleb128 0x5
 3624 01e4 11       		.uleb128 0x11
 3625 01e5 01       		.uleb128 0x1
 3626 01e6 12       		.uleb128 0x12
 3627 01e7 06       		.uleb128 0x6
 3628 01e8 40       		.uleb128 0x40
 3629 01e9 18       		.uleb128 0x18
 3630 01ea 9742     		.uleb128 0x2117
 3631 01ec 19       		.uleb128 0x19
 3632 01ed 00       		.byte	0
 3633 01ee 00       		.byte	0
 3634 01ef 1E       		.uleb128 0x1e
 3635 01f0 2E       		.uleb128 0x2e
 3636 01f1 01       		.byte	0x1
 3637 01f2 3F       		.uleb128 0x3f
 3638 01f3 19       		.uleb128 0x19
 3639 01f4 03       		.uleb128 0x3
 3640 01f5 0E       		.uleb128 0xe
 3641 01f6 3A       		.uleb128 0x3a
 3642 01f7 0B       		.uleb128 0xb
 3643 01f8 3B       		.uleb128 0x3b
 3644 01f9 05       		.uleb128 0x5
 3645 01fa 27       		.uleb128 0x27
 3646 01fb 19       		.uleb128 0x19
 3647 01fc 49       		.uleb128 0x49
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 79


 3648 01fd 13       		.uleb128 0x13
 3649 01fe 11       		.uleb128 0x11
 3650 01ff 01       		.uleb128 0x1
 3651 0200 12       		.uleb128 0x12
 3652 0201 06       		.uleb128 0x6
 3653 0202 40       		.uleb128 0x40
 3654 0203 18       		.uleb128 0x18
 3655 0204 9742     		.uleb128 0x2117
 3656 0206 19       		.uleb128 0x19
 3657 0207 01       		.uleb128 0x1
 3658 0208 13       		.uleb128 0x13
 3659 0209 00       		.byte	0
 3660 020a 00       		.byte	0
 3661 020b 1F       		.uleb128 0x1f
 3662 020c 0F       		.uleb128 0xf
 3663 020d 00       		.byte	0
 3664 020e 0B       		.uleb128 0xb
 3665 020f 0B       		.uleb128 0xb
 3666 0210 49       		.uleb128 0x49
 3667 0211 13       		.uleb128 0x13
 3668 0212 00       		.byte	0
 3669 0213 00       		.byte	0
 3670 0214 20       		.uleb128 0x20
 3671 0215 2E       		.uleb128 0x2e
 3672 0216 01       		.byte	0x1
 3673 0217 3F       		.uleb128 0x3f
 3674 0218 19       		.uleb128 0x19
 3675 0219 03       		.uleb128 0x3
 3676 021a 0E       		.uleb128 0xe
 3677 021b 3A       		.uleb128 0x3a
 3678 021c 0B       		.uleb128 0xb
 3679 021d 3B       		.uleb128 0x3b
 3680 021e 05       		.uleb128 0x5
 3681 021f 11       		.uleb128 0x11
 3682 0220 01       		.uleb128 0x1
 3683 0221 12       		.uleb128 0x12
 3684 0222 06       		.uleb128 0x6
 3685 0223 40       		.uleb128 0x40
 3686 0224 18       		.uleb128 0x18
 3687 0225 9642     		.uleb128 0x2116
 3688 0227 19       		.uleb128 0x19
 3689 0228 01       		.uleb128 0x1
 3690 0229 13       		.uleb128 0x13
 3691 022a 00       		.byte	0
 3692 022b 00       		.byte	0
 3693 022c 21       		.uleb128 0x21
 3694 022d 34       		.uleb128 0x34
 3695 022e 00       		.byte	0
 3696 022f 03       		.uleb128 0x3
 3697 0230 0E       		.uleb128 0xe
 3698 0231 3A       		.uleb128 0x3a
 3699 0232 0B       		.uleb128 0xb
 3700 0233 3B       		.uleb128 0x3b
 3701 0234 05       		.uleb128 0x5
 3702 0235 49       		.uleb128 0x49
 3703 0236 13       		.uleb128 0x13
 3704 0237 3F       		.uleb128 0x3f
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 80


 3705 0238 19       		.uleb128 0x19
 3706 0239 3C       		.uleb128 0x3c
 3707 023a 19       		.uleb128 0x19
 3708 023b 00       		.byte	0
 3709 023c 00       		.byte	0
 3710 023d 22       		.uleb128 0x22
 3711 023e 35       		.uleb128 0x35
 3712 023f 00       		.byte	0
 3713 0240 49       		.uleb128 0x49
 3714 0241 13       		.uleb128 0x13
 3715 0242 00       		.byte	0
 3716 0243 00       		.byte	0
 3717 0244 23       		.uleb128 0x23
 3718 0245 34       		.uleb128 0x34
 3719 0246 00       		.byte	0
 3720 0247 03       		.uleb128 0x3
 3721 0248 08       		.uleb128 0x8
 3722 0249 3A       		.uleb128 0x3a
 3723 024a 0B       		.uleb128 0xb
 3724 024b 3B       		.uleb128 0x3b
 3725 024c 0B       		.uleb128 0xb
 3726 024d 49       		.uleb128 0x49
 3727 024e 13       		.uleb128 0x13
 3728 024f 3F       		.uleb128 0x3f
 3729 0250 19       		.uleb128 0x19
 3730 0251 02       		.uleb128 0x2
 3731 0252 18       		.uleb128 0x18
 3732 0253 00       		.byte	0
 3733 0254 00       		.byte	0
 3734 0255 24       		.uleb128 0x24
 3735 0256 34       		.uleb128 0x34
 3736 0257 00       		.byte	0
 3737 0258 03       		.uleb128 0x3
 3738 0259 0E       		.uleb128 0xe
 3739 025a 3A       		.uleb128 0x3a
 3740 025b 0B       		.uleb128 0xb
 3741 025c 3B       		.uleb128 0x3b
 3742 025d 0B       		.uleb128 0xb
 3743 025e 49       		.uleb128 0x49
 3744 025f 13       		.uleb128 0x13
 3745 0260 3F       		.uleb128 0x3f
 3746 0261 19       		.uleb128 0x19
 3747 0262 02       		.uleb128 0x2
 3748 0263 18       		.uleb128 0x18
 3749 0264 00       		.byte	0
 3750 0265 00       		.byte	0
 3751 0266 25       		.uleb128 0x25
 3752 0267 01       		.uleb128 0x1
 3753 0268 01       		.byte	0x1
 3754 0269 49       		.uleb128 0x49
 3755 026a 13       		.uleb128 0x13
 3756 026b 01       		.uleb128 0x1
 3757 026c 13       		.uleb128 0x13
 3758 026d 00       		.byte	0
 3759 026e 00       		.byte	0
 3760 026f 26       		.uleb128 0x26
 3761 0270 21       		.uleb128 0x21
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 81


 3762 0271 00       		.byte	0
 3763 0272 49       		.uleb128 0x49
 3764 0273 13       		.uleb128 0x13
 3765 0274 2F       		.uleb128 0x2f
 3766 0275 0B       		.uleb128 0xb
 3767 0276 00       		.byte	0
 3768 0277 00       		.byte	0
 3769 0278 27       		.uleb128 0x27
 3770 0279 34       		.uleb128 0x34
 3771 027a 00       		.byte	0
 3772 027b 03       		.uleb128 0x3
 3773 027c 08       		.uleb128 0x8
 3774 027d 3A       		.uleb128 0x3a
 3775 027e 0B       		.uleb128 0xb
 3776 027f 3B       		.uleb128 0x3b
 3777 0280 0B       		.uleb128 0xb
 3778 0281 49       		.uleb128 0x49
 3779 0282 13       		.uleb128 0x13
 3780 0283 3F       		.uleb128 0x3f
 3781 0284 19       		.uleb128 0x19
 3782 0285 3C       		.uleb128 0x3c
 3783 0286 19       		.uleb128 0x19
 3784 0287 00       		.byte	0
 3785 0288 00       		.byte	0
 3786 0289 28       		.uleb128 0x28
 3787 028a 34       		.uleb128 0x34
 3788 028b 00       		.byte	0
 3789 028c 03       		.uleb128 0x3
 3790 028d 0E       		.uleb128 0xe
 3791 028e 3A       		.uleb128 0x3a
 3792 028f 0B       		.uleb128 0xb
 3793 0290 3B       		.uleb128 0x3b
 3794 0291 0B       		.uleb128 0xb
 3795 0292 49       		.uleb128 0x49
 3796 0293 13       		.uleb128 0x13
 3797 0294 3F       		.uleb128 0x3f
 3798 0295 19       		.uleb128 0x19
 3799 0296 3C       		.uleb128 0x3c
 3800 0297 19       		.uleb128 0x19
 3801 0298 00       		.byte	0
 3802 0299 00       		.byte	0
 3803 029a 29       		.uleb128 0x29
 3804 029b 34       		.uleb128 0x34
 3805 029c 00       		.byte	0
 3806 029d 03       		.uleb128 0x3
 3807 029e 0E       		.uleb128 0xe
 3808 029f 3A       		.uleb128 0x3a
 3809 02a0 0B       		.uleb128 0xb
 3810 02a1 3B       		.uleb128 0x3b
 3811 02a2 05       		.uleb128 0x5
 3812 02a3 49       		.uleb128 0x49
 3813 02a4 13       		.uleb128 0x13
 3814 02a5 3F       		.uleb128 0x3f
 3815 02a6 19       		.uleb128 0x19
 3816 02a7 02       		.uleb128 0x2
 3817 02a8 18       		.uleb128 0x18
 3818 02a9 00       		.byte	0
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 82


 3819 02aa 00       		.byte	0
 3820 02ab 00       		.byte	0
 3821              		.section	.debug_aranges,"",%progbits
 3822 0000 8C000000 		.4byte	0x8c
 3823 0004 0200     		.2byte	0x2
 3824 0006 00000000 		.4byte	.Ldebug_info0
 3825 000a 04       		.byte	0x4
 3826 000b 00       		.byte	0
 3827 000c 0000     		.2byte	0
 3828 000e 0000     		.2byte	0
 3829 0010 00000000 		.4byte	.LFB64
 3830 0014 EC000000 		.4byte	.LFE64-.LFB64
 3831 0018 00000000 		.4byte	.LFB65
 3832 001c 18000000 		.4byte	.LFE65-.LFB65
 3833 0020 00000000 		.4byte	.LFB66
 3834 0024 18000000 		.4byte	.LFE66-.LFB66
 3835 0028 00000000 		.4byte	.LFB67
 3836 002c 18000000 		.4byte	.LFE67-.LFB67
 3837 0030 00000000 		.4byte	.LFB68
 3838 0034 18000000 		.4byte	.LFE68-.LFB68
 3839 0038 00000000 		.4byte	.LFB69
 3840 003c 38000000 		.4byte	.LFE69-.LFB69
 3841 0040 00000000 		.4byte	.LFB70
 3842 0044 C0000000 		.4byte	.LFE70-.LFB70
 3843 0048 00000000 		.4byte	.LFB71
 3844 004c 54000000 		.4byte	.LFE71-.LFB71
 3845 0050 00000000 		.4byte	.LFB72
 3846 0054 34000000 		.4byte	.LFE72-.LFB72
 3847 0058 00000000 		.4byte	.LFB73
 3848 005c 84000000 		.4byte	.LFE73-.LFB73
 3849 0060 00000000 		.4byte	.LFB74
 3850 0064 44020000 		.4byte	.LFE74-.LFB74
 3851 0068 00000000 		.4byte	.LFB75
 3852 006c 8C020000 		.4byte	.LFE75-.LFB75
 3853 0070 00000000 		.4byte	.LFB76
 3854 0074 1C000000 		.4byte	.LFE76-.LFB76
 3855 0078 00000000 		.4byte	.LFB77
 3856 007c A4000000 		.4byte	.LFE77-.LFB77
 3857 0080 00000000 		.4byte	.LFB78
 3858 0084 D4000000 		.4byte	.LFE78-.LFB78
 3859 0088 00000000 		.4byte	0
 3860 008c 00000000 		.4byte	0
 3861              		.section	.debug_ranges,"",%progbits
 3862              	.Ldebug_ranges0:
 3863 0000 38000000 		.4byte	.LBB3
 3864 0004 BC000000 		.4byte	.LBE3
 3865 0008 BE000000 		.4byte	.LBB4
 3866 000c C0000000 		.4byte	.LBE4
 3867 0010 00000000 		.4byte	0
 3868 0014 00000000 		.4byte	0
 3869 0018 C2000000 		.4byte	.LBB5
 3870 001c 46010000 		.4byte	.LBE5
 3871 0020 48010000 		.4byte	.LBB6
 3872 0024 4A010000 		.4byte	.LBE6
 3873 0028 00000000 		.4byte	0
 3874 002c 00000000 		.4byte	0
 3875 0030 4C010000 		.4byte	.LBB7
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 83


 3876 0034 D0010000 		.4byte	.LBE7
 3877 0038 D2010000 		.4byte	.LBB8
 3878 003c D4010000 		.4byte	.LBE8
 3879 0040 00000000 		.4byte	0
 3880 0044 00000000 		.4byte	0
 3881 0048 D6010000 		.4byte	.LBB9
 3882 004c 5A020000 		.4byte	.LBE9
 3883 0050 5C020000 		.4byte	.LBB10
 3884 0054 5E020000 		.4byte	.LBE10
 3885 0058 00000000 		.4byte	0
 3886 005c 00000000 		.4byte	0
 3887 0060 00000000 		.4byte	.LFB64
 3888 0064 EC000000 		.4byte	.LFE64
 3889 0068 00000000 		.4byte	.LFB65
 3890 006c 18000000 		.4byte	.LFE65
 3891 0070 00000000 		.4byte	.LFB66
 3892 0074 18000000 		.4byte	.LFE66
 3893 0078 00000000 		.4byte	.LFB67
 3894 007c 18000000 		.4byte	.LFE67
 3895 0080 00000000 		.4byte	.LFB68
 3896 0084 18000000 		.4byte	.LFE68
 3897 0088 00000000 		.4byte	.LFB69
 3898 008c 38000000 		.4byte	.LFE69
 3899 0090 00000000 		.4byte	.LFB70
 3900 0094 C0000000 		.4byte	.LFE70
 3901 0098 00000000 		.4byte	.LFB71
 3902 009c 54000000 		.4byte	.LFE71
 3903 00a0 00000000 		.4byte	.LFB72
 3904 00a4 34000000 		.4byte	.LFE72
 3905 00a8 00000000 		.4byte	.LFB73
 3906 00ac 84000000 		.4byte	.LFE73
 3907 00b0 00000000 		.4byte	.LFB74
 3908 00b4 44020000 		.4byte	.LFE74
 3909 00b8 00000000 		.4byte	.LFB75
 3910 00bc 8C020000 		.4byte	.LFE75
 3911 00c0 00000000 		.4byte	.LFB76
 3912 00c4 1C000000 		.4byte	.LFE76
 3913 00c8 00000000 		.4byte	.LFB77
 3914 00cc A4000000 		.4byte	.LFE77
 3915 00d0 00000000 		.4byte	.LFB78
 3916 00d4 D4000000 		.4byte	.LFE78
 3917 00d8 00000000 		.4byte	0
 3918 00dc 00000000 		.4byte	0
 3919              		.section	.debug_line,"",%progbits
 3920              	.Ldebug_line0:
 3921 0000 F9030000 		.section	.debug_str,"MS",%progbits,1
 3921      02007001 
 3921      00000201 
 3921      FB0E0D00 
 3921      01010101 
 3922              	.LASF47:
 3923 0000 64697265 		.ascii	"direction\000"
 3923      6374696F 
 3923      6E00
 3924              	.LASF64:
 3925 000a 466F7277 		.ascii	"ForwardAfterTurn\000"
 3925      61726441 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 84


 3925      66746572 
 3925      5475726E 
 3925      00
 3926              	.LASF50:
 3927 001b 496E7374 		.ascii	"InstructionDirection\000"
 3927      72756374 
 3927      696F6E44 
 3927      69726563 
 3927      74696F6E 
 3928              	.LASF136:
 3929 0030 6D61696E 		.ascii	"main.c\000"
 3929      2E6300
 3930              	.LASF76:
 3931 0037 626C6F63 		.ascii	"blocksize\000"
 3931      6B73697A 
 3931      6500
 3932              	.LASF121:
 3933 0041 62756666 		.ascii	"buffer\000"
 3933      657200
 3934              	.LASF8:
 3935 0048 756E7369 		.ascii	"unsigned int\000"
 3935      676E6564 
 3935      20696E74 
 3935      00
 3936              	.LASF12:
 3937 0055 5F5F696E 		.ascii	"__int32_t\000"
 3937      7433325F 
 3937      7400
 3938              	.LASF18:
 3939 005f 696E7431 		.ascii	"int16\000"
 3939      3600
 3940              	.LASF112:
 3941 0065 73797374 		.ascii	"system_state\000"
 3941      656D5F73 
 3941      74617465 
 3941      00
 3942              	.LASF92:
 3943 0072 6E657874 		.ascii	"nextInstruction\000"
 3943      496E7374 
 3943      72756374 
 3943      696F6E00 
 3944              	.LASF135:
 3945 0082 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3945      43313120 
 3945      352E342E 
 3945      31203230 
 3945      31363036 
 3946 00b5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3946      20726576 
 3946      6973696F 
 3946      6E203233 
 3946      37373135 
 3947 00e8 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3947      66756E63 
 3947      74696F6E 
 3947      2D736563 
 3947      74696F6E 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 85


 3948              	.LASF69:
 3949 0110 53365F44 		.ascii	"S6_DETECTED\000"
 3949      45544543 
 3949      54454400 
 3950              	.LASF120:
 3951 011c 746F7461 		.ascii	"totalDistance\000"
 3951      6C446973 
 3951      74616E63 
 3951      6500
 3952              	.LASF34:
 3953 012a 67325F78 		.ascii	"g2_xpos\000"
 3953      706F7300 
 3954              	.LASF127:
 3955 0132 666F7277 		.ascii	"forwardUntilTargetStartedFlag\000"
 3955      61726455 
 3955      6E74696C 
 3955      54617267 
 3955      65745374 
 3956              	.LASF89:
 3957 0150 6E756D53 		.ascii	"numSteps\000"
 3957      74657073 
 3957      00
 3958              	.LASF83:
 3959 0159 74617267 		.ascii	"targetRow\000"
 3959      6574526F 
 3959      7700
 3960              	.LASF75:
 3961 0163 4765744D 		.ascii	"GetMovementAccordingToInstruction\000"
 3961      6F76656D 
 3961      656E7441 
 3961      63636F72 
 3961      64696E67 
 3962              	.LASF107:
 3963 0185 666C6167 		.ascii	"flag_rf_transmission_active\000"
 3963      5F72665F 
 3963      7472616E 
 3963      736D6973 
 3963      73696F6E 
 3964              	.LASF73:
 3965 01a1 466F7277 		.ascii	"ForwardCourseCorrection\000"
 3965      61726443 
 3965      6F757273 
 3965      65436F72 
 3965      72656374 
 3966              	.LASF116:
 3967 01b9 63757272 		.ascii	"currentRobotOrientation\000"
 3967      656E7452 
 3967      6F626F74 
 3967      4F726965 
 3967      6E746174 
 3968              	.LASF86:
 3969 01d1 52657365 		.ascii	"ResetSensorFlags\000"
 3969      7453656E 
 3969      736F7246 
 3969      6C616773 
 3969      00
 3970              	.LASF37:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 86


 3971 01e2 67325F64 		.ascii	"g2_direction\000"
 3971      69726563 
 3971      74696F6E 
 3971      00
 3972              	.LASF84:
 3973 01ef 74617267 		.ascii	"targetCol\000"
 3973      6574436F 
 3973      6C00
 3974              	.LASF122:
 3975 01f9 71756164 		.ascii	"quadDec2Count\000"
 3975      44656332 
 3975      436F756E 
 3975      7400
 3976              	.LASF19:
 3977 0207 666C6F61 		.ascii	"float\000"
 3977      7400
 3978              	.LASF77:
 3979 020d 63757272 		.ascii	"currentInstructionDirection\000"
 3979      656E7449 
 3979      6E737472 
 3979      75637469 
 3979      6F6E4469 
 3980              	.LASF111:
 3981 0229 75736242 		.ascii	"usbBuffer\000"
 3981      75666665 
 3981      7200
 3982              	.LASF80:
 3983 0233 636F756E 		.ascii	"count\000"
 3983      7400
 3984              	.LASF22:
 3985 0239 696E6465 		.ascii	"index\000"
 3985      7800
 3986              	.LASF7:
 3987 023f 6C6F6E67 		.ascii	"long long unsigned int\000"
 3987      206C6F6E 
 3987      6720756E 
 3987      7369676E 
 3987      65642069 
 3988              	.LASF46:
 3989 0256 496E7374 		.ascii	"Instruction\000"
 3989      72756374 
 3989      696F6E00 
 3990              	.LASF104:
 3991 0262 666C6167 		.ascii	"flag_packet\000"
 3991      5F706163 
 3991      6B657400 
 3992              	.LASF138:
 3993 026e 53657452 		.ascii	"SetRobotMovement\000"
 3993      6F626F74 
 3993      4D6F7665 
 3993      6D656E74 
 3993      00
 3994              	.LASF70:
 3995 027f 54494D45 		.ascii	"TIMER_FINISH\000"
 3995      525F4649 
 3995      4E495348 
 3995      00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 87


 3996              	.LASF124:
 3997 028c 6B656570 		.ascii	"keepLedOn\000"
 3997      4C65644F 
 3997      6E00
 3998              	.LASF42:
 3999 0296 466F7277 		.ascii	"ForwardUntilTarget\000"
 3999      61726455 
 3999      6E74696C 
 3999      54617267 
 3999      657400
 4000              	.LASF100:
 4001 02a9 666C6167 		.ascii	"flag_ts_update\000"
 4001      5F74735F 
 4001      75706461 
 4001      746500
 4002              	.LASF99:
 4003 02b8 666C6167 		.ascii	"flag_ts_enc\000"
 4003      5F74735F 
 4003      656E6300 
 4004              	.LASF78:
 4005 02c4 71756164 		.ascii	"quadCountToRPM\000"
 4005      436F756E 
 4005      74546F52 
 4005      504D00
 4006              	.LASF81:
 4007 02d3 626C6F63 		.ascii	"blockSize\000"
 4007      6B53697A 
 4007      6500
 4008              	.LASF134:
 4009 02dd 69676E6F 		.ascii	"ignoreSensor\000"
 4009      72655365 
 4009      6E736F72 
 4009      00
 4010              	.LASF43:
 4011 02ea 53746F70 		.ascii	"StopAtTarget\000"
 4011      41745461 
 4011      72676574 
 4011      00
 4012              	.LASF63:
 4013 02f7 77616974 		.ascii	"waitForTurn\000"
 4013      466F7254 
 4013      75726E00 
 4014              	.LASF24:
 4015 0303 726F626F 		.ascii	"robot_ypos\000"
 4015      745F7970 
 4015      6F7300
 4016              	.LASF98:
 4017 030e 74735F64 		.ascii	"ts_display\000"
 4017      6973706C 
 4017      617900
 4018              	.LASF11:
 4019 0319 63686172 		.ascii	"char\000"
 4019      00
 4020              	.LASF28:
 4021 031e 67305F73 		.ascii	"g0_speed\000"
 4021      70656564 
 4021      00
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 88


 4022              	.LASF90:
 4023 0327 696E7374 		.ascii	"instructionList\000"
 4023      72756374 
 4023      696F6E4C 
 4023      69737400 
 4024              	.LASF91:
 4025 0337 696E7374 		.ascii	"instructionIndex\000"
 4025      72756374 
 4025      696F6E49 
 4025      6E646578 
 4025      00
 4026              	.LASF15:
 4027 0348 75696E74 		.ascii	"uint16\000"
 4027      313600
 4028              	.LASF17:
 4029 034f 696E7438 		.ascii	"int8\000"
 4029      00
 4030              	.LASF129:
 4031 0354 78426C6F 		.ascii	"xBlocksize\000"
 4031      636B7369 
 4031      7A6500
 4032              	.LASF33:
 4033 035f 67315F64 		.ascii	"g1_direction\000"
 4033      69726563 
 4033      74696F6E 
 4033      00
 4034              	.LASF53:
 4035 036c 4C656674 		.ascii	"Left\000"
 4035      00
 4036              	.LASF74:
 4037 0371 73706565 		.ascii	"speedTimer\000"
 4037      6454696D 
 4037      657200
 4038              	.LASF85:
 4039 037c 70617468 		.ascii	"pathCount\000"
 4039      436F756E 
 4039      7400
 4040              	.LASF126:
 4041 0386 7475726E 		.ascii	"turnFinishedFlag\000"
 4041      46696E69 
 4041      73686564 
 4041      466C6167 
 4041      00
 4042              	.LASF39:
 4043 0397 77616974 		.ascii	"waitForLeftTurn\000"
 4043      466F724C 
 4043      65667454 
 4043      75726E00 
 4044              	.LASF6:
 4045 03a7 6C6F6E67 		.ascii	"long long int\000"
 4045      206C6F6E 
 4045      6720696E 
 4045      7400
 4046              	.LASF30:
 4047 03b5 67315F78 		.ascii	"g1_xpos\000"
 4047      706F7300 
 4048              	.LASF128:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 89


 4049 03bd 626C6F63 		.ascii	"blockSizeTotal\000"
 4049      6B53697A 
 4049      65546F74 
 4049      616C00
 4050              	.LASF117:
 4051 03cc 70726576 		.ascii	"previousOrientation\000"
 4051      696F7573 
 4051      4F726965 
 4051      6E746174 
 4051      696F6E00 
 4052              	.LASF41:
 4053 03e0 75547572 		.ascii	"uTurn\000"
 4053      6E00
 4054              	.LASF72:
 4055 03e6 6E657744 		.ascii	"newDistance\000"
 4055      69737461 
 4055      6E636500 
 4056              	.LASF36:
 4057 03f2 67325F73 		.ascii	"g2_speed\000"
 4057      70656564 
 4057      00
 4058              	.LASF27:
 4059 03fb 67305F79 		.ascii	"g0_ypos\000"
 4059      706F7300 
 4060              	.LASF113:
 4061 0403 666F6F64 		.ascii	"food_list\000"
 4061      5F6C6973 
 4061      7400
 4062              	.LASF58:
 4063 040d 5475726E 		.ascii	"TurnLeft\000"
 4063      4C656674 
 4063      00
 4064              	.LASF97:
 4065 0416 74735F73 		.ascii	"ts_speed\000"
 4065      70656564 
 4065      00
 4066              	.LASF62:
 4067 041f 556E6B6E 		.ascii	"Unknown\000"
 4067      6F776E00 
 4068              	.LASF16:
 4069 0427 75696E74 		.ascii	"uint32\000"
 4069      333200
 4070              	.LASF40:
 4071 042e 77616974 		.ascii	"waitForRightTurn\000"
 4071      466F7252 
 4071      69676874 
 4071      5475726E 
 4071      00
 4072              	.LASF57:
 4073 043f 5475726E 		.ascii	"TurnRight\000"
 4073      52696768 
 4073      7400
 4074              	.LASF45:
 4075 0449 64617461 		.ascii	"data_main\000"
 4075      5F6D6169 
 4075      6E00
 4076              	.LASF21:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 90


 4077 0453 72737369 		.ascii	"rssi\000"
 4077      00
 4078              	.LASF29:
 4079 0458 67305F64 		.ascii	"g0_direction\000"
 4079      69726563 
 4079      74696F6E 
 4079      00
 4080              	.LASF115:
 4081 0465 70726576 		.ascii	"previousDirection\000"
 4081      696F7573 
 4081      44697265 
 4081      6374696F 
 4081      6E00
 4082              	.LASF9:
 4083 0477 6C6F6E67 		.ascii	"long double\000"
 4083      20646F75 
 4083      626C6500 
 4084              	.LASF101:
 4085 0483 666C6167 		.ascii	"flag_ts_speed\000"
 4085      5F74735F 
 4085      73706565 
 4085      6400
 4086              	.LASF106:
 4087 0491 64617461 		.ascii	"dataready_flag\000"
 4087      72656164 
 4087      795F666C 
 4087      616700
 4088              	.LASF103:
 4089 04a0 666C6167 		.ascii	"flag_rx\000"
 4089      5F727800 
 4090              	.LASF130:
 4091 04a8 79426C6F 		.ascii	"yBlocksize\000"
 4091      636B7369 
 4091      7A6500
 4092              	.LASF2:
 4093 04b3 73686F72 		.ascii	"short int\000"
 4093      7420696E 
 4093      7400
 4094              	.LASF67:
 4095 04bd 53345F44 		.ascii	"S4_DETECTED\000"
 4095      45544543 
 4095      54454400 
 4096              	.LASF66:
 4097 04c9 53335F44 		.ascii	"S3_DETECTED\000"
 4097      45544543 
 4097      54454400 
 4098              	.LASF4:
 4099 04d5 6C6F6E67 		.ascii	"long int\000"
 4099      20696E74 
 4099      00
 4100              	.LASF94:
 4101 04de 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4101      52784275 
 4101      66666572 
 4101      00
 4102              	.LASF96:
 4103 04eb 74735F75 		.ascii	"ts_update\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 91


 4103      70646174 
 4103      6500
 4104              	.LASF56:
 4105 04f5 466F7277 		.ascii	"Forward\000"
 4105      61726400 
 4106              	.LASF119:
 4107 04fd 746F7461 		.ascii	"totalMilliseconds\000"
 4107      6C4D696C 
 4107      6C697365 
 4107      636F6E64 
 4107      7300
 4108              	.LASF35:
 4109 050f 67325F79 		.ascii	"g2_ypos\000"
 4109      706F7300 
 4110              	.LASF87:
 4111 0517 4D6F7665 		.ascii	"MoveToNextInstruction\000"
 4111      546F4E65 
 4111      7874496E 
 4111      73747275 
 4111      6374696F 
 4112              	.LASF51:
 4113 052d 4F726965 		.ascii	"OrientationState\000"
 4113      6E746174 
 4113      696F6E53 
 4113      74617465 
 4113      00
 4114              	.LASF52:
 4115 053e 446F776E 		.ascii	"Down\000"
 4115      00
 4116              	.LASF54:
 4117 0543 52696768 		.ascii	"Right\000"
 4117      7400
 4118              	.LASF31:
 4119 0549 67315F79 		.ascii	"g1_ypos\000"
 4119      706F7300 
 4120              	.LASF114:
 4121 0551 63757272 		.ascii	"currentDirection\000"
 4121      656E7444 
 4121      69726563 
 4121      74696F6E 
 4121      00
 4122              	.LASF137:
 4123 0562 483A5C33 		.ascii	"H:\\301-Robot\\psoc student pack\\psoc_code_base\\C"
 4123      30312D52 
 4123      6F626F74 
 4123      5C70736F 
 4123      63207374 
 4124 0591 53333031 		.ascii	"S301_Class.cydsn\000"
 4124      5F436C61 
 4124      73732E63 
 4124      7964736E 
 4124      00
 4125              	.LASF10:
 4126 05a2 73697A65 		.ascii	"sizetype\000"
 4126      74797065 
 4126      00
 4127              	.LASF5:
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 92


 4128 05ab 6C6F6E67 		.ascii	"long unsigned int\000"
 4128      20756E73 
 4128      69676E65 
 4128      6420696E 
 4128      7400
 4129              	.LASF125:
 4130 05bd 73746F70 		.ascii	"stopBuffer\000"
 4130      42756666 
 4130      657200
 4131              	.LASF13:
 4132 05c8 696E7433 		.ascii	"int32_t\000"
 4132      325F7400 
 4133              	.LASF23:
 4134 05d0 726F626F 		.ascii	"robot_xpos\000"
 4134      745F7870 
 4134      6F7300
 4135              	.LASF110:
 4136 05db 656E7472 		.ascii	"entry\000"
 4136      7900
 4137              	.LASF55:
 4138 05e1 526F626F 		.ascii	"RobotMovement\000"
 4138      744D6F76 
 4138      656D656E 
 4138      7400
 4139              	.LASF1:
 4140 05ef 756E7369 		.ascii	"unsigned char\000"
 4140      676E6564 
 4140      20636861 
 4140      7200
 4141              	.LASF133:
 4142 05fd 73746F70 		.ascii	"stoppedAfterTurn\000"
 4142      70656441 
 4142      66746572 
 4142      5475726E 
 4142      00
 4143              	.LASF109:
 4144 060e 6C696E65 		.ascii	"line\000"
 4144      00
 4145              	.LASF79:
 4146 0613 43616C63 		.ascii	"CalculateDistanceToTravel\000"
 4146      756C6174 
 4146      65446973 
 4146      74616E63 
 4146      65546F54 
 4147              	.LASF60:
 4148 062d 41646A75 		.ascii	"AdjustToTheRight\000"
 4148      7374546F 
 4148      54686552 
 4148      69676874 
 4148      00
 4149              	.LASF61:
 4150 063e 53746F70 		.ascii	"Stop\000"
 4150      00
 4151              	.LASF88:
 4152 0643 47657449 		.ascii	"GetInstructionAtIndex\000"
 4152      6E737472 
 4152      75637469 
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 93


 4152      6F6E4174 
 4152      496E6465 
 4153              	.LASF95:
 4154 0659 74735F65 		.ascii	"ts_enc\000"
 4154      6E6300
 4155              	.LASF102:
 4156 0660 666C6167 		.ascii	"flag_ts_display\000"
 4156      5F74735F 
 4156      64697370 
 4156      6C617900 
 4157              	.LASF44:
 4158 0670 536B6970 		.ascii	"Skip\000"
 4158      00
 4159              	.LASF108:
 4160 0675 64697370 		.ascii	"displaystring\000"
 4160      6C617973 
 4160      7472696E 
 4160      6700
 4161              	.LASF38:
 4162 0683 476F466F 		.ascii	"GoForward\000"
 4162      72776172 
 4162      6400
 4163              	.LASF68:
 4164 068d 53355F44 		.ascii	"S5_DETECTED\000"
 4164      45544543 
 4164      54454400 
 4165              	.LASF0:
 4166 0699 7369676E 		.ascii	"signed char\000"
 4166      65642063 
 4166      68617200 
 4167              	.LASF131:
 4168 06a5 63757272 		.ascii	"currentRow\000"
 4168      656E7452 
 4168      6F7700
 4169              	.LASF3:
 4170 06b0 73686F72 		.ascii	"short unsigned int\000"
 4170      7420756E 
 4170      7369676E 
 4170      65642069 
 4170      6E7400
 4171              	.LASF25:
 4172 06c3 726F626F 		.ascii	"robot_orientation\000"
 4172      745F6F72 
 4172      69656E74 
 4172      6174696F 
 4172      6E00
 4173              	.LASF71:
 4174 06d5 6D61696E 		.ascii	"main\000"
 4174      00
 4175              	.LASF118:
 4176 06da 63757272 		.ascii	"currentInstruction\000"
 4176      656E7449 
 4176      6E737472 
 4176      75637469 
 4176      6F6E00
 4177              	.LASF59:
 4178 06ed 41646A75 		.ascii	"AdjustToTheLeft\000"
ARM GAS  C:\Users\jsan502\AppData\Local\Temp\ccMmZVAP.s 			page 94


 4178      7374546F 
 4178      5468654C 
 4178      65667400 
 4179              	.LASF65:
 4180 06fd 4261636B 		.ascii	"Backward\000"
 4180      77617264 
 4180      00
 4181              	.LASF14:
 4182 0706 75696E74 		.ascii	"uint8\000"
 4182      3800
 4183              	.LASF20:
 4184 070c 646F7562 		.ascii	"double\000"
 4184      6C6500
 4185              	.LASF132:
 4186 0713 63757272 		.ascii	"currentCol\000"
 4186      656E7443 
 4186      6F6C00
 4187              	.LASF82:
 4188 071e 746F7461 		.ascii	"totalBlockSize\000"
 4188      6C426C6F 
 4188      636B5369 
 4188      7A6500
 4189              	.LASF26:
 4190 072d 67305F78 		.ascii	"g0_xpos\000"
 4190      706F7300 
 4191              	.LASF123:
 4192 0735 74696D65 		.ascii	"timerInt\000"
 4192      72496E74 
 4192      00
 4193              	.LASF105:
 4194 073e 666C6167 		.ascii	"flag_KB_string\000"
 4194      5F4B425F 
 4194      73747269 
 4194      6E6700
 4195              	.LASF32:
 4196 074d 67315F73 		.ascii	"g1_speed\000"
 4196      70656564 
 4196      00
 4197              	.LASF93:
 4198 0756 626C6F63 		.ascii	"blockTotal\000"
 4198      6B546F74 
 4198      616C00
 4199              	.LASF48:
 4200 0761 69676E6F 		.ascii	"ignoreL\000"
 4200      72654C00 
 4201              	.LASF49:
 4202 0769 69676E6F 		.ascii	"ignoreR\000"
 4202      72655200 
 4203              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
